// meta={"simUrl":"https://trg-arcade.userpxt.io/v1.7.24/---simulator","cdnUrl":"https://pxt.azureedge.net","version":"2.0.2","target":"arcade","targetVersion":"1.7.24","repo":"robo-technical-group/whats-my-word"}
// total=2600624 new=11.43% cached=84.44% other=4.13%
(function (ectx) {
'use strict';
const runtime = ectx.runtime;
const oops = ectx.oops;
const doNothing = ectx.doNothing;
const pxsim = ectx.pxsim;
const globals = ectx.globals;
const maybeYield = ectx.maybeYield;
const setupDebugger = ectx.setupDebugger;
const isBreakFrame = ectx.isBreakFrame;
const breakpoint = ectx.breakpoint;
const trace = ectx.trace;
const checkStack = ectx.checkStack;
const leave = ectx.leave;
const checkResumeConsumed = ectx.checkResumeConsumed;
const setupResume = ectx.setupResume;
const setupLambda = ectx.setupLambda;
const checkSubtype = ectx.checkSubtype;
const failedCast = ectx.failedCast;
const buildResume = ectx.buildResume;
const mkVTable = ectx.mkVTable;
const bind = ectx.bind;
const leaveAccessor = ectx.leaveAccessor;
const __this = runtime;
const pxtrt = pxsim.pxtrt;
let yieldSteps = 1;
ectx.setupYield(function() { yieldSteps = 100; })
pxsim.setTitle("What's My Word?");
pxsim.setConfigData({
 "37": 160,
 "38": 120
}, {
 "DISPLAY_WIDTH": 37,
 "DISPLAY_HEIGHT": 38
});
pxtrt.mapKeyNames = [
 "",
 "__draw",
 "__drawCore",
 "__preUpdate",
 "__update",
 "__visible",
 "_action",
 "_ax",
 "_ay",
 "_backColor",
 "_backImage",
 "_col",
 "_connected",
 "_controlledSprites",
 "_currScreen",
 "_currSprite",
 "_data",
 "_destroyCore",
 "_dt",
 "_factory",
 "_footer",
 "_fx",
 "_fy",
 "_headlines",
 "_height",
 "_hitbox",
 "_id",
 "_image",
 "_interval",
 "_kind",
 "_kindsOverlappedWith",
 "_lastX",
 "_lastY",
 "_layer",
 "_layers",
 "_map",
 "_midText",
 "_millis",
 "_movingSprites",
 "_movingSpritesSequential",
 "_next",
 "_obstacles",
 "_offsetX",
 "_offsetY",
 "_overlappers",
 "_owner",
 "_player",
 "_pressed",
 "_pressedElasped",
 "_prune",
 "_repeatCount",
 "_row",
 "_scale",
 "_sprites",
 "_staticSprites",
 "_text",
 "_titles",
 "_update",
 "_vx",
 "_vy",
 "_width",
 "_x",
 "_y",
 "_z",
 "action",
 "activeCard",
 "add",
 "addAllMovingSprites",
 "addLoss",
 "addShape",
 "addSprite",
 "addStaticSprites",
 "addWin",
 "alignX",
 "alignY",
 "allSprites",
 "analog",
 "anchor",
 "answerLength",
 "applyTo",
 "areaHeight",
 "areaWidth",
 "ax",
 "ay",
 "background",
 "basicCard",
 "bg",
 "bgColor",
 "blink",
 "board",
 "border",
 "borderColor",
 "borderWidth",
 "bottom",
 "buckets",
 "build",
 "buildMatches",
 "button",
 "buttonComboState",
 "buttons",
 "c",
 "cachedTileView",
 "cachedVx",
 "cachedVy",
 "camera",
 "canResolveClipping",
 "card",
 "cardSpacing",
 "cardWidth",
 "cardsPerRow",
 "cardsTop",
 "cellHeight",
 "cellWidth",
 "change",
 "changeInputIndex",
 "charHeight",
 "charWidth",
 "chunkIndex",
 "chunkText",
 "chunks",
 "clear",
 "clearInterior",
 "clearObstacles",
 "col",
 "collisionHandlers",
 "color",
 "colorBottomBackground",
 "colorCursor",
 "colorInput",
 "colorInputHighlighted",
 "colorInputText",
 "colorPrompt",
 "columnCount",
 "columns",
 "combinations",
 "condition",
 "confirm",
 "confirmButton",
 "confirmPressed",
 "connected",
 "constrain",
 "contains",
 "controlledSprites",
 "countAsOne",
 "countdownEndHandler",
 "countdownExpired",
 "createBase",
 "createGameBoard",
 "createLetterBoard",
 "createMovingSprite",
 "createParticle",
 "createTitles",
 "createdHandlers",
 "currState",
 "cursor",
 "cursorColumn",
 "cursorCount",
 "cursorOn",
 "cursorRow",
 "cursorRowHeight",
 "data",
 "defaultLifespan",
 "defaultRate",
 "delete",
 "deltaTime",
 "deltaTimeMillis",
 "destroy",
 "destroyHandler",
 "destroySprites",
 "destroyedHandlers",
 "dir",
 "displayCursor",
 "dispose",
 "distance",
 "down",
 "draw",
 "drawBorder",
 "drawBottomBar",
 "drawCurrHeadline",
 "drawCursorRow",
 "drawInput",
 "drawInputarea",
 "drawKeyboard",
 "drawLives",
 "drawOffsetX",
 "drawOffsetY",
 "drawPartial",
 "drawParticle",
 "drawPlayer",
 "drawPromptText",
 "drawScore",
 "drawText",
 "drawTextCore",
 "duplicateBackImage",
 "dx",
 "dy",
 "effect",
 "eid",
 "enabled",
 "endScreenEffect",
 "eventContext",
 "extendedCombos",
 "factory",
 "fastFill",
 "fastRandom",
 "fc",
 "fg",
 "fgColor",
 "findInDictionary",
 "flags",
 "followingSprites",
 "font",
 "fontColor",
 "frame",
 "frameCallbacks",
 "frameCount",
 "frameWorker",
 "framesInSample",
 "fx",
 "fy",
 "galois",
 "gameBoard",
 "gameEnd",
 "gameForeverHandlers",
 "games",
 "generator",
 "getGuess",
 "getObstacle",
 "getPuzzle",
 "getState",
 "getText",
 "getTile",
 "getTileImage",
 "getTileIndex",
 "giveUpSprite",
 "guess",
 "guessCount",
 "guesses",
 "h",
 "handler",
 "handlers",
 "hasBackgroundImage",
 "hasLife",
 "hasNext",
 "hasPrev",
 "hasScore",
 "head",
 "headerFont",
 "headerText",
 "heartImage",
 "height",
 "hideGiveUpPrompt",
 "hideWordPrompt",
 "highScore",
 "icon",
 "iconImage",
 "id",
 "idleCallbacks",
 "image",
 "img",
 "imgs",
 "infoFont",
 "infoTop",
 "init",
 "innerLeft",
 "innerTop",
 "inputIndex",
 "inputs",
 "insertAABB",
 "insertAtKey",
 "isNewHighScore",
 "isObstacle",
 "isOnWall",
 "isOutOfScreen",
 "isOutsideMap",
 "isPressed",
 "isStatic",
 "isValid",
 "isWall",
 "key",
 "kind",
 "lastPressed",
 "lastRevealed",
 "layer",
 "layers",
 "left",
 "length",
 "letterBoard",
 "letters",
 "lfsr",
 "life",
 "lifeZeroHandler",
 "lifespan",
 "load",
 "map",
 "matches",
 "maxCombo",
 "maxFontHeight",
 "maxLifespan",
 "maxNegativeVelocity",
 "maxOffset",
 "maxSingleStep",
 "maxSpeed",
 "maxStep",
 "maxSubOffset",
 "maxVelocity",
 "melody",
 "mergeAtKey",
 "message",
 "millis",
 "minAngle",
 "minLifespan",
 "minSingleStep",
 "minStep",
 "mode",
 "move",
 "moveHorizontal",
 "moveSprite",
 "moveVertical",
 "multiplier",
 "multiplierImage",
 "neighbors",
 "next",
 "nextPage",
 "nextReveal",
 "nextTime",
 "numMatches",
 "offset",
 "offsetX",
 "offsetY",
 "onEvent",
 "onPlayFinished",
 "onUpdate",
 "once",
 "options",
 "order",
 "outlineColor",
 "outlineWidth",
 "overlapHandlers",
 "overlapMap",
 "overlaps",
 "overlapsWith",
 "ox",
 "oy",
 "pFlags",
 "padding",
 "parent",
 "particleSources",
 "period",
 "physicsEngine",
 "pickRandom",
 "play",
 "playCore",
 "playUntilDone",
 "playerIndex",
 "playerStates",
 "position",
 "preferredDelay",
 "pressureLevel",
 "prevPage",
 "prevTimeMillis",
 "previousScene",
 "printMultiple",
 "printMultipleCenter",
 "priority",
 "promptSprite",
 "puzzleWord",
 "queuePlayInstructions",
 "raiseButtonDown",
 "raiseButtonRepeat",
 "raiseButtonUp",
 "raiseLifeZero",
 "randomRange",
 "rebuild",
 "refresh",
 "register",
 "registerFrameCallbacks",
 "registerFrameHandler",
 "registerHandler",
 "registerHandlers",
 "registerMelody",
 "registerObstacle",
 "release",
 "remove",
 "removeSprite",
 "render",
 "renderable",
 "repeatDelay",
 "repeatInterval",
 "repeatX",
 "repeatY",
 "reset",
 "resetRequested",
 "resizeBuckets",
 "result",
 "rev",
 "reveal",
 "revealFinished",
 "revealNext",
 "revealPuzzle",
 "right",
 "rotate",
 "row",
 "rowCount",
 "rowHeight",
 "rows",
 "runCallbacks",
 "runningCallbacks",
 "s",
 "save",
 "sayEndTime",
 "sayRenderer",
 "scale",
 "scene",
 "sceneDefaultRate",
 "score",
 "scrollOffset",
 "scrollRow",
 "scrollTarget",
 "seed",
 "selectedCard",
 "selection",
 "setAcceleration",
 "setAnchor",
 "setDirection",
 "setFactory",
 "setFlag",
 "setFont",
 "setHitbox",
 "setImage",
 "setKind",
 "setOffset",
 "setPosition",
 "setPressed",
 "setRate",
 "setRelativeToCamera",
 "setSelection",
 "setSpeed",
 "setState",
 "setSubtext",
 "setText",
 "setTheme",
 "shakeAmplitude",
 "shakeDuration",
 "shakeStartTime",
 "shiftButton",
 "shouldBeVisible",
 "show",
 "showGiveUpPrompt",
 "showLife",
 "showPlayer",
 "showScore",
 "showScrollingSprite",
 "showWordPrompt",
 "source",
 "sourceFactory",
 "sources",
 "speed",
 "spread",
 "sprite",
 "spriteCollisions",
 "spriteNextId",
 "sprites",
 "spritesByKind",
 "src",
 "start",
 "startRound",
 "startScreenEffect",
 "state",
 "stop",
 "streak",
 "subtext",
 "text",
 "textAreaHeight",
 "textAreaWidth",
 "textColor",
 "theme",
 "tileIndex",
 "tileMap",
 "tileOverlapHandlers",
 "tileSet",
 "tilemapCollisions",
 "tilemapOverlaps",
 "tileset",
 "timeInSample",
 "timeOut",
 "timeout",
 "timer",
 "times",
 "titleSprite",
 "toString",
 "top",
 "triggerOn",
 "unit",
 "unregister",
 "unregisterMelody",
 "up",
 "update",
 "updateButtons",
 "updateCard",
 "updateCursor",
 "updateFont",
 "updateKeyboard",
 "updateParticle",
 "updateScrollTarget",
 "updateSelectedInput",
 "upper",
 "validateInput",
 "value",
 "vid",
 "visibility",
 "visibilityFlag",
 "vx",
 "vy",
 "wallCollisionHandlers",
 "width",
 "win",
 "wins",
 "x",
 "xOffset",
 "xRange",
 "xStep",
 "y",
 "yOffset",
 "yRange",
 "yStep",
 "z"
];
__this.setupPerfCounters([]);
const pxsim_Array__getAt = pxsim.Array_.getAt;
const pxsim_Array__length = pxsim.Array_.length;
const pxsim_Array__mk = pxsim.Array_.mk;
const pxsim_Array__push = pxsim.Array_.push;
const pxsim_Boolean__bang = pxsim.Boolean_.bang;
const pxsim_String__concat = pxsim.String_.concat;
const pxsim_String__stringConv = pxsim.String_.stringConv;
const pxsim_numops_toBool = pxsim.numops.toBool;
const pxsim_numops_toBoolDecr = pxsim.numops.toBoolDecr;
const pxsim_pxtcore_mkAction = pxsim.pxtcore.mkAction;
const pxsim_pxtcore_mkClassInstance = pxsim.pxtcore.mkClassInstance;
const pxsim_pxtrt_ldlocRef = pxsim.pxtrt.ldlocRef;
const pxsim_pxtrt_mapGetByString = pxsim.pxtrt.mapGetByString;
const pxsim_pxtrt_stclo = pxsim.pxtrt.stclo;
const pxsim_pxtrt_stlocRef = pxsim.pxtrt.stlocRef;
const pxsim_Boolean_ = pxsim.Boolean_;
const pxsim_pxtcore = pxsim.pxtcore;
const pxsim_String_ = pxsim.String_;
const pxsim_ImageMethods = pxsim.ImageMethods;
const pxsim_Array_ = pxsim.Array_;
const pxsim_pxtrt = pxsim.pxtrt;
const pxsim_numops = pxsim.numops;


function _main___P84068(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    globals._intervals___4172 = (undefined);
    globals._pollEventQueue___4181 = (undefined);
    globals.minPriority___373 = (1);
    r0 = pxsim_Array__mk();
    s.tmp_0 = r0;
    r0 = pxsim_Array__push(s.tmp_0, listeners_inline__P4184);
    globals.listeners___4185 = (s.tmp_0);
    globals.freqs___4234 = (_hex4233);
    globals.globalVolume___4238 = (null);
    globals.playToneID___4245 = (0);
    r0 = pxsim_pxtcore_mkClassInstance(music_Melody__C1610_VT);
    s.tmp_0 = r0;
    s.tmp_1 = music_Melody_constructor__P1613_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = "b5:1 e6:3";
    s.callLocIdx = 0; s.pc = 1; return s.tmp_1;
  case 1:
    r0 = s.retval;
    globals.baDing___1626 = (s.tmp_0);
    r0 = pxsim_pxtcore_mkClassInstance(music_Melody__C1610_VT);
    s.tmp_0 = r0;
    s.tmp_1 = music_Melody_constructor__P1613_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = "~15 e3:3 r:1 d#:3 r:1 d:4 r:1 c#:8";
    s.callLocIdx = 1; s.pc = 2; return s.tmp_1;
  case 2:
    r0 = s.retval;
    globals.wawawawaa___1627 = (s.tmp_0);
    r0 = pxsim_pxtcore_mkClassInstance(music_Melody__C1610_VT);
    s.tmp_0 = r0;
    s.tmp_1 = music_Melody_constructor__P1613_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = "g4:1 c5 e g:2 e:1 g:3";
    s.callLocIdx = 2; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    globals.powerUp___1630 = (s.tmp_0);
    r0 = pxsim_pxtcore_mkClassInstance(music_Melody__C1610_VT);
    s.tmp_0 = r0;
    s.tmp_1 = music_Melody_constructor__P1613_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = "~4 @0,0,255,150 !300,1 !211,1";
    s.callLocIdx = 3; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
    globals.knock___1635 = (s.tmp_0);
    r0 = pxsim_pxtcore_mkClassInstance(music_Melody__C1610_VT);
    s.tmp_0 = r0;
    s.tmp_1 = music_Melody_constructor__P1613_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = "~4 @10,490,0,1 !800,1";
    s.callLocIdx = 4; s.pc = 5; return s.tmp_1;
  case 5:
    r0 = s.retval;
    globals.smallCrash___1638 = (s.tmp_0);
    globals.brightness___1748 = (100);
    r0 = pxsim_pxtrt.mkMap();
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "charWidth", 6);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "charHeight", 8);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "data", _hex19118);
    globals.font8___1770 = (s.tmp_0);
    r0 = pxsim_pxtrt.mkMap();
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "charWidth", 12);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "charHeight", 12);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "data", _hex10799);
    globals.font12___1771 = (s.tmp_0);
    r0 = pxsim_pxtrt.mkMap();
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "charWidth", 6);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "charHeight", 5);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "data", _hex19208);
    globals.font5___1775 = (s.tmp_0);
    globals.__updated___4294 = (false);
    r0 = pxsim.control.runInParallel(control___screen_inline__P4297);
    r0 = pxsim_pxtcore.setPalette(_hex4308);
    r0 = pxsim.image.create(160, 120);
    globals.screen___1827 = (r0);
    s.tmp_0 = control___screen_setupUpdate__P1789_mk(s);
    s.tmp_0.arg0 = _screen_internal_inline__P4315;
    s.callLocIdx = 7; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    globals.control_EventContext_onStats___396 = (_screen_internal_inline__P4320);
    globals.RUN_KEY___4325 = ("#run");
    globals.SCOPE_KEY___4326 = ("#scope");
    s.tmp_0 = settings_initScopes__P4337_mk(s);
    s.callLocIdx = 8; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    r0 = pxsim_pxtcore_mkClassInstance(controller_Button__C1971_VT);
    s.tmp_0 = r0;
    s.tmp_1 = controller_Button_constructor__P1977_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = 5;
    s.tmp_1.arg2 = 4;
    s.callLocIdx = 9; s.pc = 8; return s.tmp_1;
  case 8:
    r0 = s.retval;
    globals.A___1905 = (s.tmp_0);
    r0 = pxsim_pxtcore_mkClassInstance(controller_Button__C1971_VT);
    s.tmp_0 = r0;
    s.tmp_1 = controller_Button_constructor__P1977_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = 6;
    s.tmp_1.arg2 = 5;
    s.callLocIdx = 10; s.pc = 9; return s.tmp_1;
  case 9:
    r0 = s.retval;
    globals.B___1906 = (s.tmp_0);
    r0 = pxsim_pxtcore_mkClassInstance(controller_Button__C1971_VT);
    s.tmp_0 = r0;
    s.tmp_1 = controller_Button_constructor__P1977_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = 1;
    s.tmp_1.arg2 = 47;
    s.callLocIdx = 11; s.pc = 10; return s.tmp_1;
  case 10:
    r0 = s.retval;
    globals.left___1907 = (s.tmp_0);
    r0 = pxsim_pxtcore_mkClassInstance(controller_Button__C1971_VT);
    s.tmp_0 = r0;
    s.tmp_1 = controller_Button_constructor__P1977_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = 2;
    s.tmp_1.arg2 = 49;
    s.callLocIdx = 12; s.pc = 11; return s.tmp_1;
  case 11:
    r0 = s.retval;
    globals.up___1908 = (s.tmp_0);
    r0 = pxsim_pxtcore_mkClassInstance(controller_Button__C1971_VT);
    s.tmp_0 = r0;
    s.tmp_1 = controller_Button_constructor__P1977_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = 3;
    s.tmp_1.arg2 = 48;
    s.callLocIdx = 13; s.pc = 12; return s.tmp_1;
  case 12:
    r0 = s.retval;
    globals.right___1909 = (s.tmp_0);
    r0 = pxsim_pxtcore_mkClassInstance(controller_Button__C1971_VT);
    s.tmp_0 = r0;
    s.tmp_1 = controller_Button_constructor__P1977_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = 4;
    s.tmp_1.arg2 = 50;
    s.callLocIdx = 14; s.pc = 13; return s.tmp_1;
  case 13:
    r0 = s.retval;
    globals.down___1910 = (s.tmp_0);
    r0 = pxsim_pxtcore_mkClassInstance(controller_Button__C1971_VT);
    s.tmp_0 = r0;
    s.tmp_1 = controller_Button_constructor__P1977_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = 7;
    s.tmp_1.arg2 = 51;
    s.callLocIdx = 15; s.pc = 14; return s.tmp_1;
  case 14:
    r0 = s.retval;
    globals.menu___1911 = (s.tmp_0);
    r0 = pxsim_pxtcore_mkClassInstance(controller_AnyButton__C4366_VT);
    s.tmp_0 = r0;
    s.tmp_1 = controller_Button_constructor__P1977_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = 0;
    s.tmp_1.arg2 = -1;
    s.callLocIdx = 16; s.pc = 15; return s.tmp_1;
  case 15:
    r0 = s.retval;
    globals.anyButton___1958 = (s.tmp_0);
    globals._userEventsEnabled___4377 = (true);
    globals.defaultRepeatDelay___4379 = (500);
    globals.defaultRepeatInterval___4381 = (30);
    s.tmp_0 = SpriteKind_create__P2206_mk(s);
    s.callLocIdx = 17; s.pc = 16; return s.tmp_0;
  case 16:
    r0 = s.retval;
    globals.Player___2207 = (r0);
    s.tmp_0 = SpriteKind_create__P2206_mk(s);
    s.callLocIdx = 18; s.pc = 17; return s.tmp_0;
  case 17:
    r0 = s.retval;
    globals.Food___2209 = (r0);
    s.tmp_0 = SpriteKind_create__P2206_mk(s);
    s.callLocIdx = 19; s.pc = 18; return s.tmp_0;
  case 18:
    r0 = s.retval;
    globals.Enemy___2210 = (r0);
    s.tmp_0 = Fx8__P149_mk(s);
    s.tmp_0.arg0 = 0.1;
    s.callLocIdx = 20; s.pc = 19; return s.tmp_0;
  case 19:
    r0 = s.retval;
    globals.MIN_MOVE_GAP___2248 = (r0);
    globals.infoState___4437 = (undefined);
    s.tmp_0 = game_addScenePushHandler__P2623_mk(s);
    s.tmp_0.arg0 = info_inline__P4441;
    s.callLocIdx = 21; s.pc = 20; return s.tmp_0;
  case 20:
    r0 = s.retval;
    s.tmp_0 = game_addScenePopHandler__P2625_mk(s);
    s.tmp_0.arg0 = info_inline__P4456;
    s.callLocIdx = 25; s.pc = 21; return s.tmp_0;
  case 21:
    r0 = s.retval;
    r0 = pxsim_pxtcore_mkClassInstance(info_PlayerInfo__C2309_VT);
    s.tmp_0 = r0;
    s.tmp_1 = info_PlayerInfo_constructor__P2321_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = 1;
    s.callLocIdx = 26; s.pc = 22; return s.tmp_1;
  case 22:
    r0 = s.retval;
    globals.player1___2340 = (s.tmp_0);
    r0 = pxsim_Array__mk();
    globals.scene_Scene_initializers___2516 = (r0);
    globals.debug___2605 = (false);
    globals.stats___2606 = (false);
    globals.winEffect___2607 = (undefined);
    globals.loseEffect___2608 = (undefined);
    globals.loseSound___4553 = (undefined);
    globals.winSound___4555 = (undefined);
    globals.__isOver___4563 = (false);
    globals.font___4569 = (globals.font8___1770);
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 - 8);
    globals.CONTENT_WIDTH___4587 = (r0);
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 - 8);
    globals.CONTENT_HEIGHT___4590 = (r0);
    r0 = (globals.CONTENT_WIDTH___4587 / 12);
    s.tmp_0 = r0;
    r0 = pxsim.Math_.floor(s.tmp_0);
    globals.CELL_WIDTH___4596 = (r0);
    globals.CELL_HEIGHT___4598 = (globals.CELL_WIDTH___4596);
    s.tmp_2 = r0 = globals.CELL_WIDTH___4596;
    s.tmp_4 = if_charWidth_1_mk(s);
    s.tmp_4.arg0 = globals.font___4569;
    if (!s.tmp_4.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_4.arg0, "charWidth");
    } else {
      s.tmp_4.fn = s.tmp_4.arg0.vtable.iface["charWidth"];
      if (s.tmp_4.fn == null) { s.retval = s.tmp_4.arg0.fields["charWidth"]; }
      else if (!s.tmp_4.fn.isGetter) { s.retval = bind(s.tmp_4); }
     else { s.callLocIdx = 27; s.pc = 23; return s.tmp_4; }
    }
  case 23:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_2 - s.tmp_3);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 / 2);
    s.tmp_0 = r0;
    r0 = pxsim.Math_.floor(s.tmp_0);
    globals.LETTER_OFFSET_X___4602 = (r0);
    s.tmp_2 = r0 = globals.CELL_HEIGHT___4598;
    s.tmp_4 = if_charHeight_1_mk(s);
    s.tmp_4.arg0 = globals.font___4569;
    if (!s.tmp_4.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_4.arg0, "charHeight");
    } else {
      s.tmp_4.fn = s.tmp_4.arg0.vtable.iface["charHeight"];
      if (s.tmp_4.fn == null) { s.retval = s.tmp_4.arg0.fields["charHeight"]; }
      else if (!s.tmp_4.fn.isGetter) { s.retval = bind(s.tmp_4); }
     else { s.callLocIdx = 28; s.pc = 24; return s.tmp_4; }
    }
  case 24:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_2 - s.tmp_3);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 / 2);
    s.tmp_0 = r0;
    r0 = pxsim.Math_.floor(s.tmp_0);
    globals.LETTER_OFFSET_Y___4606 = (r0);
    r0 = (globals.CELL_WIDTH___4596 / 2);
    s.tmp_1 = r0;
    r0 = (4 + s.tmp_1);
    s.tmp_0 = r0;
    s.tmp_5 = r0 = globals.CONTENT_WIDTH___4587;
    r0 = (globals.CELL_WIDTH___4596 * 12);
    s.tmp_6 = r0;
    r0 = (s.tmp_5 - s.tmp_6);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 / 2);
    s.tmp_3 = r0;
    r0 = pxsim.Math_.floor(s.tmp_3);
    s.tmp_2 = r0;
    r0 = (s.tmp_0 + s.tmp_2);
    globals.ROW_LEFT___4614 = (r0);
    r0 = (8 + globals.CELL_HEIGHT___4598);
    globals.BOTTOM_BAR_HEIGHT___4622 = (r0);
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 - globals.BOTTOM_BAR_HEIGHT___4622);
    globals.BOTTOM_BAR_TOP___4625 = (r0);
    s.tmp_2 = if_charWidth_1_mk(s);
    s.tmp_2.arg0 = globals.font___4569;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "charWidth");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["charWidth"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["charWidth"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 29; s.pc = 25; return s.tmp_2; }
    }
  case 25:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 * 3);
    s.tmp_0 = r0;
    r0 = (8 + s.tmp_0);
    globals.BOTTOM_BAR_BUTTON_WIDTH___4632 = (r0);
    s.tmp_1 = r0 = globals.BOTTOM_BAR_HEIGHT___4622;
    s.tmp_3 = if_charHeight_1_mk(s);
    s.tmp_3.arg0 = globals.font___4569;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "charHeight");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["charHeight"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["charHeight"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 30; s.pc = 26; return s.tmp_3; }
    }
  case 26:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1 - s.tmp_2);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 / 2);
    globals.BOTTOM_BAR_TEXT_Y___4635 = (r0);
    s.tmp_1 = r0 = globals.BOTTOM_BAR_BUTTON_WIDTH___4632;
    s.tmp_4 = if_charWidth_1_mk(s);
    s.tmp_4.arg0 = globals.font___4569;
    if (!s.tmp_4.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_4.arg0, "charWidth");
    } else {
      s.tmp_4.fn = s.tmp_4.arg0.vtable.iface["charWidth"];
      if (s.tmp_4.fn == null) { s.retval = s.tmp_4.arg0.fields["charWidth"]; }
      else if (!s.tmp_4.fn.isGetter) { s.retval = bind(s.tmp_4); }
     else { s.callLocIdx = 31; s.pc = 27; return s.tmp_4; }
    }
  case 27:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_3 * 3);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 - s.tmp_2);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 / 2);
    globals.BOTTOM_BAR_SHIFT_X___4638 = (r0);
    s.tmp_1 = r0 = globals.BOTTOM_BAR_BUTTON_WIDTH___4632;
    s.tmp_4 = if_charWidth_1_mk(s);
    s.tmp_4.arg0 = globals.font___4569;
    if (!s.tmp_4.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_4.arg0, "charWidth");
    } else {
      s.tmp_4.fn = s.tmp_4.arg0.vtable.iface["charWidth"];
      if (s.tmp_4.fn == null) { s.retval = s.tmp_4.arg0.fields["charWidth"]; }
      else if (!s.tmp_4.fn.isGetter) { s.retval = bind(s.tmp_4); }
     else { s.callLocIdx = 32; s.pc = 28; return s.tmp_4; }
    }
  case 28:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_3 * 2);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 - s.tmp_2);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 / 2);
    globals.BOTTOM_BAR_CONFIRM_X___4641 = (r0);
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 - globals.BOTTOM_BAR_BUTTON_WIDTH___4632);
    globals.CONFIRM_BUTTON_LEFT___4644 = (r0);
    r0 = (3 * globals.CELL_HEIGHT___4598);
    globals.ALPHABET_HEIGHT___4648 = (r0);
    r0 = (4 + globals.CONTENT_HEIGHT___4590);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - globals.ALPHABET_HEIGHT___4648);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 - globals.BOTTOM_BAR_HEIGHT___4622);
    globals.ALPHABET_TOP___4654 = (r0);
    r0 = (2 * globals.CELL_HEIGHT___4598);
    globals.INPUT_HEIGHT___4660 = (r0);
    r0 = (globals.ALPHABET_TOP___4654 - globals.INPUT_HEIGHT___4660);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 - 10);
    globals.INPUT_TOP___4664 = (r0);
    r0 = (globals.INPUT_TOP___4664 - 4);
    globals.PROMPT_HEIGHT___4667 = (r0);
    globals.lowerShiftText___4668 = ("ABC");
    globals.upperShiftText___4669 = ("abc");
    r0 = pxsim_Array__mk();
    s.tmp_0 = r0;
    r0 = pxsim_Array__push(s.tmp_0, " ");
    r0 = pxsim_Array__push(s.tmp_0, ",");
    r0 = pxsim_Array__push(s.tmp_0, ".");
    r0 = pxsim_Array__push(s.tmp_0, "?");
    r0 = pxsim_Array__push(s.tmp_0, "!");
    r0 = pxsim_Array__push(s.tmp_0, ":");
    r0 = pxsim_Array__push(s.tmp_0, ";");
    r0 = pxsim_Array__push(s.tmp_0, "\"");
    r0 = pxsim_Array__push(s.tmp_0, "(");
    r0 = pxsim_Array__push(s.tmp_0, ")");
    globals.digitsUpper___4670 = (s.tmp_0);
    globals.confirmText___4671 = ("OK");
    s.tmp_0 = scene_systemMenu_initVolume__P4822_mk(s);
    s.callLocIdx = 33; s.pc = 29; return s.tmp_0;
  case 29:
    r0 = s.retval;
    s.tmp_0 = scene_systemMenu_initScreen__P4823_mk(s);
    s.callLocIdx = 34; s.pc = 30; return s.tmp_0;
  case 30:
    r0 = s.retval;
    r0 = pxsim_Array__push(globals.scene_Scene_initializers___2516, scene_systemMenu_register__P2711);
    r0 = pxsim.image.ofBuffer(_hex4830);
    globals.CARD_NORMAL___2716 = (r0);
    r0 = pxsim.image.ofBuffer(_hex4832);
    globals.CARD_SELECTED___2717 = (r0);
    r0 = pxsim.image.ofBuffer(_hex4834);
    globals.CARD_ACTIVE___2718 = (r0);
    r0 = pxsim.image.ofBuffer(_hex4836);
    globals.VOLUME_UP_ICON___2719 = (r0);
    r0 = pxsim.image.ofBuffer(_hex4838);
    globals.BRIGHTNESS_DOWN_ICON___2720 = (r0);
    r0 = pxsim.image.ofBuffer(_hex4840);
    globals.CLOSE_MENU_ICON___2721 = (r0);
    r0 = pxsim.image.ofBuffer(_hex4842);
    globals.VOLUME_DOWN_ICON___2722 = (r0);
    r0 = pxsim.image.ofBuffer(_hex4844);
    globals.SLEEP_ICON___2723 = (r0);
    r0 = pxsim.image.ofBuffer(_hex4846);
    globals.CONSOLE_ICON___2724 = (r0);
    r0 = pxsim.image.ofBuffer(_hex4848);
    globals.BRIGHTNESS_UP_ICON___2725 = (r0);
    r0 = pxsim.image.ofBuffer(_hex4850);
    globals.STATS_ICON___2726 = (r0);
    globals.consoleColor___4853 = (1);
    globals.tabSize___4856 = (8);
    globals.consoleFont___4862 = (globals.font5___1775);
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_2 = r0;
    s.tmp_5 = if_charHeight_1_mk(s);
    s.tmp_5.arg0 = globals.consoleFont___4862;
    if (!s.tmp_5.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_5.arg0, "charHeight");
    } else {
      s.tmp_5.fn = s.tmp_5.arg0.vtable.iface["charHeight"];
      if (s.tmp_5.fn == null) { s.retval = s.tmp_5.arg0.fields["charHeight"]; }
      else if (!s.tmp_5.fn.isGetter) { s.retval = bind(s.tmp_5); }
     else { s.callLocIdx = 35; s.pc = 31; return s.tmp_5; }
    }
  case 31:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = (s.tmp_4 + 2);
    s.tmp_3 = r0;
    r0 = (s.tmp_2 / s.tmp_3);
    s.tmp_1 = r0;
    r0 = pxsim.Math_.floor(s.tmp_1);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 - 1);
    globals.consoleLines___4867 = (r0);
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - 8);
    s.tmp_1 = r0;
    s.tmp_4 = if_charWidth_1_mk(s);
    s.tmp_4.arg0 = globals.consoleFont___4862;
    if (!s.tmp_4.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_4.arg0, "charWidth");
    } else {
      s.tmp_4.fn = s.tmp_4.arg0.vtable.iface["charWidth"];
      if (s.tmp_4.fn == null) { s.retval = s.tmp_4.arg0.fields["charWidth"]; }
      else if (!s.tmp_4.fn.isGetter) { s.retval = bind(s.tmp_4); }
     else { s.callLocIdx = 36; s.pc = 32; return s.tmp_4; }
    }
  case 32:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_1 / s.tmp_3);
    s.tmp_0 = r0;
    r0 = pxsim.Math_.floor(s.tmp_0);
    globals.consoleColumns___4877 = (r0);
    s.tmp_0 = console_addListener__P381_mk(s);
    s.tmp_0.arg0 = game_consoleOverlay_listener__P4889;
    s.callLocIdx = 37; s.pc = 33; return s.tmp_0;
  case 33:
    r0 = s.retval;
    s.tmp_0 = lambda_1_mk(s);
    s.tmp_0.argL = MAX_SOURCES_inline__P9207;
    setupLambda(s.tmp_0, s.tmp_0.argL);
    s.callLocIdx = 39; s.pc = 34; return s.tmp_0;
  case 34:
    r0 = s.retval;
    globals.MAX_SOURCES___4891 = (r0);
    r0 = pxsim_pxtcore_mkClassInstance(particles_SprayFactory__C2796_VT);
    s.tmp_0 = r0;
    s.tmp_1 = particles_SprayFactory_constructor__P2797_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = 20;
    s.tmp_1.arg2 = 0;
    s.tmp_1.arg3 = 60;
    s.callLocIdx = 40; s.pc = 35; return s.tmp_1;
  case 35:
    r0 = s.retval;
    globals.defaultFactory___2776 = (s.tmp_0);
    r0 = pxsim_pxtcore_mkClassInstance(Math_FastRandom__C2664_VT);
    s.tmp_0 = r0;
    s.tmp_1 = Math_FastRandom_constructor__P2666_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = undefined;
    s.callLocIdx = 41; s.pc = 36; return s.tmp_1;
  case 36:
    r0 = s.retval;
    globals.galois___4911 = (s.tmp_0);
    globals.angleSlice___4919 = (0.06283185307179587);
    r0 = pxsim_pxtcore_mkClassInstance(effects_ScreenEffect__C2871_VT);
    s.tmp_0 = r0;
    s.tmp_1 = effects_ScreenEffect_constructor__P2872_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = 10;
    s.tmp_1.arg2 = 40;
    s.tmp_1.arg3 = 4000;
    s.tmp_1.arg4 = confetti_inline__P8739;
    s.callLocIdx = 47; s.pc = 37; return s.tmp_1;
  case 37:
    r0 = s.retval;
    globals.confetti___2879 = (s.tmp_0);
    r0 = pxsim_pxtcore_mkClassInstance(effects_ImageEffect__C2894_VT);
    s.tmp_0 = r0;
    s.tmp_1 = effects_ImageEffect_constructor__P2895_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = 100;
    s.tmp_1.arg2 = dissolve_inline__P8548;
    s.callLocIdx = 53; s.pc = 38; return s.tmp_1;
  case 38:
    r0 = s.retval;
    globals.dissolve___2899 = (s.tmp_0);
    r0 = pxsim_pxtcore_mkClassInstance(effects_ImageEffect__C2894_VT);
    s.tmp_0 = r0;
    s.tmp_1 = effects_ImageEffect_constructor__P2895_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = 125;
    s.tmp_1.arg2 = melt_inline__P12526;
    s.callLocIdx = 56; s.pc = 39; return s.tmp_1;
  case 39:
    r0 = s.retval;
    globals.melt___2900 = (s.tmp_0);
    s.tmp_0 = game_setWaitAnyButton__P2610_mk(s);
    s.tmp_0.arg0 = controller_pauseUntilAnyButtonIsPressed__P1985;
    s.callLocIdx = 57; s.pc = 40; return s.tmp_0;
  case 40:
    r0 = s.retval;
    s.tmp_0 = game_eventContext__P2612_mk(s);
    s.callLocIdx = 58; s.pc = 41; return s.tmp_0;
  case 41:
    r0 = s.retval;
    s.tmp_0 = SpriteKind_create__P2206_mk(s);
    s.callLocIdx = 59; s.pc = 42; return s.tmp_0;
  case 42:
    r0 = s.retval;
    globals.Text___3847 = (r0);
    globals.DEFAULT_FONT___3885 = (globals.font8___1770);
    globals.DEFAULT_FONT_FOOTER___3886 = (globals.font8___1770);
    globals.DEFAULT_FONT_HEADLINE___3887 = (globals.font8___1770);
    globals.DEFAULT_FONT_MID_TEXT___3888 = (globals.font5___1775);
    globals.DEFAULT_FONT_TABS___3889 = (globals.font5___1775);
    s.tmp_0 = image_doubledFont__P1773_mk(s);
    s.tmp_0.arg0 = globals.font8___1770;
    s.callLocIdx = 60; s.pc = 43; return s.tmp_0;
  case 43:
    r0 = s.retval;
    globals.DEFAULT_FONT_TITLE___3890 = (r0);
    globals.DEFAULT_TEXT_FOOTER_SPLASH___3893 = ("Press any button to begin");
    r0 = pxsim_Array__mk();
    s.tmp_0 = r0;
    r0 = pxsim_Array__push(s.tmp_0, "WHICH");
    r0 = pxsim_Array__push(s.tmp_0, "THEIR");
    r0 = pxsim_Array__push(s.tmp_0, "WOULD");
    r0 = pxsim_Array__push(s.tmp_0, "THERE");
    r0 = pxsim_Array__push(s.tmp_0, "COULD");
    r0 = pxsim_Array__push(s.tmp_0, "OTHER");
    r0 = pxsim_Array__push(s.tmp_0, "ABOUT");
    r0 = pxsim_Array__push(s.tmp_0, "GREAT");
    r0 = pxsim_Array__push(s.tmp_0, "THESE");
    r0 = pxsim_Array__push(s.tmp_0, "AFTER");
    r0 = pxsim_Array__push(s.tmp_0, "FIRST");
    r0 = pxsim_Array__push(s.tmp_0, "NEVER");
    r0 = pxsim_Array__push(s.tmp_0, "WHERE");
    r0 = pxsim_Array__push(s.tmp_0, "THOSE");
    r0 = pxsim_Array__push(s.tmp_0, "SHALL");
    r0 = pxsim_Array__push(s.tmp_0, "BEING");
    r0 = pxsim_Array__push(s.tmp_0, "MIGHT");
    r0 = pxsim_Array__push(s.tmp_0, "EVERY");
    r0 = pxsim_Array__push(s.tmp_0, "THINK");
    r0 = pxsim_Array__push(s.tmp_0, "UNDER");
    r0 = pxsim_Array__push(s.tmp_0, "FOUND");
    r0 = pxsim_Array__push(s.tmp_0, "STILL");
    r0 = pxsim_Array__push(s.tmp_0, "WHILE");
    r0 = pxsim_Array__push(s.tmp_0, "AGAIN");
    r0 = pxsim_Array__push(s.tmp_0, "PLACE");
    r0 = pxsim_Array__push(s.tmp_0, "YOUNG");
    r0 = pxsim_Array__push(s.tmp_0, "YEARS");
    r0 = pxsim_Array__push(s.tmp_0, "THREE");
    r0 = pxsim_Array__push(s.tmp_0, "RIGHT");
    r0 = pxsim_Array__push(s.tmp_0, "HOUSE");
    r0 = pxsim_Array__push(s.tmp_0, "WHOLE");
    r0 = pxsim_Array__push(s.tmp_0, "WORLD");
    r0 = pxsim_Array__push(s.tmp_0, "THING");
    r0 = pxsim_Array__push(s.tmp_0, "NIGHT");
    r0 = pxsim_Array__push(s.tmp_0, "GOING");
    r0 = pxsim_Array__push(s.tmp_0, "HEARD");
    r0 = pxsim_Array__push(s.tmp_0, "HEART");
    r0 = pxsim_Array__push(s.tmp_0, "AMONG");
    r0 = pxsim_Array__push(s.tmp_0, "ASKED");
    r0 = pxsim_Array__push(s.tmp_0, "SMALL");
    r0 = pxsim_Array__push(s.tmp_0, "WOMAN");
    r0 = pxsim_Array__push(s.tmp_0, "WHOSE");
    r0 = pxsim_Array__push(s.tmp_0, "QUITE");
    r0 = pxsim_Array__push(s.tmp_0, "WORDS");
    r0 = pxsim_Array__push(s.tmp_0, "GIVEN");
    r0 = pxsim_Array__push(s.tmp_0, "TAKEN");
    r0 = pxsim_Array__push(s.tmp_0, "HANDS");
    r0 = pxsim_Array__push(s.tmp_0, "UNTIL");
    r0 = pxsim_Array__push(s.tmp_0, "SINCE");
    r0 = pxsim_Array__push(s.tmp_0, "LIGHT");
    r0 = pxsim_Array__push(s.tmp_0, "BEGAN");
    r0 = pxsim_Array__push(s.tmp_0, "LARGE");
    r0 = pxsim_Array__push(s.tmp_0, "WATER");
    r0 = pxsim_Array__push(s.tmp_0, "WORKS");
    r0 = pxsim_Array__push(s.tmp_0, "OFTEN");
    r0 = pxsim_Array__push(s.tmp_0, "STOOD");
    r0 = pxsim_Array__push(s.tmp_0, "POWER");
    r0 = pxsim_Array__push(s.tmp_0, "MONEY");
    r0 = pxsim_Array__push(s.tmp_0, "ORDER");
    r0 = pxsim_Array__push(s.tmp_0, "MEANS");
    r0 = pxsim_Array__push(s.tmp_0, "ROUND");
    r0 = pxsim_Array__push(s.tmp_0, "VOICE");
    r0 = pxsim_Array__push(s.tmp_0, "WHITE");
    r0 = pxsim_Array__push(s.tmp_0, "POINT");
    r0 = pxsim_Array__push(s.tmp_0, "STATE");
    r0 = pxsim_Array__push(s.tmp_0, "ABOVE");
    r0 = pxsim_Array__push(s.tmp_0, "DEATH");
    r0 = pxsim_Array__push(s.tmp_0, "LEAST");
    r0 = pxsim_Array__push(s.tmp_0, "KNOWN");
    r0 = pxsim_Array__push(s.tmp_0, "ALONG");
    r0 = pxsim_Array__push(s.tmp_0, "LEAVE");
    r0 = pxsim_Array__push(s.tmp_0, "ALONE");
    r0 = pxsim_Array__push(s.tmp_0, "WOMEN");
    r0 = pxsim_Array__push(s.tmp_0, "TIMES");
    r0 = pxsim_Array__push(s.tmp_0, "SPEAK");
    r0 = pxsim_Array__push(s.tmp_0, "FORTH");
    r0 = pxsim_Array__push(s.tmp_0, "TERMS");
    r0 = pxsim_Array__push(s.tmp_0, "CRIED");
    r0 = pxsim_Array__push(s.tmp_0, "CHILD");
    r0 = pxsim_Array__push(s.tmp_0, "HUMAN");
    r0 = pxsim_Array__push(s.tmp_0, "SHORT");
    r0 = pxsim_Array__push(s.tmp_0, "CAUSE");
    r0 = pxsim_Array__push(s.tmp_0, "SEEMS");
    r0 = pxsim_Array__push(s.tmp_0, "BRING");
    r0 = pxsim_Array__push(s.tmp_0, "DOUBT");
    r0 = pxsim_Array__push(s.tmp_0, "BLACK");
    r0 = pxsim_Array__push(s.tmp_0, "SENSE");
    r0 = pxsim_Array__push(s.tmp_0, "CLOSE");
    r0 = pxsim_Array__push(s.tmp_0, "TRUTH");
    r0 = pxsim_Array__push(s.tmp_0, "OUGHT");
    r0 = pxsim_Array__push(s.tmp_0, "PARTY");
    r0 = pxsim_Array__push(s.tmp_0, "READY");
    r0 = pxsim_Array__push(s.tmp_0, "FORCE");
    r0 = pxsim_Array__push(s.tmp_0, "EARLY");
    r0 = pxsim_Array__push(s.tmp_0, "EARTH");
    r0 = pxsim_Array__push(s.tmp_0, "SIGHT");
    r0 = pxsim_Array__push(s.tmp_0, "SPOKE");
    r0 = pxsim_Array__push(s.tmp_0, "STORY");
    r0 = pxsim_Array__push(s.tmp_0, "LATER");
    r0 = pxsim_Array__push(s.tmp_0, "ADDED");
    r0 = pxsim_Array__push(s.tmp_0, "STAND");
    r0 = pxsim_Array__push(s.tmp_0, "MILES");
    r0 = pxsim_Array__push(s.tmp_0, "COMES");
    r0 = pxsim_Array__push(s.tmp_0, "TABLE");
    r0 = pxsim_Array__push(s.tmp_0, "HOURS");
    r0 = pxsim_Array__push(s.tmp_0, "RIVER");
    r0 = pxsim_Array__push(s.tmp_0, "HAPPY");
    r0 = pxsim_Array__push(s.tmp_0, "CLEAR");
    r0 = pxsim_Array__push(s.tmp_0, "SOUND");
    r0 = pxsim_Array__push(s.tmp_0, "MAKES");
    r0 = pxsim_Array__push(s.tmp_0, "BLOOD");
    r0 = pxsim_Array__push(s.tmp_0, "DOING");
    r0 = pxsim_Array__push(s.tmp_0, "TRIED");
    r0 = pxsim_Array__push(s.tmp_0, "FRONT");
    r0 = pxsim_Array__push(s.tmp_0, "QUILL");
    r0 = pxsim_Array__push(s.tmp_0, "PEACE");
    r0 = pxsim_Array__push(s.tmp_0, "LIVED");
    r0 = pxsim_Array__push(s.tmp_0, "HORSE");
    r0 = pxsim_Array__push(s.tmp_0, "WROTE");
    r0 = pxsim_Array__push(s.tmp_0, "PAPER");
    r0 = pxsim_Array__push(s.tmp_0, "CHIEF");
    r0 = pxsim_Array__push(s.tmp_0, "BOOKS");
    r0 = pxsim_Array__push(s.tmp_0, "VISIT");
    r0 = pxsim_Array__push(s.tmp_0, "HEAVY");
    r0 = pxsim_Array__push(s.tmp_0, "KNOWS");
    r0 = pxsim_Array__push(s.tmp_0, "LOVED");
    r0 = pxsim_Array__push(s.tmp_0, "CARRY");
    r0 = pxsim_Array__push(s.tmp_0, "PLAIN");
    r0 = pxsim_Array__push(s.tmp_0, "SWEET");
    r0 = pxsim_Array__push(s.tmp_0, "WRITE");
    r0 = pxsim_Array__push(s.tmp_0, "TREES");
    r0 = pxsim_Array__push(s.tmp_0, "BELOW");
    r0 = pxsim_Array__push(s.tmp_0, "WRONG");
    r0 = pxsim_Array__push(s.tmp_0, "REACH");
    r0 = pxsim_Array__push(s.tmp_0, "NOBLE");
    r0 = pxsim_Array__push(s.tmp_0, "PARTS");
    r0 = pxsim_Array__push(s.tmp_0, "AGREE");
    r0 = pxsim_Array__push(s.tmp_0, "MOVED");
    r0 = pxsim_Array__push(s.tmp_0, "ENEMY");
    r0 = pxsim_Array__push(s.tmp_0, "WORTH");
    r0 = pxsim_Array__push(s.tmp_0, "GREEN");
    r0 = pxsim_Array__push(s.tmp_0, "THIRD");
    r0 = pxsim_Array__push(s.tmp_0, "MOUTH");
    r0 = pxsim_Array__push(s.tmp_0, "SLEEP");
    r0 = pxsim_Array__push(s.tmp_0, "FRESH");
    r0 = pxsim_Array__push(s.tmp_0, "FAITH");
    r0 = pxsim_Array__push(s.tmp_0, "SMILE");
    r0 = pxsim_Array__push(s.tmp_0, "USUAL");
    r0 = pxsim_Array__push(s.tmp_0, "BOUND");
    r0 = pxsim_Array__push(s.tmp_0, "QUIET");
    r0 = pxsim_Array__push(s.tmp_0, "COURT");
    r0 = pxsim_Array__push(s.tmp_0, "YOUTH");
    r0 = pxsim_Array__push(s.tmp_0, "PIECE");
    r0 = pxsim_Array__push(s.tmp_0, "SOUTH");
    r0 = pxsim_Array__push(s.tmp_0, "MEANT");
    r0 = pxsim_Array__push(s.tmp_0, "SEVEN");
    r0 = pxsim_Array__push(s.tmp_0, "TEARS");
    r0 = pxsim_Array__push(s.tmp_0, "VALUE");
    r0 = pxsim_Array__push(s.tmp_0, "BROKE");
    r0 = pxsim_Array__push(s.tmp_0, "FIGHT");
    r0 = pxsim_Array__push(s.tmp_0, "STONE");
    r0 = pxsim_Array__push(s.tmp_0, "BEGIN");
    r0 = pxsim_Array__push(s.tmp_0, "LEARN");
    r0 = pxsim_Array__push(s.tmp_0, "LINES");
    r0 = pxsim_Array__push(s.tmp_0, "GRAND");
    r0 = pxsim_Array__push(s.tmp_0, "TAKES");
    r0 = pxsim_Array__push(s.tmp_0, "MONTH");
    r0 = pxsim_Array__push(s.tmp_0, "GIRLS");
    r0 = pxsim_Array__push(s.tmp_0, "GIVES");
    r0 = pxsim_Array__push(s.tmp_0, "EIGHT");
    r0 = pxsim_Array__push(s.tmp_0, "SCENE");
    r0 = pxsim_Array__push(s.tmp_0, "LIVES");
    r0 = pxsim_Array__push(s.tmp_0, "DRAWN");
    r0 = pxsim_Array__push(s.tmp_0, "FIFTY");
    r0 = pxsim_Array__push(s.tmp_0, "FIELD");
    r0 = pxsim_Array__push(s.tmp_0, "CHAIR");
    r0 = pxsim_Array__push(s.tmp_0, "NAMED");
    r0 = pxsim_Array__push(s.tmp_0, "ALLOW");
    r0 = pxsim_Array__push(s.tmp_0, "MUSIC");
    r0 = pxsim_Array__push(s.tmp_0, "FIXED");
    r0 = pxsim_Array__push(s.tmp_0, "STUDY");
    r0 = pxsim_Array__push(s.tmp_0, "SPENT");
    r0 = pxsim_Array__push(s.tmp_0, "TRUST");
    r0 = pxsim_Array__push(s.tmp_0, "BREAK");
    r0 = pxsim_Array__push(s.tmp_0, "EQUAL");
    r0 = pxsim_Array__push(s.tmp_0, "NORTH");
    r0 = pxsim_Array__push(s.tmp_0, "THREW");
    r0 = pxsim_Array__push(s.tmp_0, "WATCH");
    r0 = pxsim_Array__push(s.tmp_0, "LOOKS");
    r0 = pxsim_Array__push(s.tmp_0, "BUILT");
    r0 = pxsim_Array__push(s.tmp_0, "USING");
    r0 = pxsim_Array__push(s.tmp_0, "SPITE");
    r0 = pxsim_Array__push(s.tmp_0, "MORAL");
    r0 = pxsim_Array__push(s.tmp_0, "WALLS");
    r0 = pxsim_Array__push(s.tmp_0, "TOUCH");
    r0 = pxsim_Array__push(s.tmp_0, "STEPS");
    r0 = pxsim_Array__push(s.tmp_0, "OFFER");
    r0 = pxsim_Array__push(s.tmp_0, "DRESS");
    r0 = pxsim_Array__push(s.tmp_0, "LYING");
    r0 = pxsim_Array__push(s.tmp_0, "GRAVE");
    r0 = pxsim_Array__push(s.tmp_0, "LEGAL");
    r0 = pxsim_Array__push(s.tmp_0, "QUEEN");
    r0 = pxsim_Array__push(s.tmp_0, "LOWER");
    r0 = pxsim_Array__push(s.tmp_0, "CASES");
    r0 = pxsim_Array__push(s.tmp_0, "SHOWN");
    r0 = pxsim_Array__push(s.tmp_0, "NAMES");
    r0 = pxsim_Array__push(s.tmp_0, "BOARD");
    r0 = pxsim_Array__push(s.tmp_0, "GLASS");
    r0 = pxsim_Array__push(s.tmp_0, "SHARE");
    r0 = pxsim_Array__push(s.tmp_0, "FORMS");
    r0 = pxsim_Array__push(s.tmp_0, "CLASS");
    r0 = pxsim_Array__push(s.tmp_0, "START");
    r0 = pxsim_Array__push(s.tmp_0, "SHOOK");
    r0 = pxsim_Array__push(s.tmp_0, "TRAIN");
    r0 = pxsim_Array__push(s.tmp_0, "ENTER");
    r0 = pxsim_Array__push(s.tmp_0, "PROVE");
    r0 = pxsim_Array__push(s.tmp_0, "FLOOR");
    r0 = pxsim_Array__push(s.tmp_0, "WORSE");
    r0 = pxsim_Array__push(s.tmp_0, "SORRY");
    r0 = pxsim_Array__push(s.tmp_0, "PRIDE");
    r0 = pxsim_Array__push(s.tmp_0, "MARCH");
    r0 = pxsim_Array__push(s.tmp_0, "MARRY");
    r0 = pxsim_Array__push(s.tmp_0, "CROWD");
    r0 = pxsim_Array__push(s.tmp_0, "SHORE");
    r0 = pxsim_Array__push(s.tmp_0, "DRINK");
    r0 = pxsim_Array__push(s.tmp_0, "JUDGE");
    r0 = pxsim_Array__push(s.tmp_0, "SERVE");
    r0 = pxsim_Array__push(s.tmp_0, "LAUGH");
    r0 = pxsim_Array__push(s.tmp_0, "TRADE");
    r0 = pxsim_Array__push(s.tmp_0, "BROAD");
    r0 = pxsim_Array__push(s.tmp_0, "GRACE");
    r0 = pxsim_Array__push(s.tmp_0, "ROYAL");
    r0 = pxsim_Array__push(s.tmp_0, "HEADS");
    r0 = pxsim_Array__push(s.tmp_0, "PROUD");
    r0 = pxsim_Array__push(s.tmp_0, "SPACE");
    r0 = pxsim_Array__push(s.tmp_0, "FULLY");
    r0 = pxsim_Array__push(s.tmp_0, "QUICK");
    r0 = pxsim_Array__push(s.tmp_0, "IDEAS");
    r0 = pxsim_Array__push(s.tmp_0, "FANCY");
    r0 = pxsim_Array__push(s.tmp_0, "TASTE");
    r0 = pxsim_Array__push(s.tmp_0, "SWORD");
    r0 = pxsim_Array__push(s.tmp_0, "SHIPS");
    r0 = pxsim_Array__push(s.tmp_0, "DAILY");
    r0 = pxsim_Array__push(s.tmp_0, "GLORY");
    r0 = pxsim_Array__push(s.tmp_0, "BRAVE");
    r0 = pxsim_Array__push(s.tmp_0, "HONOR");
    r0 = pxsim_Array__push(s.tmp_0, "DREAM");
    r0 = pxsim_Array__push(s.tmp_0, "WEEKS");
    r0 = pxsim_Array__push(s.tmp_0, "THICK");
    r0 = pxsim_Array__push(s.tmp_0, "CLAIM");
    r0 = pxsim_Array__push(s.tmp_0, "CHECK");
    r0 = pxsim_Array__push(s.tmp_0, "ASIDE");
    r0 = pxsim_Array__push(s.tmp_0, "REPLY");
    r0 = pxsim_Array__push(s.tmp_0, "FALSE");
    r0 = pxsim_Array__push(s.tmp_0, "SIDES");
    r0 = pxsim_Array__push(s.tmp_0, "CROSS");
    r0 = pxsim_Array__push(s.tmp_0, "SHARP");
    r0 = pxsim_Array__push(s.tmp_0, "FACTS");
    r0 = pxsim_Array__push(s.tmp_0, "HILLS");
    r0 = pxsim_Array__push(s.tmp_0, "BREAD");
    r0 = pxsim_Array__push(s.tmp_0, "COAST");
    r0 = pxsim_Array__push(s.tmp_0, "AWARE");
    r0 = pxsim_Array__push(s.tmp_0, "GROUP");
    r0 = pxsim_Array__push(s.tmp_0, "FACES");
    r0 = pxsim_Array__push(s.tmp_0, "GROWN");
    r0 = pxsim_Array__push(s.tmp_0, "BIRDS");
    r0 = pxsim_Array__push(s.tmp_0, "MIDST");
    r0 = pxsim_Array__push(s.tmp_0, "TELLS");
    r0 = pxsim_Array__push(s.tmp_0, "LIKED");
    r0 = pxsim_Array__push(s.tmp_0, "THROW");
    r0 = pxsim_Array__push(s.tmp_0, "HABIT");
    r0 = pxsim_Array__push(s.tmp_0, "STAGE");
    r0 = pxsim_Array__push(s.tmp_0, "ANGRY");
    r0 = pxsim_Array__push(s.tmp_0, "BROWN");
    r0 = pxsim_Array__push(s.tmp_0, "OWNER");
    r0 = pxsim_Array__push(s.tmp_0, "TIRED");
    r0 = pxsim_Array__push(s.tmp_0, "TRULY");
    r0 = pxsim_Array__push(s.tmp_0, "RULES");
    r0 = pxsim_Array__push(s.tmp_0, "TOTAL");
    r0 = pxsim_Array__push(s.tmp_0, "GRASS");
    r0 = pxsim_Array__push(s.tmp_0, "STYLE");
    r0 = pxsim_Array__push(s.tmp_0, "SAVED");
    r0 = pxsim_Array__push(s.tmp_0, "DRIVE");
    r0 = pxsim_Array__push(s.tmp_0, "TWICE");
    r0 = pxsim_Array__push(s.tmp_0, "GUARD");
    r0 = pxsim_Array__push(s.tmp_0, "BURST");
    r0 = pxsim_Array__push(s.tmp_0, "PRICE");
    r0 = pxsim_Array__push(s.tmp_0, "WANTS");
    r0 = pxsim_Array__push(s.tmp_0, "THANK");
    r0 = pxsim_Array__push(s.tmp_0, "BASED");
    r0 = pxsim_Array__push(s.tmp_0, "GUESS");
    r0 = pxsim_Array__push(s.tmp_0, "CHOSE");
    r0 = pxsim_Array__push(s.tmp_0, "HOPES");
    r0 = pxsim_Array__push(s.tmp_0, "UNCLE");
    r0 = pxsim_Array__push(s.tmp_0, "WOODS");
    r0 = pxsim_Array__push(s.tmp_0, "FINAL");
    r0 = pxsim_Array__push(s.tmp_0, "FORTY");
    r0 = pxsim_Array__push(s.tmp_0, "DROVE");
    r0 = pxsim_Array__push(s.tmp_0, "TITLE");
    r0 = pxsim_Array__push(s.tmp_0, "UPPER");
    r0 = pxsim_Array__push(s.tmp_0, "MINDS");
    r0 = pxsim_Array__push(s.tmp_0, "NOISE");
    r0 = pxsim_Array__push(s.tmp_0, "HOPED");
    r0 = pxsim_Array__push(s.tmp_0, "BEGUN");
    r0 = pxsim_Array__push(s.tmp_0, "ALIVE");
    r0 = pxsim_Array__push(s.tmp_0, "CRUEL");
    r0 = pxsim_Array__push(s.tmp_0, "SHAPE");
    r0 = pxsim_Array__push(s.tmp_0, "SLAVE");
    r0 = pxsim_Array__push(s.tmp_0, "BIRTH");
    r0 = pxsim_Array__push(s.tmp_0, "YOURS");
    r0 = pxsim_Array__push(s.tmp_0, "STORM");
    r0 = pxsim_Array__push(s.tmp_0, "CATCH");
    r0 = pxsim_Array__push(s.tmp_0, "LOOSE");
    r0 = pxsim_Array__push(s.tmp_0, "EMPTY");
    r0 = pxsim_Array__push(s.tmp_0, "CIVIL");
    r0 = pxsim_Array__push(s.tmp_0, "DOZEN");
    r0 = pxsim_Array__push(s.tmp_0, "SHOWS");
    r0 = pxsim_Array__push(s.tmp_0, "ADMIT");
    r0 = pxsim_Array__push(s.tmp_0, "SMOKE");
    r0 = pxsim_Array__push(s.tmp_0, "DYING");
    r0 = pxsim_Array__push(s.tmp_0, "BRIEF");
    r0 = pxsim_Array__push(s.tmp_0, "APPLY");
    r0 = pxsim_Array__push(s.tmp_0, "PROOF");
    r0 = pxsim_Array__push(s.tmp_0, "FLESH");
    r0 = pxsim_Array__push(s.tmp_0, "FRUIT");
    r0 = pxsim_Array__push(s.tmp_0, "ENJOY");
    r0 = pxsim_Array__push(s.tmp_0, "WORST");
    r0 = pxsim_Array__push(s.tmp_0, "SHAME");
    r0 = pxsim_Array__push(s.tmp_0, "ROUGH");
    r0 = pxsim_Array__push(s.tmp_0, "COVER");
    r0 = pxsim_Array__push(s.tmp_0, "ROCKS");
    r0 = pxsim_Array__push(s.tmp_0, "COUNT");
    r0 = pxsim_Array__push(s.tmp_0, "CRIME");
    r0 = pxsim_Array__push(s.tmp_0, "GRIEF");
    r0 = pxsim_Array__push(s.tmp_0, "NOTES");
    r0 = pxsim_Array__push(s.tmp_0, "NEEDS");
    r0 = pxsim_Array__push(s.tmp_0, "LANDS");
    r0 = pxsim_Array__push(s.tmp_0, "BLIND");
    r0 = pxsim_Array__push(s.tmp_0, "BRAIN");
    r0 = pxsim_Array__push(s.tmp_0, "PRINT");
    r0 = pxsim_Array__push(s.tmp_0, "CLEAN");
    r0 = pxsim_Array__push(s.tmp_0, "LEVEL");
    r0 = pxsim_Array__push(s.tmp_0, "RAISE");
    r0 = pxsim_Array__push(s.tmp_0, "EAGER");
    r0 = pxsim_Array__push(s.tmp_0, "STARS");
    r0 = pxsim_Array__push(s.tmp_0, "FAINT");
    r0 = pxsim_Array__push(s.tmp_0, "TEETH");
    r0 = pxsim_Array__push(s.tmp_0, "LABOR");
    r0 = pxsim_Array__push(s.tmp_0, "ROOMS");
    r0 = pxsim_Array__push(s.tmp_0, "OLDER");
    r0 = pxsim_Array__push(s.tmp_0, "KNEES");
    r0 = pxsim_Array__push(s.tmp_0, "MERCY");
    r0 = pxsim_Array__push(s.tmp_0, "AWFUL");
    r0 = pxsim_Array__push(s.tmp_0, "AVOID");
    r0 = pxsim_Array__push(s.tmp_0, "DOORS");
    r0 = pxsim_Array__push(s.tmp_0, "ENDED");
    r0 = pxsim_Array__push(s.tmp_0, "DEVIL");
    r0 = pxsim_Array__push(s.tmp_0, "WEARY");
    r0 = pxsim_Array__push(s.tmp_0, "AROSE");
    r0 = pxsim_Array__push(s.tmp_0, "FAULT");
    r0 = pxsim_Array__push(s.tmp_0, "CROWN");
    r0 = pxsim_Array__push(s.tmp_0, "COLOR");
    r0 = pxsim_Array__push(s.tmp_0, "EVENT");
    r0 = pxsim_Array__push(s.tmp_0, "GOODS");
    r0 = pxsim_Array__push(s.tmp_0, "YARDS");
    r0 = pxsim_Array__push(s.tmp_0, "UNION");
    r0 = pxsim_Array__push(s.tmp_0, "TEMPS");
    r0 = pxsim_Array__push(s.tmp_0, "FAVOR");
    r0 = pxsim_Array__push(s.tmp_0, "SOULS");
    r0 = pxsim_Array__push(s.tmp_0, "CALLS");
    r0 = pxsim_Array__push(s.tmp_0, "AHEAD");
    r0 = pxsim_Array__push(s.tmp_0, "ANGER");
    r0 = pxsim_Array__push(s.tmp_0, "PLANS");
    r0 = pxsim_Array__push(s.tmp_0, "LOCAL");
    r0 = pxsim_Array__push(s.tmp_0, "LOVER");
    r0 = pxsim_Array__push(s.tmp_0, "PAGES");
    r0 = pxsim_Array__push(s.tmp_0, "VIEWS");
    r0 = pxsim_Array__push(s.tmp_0, "SIGNS");
    r0 = pxsim_Array__push(s.tmp_0, "TEACH");
    r0 = pxsim_Array__push(s.tmp_0, "STOCK");
    r0 = pxsim_Array__push(s.tmp_0, "KINDS");
    r0 = pxsim_Array__push(s.tmp_0, "APART");
    r0 = pxsim_Array__push(s.tmp_0, "GUIDE");
    r0 = pxsim_Array__push(s.tmp_0, "ARMED");
    r0 = pxsim_Array__push(s.tmp_0, "EXACT");
    r0 = pxsim_Array__push(s.tmp_0, "TRIAL");
    r0 = pxsim_Array__push(s.tmp_0, "HOTEL");
    r0 = pxsim_Array__push(s.tmp_0, "SPEND");
    r0 = pxsim_Array__push(s.tmp_0, "SKILL");
    r0 = pxsim_Array__push(s.tmp_0, "KINGS");
    r0 = pxsim_Array__push(s.tmp_0, "SHALT");
    r0 = pxsim_Array__push(s.tmp_0, "LINKS");
    r0 = pxsim_Array__push(s.tmp_0, "DANCE");
    r0 = pxsim_Array__push(s.tmp_0, "SWEPT");
    r0 = pxsim_Array__push(s.tmp_0, "FATAL");
    r0 = pxsim_Array__push(s.tmp_0, "WOUND");
    r0 = pxsim_Array__push(s.tmp_0, "STORE");
    r0 = pxsim_Array__push(s.tmp_0, "SLEPT");
    r0 = pxsim_Array__push(s.tmp_0, "RANGE");
    r0 = pxsim_Array__push(s.tmp_0, "HENCE");
    r0 = pxsim_Array__push(s.tmp_0, "IMAGE");
    r0 = pxsim_Array__push(s.tmp_0, "ARISE");
    r0 = pxsim_Array__push(s.tmp_0, "FILES");
    r0 = pxsim_Array__push(s.tmp_0, "BANKS");
    r0 = pxsim_Array__push(s.tmp_0, "RAPID");
    r0 = pxsim_Array__push(s.tmp_0, "WASTE");
    r0 = pxsim_Array__push(s.tmp_0, "DARED");
    r0 = pxsim_Array__push(s.tmp_0, "PLANT");
    r0 = pxsim_Array__push(s.tmp_0, "SHADE");
    r0 = pxsim_Array__push(s.tmp_0, "ACTED");
    r0 = pxsim_Array__push(s.tmp_0, "CLOUD");
    r0 = pxsim_Array__push(s.tmp_0, "PRESS");
    r0 = pxsim_Array__push(s.tmp_0, "LOVES");
    r0 = pxsim_Array__push(s.tmp_0, "UTTER");
    r0 = pxsim_Array__push(s.tmp_0, "WINGS");
    r0 = pxsim_Array__push(s.tmp_0, "FLUNG");
    r0 = pxsim_Array__push(s.tmp_0, "BOWED");
    r0 = pxsim_Array__push(s.tmp_0, "GAZED");
    r0 = pxsim_Array__push(s.tmp_0, "THINE");
    r0 = pxsim_Array__push(s.tmp_0, "STICK");
    r0 = pxsim_Array__push(s.tmp_0, "FRANK");
    r0 = pxsim_Array__push(s.tmp_0, "REIGN");
    r0 = pxsim_Array__push(s.tmp_0, "MAJOR");
    r0 = pxsim_Array__push(s.tmp_0, "URGED");
    r0 = pxsim_Array__push(s.tmp_0, "FLEET");
    r0 = pxsim_Array__push(s.tmp_0, "TURNS");
    r0 = pxsim_Array__push(s.tmp_0, "SUGAR");
    r0 = pxsim_Array__push(s.tmp_0, "SPARE");
    r0 = pxsim_Array__push(s.tmp_0, "SOLID");
    r0 = pxsim_Array__push(s.tmp_0, "BLAME");
    r0 = pxsim_Array__push(s.tmp_0, "BORNE");
    r0 = pxsim_Array__push(s.tmp_0, "WAVES");
    r0 = pxsim_Array__push(s.tmp_0, "TOWNS");
    r0 = pxsim_Array__push(s.tmp_0, "CORPS");
    r0 = pxsim_Array__push(s.tmp_0, "SPEED");
    r0 = pxsim_Array__push(s.tmp_0, "GRANT");
    r0 = pxsim_Array__push(s.tmp_0, "FINDS");
    r0 = pxsim_Array__push(s.tmp_0, "BUILD");
    r0 = pxsim_Array__push(s.tmp_0, "COSTS");
    r0 = pxsim_Array__push(s.tmp_0, "ERROR");
    r0 = pxsim_Array__push(s.tmp_0, "CEASE");
    r0 = pxsim_Array__push(s.tmp_0, "BOATS");
    r0 = pxsim_Array__push(s.tmp_0, "MIXED");
    r0 = pxsim_Array__push(s.tmp_0, "DELAY");
    r0 = pxsim_Array__push(s.tmp_0, "AGENT");
    r0 = pxsim_Array__push(s.tmp_0, "CLOTH");
    r0 = pxsim_Array__push(s.tmp_0, "ISSUE");
    r0 = pxsim_Array__push(s.tmp_0, "CHARM");
    r0 = pxsim_Array__push(s.tmp_0, "TREAT");
    r0 = pxsim_Array__push(s.tmp_0, "FRAME");
    r0 = pxsim_Array__push(s.tmp_0, "SHEEP");
    r0 = pxsim_Array__push(s.tmp_0, "ALIKE");
    r0 = pxsim_Array__push(s.tmp_0, "PAUSE");
    r0 = pxsim_Array__push(s.tmp_0, "MERRY");
    r0 = pxsim_Array__push(s.tmp_0, "CRIES");
    r0 = pxsim_Array__push(s.tmp_0, "VAGUE");
    r0 = pxsim_Array__push(s.tmp_0, "TRACE");
    r0 = pxsim_Array__push(s.tmp_0, "VERSE");
    r0 = pxsim_Array__push(s.tmp_0, "FLAME");
    r0 = pxsim_Array__push(s.tmp_0, "IDEAL");
    r0 = pxsim_Array__push(s.tmp_0, "HASTE");
    r0 = pxsim_Array__push(s.tmp_0, "ROUTE");
    r0 = pxsim_Array__push(s.tmp_0, "DREAD");
    r0 = pxsim_Array__push(s.tmp_0, "EXIST");
    r0 = pxsim_Array__push(s.tmp_0, "OWING");
    r0 = pxsim_Array__push(s.tmp_0, "STERN");
    r0 = pxsim_Array__push(s.tmp_0, "SAINT");
    r0 = pxsim_Array__push(s.tmp_0, "SORTS");
    r0 = pxsim_Array__push(s.tmp_0, "FALLS");
    r0 = pxsim_Array__push(s.tmp_0, "YIELD");
    r0 = pxsim_Array__push(s.tmp_0, "OCCUR");
    r0 = pxsim_Array__push(s.tmp_0, "GATES");
    r0 = pxsim_Array__push(s.tmp_0, "BONES");
    r0 = pxsim_Array__push(s.tmp_0, "OCEAN");
    r0 = pxsim_Array__push(s.tmp_0, "SHAKE");
    r0 = pxsim_Array__push(s.tmp_0, "CARED");
    r0 = pxsim_Array__push(s.tmp_0, "STAFF");
    r0 = pxsim_Array__push(s.tmp_0, "HURRY");
    r0 = pxsim_Array__push(s.tmp_0, "BEAST");
    r0 = pxsim_Array__push(s.tmp_0, "LOFTY");
    r0 = pxsim_Array__push(s.tmp_0, "BLESS");
    r0 = pxsim_Array__push(s.tmp_0, "INNER");
    r0 = pxsim_Array__push(s.tmp_0, "SHONE");
    r0 = pxsim_Array__push(s.tmp_0, "DRANK");
    r0 = pxsim_Array__push(s.tmp_0, "NOTED");
    r0 = pxsim_Array__push(s.tmp_0, "WINDS");
    r0 = pxsim_Array__push(s.tmp_0, "CHEEK");
    r0 = pxsim_Array__push(s.tmp_0, "CHAIN");
    r0 = pxsim_Array__push(s.tmp_0, "KNIFE");
    r0 = pxsim_Array__push(s.tmp_0, "FEARS");
    r0 = pxsim_Array__push(s.tmp_0, "SWIFT");
    r0 = pxsim_Array__push(s.tmp_0, "WIVES");
    r0 = pxsim_Array__push(s.tmp_0, "WIDOW");
    r0 = pxsim_Array__push(s.tmp_0, "HATED");
    r0 = pxsim_Array__push(s.tmp_0, "HOLDS");
    r0 = pxsim_Array__push(s.tmp_0, "SIXTY");
    r0 = pxsim_Array__push(s.tmp_0, "MERIT");
    r0 = pxsim_Array__push(s.tmp_0, "GROSS");
    r0 = pxsim_Array__push(s.tmp_0, "DIESE");
    r0 = pxsim_Array__push(s.tmp_0, "ANGEL");
    r0 = pxsim_Array__push(s.tmp_0, "MARIE");
    r0 = pxsim_Array__push(s.tmp_0, "FEVER");
    r0 = pxsim_Array__push(s.tmp_0, "FIRED");
    r0 = pxsim_Array__push(s.tmp_0, "ROADS");
    r0 = pxsim_Array__push(s.tmp_0, "QUEER");
    r0 = pxsim_Array__push(s.tmp_0, "GIFTS");
    r0 = pxsim_Array__push(s.tmp_0, "SWEAR");
    r0 = pxsim_Array__push(s.tmp_0, "NURSE");
    r0 = pxsim_Array__push(s.tmp_0, "CABIN");
    r0 = pxsim_Array__push(s.tmp_0, "MARKS");
    r0 = pxsim_Array__push(s.tmp_0, "TRIBE");
    r0 = pxsim_Array__push(s.tmp_0, "ALOUD");
    r0 = pxsim_Array__push(s.tmp_0, "PAINS");
    r0 = pxsim_Array__push(s.tmp_0, "ALARM");
    r0 = pxsim_Array__push(s.tmp_0, "OUTER");
    r0 = pxsim_Array__push(s.tmp_0, "WALKS");
    r0 = pxsim_Array__push(s.tmp_0, "NAKED");
    r0 = pxsim_Array__push(s.tmp_0, "FOLKS");
    r0 = pxsim_Array__push(s.tmp_0, "ELDER");
    r0 = pxsim_Array__push(s.tmp_0, "POETS");
    r0 = pxsim_Array__push(s.tmp_0, "MATCH");
    r0 = pxsim_Array__push(s.tmp_0, "FOLLY");
    r0 = pxsim_Array__push(s.tmp_0, "WRATH");
    r0 = pxsim_Array__push(s.tmp_0, "DWELL");
    r0 = pxsim_Array__push(s.tmp_0, "SHOES");
    r0 = pxsim_Array__push(s.tmp_0, "SLAIN");
    r0 = pxsim_Array__push(s.tmp_0, "WAREN");
    r0 = pxsim_Array__push(s.tmp_0, "COACH");
    r0 = pxsim_Array__push(s.tmp_0, "ALICE");
    r0 = pxsim_Array__push(s.tmp_0, "TOWER");
    r0 = pxsim_Array__push(s.tmp_0, "DEEDS");
    r0 = pxsim_Array__push(s.tmp_0, "STEEL");
    r0 = pxsim_Array__push(s.tmp_0, "TRAIL");
    r0 = pxsim_Array__push(s.tmp_0, "DEPTH");
    r0 = pxsim_Array__push(s.tmp_0, "BEARS");
    r0 = pxsim_Array__push(s.tmp_0, "SHOCK");
    r0 = pxsim_Array__push(s.tmp_0, "GUEST");
    r0 = pxsim_Array__push(s.tmp_0, "PLATE");
    r0 = pxsim_Array__push(s.tmp_0, "FEELS");
    r0 = pxsim_Array__push(s.tmp_0, "CLERK");
    r0 = pxsim_Array__push(s.tmp_0, "STUFF");
    r0 = pxsim_Array__push(s.tmp_0, "TRACK");
    r0 = pxsim_Array__push(s.tmp_0, "POEMS");
    r0 = pxsim_Array__push(s.tmp_0, "PLAYS");
    r0 = pxsim_Array__push(s.tmp_0, "MAGIC");
    r0 = pxsim_Array__push(s.tmp_0, "KEEPS");
    r0 = pxsim_Array__push(s.tmp_0, "SONGS");
    r0 = pxsim_Array__push(s.tmp_0, "LEADS");
    r0 = pxsim_Array__push(s.tmp_0, "DRUNK");
    r0 = pxsim_Array__push(s.tmp_0, "AWAKE");
    r0 = pxsim_Array__push(s.tmp_0, "SHOOT");
    r0 = pxsim_Array__push(s.tmp_0, "SMELL");
    r0 = pxsim_Array__push(s.tmp_0, "ALTAR");
    r0 = pxsim_Array__push(s.tmp_0, "LIMBS");
    r0 = pxsim_Array__push(s.tmp_0, "EATEN");
    r0 = pxsim_Array__push(s.tmp_0, "TONES");
    r0 = pxsim_Array__push(s.tmp_0, "BASIS");
    r0 = pxsim_Array__push(s.tmp_0, "STEEP");
    r0 = pxsim_Array__push(s.tmp_0, "FEAST");
    r0 = pxsim_Array__push(s.tmp_0, "NOVEL");
    r0 = pxsim_Array__push(s.tmp_0, "SILLY");
    r0 = pxsim_Array__push(s.tmp_0, "GROWS");
    r0 = pxsim_Array__push(s.tmp_0, "BADLY");
    r0 = pxsim_Array__push(s.tmp_0, "STOUT");
    r0 = pxsim_Array__push(s.tmp_0, "RISEN");
    r0 = pxsim_Array__push(s.tmp_0, "CREPT");
    r0 = pxsim_Array__push(s.tmp_0, "SCALE");
    r0 = pxsim_Array__push(s.tmp_0, "RANKS");
    r0 = pxsim_Array__push(s.tmp_0, "FLASH");
    r0 = pxsim_Array__push(s.tmp_0, "BURNT");
    r0 = pxsim_Array__push(s.tmp_0, "RIVAL");
    r0 = pxsim_Array__push(s.tmp_0, "BRIDE");
    r0 = pxsim_Array__push(s.tmp_0, "TALES");
    r0 = pxsim_Array__push(s.tmp_0, "BOOTS");
    r0 = pxsim_Array__push(s.tmp_0, "CHEST");
    r0 = pxsim_Array__push(s.tmp_0, "SEATS");
    r0 = pxsim_Array__push(s.tmp_0, "GRAIN");
    r0 = pxsim_Array__push(s.tmp_0, "PRIZE");
    r0 = pxsim_Array__push(s.tmp_0, "FETCH");
    r0 = pxsim_Array__push(s.tmp_0, "DIRTY");
    r0 = pxsim_Array__push(s.tmp_0, "MOUNT");
    r0 = pxsim_Array__push(s.tmp_0, "CURSE");
    r0 = pxsim_Array__push(s.tmp_0, "STIFF");
    r0 = pxsim_Array__push(s.tmp_0, "BEARD");
    r0 = pxsim_Array__push(s.tmp_0, "BARON");
    r0 = pxsim_Array__push(s.tmp_0, "MODEL");
    r0 = pxsim_Array__push(s.tmp_0, "GRASP");
    r0 = pxsim_Array__push(s.tmp_0, "FIRES");
    r0 = pxsim_Array__push(s.tmp_0, "FLOOD");
    r0 = pxsim_Array__push(s.tmp_0, "FLOUR");
    r0 = pxsim_Array__push(s.tmp_0, "STOLE");
    r0 = pxsim_Array__push(s.tmp_0, "POUND");
    r0 = pxsim_Array__push(s.tmp_0, "SWUNG");
    r0 = pxsim_Array__push(s.tmp_0, "ALTER");
    r0 = pxsim_Array__push(s.tmp_0, "SHEET");
    r0 = pxsim_Array__push(s.tmp_0, "CENTS");
    r0 = pxsim_Array__push(s.tmp_0, "DWELT");
    r0 = pxsim_Array__push(s.tmp_0, "CLOAK");
    r0 = pxsim_Array__push(s.tmp_0, "ROSES");
    r0 = pxsim_Array__push(s.tmp_0, "ROOTS");
    r0 = pxsim_Array__push(s.tmp_0, "CLOCK");
    r0 = pxsim_Array__push(s.tmp_0, "SCORE");
    r0 = pxsim_Array__push(s.tmp_0, "GLOOM");
    r0 = pxsim_Array__push(s.tmp_0, "AGONY");
    r0 = pxsim_Array__push(s.tmp_0, "SEIZE");
    r0 = pxsim_Array__push(s.tmp_0, "PIOUS");
    r0 = pxsim_Array__push(s.tmp_0, "WAGES");
    r0 = pxsim_Array__push(s.tmp_0, "BLOWS");
    r0 = pxsim_Array__push(s.tmp_0, "WHEEL");
    r0 = pxsim_Array__push(s.tmp_0, "CARES");
    r0 = pxsim_Array__push(s.tmp_0, "VITAL");
    r0 = pxsim_Array__push(s.tmp_0, "RISES");
    r0 = pxsim_Array__push(s.tmp_0, "OWNED");
    r0 = pxsim_Array__push(s.tmp_0, "SCORN");
    r0 = pxsim_Array__push(s.tmp_0, "METAL");
    r0 = pxsim_Array__push(s.tmp_0, "ABIDE");
    r0 = pxsim_Array__push(s.tmp_0, "JONES");
    r0 = pxsim_Array__push(s.tmp_0, "STUCK");
    r0 = pxsim_Array__push(s.tmp_0, "SHOUT");
    r0 = pxsim_Array__push(s.tmp_0, "PAINT");
    r0 = pxsim_Array__push(s.tmp_0, "DRIED");
    r0 = pxsim_Array__push(s.tmp_0, "AMPLE");
    r0 = pxsim_Array__push(s.tmp_0, "RUINS");
    r0 = pxsim_Array__push(s.tmp_0, "MAYBE");
    r0 = pxsim_Array__push(s.tmp_0, "SIEGE");
    r0 = pxsim_Array__push(s.tmp_0, "STEAM");
    r0 = pxsim_Array__push(s.tmp_0, "TRICK");
    r0 = pxsim_Array__push(s.tmp_0, "TYPES");
    r0 = pxsim_Array__push(s.tmp_0, "SHELL");
    r0 = pxsim_Array__push(s.tmp_0, "REFER");
    r0 = pxsim_Array__push(s.tmp_0, "GIANT");
    r0 = pxsim_Array__push(s.tmp_0, "LORDS");
    r0 = pxsim_Array__push(s.tmp_0, "FIFTH");
    r0 = pxsim_Array__push(s.tmp_0, "FACED");
    r0 = pxsim_Array__push(s.tmp_0, "DATES");
    r0 = pxsim_Array__push(s.tmp_0, "HOMES");
    r0 = pxsim_Array__push(s.tmp_0, "LINEN");
    r0 = pxsim_Array__push(s.tmp_0, "VIVID");
    r0 = pxsim_Array__push(s.tmp_0, "STRAW");
    r0 = pxsim_Array__push(s.tmp_0, "BRASS");
    r0 = pxsim_Array__push(s.tmp_0, "NAVAL");
    r0 = pxsim_Array__push(s.tmp_0, "MADAM");
    r0 = pxsim_Array__push(s.tmp_0, "BONNE");
    r0 = pxsim_Array__push(s.tmp_0, "FADED");
    r0 = pxsim_Array__push(s.tmp_0, "SPORT");
    r0 = pxsim_Array__push(s.tmp_0, "DROPS");
    r0 = pxsim_Array__push(s.tmp_0, "DINED");
    r0 = pxsim_Array__push(s.tmp_0, "BEACH");
    r0 = pxsim_Array__push(s.tmp_0, "LOYAL");
    r0 = pxsim_Array__push(s.tmp_0, "LIKES");
    r0 = pxsim_Array__push(s.tmp_0, "CARDS");
    r0 = pxsim_Array__push(s.tmp_0, "RACES");
    r0 = pxsim_Array__push(s.tmp_0, "CHEAP");
    r0 = pxsim_Array__push(s.tmp_0, "TRUNK");
    r0 = pxsim_Array__push(s.tmp_0, "CHEER");
    r0 = pxsim_Array__push(s.tmp_0, "JOINT");
    r0 = pxsim_Array__push(s.tmp_0, "SPELL");
    r0 = pxsim_Array__push(s.tmp_0, "ABODE");
    r0 = pxsim_Array__push(s.tmp_0, "WAVED");
    r0 = pxsim_Array__push(s.tmp_0, "DRAMA");
    r0 = pxsim_Array__push(s.tmp_0, "ARRAY");
    r0 = pxsim_Array__push(s.tmp_0, "CRAFT");
    r0 = pxsim_Array__push(s.tmp_0, "CANOE");
    r0 = pxsim_Array__push(s.tmp_0, "RIFLE");
    r0 = pxsim_Array__push(s.tmp_0, "CODES");
    r0 = pxsim_Array__push(s.tmp_0, "FIERY");
    r0 = pxsim_Array__push(s.tmp_0, "TAXES");
    r0 = pxsim_Array__push(s.tmp_0, "AWOKE");
    r0 = pxsim_Array__push(s.tmp_0, "LIMIT");
    r0 = pxsim_Array__push(s.tmp_0, "ASHES");
    r0 = pxsim_Array__push(s.tmp_0, "JACOB");
    r0 = pxsim_Array__push(s.tmp_0, "GHOST");
    r0 = pxsim_Array__push(s.tmp_0, "BELLS");
    r0 = pxsim_Array__push(s.tmp_0, "STEAL");
    r0 = pxsim_Array__push(s.tmp_0, "CLIMB");
    r0 = pxsim_Array__push(s.tmp_0, "HEELS");
    r0 = pxsim_Array__push(s.tmp_0, "SOBER");
    r0 = pxsim_Array__push(s.tmp_0, "HARSH");
    r0 = pxsim_Array__push(s.tmp_0, "SHINE");
    r0 = pxsim_Array__push(s.tmp_0, "KNOCK");
    r0 = pxsim_Array__push(s.tmp_0, "VIRUS");
    r0 = pxsim_Array__push(s.tmp_0, "DEALT");
    r0 = pxsim_Array__push(s.tmp_0, "MINOR");
    r0 = pxsim_Array__push(s.tmp_0, "SLOPE");
    r0 = pxsim_Array__push(s.tmp_0, "HUMOR");
    r0 = pxsim_Array__push(s.tmp_0, "BENCH");
    r0 = pxsim_Array__push(s.tmp_0, "WHEAT");
    r0 = pxsim_Array__push(s.tmp_0, "MAMMA");
    r0 = pxsim_Array__push(s.tmp_0, "PIANO");
    r0 = pxsim_Array__push(s.tmp_0, "FUNNY");
    r0 = pxsim_Array__push(s.tmp_0, "ROCKY");
    r0 = pxsim_Array__push(s.tmp_0, "SWEEP");
    r0 = pxsim_Array__push(s.tmp_0, "SADLY");
    r0 = pxsim_Array__push(s.tmp_0, "ERECT");
    r0 = pxsim_Array__push(s.tmp_0, "BELLE");
    r0 = pxsim_Array__push(s.tmp_0, "PURSE");
    r0 = pxsim_Array__push(s.tmp_0, "PARCE");
    r0 = pxsim_Array__push(s.tmp_0, "CLUNG");
    r0 = pxsim_Array__push(s.tmp_0, "SWORE");
    r0 = pxsim_Array__push(s.tmp_0, "FENCE");
    r0 = pxsim_Array__push(s.tmp_0, "WORRY");
    r0 = pxsim_Array__push(s.tmp_0, "SUITE");
    r0 = pxsim_Array__push(s.tmp_0, "WAGON");
    r0 = pxsim_Array__push(s.tmp_0, "POLLY");
    r0 = pxsim_Array__push(s.tmp_0, "EVILS");
    r0 = pxsim_Array__push(s.tmp_0, "PETTY");
    r0 = pxsim_Array__push(s.tmp_0, "BANDS");
    r0 = pxsim_Array__push(s.tmp_0, "CHASE");
    r0 = pxsim_Array__push(s.tmp_0, "GLEAM");
    r0 = pxsim_Array__push(s.tmp_0, "UNITY");
    r0 = pxsim_Array__push(s.tmp_0, "HASTY");
    r0 = pxsim_Array__push(s.tmp_0, "ACRES");
    r0 = pxsim_Array__push(s.tmp_0, "MAINS");
    r0 = pxsim_Array__push(s.tmp_0, "LUCKY");
    r0 = pxsim_Array__push(s.tmp_0, "PERIL");
    r0 = pxsim_Array__push(s.tmp_0, "ADAMS");
    r0 = pxsim_Array__push(s.tmp_0, "HIRED");
    r0 = pxsim_Array__push(s.tmp_0, "FILED");
    r0 = pxsim_Array__push(s.tmp_0, "EXTRA");
    r0 = pxsim_Array__push(s.tmp_0, "FLIES");
    r0 = pxsim_Array__push(s.tmp_0, "TIGHT");
    r0 = pxsim_Array__push(s.tmp_0, "BLANK");
    r0 = pxsim_Array__push(s.tmp_0, "SEEDS");
    r0 = pxsim_Array__push(s.tmp_0, "FAIRY");
    r0 = pxsim_Array__push(s.tmp_0, "SITES");
    r0 = pxsim_Array__push(s.tmp_0, "SMART");
    r0 = pxsim_Array__push(s.tmp_0, "SHIRT");
    r0 = pxsim_Array__push(s.tmp_0, "ELECT");
    r0 = pxsim_Array__push(s.tmp_0, "SPOIL");
    r0 = pxsim_Array__push(s.tmp_0, "GUILT");
    r0 = pxsim_Array__push(s.tmp_0, "ADOPT");
    r0 = pxsim_Array__push(s.tmp_0, "BILLS");
    r0 = pxsim_Array__push(s.tmp_0, "HOLES");
    r0 = pxsim_Array__push(s.tmp_0, "SAILS");
    r0 = pxsim_Array__push(s.tmp_0, "RINGS");
    r0 = pxsim_Array__push(s.tmp_0, "EDITH");
    r0 = pxsim_Array__push(s.tmp_0, "FANNY");
    r0 = pxsim_Array__push(s.tmp_0, "BLOWN");
    r0 = pxsim_Array__push(s.tmp_0, "RIDGE");
    r0 = pxsim_Array__push(s.tmp_0, "DENSE");
    r0 = pxsim_Array__push(s.tmp_0, "TODAY");
    r0 = pxsim_Array__push(s.tmp_0, "SHEER");
    r0 = pxsim_Array__push(s.tmp_0, "ABUSE");
    r0 = pxsim_Array__push(s.tmp_0, "QUOTH");
    r0 = pxsim_Array__push(s.tmp_0, "LUNCH");
    r0 = pxsim_Array__push(s.tmp_0, "NIECE");
    r0 = pxsim_Array__push(s.tmp_0, "TIMID");
    r0 = pxsim_Array__push(s.tmp_0, "MANLY");
    r0 = pxsim_Array__push(s.tmp_0, "SWORN");
    r0 = pxsim_Array__push(s.tmp_0, "PRIME");
    r0 = pxsim_Array__push(s.tmp_0, "PROSE");
    r0 = pxsim_Array__push(s.tmp_0, "BOXES");
    r0 = pxsim_Array__push(s.tmp_0, "VILLE");
    r0 = pxsim_Array__push(s.tmp_0, "CREEK");
    r0 = pxsim_Array__push(s.tmp_0, "ORGAN");
    r0 = pxsim_Array__push(s.tmp_0, "BRUSH");
    r0 = pxsim_Array__push(s.tmp_0, "OPERA");
    r0 = pxsim_Array__push(s.tmp_0, "FLOCK");
    r0 = pxsim_Array__push(s.tmp_0, "BOAST");
    r0 = pxsim_Array__push(s.tmp_0, "PITCH");
    r0 = pxsim_Array__push(s.tmp_0, "ANGLE");
    r0 = pxsim_Array__push(s.tmp_0, "SUNNY");
    r0 = pxsim_Array__push(s.tmp_0, "AUGHT");
    r0 = pxsim_Array__push(s.tmp_0, "FOOLS");
    r0 = pxsim_Array__push(s.tmp_0, "SWAMP");
    r0 = pxsim_Array__push(s.tmp_0, "VEINS");
    r0 = pxsim_Array__push(s.tmp_0, "NEWLY");
    r0 = pxsim_Array__push(s.tmp_0, "COUCH");
    r0 = pxsim_Array__push(s.tmp_0, "JOLLY");
    r0 = pxsim_Array__push(s.tmp_0, "OPENS");
    r0 = pxsim_Array__push(s.tmp_0, "SPEAR");
    r0 = pxsim_Array__push(s.tmp_0, "BRICK");
    r0 = pxsim_Array__push(s.tmp_0, "CREAM");
    r0 = pxsim_Array__push(s.tmp_0, "THIEF");
    r0 = pxsim_Array__push(s.tmp_0, "WAIST");
    r0 = pxsim_Array__push(s.tmp_0, "RULED");
    r0 = pxsim_Array__push(s.tmp_0, "KNELT");
    r0 = pxsim_Array__push(s.tmp_0, "BRUTE");
    r0 = pxsim_Array__push(s.tmp_0, "SENDS");
    r0 = pxsim_Array__push(s.tmp_0, "MINES");
    r0 = pxsim_Array__push(s.tmp_0, "DATED");
    r0 = pxsim_Array__push(s.tmp_0, "PATHS");
    r0 = pxsim_Array__push(s.tmp_0, "MOVES");
    r0 = pxsim_Array__push(s.tmp_0, "SHOPS");
    r0 = pxsim_Array__push(s.tmp_0, "PORCH");
    r0 = pxsim_Array__push(s.tmp_0, "TENTS");
    r0 = pxsim_Array__push(s.tmp_0, "BACKS");
    r0 = pxsim_Array__push(s.tmp_0, "KITTY");
    r0 = pxsim_Array__push(s.tmp_0, "SANDY");
    r0 = pxsim_Array__push(s.tmp_0, "PUPIL");
    r0 = pxsim_Array__push(s.tmp_0, "LODGE");
    r0 = pxsim_Array__push(s.tmp_0, "BLOOM");
    r0 = pxsim_Array__push(s.tmp_0, "BONDS");
    r0 = pxsim_Array__push(s.tmp_0, "BLOCK");
    r0 = pxsim_Array__push(s.tmp_0, "SWELL");
    r0 = pxsim_Array__push(s.tmp_0, "RIGID");
    r0 = pxsim_Array__push(s.tmp_0, "GAMES");
    r0 = pxsim_Array__push(s.tmp_0, "DEBTS");
    r0 = pxsim_Array__push(s.tmp_0, "SPOTS");
    r0 = pxsim_Array__push(s.tmp_0, "SCENT");
    r0 = pxsim_Array__push(s.tmp_0, "CIGAR");
    r0 = pxsim_Array__push(s.tmp_0, "ENTRY");
    r0 = pxsim_Array__push(s.tmp_0, "AVAIL");
    r0 = pxsim_Array__push(s.tmp_0, "TREAD");
    r0 = pxsim_Array__push(s.tmp_0, "WIDER");
    r0 = pxsim_Array__push(s.tmp_0, "CHILL");
    r0 = pxsim_Array__push(s.tmp_0, "BROOK");
    r0 = pxsim_Array__push(s.tmp_0, "AMUSE");
    r0 = pxsim_Array__push(s.tmp_0, "ALLEN");
    r0 = pxsim_Array__push(s.tmp_0, "VEXED");
    r0 = pxsim_Array__push(s.tmp_0, "BALLS");
    r0 = pxsim_Array__push(s.tmp_0, "CROPS");
    r0 = pxsim_Array__push(s.tmp_0, "REALM");
    r0 = pxsim_Array__push(s.tmp_0, "MONKS");
    r0 = pxsim_Array__push(s.tmp_0, "REBEL");
    r0 = pxsim_Array__push(s.tmp_0, "WALES");
    r0 = pxsim_Array__push(s.tmp_0, "LAMPS");
    r0 = pxsim_Array__push(s.tmp_0, "EXILE");
    r0 = pxsim_Array__push(s.tmp_0, "HEARS");
    r0 = pxsim_Array__push(s.tmp_0, "UNITE");
    r0 = pxsim_Array__push(s.tmp_0, "ROBES");
    r0 = pxsim_Array__push(s.tmp_0, "SKIES");
    r0 = pxsim_Array__push(s.tmp_0, "SIXTH");
    r0 = pxsim_Array__push(s.tmp_0, "CRAZY");
    r0 = pxsim_Array__push(s.tmp_0, "ISAAC");
    r0 = pxsim_Array__push(s.tmp_0, "RULER");
    r0 = pxsim_Array__push(s.tmp_0, "WRECK");
    r0 = pxsim_Array__push(s.tmp_0, "DRAWS");
    r0 = pxsim_Array__push(s.tmp_0, "ARROW");
    r0 = pxsim_Array__push(s.tmp_0, "STARE");
    r0 = pxsim_Array__push(s.tmp_0, "BLUSH");
    r0 = pxsim_Array__push(s.tmp_0, "PRIOR");
    r0 = pxsim_Array__push(s.tmp_0, "VOTES");
    r0 = pxsim_Array__push(s.tmp_0, "THEME");
    r0 = pxsim_Array__push(s.tmp_0, "FINER");
    r0 = pxsim_Array__push(s.tmp_0, "NERVE");
    r0 = pxsim_Array__push(s.tmp_0, "APPLE");
    r0 = pxsim_Array__push(s.tmp_0, "RESTS");
    r0 = pxsim_Array__push(s.tmp_0, "PENNY");
    r0 = pxsim_Array__push(s.tmp_0, "STAKE");
    r0 = pxsim_Array__push(s.tmp_0, "BROWS");
    r0 = pxsim_Array__push(s.tmp_0, "READS");
    r0 = pxsim_Array__push(s.tmp_0, "BUNCH");
    r0 = pxsim_Array__push(s.tmp_0, "TOKEN");
    r0 = pxsim_Array__push(s.tmp_0, "TALKS");
    r0 = pxsim_Array__push(s.tmp_0, "WISER");
    r0 = pxsim_Array__push(s.tmp_0, "HORNS");
    r0 = pxsim_Array__push(s.tmp_0, "BLAZE");
    r0 = pxsim_Array__push(s.tmp_0, "CLIFF");
    r0 = pxsim_Array__push(s.tmp_0, "STRIP");
    r0 = pxsim_Array__push(s.tmp_0, "TEXTS");
    r0 = pxsim_Array__push(s.tmp_0, "AWAIT");
    r0 = pxsim_Array__push(s.tmp_0, "ELBOW");
    r0 = pxsim_Array__push(s.tmp_0, "GLOBE");
    r0 = pxsim_Array__push(s.tmp_0, "FLUSH");
    r0 = pxsim_Array__push(s.tmp_0, "UPSET");
    r0 = pxsim_Array__push(s.tmp_0, "GENUS");
    r0 = pxsim_Array__push(s.tmp_0, "LOCKS");
    r0 = pxsim_Array__push(s.tmp_0, "HONEY");
    r0 = pxsim_Array__push(s.tmp_0, "CARGO");
    r0 = pxsim_Array__push(s.tmp_0, "STOVE");
    r0 = pxsim_Array__push(s.tmp_0, "CANAL");
    r0 = pxsim_Array__push(s.tmp_0, "CRACK");
    r0 = pxsim_Array__push(s.tmp_0, "POSTS");
    r0 = pxsim_Array__push(s.tmp_0, "PIETY");
    r0 = pxsim_Array__push(s.tmp_0, "LADEN");
    r0 = pxsim_Array__push(s.tmp_0, "BLADE");
    r0 = pxsim_Array__push(s.tmp_0, "LINED");
    r0 = pxsim_Array__push(s.tmp_0, "NOISY");
    r0 = pxsim_Array__push(s.tmp_0, "DRIFT");
    r0 = pxsim_Array__push(s.tmp_0, "DECAY");
    r0 = pxsim_Array__push(s.tmp_0, "FUNDS");
    r0 = pxsim_Array__push(s.tmp_0, "MIRTH");
    r0 = pxsim_Array__push(s.tmp_0, "TOOLS");
    r0 = pxsim_Array__push(s.tmp_0, "ACUTE");
    r0 = pxsim_Array__push(s.tmp_0, "PACES");
    r0 = pxsim_Array__push(s.tmp_0, "SPLIT");
    r0 = pxsim_Array__push(s.tmp_0, "BREED");
    r0 = pxsim_Array__push(s.tmp_0, "JUICE");
    r0 = pxsim_Array__push(s.tmp_0, "FREED");
    r0 = pxsim_Array__push(s.tmp_0, "FAILS");
    r0 = pxsim_Array__push(s.tmp_0, "PORTS");
    r0 = pxsim_Array__push(s.tmp_0, "BLISS");
    r0 = pxsim_Array__push(s.tmp_0, "USAGE");
    r0 = pxsim_Array__push(s.tmp_0, "PILED");
    r0 = pxsim_Array__push(s.tmp_0, "RATES");
    r0 = pxsim_Array__push(s.tmp_0, "AIDED");
    r0 = pxsim_Array__push(s.tmp_0, "WIPED");
    r0 = pxsim_Array__push(s.tmp_0, "STAMP");
    r0 = pxsim_Array__push(s.tmp_0, "VICES");
    r0 = pxsim_Array__push(s.tmp_0, "TROOP");
    r0 = pxsim_Array__push(s.tmp_0, "BLAST");
    r0 = pxsim_Array__push(s.tmp_0, "MOTOR");
    r0 = pxsim_Array__push(s.tmp_0, "RURAL");
    r0 = pxsim_Array__push(s.tmp_0, "WEARS");
    r0 = pxsim_Array__push(s.tmp_0, "CREED");
    r0 = pxsim_Array__push(s.tmp_0, "VOTED");
    r0 = pxsim_Array__push(s.tmp_0, "GLARE");
    r0 = pxsim_Array__push(s.tmp_0, "SKINS");
    r0 = pxsim_Array__push(s.tmp_0, "SHAFT");
    r0 = pxsim_Array__push(s.tmp_0, "QUOTE");
    r0 = pxsim_Array__push(s.tmp_0, "PLEAD");
    r0 = pxsim_Array__push(s.tmp_0, "ITEMS");
    r0 = pxsim_Array__push(s.tmp_0, "SWING");
    r0 = pxsim_Array__push(s.tmp_0, "SEEKS");
    r0 = pxsim_Array__push(s.tmp_0, "CREST");
    r0 = pxsim_Array__push(s.tmp_0, "BASIN");
    r0 = pxsim_Array__push(s.tmp_0, "LAKES");
    r0 = pxsim_Array__push(s.tmp_0, "SNAKE");
    r0 = pxsim_Array__push(s.tmp_0, "SALES");
    r0 = pxsim_Array__push(s.tmp_0, "DUSTY");
    r0 = pxsim_Array__push(s.tmp_0, "CRUSH");
    r0 = pxsim_Array__push(s.tmp_0, "MEETS");
    r0 = pxsim_Array__push(s.tmp_0, "TENTH");
    r0 = pxsim_Array__push(s.tmp_0, "MEALS");
    r0 = pxsim_Array__push(s.tmp_0, "GROVE");
    r0 = pxsim_Array__push(s.tmp_0, "SUITS");
    r0 = pxsim_Array__push(s.tmp_0, "SMOTE");
    r0 = pxsim_Array__push(s.tmp_0, "LANGE");
    r0 = pxsim_Array__push(s.tmp_0, "ACTOR");
    r0 = pxsim_Array__push(s.tmp_0, "ARGUE");
    r0 = pxsim_Array__push(s.tmp_0, "FLOWS");
    r0 = pxsim_Array__push(s.tmp_0, "DIMLY");
    r0 = pxsim_Array__push(s.tmp_0, "REEDS");
    r0 = pxsim_Array__push(s.tmp_0, "PLANE");
    r0 = pxsim_Array__push(s.tmp_0, "GREET");
    r0 = pxsim_Array__push(s.tmp_0, "SWEAT");
    r0 = pxsim_Array__push(s.tmp_0, "ROOFS");
    r0 = pxsim_Array__push(s.tmp_0, "BEAMS");
    r0 = pxsim_Array__push(s.tmp_0, "PILOT");
    r0 = pxsim_Array__push(s.tmp_0, "FROST");
    r0 = pxsim_Array__push(s.tmp_0, "CELLS");
    r0 = pxsim_Array__push(s.tmp_0, "PIPES");
    r0 = pxsim_Array__push(s.tmp_0, "QUEST");
    r0 = pxsim_Array__push(s.tmp_0, "FOLDS");
    r0 = pxsim_Array__push(s.tmp_0, "CURED");
    r0 = pxsim_Array__push(s.tmp_0, "MAIDS");
    r0 = pxsim_Array__push(s.tmp_0, "MULES");
    r0 = pxsim_Array__push(s.tmp_0, "REINS");
    r0 = pxsim_Array__push(s.tmp_0, "SALON");
    r0 = pxsim_Array__push(s.tmp_0, "ALERT");
    r0 = pxsim_Array__push(s.tmp_0, "RENEW");
    r0 = pxsim_Array__push(s.tmp_0, "EDGES");
    r0 = pxsim_Array__push(s.tmp_0, "PATCH");
    r0 = pxsim_Array__push(s.tmp_0, "ALOFT");
    r0 = pxsim_Array__push(s.tmp_0, "CRUDE");
    r0 = pxsim_Array__push(s.tmp_0, "AIMED");
    r0 = pxsim_Array__push(s.tmp_0, "NAILS");
    r0 = pxsim_Array__push(s.tmp_0, "VIGOR");
    r0 = pxsim_Array__push(s.tmp_0, "TRIES");
    r0 = pxsim_Array__push(s.tmp_0, "FLANK");
    r0 = pxsim_Array__push(s.tmp_0, "TRACT");
    r0 = pxsim_Array__push(s.tmp_0, "VERGE");
    r0 = pxsim_Array__push(s.tmp_0, "TRAMP");
    r0 = pxsim_Array__push(s.tmp_0, "IVORY");
    r0 = pxsim_Array__push(s.tmp_0, "CRASH");
    r0 = pxsim_Array__push(s.tmp_0, "CURVE");
    r0 = pxsim_Array__push(s.tmp_0, "CAKES");
    r0 = pxsim_Array__push(s.tmp_0, "EAGLE");
    r0 = pxsim_Array__push(s.tmp_0, "HEDGE");
    r0 = pxsim_Array__push(s.tmp_0, "RITES");
    r0 = pxsim_Array__push(s.tmp_0, "LOGIC");
    r0 = pxsim_Array__push(s.tmp_0, "CLARK");
    r0 = pxsim_Array__push(s.tmp_0, "SPARK");
    r0 = pxsim_Array__push(s.tmp_0, "SINGS");
    r0 = pxsim_Array__push(s.tmp_0, "EPOCH");
    r0 = pxsim_Array__push(s.tmp_0, "MAYOR");
    r0 = pxsim_Array__push(s.tmp_0, "WEIGH");
    r0 = pxsim_Array__push(s.tmp_0, "ABBEY");
    r0 = pxsim_Array__push(s.tmp_0, "KEITH");
    r0 = pxsim_Array__push(s.tmp_0, "ESSAY");
    r0 = pxsim_Array__push(s.tmp_0, "VALET");
    r0 = pxsim_Array__push(s.tmp_0, "HOSTS");
    r0 = pxsim_Array__push(s.tmp_0, "HANGS");
    r0 = pxsim_Array__push(s.tmp_0, "COMIC");
    r0 = pxsim_Array__push(s.tmp_0, "PANIC");
    r0 = pxsim_Array__push(s.tmp_0, "PEDRO");
    r0 = pxsim_Array__push(s.tmp_0, "COATS");
    r0 = pxsim_Array__push(s.tmp_0, "SCOPE");
    r0 = pxsim_Array__push(s.tmp_0, "FRAIL");
    r0 = pxsim_Array__push(s.tmp_0, "GOALS");
    r0 = pxsim_Array__push(s.tmp_0, "MODES");
    r0 = pxsim_Array__push(s.tmp_0, "SKULL");
    r0 = pxsim_Array__push(s.tmp_0, "FLOAT");
    r0 = pxsim_Array__push(s.tmp_0, "PULSE");
    r0 = pxsim_Array__push(s.tmp_0, "LOSES");
    r0 = pxsim_Array__push(s.tmp_0, "TOPIC");
    r0 = pxsim_Array__push(s.tmp_0, "TIGER");
    r0 = pxsim_Array__push(s.tmp_0, "FEWER");
    r0 = pxsim_Array__push(s.tmp_0, "PINES");
    r0 = pxsim_Array__push(s.tmp_0, "SHIFT");
    r0 = pxsim_Array__push(s.tmp_0, "HEAPS");
    r0 = pxsim_Array__push(s.tmp_0, "VIENT");
    r0 = pxsim_Array__push(s.tmp_0, "FILLS");
    r0 = pxsim_Array__push(s.tmp_0, "FORTS");
    r0 = pxsim_Array__push(s.tmp_0, "LIONS");
    r0 = pxsim_Array__push(s.tmp_0, "LUNGS");
    r0 = pxsim_Array__push(s.tmp_0, "SANDS");
    r0 = pxsim_Array__push(s.tmp_0, "PHASE");
    r0 = pxsim_Array__push(s.tmp_0, "HALLS");
    r0 = pxsim_Array__push(s.tmp_0, "ROUSE");
    r0 = pxsim_Array__push(s.tmp_0, "DAISY");
    r0 = pxsim_Array__push(s.tmp_0, "FARMS");
    r0 = pxsim_Array__push(s.tmp_0, "SKIRT");
    r0 = pxsim_Array__push(s.tmp_0, "SATIN");
    r0 = pxsim_Array__push(s.tmp_0, "RAINS");
    r0 = pxsim_Array__push(s.tmp_0, "HINTS");
    r0 = pxsim_Array__push(s.tmp_0, "CABLE");
    r0 = pxsim_Array__push(s.tmp_0, "GARDE");
    r0 = pxsim_Array__push(s.tmp_0, "THUMB");
    r0 = pxsim_Array__push(s.tmp_0, "QUART");
    r0 = pxsim_Array__push(s.tmp_0, "HARDY");
    r0 = pxsim_Array__push(s.tmp_0, "POLES");
    r0 = pxsim_Array__push(s.tmp_0, "GROAN");
    r0 = pxsim_Array__push(s.tmp_0, "ROPES");
    r0 = pxsim_Array__push(s.tmp_0, "MOULD");
    r0 = pxsim_Array__push(s.tmp_0, "ROLLS");
    r0 = pxsim_Array__push(s.tmp_0, "BACON");
    r0 = pxsim_Array__push(s.tmp_0, "MOIST");
    r0 = pxsim_Array__push(s.tmp_0, "FLING");
    r0 = pxsim_Array__push(s.tmp_0, "LANCE");
    r0 = pxsim_Array__push(s.tmp_0, "SHELF");
    r0 = pxsim_Array__push(s.tmp_0, "MALES");
    r0 = pxsim_Array__push(s.tmp_0, "PLUCK");
    r0 = pxsim_Array__push(s.tmp_0, "SHOTS");
    r0 = pxsim_Array__push(s.tmp_0, "STOPS");
    r0 = pxsim_Array__push(s.tmp_0, "ALIEN");
    r0 = pxsim_Array__push(s.tmp_0, "FRAUD");
    r0 = pxsim_Array__push(s.tmp_0, "CLUBS");
    r0 = pxsim_Array__push(s.tmp_0, "CREEP");
    r0 = pxsim_Array__push(s.tmp_0, "TILDE");
    r0 = pxsim_Array__push(s.tmp_0, "SHAWL");
    r0 = pxsim_Array__push(s.tmp_0, "FROWN");
    r0 = pxsim_Array__push(s.tmp_0, "SNOWY");
    r0 = pxsim_Array__push(s.tmp_0, "LISTS");
    r0 = pxsim_Array__push(s.tmp_0, "STONY");
    r0 = pxsim_Array__push(s.tmp_0, "FLAGS");
    r0 = pxsim_Array__push(s.tmp_0, "BORED");
    r0 = pxsim_Array__push(s.tmp_0, "CURLS");
    r0 = pxsim_Array__push(s.tmp_0, "STAID");
    r0 = pxsim_Array__push(s.tmp_0, "TOUGH");
    r0 = pxsim_Array__push(s.tmp_0, "CHOIR");
    r0 = pxsim_Array__push(s.tmp_0, "DITCH");
    r0 = pxsim_Array__push(s.tmp_0, "WITCH");
    r0 = pxsim_Array__push(s.tmp_0, "RIDER");
    r0 = pxsim_Array__push(s.tmp_0, "MASON");
    r0 = pxsim_Array__push(s.tmp_0, "WEEDS");
    r0 = pxsim_Array__push(s.tmp_0, "TENDS");
    r0 = pxsim_Array__push(s.tmp_0, "PALMS");
    r0 = pxsim_Array__push(s.tmp_0, "FLUID");
    r0 = pxsim_Array__push(s.tmp_0, "VILLA");
    r0 = pxsim_Array__push(s.tmp_0, "SAUCE");
    r0 = pxsim_Array__push(s.tmp_0, "PAVED");
    r0 = pxsim_Array__push(s.tmp_0, "MUDDY");
    r0 = pxsim_Array__push(s.tmp_0, "SEXES");
    r0 = pxsim_Array__push(s.tmp_0, "USERS");
    r0 = pxsim_Array__push(s.tmp_0, "STRAY");
    r0 = pxsim_Array__push(s.tmp_0, "OATHS");
    r0 = pxsim_Array__push(s.tmp_0, "WIDTH");
    r0 = pxsim_Array__push(s.tmp_0, "STAIN");
    r0 = pxsim_Array__push(s.tmp_0, "STEED");
    r0 = pxsim_Array__push(s.tmp_0, "UNFIT");
    r0 = pxsim_Array__push(s.tmp_0, "BEADS");
    r0 = pxsim_Array__push(s.tmp_0, "HERDS");
    r0 = pxsim_Array__push(s.tmp_0, "VINES");
    r0 = pxsim_Array__push(s.tmp_0, "GORGE");
    r0 = pxsim_Array__push(s.tmp_0, "DEMON");
    r0 = pxsim_Array__push(s.tmp_0, "CANON");
    r0 = pxsim_Array__push(s.tmp_0, "BRISK");
    r0 = pxsim_Array__push(s.tmp_0, "TUTOR");
    r0 = pxsim_Array__push(s.tmp_0, "SIGHS");
    r0 = pxsim_Array__push(s.tmp_0, "RAINY");
    r0 = pxsim_Array__push(s.tmp_0, "HELPS");
    r0 = pxsim_Array__push(s.tmp_0, "GRADE");
    r0 = pxsim_Array__push(s.tmp_0, "PEAKS");
    r0 = pxsim_Array__push(s.tmp_0, "FLORA");
    r0 = pxsim_Array__push(s.tmp_0, "APRON");
    r0 = pxsim_Array__push(s.tmp_0, "COINS");
    r0 = pxsim_Array__push(s.tmp_0, "CITED");
    r0 = pxsim_Array__push(s.tmp_0, "HOOFS");
    r0 = pxsim_Array__push(s.tmp_0, "PAIRS");
    r0 = pxsim_Array__push(s.tmp_0, "VOWED");
    r0 = pxsim_Array__push(s.tmp_0, "WEIRD");
    r0 = pxsim_Array__push(s.tmp_0, "IRONY");
    r0 = pxsim_Array__push(s.tmp_0, "BEANS");
    r0 = pxsim_Array__push(s.tmp_0, "CLING");
    r0 = pxsim_Array__push(s.tmp_0, "LAPSE");
    r0 = pxsim_Array__push(s.tmp_0, "GAILY");
    r0 = pxsim_Array__push(s.tmp_0, "DUSKY");
    r0 = pxsim_Array__push(s.tmp_0, "WITTY");
    r0 = pxsim_Array__push(s.tmp_0, "WRIST");
    r0 = pxsim_Array__push(s.tmp_0, "TORCH");
    r0 = pxsim_Array__push(s.tmp_0, "SHADY");
    r0 = pxsim_Array__push(s.tmp_0, "BESET");
    r0 = pxsim_Array__push(s.tmp_0, "COUPS");
    r0 = pxsim_Array__push(s.tmp_0, "TRUCE");
    r0 = pxsim_Array__push(s.tmp_0, "GOATS");
    r0 = pxsim_Array__push(s.tmp_0, "VAULT");
    r0 = pxsim_Array__push(s.tmp_0, "SPURS");
    r0 = pxsim_Array__push(s.tmp_0, "GAINS");
    r0 = pxsim_Array__push(s.tmp_0, "TOAST");
    r0 = pxsim_Array__push(s.tmp_0, "LAYER");
    r0 = pxsim_Array__push(s.tmp_0, "ARMOR");
    r0 = pxsim_Array__push(s.tmp_0, "MOODS");
    r0 = pxsim_Array__push(s.tmp_0, "IMPLY");
    r0 = pxsim_Array__push(s.tmp_0, "LEVER");
    r0 = pxsim_Array__push(s.tmp_0, "EXERT");
    r0 = pxsim_Array__push(s.tmp_0, "SPIES");
    r0 = pxsim_Array__push(s.tmp_0, "YACHT");
    r0 = pxsim_Array__push(s.tmp_0, "ALTEN");
    r0 = pxsim_Array__push(s.tmp_0, "PAGAN");
    r0 = pxsim_Array__push(s.tmp_0, "TENSE");
    r0 = pxsim_Array__push(s.tmp_0, "ALOOF");
    r0 = pxsim_Array__push(s.tmp_0, "VALOR");
    r0 = pxsim_Array__push(s.tmp_0, "HYMNS");
    r0 = pxsim_Array__push(s.tmp_0, "ENVOY");
    r0 = pxsim_Array__push(s.tmp_0, "PINCH");
    r0 = pxsim_Array__push(s.tmp_0, "PRONE");
    r0 = pxsim_Array__push(s.tmp_0, "HELLO");
    r0 = pxsim_Array__push(s.tmp_0, "BROOD");
    r0 = pxsim_Array__push(s.tmp_0, "FOWLS");
    r0 = pxsim_Array__push(s.tmp_0, "DROWN");
    r0 = pxsim_Array__push(s.tmp_0, "ROUGE");
    r0 = pxsim_Array__push(s.tmp_0, "BURNS");
    r0 = pxsim_Array__push(s.tmp_0, "SLIDE");
    r0 = pxsim_Array__push(s.tmp_0, "CASTE");
    r0 = pxsim_Array__push(s.tmp_0, "STOOP");
    r0 = pxsim_Array__push(s.tmp_0, "BAKER");
    r0 = pxsim_Array__push(s.tmp_0, "MILLS");
    r0 = pxsim_Array__push(s.tmp_0, "TAILS");
    r0 = pxsim_Array__push(s.tmp_0, "FARED");
    r0 = pxsim_Array__push(s.tmp_0, "CHANT");
    r0 = pxsim_Array__push(s.tmp_0, "FABLE");
    r0 = pxsim_Array__push(s.tmp_0, "MISTS");
    r0 = pxsim_Array__push(s.tmp_0, "ROWED");
    r0 = pxsim_Array__push(s.tmp_0, "DUCKS");
    r0 = pxsim_Array__push(s.tmp_0, "MAXIM");
    r0 = pxsim_Array__push(s.tmp_0, "SWARM");
    r0 = pxsim_Array__push(s.tmp_0, "MUSED");
    r0 = pxsim_Array__push(s.tmp_0, "WAITS");
    r0 = pxsim_Array__push(s.tmp_0, "CHALK");
    r0 = pxsim_Array__push(s.tmp_0, "CAVES");
    r0 = pxsim_Array__push(s.tmp_0, "SENOR");
    r0 = pxsim_Array__push(s.tmp_0, "INFER");
    r0 = pxsim_Array__push(s.tmp_0, "TRAIT");
    r0 = pxsim_Array__push(s.tmp_0, "TASKS");
    r0 = pxsim_Array__push(s.tmp_0, "DIARY");
    r0 = pxsim_Array__push(s.tmp_0, "HOUND");
    r0 = pxsim_Array__push(s.tmp_0, "BLUFF");
    r0 = pxsim_Array__push(s.tmp_0, "OUNCE");
    r0 = pxsim_Array__push(s.tmp_0, "STARK");
    r0 = pxsim_Array__push(s.tmp_0, "DRAIN");
    r0 = pxsim_Array__push(s.tmp_0, "LEAPT");
    r0 = pxsim_Array__push(s.tmp_0, "CLAWS");
    r0 = pxsim_Array__push(s.tmp_0, "TWINS");
    r0 = pxsim_Array__push(s.tmp_0, "IDOLS");
    r0 = pxsim_Array__push(s.tmp_0, "WILLS");
    r0 = pxsim_Array__push(s.tmp_0, "RAGED");
    r0 = pxsim_Array__push(s.tmp_0, "FRITZ");
    r0 = pxsim_Array__push(s.tmp_0, "DARES");
    r0 = pxsim_Array__push(s.tmp_0, "DEPOT");
    r0 = pxsim_Array__push(s.tmp_0, "DAZED");
    r0 = pxsim_Array__push(s.tmp_0, "LOWLY");
    r0 = pxsim_Array__push(s.tmp_0, "STUNG");
    r0 = pxsim_Array__push(s.tmp_0, "NASTY");
    r0 = pxsim_Array__push(s.tmp_0, "DEITY");
    r0 = pxsim_Array__push(s.tmp_0, "SIZES");
    r0 = pxsim_Array__push(s.tmp_0, "GAUNT");
    r0 = pxsim_Array__push(s.tmp_0, "KNEEL");
    r0 = pxsim_Array__push(s.tmp_0, "RISKS");
    r0 = pxsim_Array__push(s.tmp_0, "TENOR");
    r0 = pxsim_Array__push(s.tmp_0, "STEMS");
    r0 = pxsim_Array__push(s.tmp_0, "LIVER");
    r0 = pxsim_Array__push(s.tmp_0, "STEAD");
    r0 = pxsim_Array__push(s.tmp_0, "TESTS");
    r0 = pxsim_Array__push(s.tmp_0, "SEALS");
    r0 = pxsim_Array__push(s.tmp_0, "PLANK");
    r0 = pxsim_Array__push(s.tmp_0, "SINKS");
    r0 = pxsim_Array__push(s.tmp_0, "WHIRL");
    r0 = pxsim_Array__push(s.tmp_0, "SCREW");
    r0 = pxsim_Array__push(s.tmp_0, "SPOON");
    r0 = pxsim_Array__push(s.tmp_0, "AMPLY");
    r0 = pxsim_Array__push(s.tmp_0, "SLICE");
    r0 = pxsim_Array__push(s.tmp_0, "CARTS");
    r0 = pxsim_Array__push(s.tmp_0, "DEALS");
    r0 = pxsim_Array__push(s.tmp_0, "WHALE");
    r0 = pxsim_Array__push(s.tmp_0, "GEESE");
    r0 = pxsim_Array__push(s.tmp_0, "PASTE");
    r0 = pxsim_Array__push(s.tmp_0, "SCRAP");
    r0 = pxsim_Array__push(s.tmp_0, "ADORN");
    r0 = pxsim_Array__push(s.tmp_0, "NOSES");
    r0 = pxsim_Array__push(s.tmp_0, "MADLY");
    r0 = pxsim_Array__push(s.tmp_0, "ARDOR");
    r0 = pxsim_Array__push(s.tmp_0, "TROUT");
    r0 = pxsim_Array__push(s.tmp_0, "WELLS");
    r0 = pxsim_Array__push(s.tmp_0, "DINGY");
    r0 = pxsim_Array__push(s.tmp_0, "KNAVE");
    r0 = pxsim_Array__push(s.tmp_0, "KNOTS");
    r0 = pxsim_Array__push(s.tmp_0, "CRAWL");
    r0 = pxsim_Array__push(s.tmp_0, "THEFT");
    r0 = pxsim_Array__push(s.tmp_0, "AREAS");
    r0 = pxsim_Array__push(s.tmp_0, "STAIR");
    r0 = pxsim_Array__push(s.tmp_0, "DADDY");
    r0 = pxsim_Array__push(s.tmp_0, "COUGH");
    r0 = pxsim_Array__push(s.tmp_0, "GUISE");
    r0 = pxsim_Array__push(s.tmp_0, "FISTS");
    r0 = pxsim_Array__push(s.tmp_0, "SNEER");
    r0 = pxsim_Array__push(s.tmp_0, "PLOTS");
    r0 = pxsim_Array__push(s.tmp_0, "PLUME");
    r0 = pxsim_Array__push(s.tmp_0, "PADRE");
    r0 = pxsim_Array__push(s.tmp_0, "ABBOT");
    r0 = pxsim_Array__push(s.tmp_0, "ODOUR");
    r0 = pxsim_Array__push(s.tmp_0, "MEDAL");
    r0 = pxsim_Array__push(s.tmp_0, "OPIUM");
    r0 = pxsim_Array__push(s.tmp_0, "DRAKE");
    r0 = pxsim_Array__push(s.tmp_0, "AMISS");
    r0 = pxsim_Array__push(s.tmp_0, "GLOVE");
    r0 = pxsim_Array__push(s.tmp_0, "BLEAK");
    r0 = pxsim_Array__push(s.tmp_0, "GENRE");
    r0 = pxsim_Array__push(s.tmp_0, "RATIO");
    r0 = pxsim_Array__push(s.tmp_0, "DRUGS");
    r0 = pxsim_Array__push(s.tmp_0, "WINES");
    r0 = pxsim_Array__push(s.tmp_0, "POOLS");
    r0 = pxsim_Array__push(s.tmp_0, "VISTA");
    r0 = pxsim_Array__push(s.tmp_0, "SCANT");
    r0 = pxsim_Array__push(s.tmp_0, "CORDS");
    r0 = pxsim_Array__push(s.tmp_0, "RAILS");
    r0 = pxsim_Array__push(s.tmp_0, "STAYS");
    r0 = pxsim_Array__push(s.tmp_0, "WHARF");
    r0 = pxsim_Array__push(s.tmp_0, "DEUCE");
    r0 = pxsim_Array__push(s.tmp_0, "KILLS");
    r0 = pxsim_Array__push(s.tmp_0, "BLUNT");
    r0 = pxsim_Array__push(s.tmp_0, "PUNCH");
    r0 = pxsim_Array__push(s.tmp_0, "SABLE");
    r0 = pxsim_Array__push(s.tmp_0, "FLOWN");
    r0 = pxsim_Array__push(s.tmp_0, "DRILL");
    r0 = pxsim_Array__push(s.tmp_0, "LIFTS");
    r0 = pxsim_Array__push(s.tmp_0, "CRISP");
    r0 = pxsim_Array__push(s.tmp_0, "WORMS");
    r0 = pxsim_Array__push(s.tmp_0, "FLINT");
    r0 = pxsim_Array__push(s.tmp_0, "HANDY");
    r0 = pxsim_Array__push(s.tmp_0, "ALLEY");
    r0 = pxsim_Array__push(s.tmp_0, "MASTS");
    r0 = pxsim_Array__push(s.tmp_0, "FIEND");
    r0 = pxsim_Array__push(s.tmp_0, "STUMP");
    r0 = pxsim_Array__push(s.tmp_0, "ADULT");
    r0 = pxsim_Array__push(s.tmp_0, "SCRUB");
    r0 = pxsim_Array__push(s.tmp_0, "DECKS");
    r0 = pxsim_Array__push(s.tmp_0, "PANGS");
    r0 = pxsim_Array__push(s.tmp_0, "CAMEL");
    r0 = pxsim_Array__push(s.tmp_0, "TITUS");
    r0 = pxsim_Array__push(s.tmp_0, "INDEX");
    r0 = pxsim_Array__push(s.tmp_0, "HAVEN");
    r0 = pxsim_Array__push(s.tmp_0, "THORN");
    r0 = pxsim_Array__push(s.tmp_0, "TOILS");
    r0 = pxsim_Array__push(s.tmp_0, "CEDAR");
    r0 = pxsim_Array__push(s.tmp_0, "LOADS");
    r0 = pxsim_Array__push(s.tmp_0, "WAXED");
    r0 = pxsim_Array__push(s.tmp_0, "GAUGE");
    r0 = pxsim_Array__push(s.tmp_0, "WAGER");
    r0 = pxsim_Array__push(s.tmp_0, "PEERS");
    r0 = pxsim_Array__push(s.tmp_0, "AISLE");
    r0 = pxsim_Array__push(s.tmp_0, "LONGS");
    r0 = pxsim_Array__push(s.tmp_0, "SCARE");
    r0 = pxsim_Array__push(s.tmp_0, "SNARE");
    r0 = pxsim_Array__push(s.tmp_0, "STALE");
    r0 = pxsim_Array__push(s.tmp_0, "AVERT");
    r0 = pxsim_Array__push(s.tmp_0, "BATHS");
    r0 = pxsim_Array__push(s.tmp_0, "TIDES");
    r0 = pxsim_Array__push(s.tmp_0, "TINTS");
    r0 = pxsim_Array__push(s.tmp_0, "BULLY");
    r0 = pxsim_Array__push(s.tmp_0, "AZURE");
    r0 = pxsim_Array__push(s.tmp_0, "ATOMS");
    r0 = pxsim_Array__push(s.tmp_0, "PERRY");
    r0 = pxsim_Array__push(s.tmp_0, "GIDDY");
    r0 = pxsim_Array__push(s.tmp_0, "SOLAR");
    r0 = pxsim_Array__push(s.tmp_0, "FARCE");
    r0 = pxsim_Array__push(s.tmp_0, "BOWER");
    r0 = pxsim_Array__push(s.tmp_0, "WARES");
    r0 = pxsim_Array__push(s.tmp_0, "SLIPS");
    r0 = pxsim_Array__push(s.tmp_0, "RENTS");
    r0 = pxsim_Array__push(s.tmp_0, "FEATS");
    r0 = pxsim_Array__push(s.tmp_0, "LEASE");
    r0 = pxsim_Array__push(s.tmp_0, "BLAND");
    r0 = pxsim_Array__push(s.tmp_0, "MARSH");
    r0 = pxsim_Array__push(s.tmp_0, "RUMOR");
    r0 = pxsim_Array__push(s.tmp_0, "BERTH");
    r0 = pxsim_Array__push(s.tmp_0, "BATHE");
    r0 = pxsim_Array__push(s.tmp_0, "BOOTY");
    r0 = pxsim_Array__push(s.tmp_0, "GLIDE");
    r0 = pxsim_Array__push(s.tmp_0, "BERRY");
    r0 = pxsim_Array__push(s.tmp_0, "PAULA");
    r0 = pxsim_Array__push(s.tmp_0, "FRIED");
    r0 = pxsim_Array__push(s.tmp_0, "BOOTH");
    r0 = pxsim_Array__push(s.tmp_0, "TAXED");
    r0 = pxsim_Array__push(s.tmp_0, "TWIGS");
    r0 = pxsim_Array__push(s.tmp_0, "UNDUE");
    r0 = pxsim_Array__push(s.tmp_0, "CLUMP");
    r0 = pxsim_Array__push(s.tmp_0, "LYRIC");
    r0 = pxsim_Array__push(s.tmp_0, "LASTS");
    r0 = pxsim_Array__push(s.tmp_0, "ANNOY");
    r0 = pxsim_Array__push(s.tmp_0, "CASTS");
    r0 = pxsim_Array__push(s.tmp_0, "BOUGH");
    r0 = pxsim_Array__push(s.tmp_0, "CHART");
    r0 = pxsim_Array__push(s.tmp_0, "MAKER");
    r0 = pxsim_Array__push(s.tmp_0, "SNOWS");
    r0 = pxsim_Array__push(s.tmp_0, "ARENA");
    r0 = pxsim_Array__push(s.tmp_0, "RELIC");
    r0 = pxsim_Array__push(s.tmp_0, "SECTS");
    r0 = pxsim_Array__push(s.tmp_0, "DOUCE");
    r0 = pxsim_Array__push(s.tmp_0, "BRIBE");
    r0 = pxsim_Array__push(s.tmp_0, "FRIAR");
    r0 = pxsim_Array__push(s.tmp_0, "TINGE");
    r0 = pxsim_Array__push(s.tmp_0, "LANES");
    r0 = pxsim_Array__push(s.tmp_0, "ETHER");
    r0 = pxsim_Array__push(s.tmp_0, "VICAR");
    r0 = pxsim_Array__push(s.tmp_0, "VOCAL");
    r0 = pxsim_Array__push(s.tmp_0, "JOINS");
    r0 = pxsim_Array__push(s.tmp_0, "BASES");
    r0 = pxsim_Array__push(s.tmp_0, "VASES");
    r0 = pxsim_Array__push(s.tmp_0, "CURLY");
    r0 = pxsim_Array__push(s.tmp_0, "VALID");
    r0 = pxsim_Array__push(s.tmp_0, "CLEFT");
    r0 = pxsim_Array__push(s.tmp_0, "CHAPS");
    r0 = pxsim_Array__push(s.tmp_0, "BARGE");
    r0 = pxsim_Array__push(s.tmp_0, "BOLTS");
    r0 = pxsim_Array__push(s.tmp_0, "SMELT");
    r0 = pxsim_Array__push(s.tmp_0, "PURER");
    r0 = pxsim_Array__push(s.tmp_0, "ODDLY");
    r0 = pxsim_Array__push(s.tmp_0, "VAPOR");
    r0 = pxsim_Array__push(s.tmp_0, "SPIED");
    r0 = pxsim_Array__push(s.tmp_0, "SLATE");
    r0 = pxsim_Array__push(s.tmp_0, "BRACE");
    r0 = pxsim_Array__push(s.tmp_0, "IRONS");
    r0 = pxsim_Array__push(s.tmp_0, "LAMBS");
    r0 = pxsim_Array__push(s.tmp_0, "KRAFT");
    r0 = pxsim_Array__push(s.tmp_0, "RALLY");
    r0 = pxsim_Array__push(s.tmp_0, "CRAVE");
    r0 = pxsim_Array__push(s.tmp_0, "GAYLY");
    r0 = pxsim_Array__push(s.tmp_0, "LEAPS");
    r0 = pxsim_Array__push(s.tmp_0, "FLUTE");
    r0 = pxsim_Array__push(s.tmp_0, "SCOUT");
    r0 = pxsim_Array__push(s.tmp_0, "GOWNS");
    r0 = pxsim_Array__push(s.tmp_0, "SWINE");
    r0 = pxsim_Array__push(s.tmp_0, "GREED");
    r0 = pxsim_Array__push(s.tmp_0, "ONION");
    r0 = pxsim_Array__push(s.tmp_0, "SAGES");
    r0 = pxsim_Array__push(s.tmp_0, "AMBER");
    r0 = pxsim_Array__push(s.tmp_0, "GRATE");
    r0 = pxsim_Array__push(s.tmp_0, "THIGH");
    r0 = pxsim_Array__push(s.tmp_0, "LEAFY");
    r0 = pxsim_Array__push(s.tmp_0, "BENDS");
    r0 = pxsim_Array__push(s.tmp_0, "BRAKE");
    r0 = pxsim_Array__push(s.tmp_0, "HURTS");
    r0 = pxsim_Array__push(s.tmp_0, "GRIND");
    r0 = pxsim_Array__push(s.tmp_0, "SILKS");
    r0 = pxsim_Array__push(s.tmp_0, "CLASH");
    r0 = pxsim_Array__push(s.tmp_0, "JELLY");
    r0 = pxsim_Array__push(s.tmp_0, "SOOTH");
    r0 = pxsim_Array__push(s.tmp_0, "DIZZY");
    r0 = pxsim_Array__push(s.tmp_0, "INCUR");
    r0 = pxsim_Array__push(s.tmp_0, "DOVER");
    r0 = pxsim_Array__push(s.tmp_0, "HAIRY");
    r0 = pxsim_Array__push(s.tmp_0, "STALK");
    r0 = pxsim_Array__push(s.tmp_0, "HEAVE");
    r0 = pxsim_Array__push(s.tmp_0, "SPADE");
    r0 = pxsim_Array__push(s.tmp_0, "CREWS");
    r0 = pxsim_Array__push(s.tmp_0, "BULLS");
    r0 = pxsim_Array__push(s.tmp_0, "SNUFF");
    r0 = pxsim_Array__push(s.tmp_0, "HAVOC");
    r0 = pxsim_Array__push(s.tmp_0, "SMITE");
    r0 = pxsim_Array__push(s.tmp_0, "LACKS");
    r0 = pxsim_Array__push(s.tmp_0, "THROB");
    r0 = pxsim_Array__push(s.tmp_0, "CLICK");
    r0 = pxsim_Array__push(s.tmp_0, "FLASK");
    r0 = pxsim_Array__push(s.tmp_0, "GAUDY");
    r0 = pxsim_Array__push(s.tmp_0, "VERBS");
    r0 = pxsim_Array__push(s.tmp_0, "FORGE");
    r0 = pxsim_Array__push(s.tmp_0, "SPECK");
    r0 = pxsim_Array__push(s.tmp_0, "SHRUB");
    r0 = pxsim_Array__push(s.tmp_0, "GODLY");
    r0 = pxsim_Array__push(s.tmp_0, "EDICT");
    r0 = pxsim_Array__push(s.tmp_0, "ISLES");
    r0 = pxsim_Array__push(s.tmp_0, "CHASM");
    r0 = pxsim_Array__push(s.tmp_0, "EDGED");
    r0 = pxsim_Array__push(s.tmp_0, "TRAPS");
    r0 = pxsim_Array__push(s.tmp_0, "BIRCH");
    r0 = pxsim_Array__push(s.tmp_0, "TRUER");
    r0 = pxsim_Array__push(s.tmp_0, "PAPAL");
    r0 = pxsim_Array__push(s.tmp_0, "REPEL");
    r0 = pxsim_Array__push(s.tmp_0, "SHRUG");
    r0 = pxsim_Array__push(s.tmp_0, "LIVID");
    r0 = pxsim_Array__push(s.tmp_0, "SALAD");
    r0 = pxsim_Array__push(s.tmp_0, "MATES");
    r0 = pxsim_Array__push(s.tmp_0, "MEATS");
    r0 = pxsim_Array__push(s.tmp_0, "FEEDS");
    r0 = pxsim_Array__push(s.tmp_0, "DARTS");
    r0 = pxsim_Array__push(s.tmp_0, "FLATS");
    r0 = pxsim_Array__push(s.tmp_0, "TUBES");
    r0 = pxsim_Array__push(s.tmp_0, "UNITS");
    r0 = pxsim_Array__push(s.tmp_0, "PERCH");
    r0 = pxsim_Array__push(s.tmp_0, "POURS");
    r0 = pxsim_Array__push(s.tmp_0, "TRIPS");
    r0 = pxsim_Array__push(s.tmp_0, "CIVIC");
    r0 = pxsim_Array__push(s.tmp_0, "ANTES");
    r0 = pxsim_Array__push(s.tmp_0, "SCARF");
    r0 = pxsim_Array__push(s.tmp_0, "FOLIO");
    r0 = pxsim_Array__push(s.tmp_0, "NEEDY");
    r0 = pxsim_Array__push(s.tmp_0, "YELLS");
    r0 = pxsim_Array__push(s.tmp_0, "REGAL");
    r0 = pxsim_Array__push(s.tmp_0, "HOOKS");
    r0 = pxsim_Array__push(s.tmp_0, "PALER");
    r0 = pxsim_Array__push(s.tmp_0, "NOUNS");
    r0 = pxsim_Array__push(s.tmp_0, "ATTIC");
    r0 = pxsim_Array__push(s.tmp_0, "WINDY");
    r0 = pxsim_Array__push(s.tmp_0, "SPIRE");
    r0 = pxsim_Array__push(s.tmp_0, "DERBY");
    r0 = pxsim_Array__push(s.tmp_0, "DITTO");
    r0 = pxsim_Array__push(s.tmp_0, "FERNS");
    r0 = pxsim_Array__push(s.tmp_0, "BASIC");
    r0 = pxsim_Array__push(s.tmp_0, "GRAPE");
    r0 = pxsim_Array__push(s.tmp_0, "TYING");
    r0 = pxsim_Array__push(s.tmp_0, "DOUGH");
    r0 = pxsim_Array__push(s.tmp_0, "FILTH");
    r0 = pxsim_Array__push(s.tmp_0, "PEARL");
    r0 = pxsim_Array__push(s.tmp_0, "OLIVE");
    r0 = pxsim_Array__push(s.tmp_0, "DROLL");
    r0 = pxsim_Array__push(s.tmp_0, "BADGE");
    r0 = pxsim_Array__push(s.tmp_0, "WAGED");
    r0 = pxsim_Array__push(s.tmp_0, "ANKLE");
    r0 = pxsim_Array__push(s.tmp_0, "FERRY");
    r0 = pxsim_Array__push(s.tmp_0, "FUMES");
    r0 = pxsim_Array__push(s.tmp_0, "SHEDS");
    r0 = pxsim_Array__push(s.tmp_0, "SHOWY");
    r0 = pxsim_Array__push(s.tmp_0, "STALL");
    r0 = pxsim_Array__push(s.tmp_0, "HOTLY");
    r0 = pxsim_Array__push(s.tmp_0, "SCOLD");
    r0 = pxsim_Array__push(s.tmp_0, "CANDY");
    r0 = pxsim_Array__push(s.tmp_0, "WEAVE");
    r0 = pxsim_Array__push(s.tmp_0, "SLACK");
    r0 = pxsim_Array__push(s.tmp_0, "VOGUE");
    r0 = pxsim_Array__push(s.tmp_0, "SLANG");
    r0 = pxsim_Array__push(s.tmp_0, "FOODS");
    r0 = pxsim_Array__push(s.tmp_0, "PRIVY");
    r0 = pxsim_Array__push(s.tmp_0, "VALVE");
    r0 = pxsim_Array__push(s.tmp_0, "CYCLE");
    r0 = pxsim_Array__push(s.tmp_0, "EXCEL");
    r0 = pxsim_Array__push(s.tmp_0, "QUASI");
    r0 = pxsim_Array__push(s.tmp_0, "HEATH");
    r0 = pxsim_Array__push(s.tmp_0, "ATONE");
    r0 = pxsim_Array__push(s.tmp_0, "VENUE");
    r0 = pxsim_Array__push(s.tmp_0, "LURID");
    r0 = pxsim_Array__push(s.tmp_0, "CHOKE");
    r0 = pxsim_Array__push(s.tmp_0, "SAVES");
    r0 = pxsim_Array__push(s.tmp_0, "MANOR");
    r0 = pxsim_Array__push(s.tmp_0, "FORKS");
    r0 = pxsim_Array__push(s.tmp_0, "TEAMS");
    r0 = pxsim_Array__push(s.tmp_0, "COOKS");
    r0 = pxsim_Array__push(s.tmp_0, "PANEL");
    r0 = pxsim_Array__push(s.tmp_0, "GROWL");
    r0 = pxsim_Array__push(s.tmp_0, "BROTH");
    r0 = pxsim_Array__push(s.tmp_0, "TEMPO");
    r0 = pxsim_Array__push(s.tmp_0, "BROOM");
    r0 = pxsim_Array__push(s.tmp_0, "RACED");
    r0 = pxsim_Array__push(s.tmp_0, "SACKS");
    r0 = pxsim_Array__push(s.tmp_0, "RAVEN");
    r0 = pxsim_Array__push(s.tmp_0, "FROGS");
    r0 = pxsim_Array__push(s.tmp_0, "ACHED");
    r0 = pxsim_Array__push(s.tmp_0, "SURLY");
    r0 = pxsim_Array__push(s.tmp_0, "EVADE");
    r0 = pxsim_Array__push(s.tmp_0, "BUGGY");
    r0 = pxsim_Array__push(s.tmp_0, "WAKES");
    r0 = pxsim_Array__push(s.tmp_0, "REMIT");
    r0 = pxsim_Array__push(s.tmp_0, "REEFS");
    r0 = pxsim_Array__push(s.tmp_0, "CHORD");
    r0 = pxsim_Array__push(s.tmp_0, "SLOOP");
    r0 = pxsim_Array__push(s.tmp_0, "LOANS");
    r0 = pxsim_Array__push(s.tmp_0, "TAWNY");
    r0 = pxsim_Array__push(s.tmp_0, "BINDS");
    r0 = pxsim_Array__push(s.tmp_0, "SLUNG");
    r0 = pxsim_Array__push(s.tmp_0, "CUBIC");
    r0 = pxsim_Array__push(s.tmp_0, "MUSES");
    r0 = pxsim_Array__push(s.tmp_0, "GERMS");
    r0 = pxsim_Array__push(s.tmp_0, "NYMPH");
    r0 = pxsim_Array__push(s.tmp_0, "CUPID");
    r0 = pxsim_Array__push(s.tmp_0, "FINES");
    r0 = pxsim_Array__push(s.tmp_0, "PSALM");
    r0 = pxsim_Array__push(s.tmp_0, "HOARY");
    r0 = pxsim_Array__push(s.tmp_0, "CROWS");
    r0 = pxsim_Array__push(s.tmp_0, "MAPLE");
    r0 = pxsim_Array__push(s.tmp_0, "SALTS");
    r0 = pxsim_Array__push(s.tmp_0, "DODGE");
    r0 = pxsim_Array__push(s.tmp_0, "FOCUS");
    r0 = pxsim_Array__push(s.tmp_0, "LITHE");
    r0 = pxsim_Array__push(s.tmp_0, "SMASH");
    r0 = pxsim_Array__push(s.tmp_0, "NORAH");
    r0 = pxsim_Array__push(s.tmp_0, "DOGMA");
    r0 = pxsim_Array__push(s.tmp_0, "BOWLS");
    r0 = pxsim_Array__push(s.tmp_0, "LOATH");
    r0 = pxsim_Array__push(s.tmp_0, "JESTS");
    r0 = pxsim_Array__push(s.tmp_0, "DIGIT");
    r0 = pxsim_Array__push(s.tmp_0, "PENCE");
    r0 = pxsim_Array__push(s.tmp_0, "SLEEK");
    r0 = pxsim_Array__push(s.tmp_0, "DOWRY");
    r0 = pxsim_Array__push(s.tmp_0, "DEFER");
    r0 = pxsim_Array__push(s.tmp_0, "SELLS");
    r0 = pxsim_Array__push(s.tmp_0, "BLEED");
    r0 = pxsim_Array__push(s.tmp_0, "DOWNS");
    r0 = pxsim_Array__push(s.tmp_0, "BABES");
    r0 = pxsim_Array__push(s.tmp_0, "DENTS");
    r0 = pxsim_Array__push(s.tmp_0, "PANES");
    r0 = pxsim_Array__push(s.tmp_0, "WILDS");
    r0 = pxsim_Array__push(s.tmp_0, "ADAPT");
    r0 = pxsim_Array__push(s.tmp_0, "BLOND");
    r0 = pxsim_Array__push(s.tmp_0, "GRAVY");
    r0 = pxsim_Array__push(s.tmp_0, "STEIN");
    r0 = pxsim_Array__push(s.tmp_0, "PLIED");
    r0 = pxsim_Array__push(s.tmp_0, "SABRE");
    r0 = pxsim_Array__push(s.tmp_0, "SQUAD");
    r0 = pxsim_Array__push(s.tmp_0, "REVEL");
    r0 = pxsim_Array__push(s.tmp_0, "YOLKS");
    r0 = pxsim_Array__push(s.tmp_0, "SEWED");
    r0 = pxsim_Array__push(s.tmp_0, "CRANE");
    r0 = pxsim_Array__push(s.tmp_0, "SYRUP");
    r0 = pxsim_Array__push(s.tmp_0, "GIVER");
    r0 = pxsim_Array__push(s.tmp_0, "HICKS");
    r0 = pxsim_Array__push(s.tmp_0, "ABEND");
    r0 = pxsim_Array__push(s.tmp_0, "EXALT");
    r0 = pxsim_Array__push(s.tmp_0, "STIRS");
    r0 = pxsim_Array__push(s.tmp_0, "SMOKY");
    r0 = pxsim_Array__push(s.tmp_0, "PAYER");
    r0 = pxsim_Array__push(s.tmp_0, "VEILS");
    r0 = pxsim_Array__push(s.tmp_0, "CHAFF");
    r0 = pxsim_Array__push(s.tmp_0, "SULKY");
    r0 = pxsim_Array__push(s.tmp_0, "PEACH");
    r0 = pxsim_Array__push(s.tmp_0, "TUNES");
    r0 = pxsim_Array__push(s.tmp_0, "LUMPS");
    r0 = pxsim_Array__push(s.tmp_0, "SHAVE");
    r0 = pxsim_Array__push(s.tmp_0, "CLOWN");
    r0 = pxsim_Array__push(s.tmp_0, "SHINY");
    r0 = pxsim_Array__push(s.tmp_0, "HUSKY");
    r0 = pxsim_Array__push(s.tmp_0, "TOWEL");
    r0 = pxsim_Array__push(s.tmp_0, "GLADE");
    r0 = pxsim_Array__push(s.tmp_0, "MANIA");
    r0 = pxsim_Array__push(s.tmp_0, "SAKES");
    r0 = pxsim_Array__push(s.tmp_0, "PULLS");
    r0 = pxsim_Array__push(s.tmp_0, "TAINT");
    r0 = pxsim_Array__push(s.tmp_0, "TILES");
    r0 = pxsim_Array__push(s.tmp_0, "BUSHY");
    r0 = pxsim_Array__push(s.tmp_0, "BLEND");
    r0 = pxsim_Array__push(s.tmp_0, "HAPLY");
    r0 = pxsim_Array__push(s.tmp_0, "FAMED");
    r0 = pxsim_Array__push(s.tmp_0, "BARNS");
    r0 = pxsim_Array__push(s.tmp_0, "RELAX");
    r0 = pxsim_Array__push(s.tmp_0, "AUNTS");
    r0 = pxsim_Array__push(s.tmp_0, "SHOAL");
    r0 = pxsim_Array__push(s.tmp_0, "MOSSY");
    r0 = pxsim_Array__push(s.tmp_0, "CASKS");
    r0 = pxsim_Array__push(s.tmp_0, "WRING");
    r0 = pxsim_Array__push(s.tmp_0, "SPICE");
    r0 = pxsim_Array__push(s.tmp_0, "BONNY");
    r0 = pxsim_Array__push(s.tmp_0, "CURES");
    r0 = pxsim_Array__push(s.tmp_0, "BRAVO");
    r0 = pxsim_Array__push(s.tmp_0, "CHESS");
    r0 = pxsim_Array__push(s.tmp_0, "ALIAS");
    r0 = pxsim_Array__push(s.tmp_0, "SAUCY");
    r0 = pxsim_Array__push(s.tmp_0, "TUNIC");
    r0 = pxsim_Array__push(s.tmp_0, "LURED");
    r0 = pxsim_Array__push(s.tmp_0, "POKER");
    r0 = pxsim_Array__push(s.tmp_0, "RADIO");
    r0 = pxsim_Array__push(s.tmp_0, "CHAMP");
    r0 = pxsim_Array__push(s.tmp_0, "SCALP");
    r0 = pxsim_Array__push(s.tmp_0, "SCARS");
    r0 = pxsim_Array__push(s.tmp_0, "SPINE");
    r0 = pxsim_Array__push(s.tmp_0, "TEASE");
    r0 = pxsim_Array__push(s.tmp_0, "BARED");
    r0 = pxsim_Array__push(s.tmp_0, "LUCID");
    r0 = pxsim_Array__push(s.tmp_0, "SURGE");
    r0 = pxsim_Array__push(s.tmp_0, "ONSET");
    r0 = pxsim_Array__push(s.tmp_0, "PONDS");
    r0 = pxsim_Array__push(s.tmp_0, "MOODY");
    r0 = pxsim_Array__push(s.tmp_0, "BALES");
    r0 = pxsim_Array__push(s.tmp_0, "SEDAN");
    r0 = pxsim_Array__push(s.tmp_0, "GALES");
    r0 = pxsim_Array__push(s.tmp_0, "LATCH");
    r0 = pxsim_Array__push(s.tmp_0, "LENDS");
    r0 = pxsim_Array__push(s.tmp_0, "HOIST");
    r0 = pxsim_Array__push(s.tmp_0, "DIVED");
    r0 = pxsim_Array__push(s.tmp_0, "STRAP");
    r0 = pxsim_Array__push(s.tmp_0, "BEECH");
    r0 = pxsim_Array__push(s.tmp_0, "TROTH");
    r0 = pxsim_Array__push(s.tmp_0, "FROZE");
    r0 = pxsim_Array__push(s.tmp_0, "BUGLE");
    r0 = pxsim_Array__push(s.tmp_0, "POISE");
    r0 = pxsim_Array__push(s.tmp_0, "TRUCK");
    r0 = pxsim_Array__push(s.tmp_0, "FOXES");
    r0 = pxsim_Array__push(s.tmp_0, "BALMY");
    r0 = pxsim_Array__push(s.tmp_0, "PICKS");
    r0 = pxsim_Array__push(s.tmp_0, "AMEND");
    r0 = pxsim_Array__push(s.tmp_0, "DROOP");
    r0 = pxsim_Array__push(s.tmp_0, "DAIRY");
    r0 = pxsim_Array__push(s.tmp_0, "WALTZ");
    r0 = pxsim_Array__push(s.tmp_0, "NAIVE");
    r0 = pxsim_Array__push(s.tmp_0, "SHORN");
    r0 = pxsim_Array__push(s.tmp_0, "URGES");
    r0 = pxsim_Array__push(s.tmp_0, "MAIZE");
    r0 = pxsim_Array__push(s.tmp_0, "WIELD");
    r0 = pxsim_Array__push(s.tmp_0, "HOLLY");
    r0 = pxsim_Array__push(s.tmp_0, "COMET");
    r0 = pxsim_Array__push(s.tmp_0, "SHUTS");
    r0 = pxsim_Array__push(s.tmp_0, "SOCKS");
    r0 = pxsim_Array__push(s.tmp_0, "HORDE");
    r0 = pxsim_Array__push(s.tmp_0, "SKIFF");
    r0 = pxsim_Array__push(s.tmp_0, "PARKS");
    r0 = pxsim_Array__push(s.tmp_0, "INERT");
    r0 = pxsim_Array__push(s.tmp_0, "INLET");
    r0 = pxsim_Array__push(s.tmp_0, "ODORS");
    r0 = pxsim_Array__push(s.tmp_0, "PRICK");
    r0 = pxsim_Array__push(s.tmp_0, "FORUM");
    r0 = pxsim_Array__push(s.tmp_0, "GASES");
    r0 = pxsim_Array__push(s.tmp_0, "BURLY");
    r0 = pxsim_Array__push(s.tmp_0, "BRAND");
    r0 = pxsim_Array__push(s.tmp_0, "MINER");
    r0 = pxsim_Array__push(s.tmp_0, "LAWNS");
    r0 = pxsim_Array__push(s.tmp_0, "TARDY");
    r0 = pxsim_Array__push(s.tmp_0, "TUFTS");
    r0 = pxsim_Array__push(s.tmp_0, "FIXES");
    r0 = pxsim_Array__push(s.tmp_0, "SOLES");
    r0 = pxsim_Array__push(s.tmp_0, "VOWEL");
    r0 = pxsim_Array__push(s.tmp_0, "TAPER");
    r0 = pxsim_Array__push(s.tmp_0, "GUSTS");
    r0 = pxsim_Array__push(s.tmp_0, "COILS");
    r0 = pxsim_Array__push(s.tmp_0, "ABATE");
    r0 = pxsim_Array__push(s.tmp_0, "AFOOT");
    r0 = pxsim_Array__push(s.tmp_0, "BULKY");
    r0 = pxsim_Array__push(s.tmp_0, "MASKS");
    r0 = pxsim_Array__push(s.tmp_0, "CRIER");
    r0 = pxsim_Array__push(s.tmp_0, "LOBBY");
    r0 = pxsim_Array__push(s.tmp_0, "EXPEL");
    r0 = pxsim_Array__push(s.tmp_0, "PACKS");
    r0 = pxsim_Array__push(s.tmp_0, "FATED");
    r0 = pxsim_Array__push(s.tmp_0, "DOVES");
    r0 = pxsim_Array__push(s.tmp_0, "DOLLS");
    r0 = pxsim_Array__push(s.tmp_0, "NEWER");
    r0 = pxsim_Array__push(s.tmp_0, "FREER");
    r0 = pxsim_Array__push(s.tmp_0, "GENIE");
    r0 = pxsim_Array__push(s.tmp_0, "STILE");
    r0 = pxsim_Array__push(s.tmp_0, "WARDS");
    r0 = pxsim_Array__push(s.tmp_0, "WROTH");
    r0 = pxsim_Array__push(s.tmp_0, "BOONE");
    r0 = pxsim_Array__push(s.tmp_0, "USHER");
    r0 = pxsim_Array__push(s.tmp_0, "CEDED");
    r0 = pxsim_Array__push(s.tmp_0, "PUFFS");
    r0 = pxsim_Array__push(s.tmp_0, "EBONY");
    r0 = pxsim_Array__push(s.tmp_0, "MIMIC");
    r0 = pxsim_Array__push(s.tmp_0, "SIEVE");
    r0 = pxsim_Array__push(s.tmp_0, "ATLAS");
    r0 = pxsim_Array__push(s.tmp_0, "DUKES");
    r0 = pxsim_Array__push(s.tmp_0, "SHEWS");
    r0 = pxsim_Array__push(s.tmp_0, "MYTHS");
    r0 = pxsim_Array__push(s.tmp_0, "LILAC");
    r0 = pxsim_Array__push(s.tmp_0, "MISER");
    r0 = pxsim_Array__push(s.tmp_0, "TACIT");
    r0 = pxsim_Array__push(s.tmp_0, "SABER");
    r0 = pxsim_Array__push(s.tmp_0, "CIDER");
    r0 = pxsim_Array__push(s.tmp_0, "POUCH");
    r0 = pxsim_Array__push(s.tmp_0, "SHYLY");
    r0 = pxsim_Array__push(s.tmp_0, "FROTH");
    r0 = pxsim_Array__push(s.tmp_0, "ALLAY");
    r0 = pxsim_Array__push(s.tmp_0, "DANDY");
    r0 = pxsim_Array__push(s.tmp_0, "WAKEN");
    r0 = pxsim_Array__push(s.tmp_0, "YEAST");
    r0 = pxsim_Array__push(s.tmp_0, "MINCE");
    r0 = pxsim_Array__push(s.tmp_0, "WOODY");
    r0 = pxsim_Array__push(s.tmp_0, "PIERS");
    r0 = pxsim_Array__push(s.tmp_0, "FANGS");
    r0 = pxsim_Array__push(s.tmp_0, "DRYLY");
    r0 = pxsim_Array__push(s.tmp_0, "BELTS");
    r0 = pxsim_Array__push(s.tmp_0, "LACED");
    r0 = pxsim_Array__push(s.tmp_0, "AWARD");
    r0 = pxsim_Array__push(s.tmp_0, "COUPE");
    r0 = pxsim_Array__push(s.tmp_0, "VIOLA");
    r0 = pxsim_Array__push(s.tmp_0, "QUERY");
    r0 = pxsim_Array__push(s.tmp_0, "VENOM");
    r0 = pxsim_Array__push(s.tmp_0, "SLABS");
    r0 = pxsim_Array__push(s.tmp_0, "FATES");
    r0 = pxsim_Array__push(s.tmp_0, "POKED");
    r0 = pxsim_Array__push(s.tmp_0, "TOURS");
    r0 = pxsim_Array__push(s.tmp_0, "CHEFS");
    r0 = pxsim_Array__push(s.tmp_0, "ABACK");
    r0 = pxsim_Array__push(s.tmp_0, "OAKEN");
    r0 = pxsim_Array__push(s.tmp_0, "MOONS");
    r0 = pxsim_Array__push(s.tmp_0, "POLAR");
    r0 = pxsim_Array__push(s.tmp_0, "PRAYS");
    r0 = pxsim_Array__push(s.tmp_0, "DEIGN");
    r0 = pxsim_Array__push(s.tmp_0, "CROOK");
    r0 = pxsim_Array__push(s.tmp_0, "LEANS");
    r0 = pxsim_Array__push(s.tmp_0, "PUPPY");
    r0 = pxsim_Array__push(s.tmp_0, "LABEL");
    r0 = pxsim_Array__push(s.tmp_0, "STACK");
    r0 = pxsim_Array__push(s.tmp_0, "HILLY");
    r0 = pxsim_Array__push(s.tmp_0, "WADED");
    r0 = pxsim_Array__push(s.tmp_0, "EAVES");
    r0 = pxsim_Array__push(s.tmp_0, "MINUS");
    r0 = pxsim_Array__push(s.tmp_0, "HAZEL");
    r0 = pxsim_Array__push(s.tmp_0, "ORBIT");
    r0 = pxsim_Array__push(s.tmp_0, "SURER");
    r0 = pxsim_Array__push(s.tmp_0, "WHIMS");
    r0 = pxsim_Array__push(s.tmp_0, "WHIPS");
    r0 = pxsim_Array__push(s.tmp_0, "LIBEL");
    r0 = pxsim_Array__push(s.tmp_0, "TAMED");
    r0 = pxsim_Array__push(s.tmp_0, "CHIPS");
    r0 = pxsim_Array__push(s.tmp_0, "SPASM");
    r0 = pxsim_Array__push(s.tmp_0, "TWINE");
    r0 = pxsim_Array__push(s.tmp_0, "ABHOR");
    r0 = pxsim_Array__push(s.tmp_0, "DOMES");
    r0 = pxsim_Array__push(s.tmp_0, "KNOLL");
    r0 = pxsim_Array__push(s.tmp_0, "WEDGE");
    r0 = pxsim_Array__push(s.tmp_0, "GRIMY");
    r0 = pxsim_Array__push(s.tmp_0, "ROVER");
    r0 = pxsim_Array__push(s.tmp_0, "WRAPS");
    r0 = pxsim_Array__push(s.tmp_0, "LEVEE");
    r0 = pxsim_Array__push(s.tmp_0, "AMITY");
    r0 = pxsim_Array__push(s.tmp_0, "CARVE");
    r0 = pxsim_Array__push(s.tmp_0, "TREND");
    r0 = pxsim_Array__push(s.tmp_0, "COCOA");
    r0 = pxsim_Array__push(s.tmp_0, "QUEUE");
    r0 = pxsim_Array__push(s.tmp_0, "SWOON");
    r0 = pxsim_Array__push(s.tmp_0, "PUMPS");
    r0 = pxsim_Array__push(s.tmp_0, "TRASH");
    r0 = pxsim_Array__push(s.tmp_0, "SHARK");
    r0 = pxsim_Array__push(s.tmp_0, "RECUR");
    r0 = pxsim_Array__push(s.tmp_0, "DREGS");
    r0 = pxsim_Array__push(s.tmp_0, "CANTO");
    r0 = pxsim_Array__push(s.tmp_0, "SNEAK");
    r0 = pxsim_Array__push(s.tmp_0, "SHOVE");
    r0 = pxsim_Array__push(s.tmp_0, "CRANK");
    r0 = pxsim_Array__push(s.tmp_0, "FINED");
    r0 = pxsim_Array__push(s.tmp_0, "JUMPS");
    r0 = pxsim_Array__push(s.tmp_0, "ENSUE");
    r0 = pxsim_Array__push(s.tmp_0, "WILES");
    r0 = pxsim_Array__push(s.tmp_0, "ROARS");
    r0 = pxsim_Array__push(s.tmp_0, "FREAK");
    r0 = pxsim_Array__push(s.tmp_0, "POSSE");
    r0 = pxsim_Array__push(s.tmp_0, "FUSIL");
    r0 = pxsim_Array__push(s.tmp_0, "BEGAT");
    r0 = pxsim_Array__push(s.tmp_0, "ELUDE");
    r0 = pxsim_Array__push(s.tmp_0, "CLANG");
    r0 = pxsim_Array__push(s.tmp_0, "HOARD");
    r0 = pxsim_Array__push(s.tmp_0, "HATCH");
    r0 = pxsim_Array__push(s.tmp_0, "SOILS");
    r0 = pxsim_Array__push(s.tmp_0, "RAIDS");
    r0 = pxsim_Array__push(s.tmp_0, "EASED");
    r0 = pxsim_Array__push(s.tmp_0, "SMACK");
    r0 = pxsim_Array__push(s.tmp_0, "HITCH");
    r0 = pxsim_Array__push(s.tmp_0, "ACIDS");
    r0 = pxsim_Array__push(s.tmp_0, "BEGET");
    r0 = pxsim_Array__push(s.tmp_0, "TIERS");
    r0 = pxsim_Array__push(s.tmp_0, "NICER");
    r0 = pxsim_Array__push(s.tmp_0, "TANKS");
    r0 = pxsim_Array__push(s.tmp_0, "CANES");
    r0 = pxsim_Array__push(s.tmp_0, "PLUMB");
    r0 = pxsim_Array__push(s.tmp_0, "BEGOT");
    r0 = pxsim_Array__push(s.tmp_0, "DETER");
    r0 = pxsim_Array__push(s.tmp_0, "FLARE");
    r0 = pxsim_Array__push(s.tmp_0, "BOMBS");
    r0 = pxsim_Array__push(s.tmp_0, "FITLY");
    r0 = pxsim_Array__push(s.tmp_0, "FLIRT");
    r0 = pxsim_Array__push(s.tmp_0, "CHUTE");
    r0 = pxsim_Array__push(s.tmp_0, "STEAK");
    r0 = pxsim_Array__push(s.tmp_0, "GAUZE");
    r0 = pxsim_Array__push(s.tmp_0, "SPARS");
    r0 = pxsim_Array__push(s.tmp_0, "PEARS");
    r0 = pxsim_Array__push(s.tmp_0, "PIQUE");
    r0 = pxsim_Array__push(s.tmp_0, "GLACE");
    r0 = pxsim_Array__push(s.tmp_0, "HOVER");
    r0 = pxsim_Array__push(s.tmp_0, "RIPEN");
    r0 = pxsim_Array__push(s.tmp_0, "SWANS");
    r0 = pxsim_Array__push(s.tmp_0, "GUILE");
    r0 = pxsim_Array__push(s.tmp_0, "RAZOR");
    r0 = pxsim_Array__push(s.tmp_0, "OMENS");
    r0 = pxsim_Array__push(s.tmp_0, "GRUNT");
    r0 = pxsim_Array__push(s.tmp_0, "SPIKE");
    r0 = pxsim_Array__push(s.tmp_0, "LUNAR");
    r0 = pxsim_Array__push(s.tmp_0, "CACHE");
    r0 = pxsim_Array__push(s.tmp_0, "CHILI");
    r0 = pxsim_Array__push(s.tmp_0, "RIGOR");
    r0 = pxsim_Array__push(s.tmp_0, "MOUSE");
    r0 = pxsim_Array__push(s.tmp_0, "OXIDE");
    r0 = pxsim_Array__push(s.tmp_0, "SLING");
    r0 = pxsim_Array__push(s.tmp_0, "SPILT");
    r0 = pxsim_Array__push(s.tmp_0, "TONIC");
    r0 = pxsim_Array__push(s.tmp_0, "CADET");
    r0 = pxsim_Array__push(s.tmp_0, "CLANS");
    r0 = pxsim_Array__push(s.tmp_0, "MUSTY");
    r0 = pxsim_Array__push(s.tmp_0, "MUMMY");
    r0 = pxsim_Array__push(s.tmp_0, "NASAL");
    r0 = pxsim_Array__push(s.tmp_0, "TAUNT");
    r0 = pxsim_Array__push(s.tmp_0, "SILKY");
    r0 = pxsim_Array__push(s.tmp_0, "MELTS");
    r0 = pxsim_Array__push(s.tmp_0, "BARDS");
    r0 = pxsim_Array__push(s.tmp_0, "BUNNY");
    r0 = pxsim_Array__push(s.tmp_0, "MOTHS");
    r0 = pxsim_Array__push(s.tmp_0, "WOOED");
    r0 = pxsim_Array__push(s.tmp_0, "JADED");
    r0 = pxsim_Array__push(s.tmp_0, "ERRED");
    r0 = pxsim_Array__push(s.tmp_0, "DEEPS");
    r0 = pxsim_Array__push(s.tmp_0, "SOWED");
    r0 = pxsim_Array__push(s.tmp_0, "DEARS");
    r0 = pxsim_Array__push(s.tmp_0, "PLUMS");
    r0 = pxsim_Array__push(s.tmp_0, "GUSTO");
    r0 = pxsim_Array__push(s.tmp_0, "HAWKS");
    r0 = pxsim_Array__push(s.tmp_0, "SQUAT");
    r0 = pxsim_Array__push(s.tmp_0, "KNACK");
    r0 = pxsim_Array__push(s.tmp_0, "SCOWL");
    r0 = pxsim_Array__push(s.tmp_0, "PLAZA");
    r0 = pxsim_Array__push(s.tmp_0, "SHEEN");
    r0 = pxsim_Array__push(s.tmp_0, "BITES");
    r0 = pxsim_Array__push(s.tmp_0, "DOCKS");
    r0 = pxsim_Array__push(s.tmp_0, "AGILE");
    r0 = pxsim_Array__push(s.tmp_0, "SERFS");
    r0 = pxsim_Array__push(s.tmp_0, "OASIS");
    r0 = pxsim_Array__push(s.tmp_0, "LACES");
    r0 = pxsim_Array__push(s.tmp_0, "FOGGY");
    r0 = pxsim_Array__push(s.tmp_0, "DINER");
    r0 = pxsim_Array__push(s.tmp_0, "HUMID");
    r0 = pxsim_Array__push(s.tmp_0, "QUAIL");
    r0 = pxsim_Array__push(s.tmp_0, "LILLY");
    r0 = pxsim_Array__push(s.tmp_0, "FADES");
    r0 = pxsim_Array__push(s.tmp_0, "WRAPT");
    r0 = pxsim_Array__push(s.tmp_0, "GRUFF");
    r0 = pxsim_Array__push(s.tmp_0, "WEEPS");
    r0 = pxsim_Array__push(s.tmp_0, "LUSTS");
    r0 = pxsim_Array__push(s.tmp_0, "SLIMY");
    r0 = pxsim_Array__push(s.tmp_0, "TRUMP");
    r0 = pxsim_Array__push(s.tmp_0, "COVET");
    r0 = pxsim_Array__push(s.tmp_0, "FEIGN");
    r0 = pxsim_Array__push(s.tmp_0, "RATED");
    r0 = pxsim_Array__push(s.tmp_0, "GLOWS");
    r0 = pxsim_Array__push(s.tmp_0, "PALED");
    r0 = pxsim_Array__push(s.tmp_0, "MOOSE");
    r0 = pxsim_Array__push(s.tmp_0, "SHEAF");
    r0 = pxsim_Array__push(s.tmp_0, "SWARD");
    r0 = pxsim_Array__push(s.tmp_0, "HAREM");
    r0 = pxsim_Array__push(s.tmp_0, "PIKES");
    r0 = pxsim_Array__push(s.tmp_0, "WREST");
    r0 = pxsim_Array__push(s.tmp_0, "CHUMS");
    r0 = pxsim_Array__push(s.tmp_0, "LOTUS");
    r0 = pxsim_Array__push(s.tmp_0, "CUFFS");
    r0 = pxsim_Array__push(s.tmp_0, "BARKS");
    r0 = pxsim_Array__push(s.tmp_0, "GYPSY");
    r0 = pxsim_Array__push(s.tmp_0, "URBAN");
    r0 = pxsim_Array__push(s.tmp_0, "TIRES");
    r0 = pxsim_Array__push(s.tmp_0, "PURGE");
    r0 = pxsim_Array__push(s.tmp_0, "DOSES");
    r0 = pxsim_Array__push(s.tmp_0, "SLYLY");
    r0 = pxsim_Array__push(s.tmp_0, "VIGIL");
    r0 = pxsim_Array__push(s.tmp_0, "THUMP");
    r0 = pxsim_Array__push(s.tmp_0, "BUYER");
    r0 = pxsim_Array__push(s.tmp_0, "SNARL");
    r0 = pxsim_Array__push(s.tmp_0, "CHIME");
    r0 = pxsim_Array__push(s.tmp_0, "ROBED");
    r0 = pxsim_Array__push(s.tmp_0, "SLEET");
    r0 = pxsim_Array__push(s.tmp_0, "RARER");
    r0 = pxsim_Array__push(s.tmp_0, "SEVER");
    r0 = pxsim_Array__push(s.tmp_0, "FOYER");
    r0 = pxsim_Array__push(s.tmp_0, "SHAKY");
    r0 = pxsim_Array__push(s.tmp_0, "CAGES");
    r0 = pxsim_Array__push(s.tmp_0, "FOURS");
    r0 = pxsim_Array__push(s.tmp_0, "NINTH");
    r0 = pxsim_Array__push(s.tmp_0, "BRAID");
    r0 = pxsim_Array__push(s.tmp_0, "FEUDS");
    r0 = pxsim_Array__push(s.tmp_0, "GANGS");
    r0 = pxsim_Array__push(s.tmp_0, "LEECH");
    r0 = pxsim_Array__push(s.tmp_0, "PILLS");
    r0 = pxsim_Array__push(s.tmp_0, "PANTS");
    r0 = pxsim_Array__push(s.tmp_0, "HARES");
    r0 = pxsim_Array__push(s.tmp_0, "RIOTS");
    r0 = pxsim_Array__push(s.tmp_0, "PIPER");
    r0 = pxsim_Array__push(s.tmp_0, "KICKS");
    r0 = pxsim_Array__push(s.tmp_0, "SPELT");
    r0 = pxsim_Array__push(s.tmp_0, "PLAID");
    r0 = pxsim_Array__push(s.tmp_0, "MURKY");
    r0 = pxsim_Array__push(s.tmp_0, "REVUE");
    r0 = pxsim_Array__push(s.tmp_0, "AMAZE");
    r0 = pxsim_Array__push(s.tmp_0, "LOOMS");
    r0 = pxsim_Array__push(s.tmp_0, "CHUCK");
    r0 = pxsim_Array__push(s.tmp_0, "RELAY");
    r0 = pxsim_Array__push(s.tmp_0, "FIBER");
    r0 = pxsim_Array__push(s.tmp_0, "GLINT");
    r0 = pxsim_Array__push(s.tmp_0, "SLOTH");
    r0 = pxsim_Array__push(s.tmp_0, "MOTIF");
    r0 = pxsim_Array__push(s.tmp_0, "BATCH");
    r0 = pxsim_Array__push(s.tmp_0, "DOZED");
    r0 = pxsim_Array__push(s.tmp_0, "GULLY");
    r0 = pxsim_Array__push(s.tmp_0, "SEAMS");
    r0 = pxsim_Array__push(s.tmp_0, "MAILS");
    r0 = pxsim_Array__push(s.tmp_0, "WHINE");
    r0 = pxsim_Array__push(s.tmp_0, "MILKY");
    r0 = pxsim_Array__push(s.tmp_0, "ANVIL");
    r0 = pxsim_Array__push(s.tmp_0, "SHRED");
    r0 = pxsim_Array__push(s.tmp_0, "CHIDE");
    r0 = pxsim_Array__push(s.tmp_0, "MOANS");
    r0 = pxsim_Array__push(s.tmp_0, "DRAGS");
    r0 = pxsim_Array__push(s.tmp_0, "TUSKS");
    r0 = pxsim_Array__push(s.tmp_0, "TOWED");
    r0 = pxsim_Array__push(s.tmp_0, "AXIOM");
    r0 = pxsim_Array__push(s.tmp_0, "HOVEL");
    r0 = pxsim_Array__push(s.tmp_0, "CONES");
    r0 = pxsim_Array__push(s.tmp_0, "HOBBY");
    r0 = pxsim_Array__push(s.tmp_0, "BOILS");
    r0 = pxsim_Array__push(s.tmp_0, "CRABS");
    r0 = pxsim_Array__push(s.tmp_0, "WARNS");
    r0 = pxsim_Array__push(s.tmp_0, "ACHES");
    r0 = pxsim_Array__push(s.tmp_0, "YEARN");
    r0 = pxsim_Array__push(s.tmp_0, "SLANT");
    r0 = pxsim_Array__push(s.tmp_0, "METER");
    r0 = pxsim_Array__push(s.tmp_0, "PHONE");
    r0 = pxsim_Array__push(s.tmp_0, "SUPER");
    r0 = pxsim_Array__push(s.tmp_0, "FUSED");
    r0 = pxsim_Array__push(s.tmp_0, "GLOSS");
    r0 = pxsim_Array__push(s.tmp_0, "ADEPT");
    r0 = pxsim_Array__push(s.tmp_0, "GAZES");
    r0 = pxsim_Array__push(s.tmp_0, "SCAMP");
    r0 = pxsim_Array__push(s.tmp_0, "HEATS");
    r0 = pxsim_Array__push(s.tmp_0, "TIPSY");
    r0 = pxsim_Array__push(s.tmp_0, "HOWLS");
    r0 = pxsim_Array__push(s.tmp_0, "MEMES");
    r0 = pxsim_Array__push(s.tmp_0, "ROOMY");
    r0 = pxsim_Array__push(s.tmp_0, "PEALS");
    r0 = pxsim_Array__push(s.tmp_0, "SULLY");
    r0 = pxsim_Array__push(s.tmp_0, "BRINE");
    r0 = pxsim_Array__push(s.tmp_0, "FIRMS");
    r0 = pxsim_Array__push(s.tmp_0, "FARES");
    r0 = pxsim_Array__push(s.tmp_0, "WAXEN");
    r0 = pxsim_Array__push(s.tmp_0, "BULBS");
    r0 = pxsim_Array__push(s.tmp_0, "RAKED");
    r0 = pxsim_Array__push(s.tmp_0, "PINTS");
    r0 = pxsim_Array__push(s.tmp_0, "WHIFF");
    r0 = pxsim_Array__push(s.tmp_0, "QUITS");
    r0 = pxsim_Array__push(s.tmp_0, "ARGOS");
    r0 = pxsim_Array__push(s.tmp_0, "FADER");
    r0 = pxsim_Array__push(s.tmp_0, "AGLOW");
    r0 = pxsim_Array__push(s.tmp_0, "AUDIO");
    r0 = pxsim_Array__push(s.tmp_0, "SEETH");
    r0 = pxsim_Array__push(s.tmp_0, "STREW");
    r0 = pxsim_Array__push(s.tmp_0, "GRAZE");
    r0 = pxsim_Array__push(s.tmp_0, "KHAKI");
    r0 = pxsim_Array__push(s.tmp_0, "APTLY");
    r0 = pxsim_Array__push(s.tmp_0, "GOOSE");
    r0 = pxsim_Array__push(s.tmp_0, "POSED");
    r0 = pxsim_Array__push(s.tmp_0, "CHOPS");
    r0 = pxsim_Array__push(s.tmp_0, "TITHE");
    r0 = pxsim_Array__push(s.tmp_0, "ANGST");
    r0 = pxsim_Array__push(s.tmp_0, "CREAK");
    r0 = pxsim_Array__push(s.tmp_0, "DOWER");
    r0 = pxsim_Array__push(s.tmp_0, "QUELL");
    r0 = pxsim_Array__push(s.tmp_0, "SPOUT");
    r0 = pxsim_Array__push(s.tmp_0, "PORES");
    r0 = pxsim_Array__push(s.tmp_0, "GABLE");
    r0 = pxsim_Array__push(s.tmp_0, "ACRID");
    r0 = pxsim_Array__push(s.tmp_0, "PIPED");
    r0 = pxsim_Array__push(s.tmp_0, "ZONES");
    r0 = pxsim_Array__push(s.tmp_0, "LIARS");
    r0 = pxsim_Array__push(s.tmp_0, "ALBUM");
    r0 = pxsim_Array__push(s.tmp_0, "SNIFF");
    r0 = pxsim_Array__push(s.tmp_0, "MARES");
    r0 = pxsim_Array__push(s.tmp_0, "SHACK");
    r0 = pxsim_Array__push(s.tmp_0, "OMITS");
    r0 = pxsim_Array__push(s.tmp_0, "CITES");
    r0 = pxsim_Array__push(s.tmp_0, "AROMA");
    r0 = pxsim_Array__push(s.tmp_0, "PINED");
    r0 = pxsim_Array__push(s.tmp_0, "USURY");
    r0 = pxsim_Array__push(s.tmp_0, "SPILL");
    r0 = pxsim_Array__push(s.tmp_0, "LURCH");
    r0 = pxsim_Array__push(s.tmp_0, "WREAK");
    r0 = pxsim_Array__push(s.tmp_0, "SLIME");
    r0 = pxsim_Array__push(s.tmp_0, "TONGS");
    r0 = pxsim_Array__push(s.tmp_0, "ISLET");
    r0 = pxsim_Array__push(s.tmp_0, "EASEL");
    r0 = pxsim_Array__push(s.tmp_0, "NOOKS");
    r0 = pxsim_Array__push(s.tmp_0, "BUSTS");
    r0 = pxsim_Array__push(s.tmp_0, "ENACT");
    r0 = pxsim_Array__push(s.tmp_0, "GUILD");
    r0 = pxsim_Array__push(s.tmp_0, "SIZED");
    r0 = pxsim_Array__push(s.tmp_0, "SPIEL");
    r0 = pxsim_Array__push(s.tmp_0, "OILED");
    r0 = pxsim_Array__push(s.tmp_0, "NATAL");
    r0 = pxsim_Array__push(s.tmp_0, "BASER");
    r0 = pxsim_Array__push(s.tmp_0, "QUOTA");
    r0 = pxsim_Array__push(s.tmp_0, "LARKS");
    r0 = pxsim_Array__push(s.tmp_0, "DOWNY");
    r0 = pxsim_Array__push(s.tmp_0, "GULLS");
    r0 = pxsim_Array__push(s.tmp_0, "ARBOR");
    r0 = pxsim_Array__push(s.tmp_0, "IDIOM");
    r0 = pxsim_Array__push(s.tmp_0, "QUILT");
    r0 = pxsim_Array__push(s.tmp_0, "QUACK");
    r0 = pxsim_Array__push(s.tmp_0, "TALON");
    r0 = pxsim_Array__push(s.tmp_0, "DUELS");
    r0 = pxsim_Array__push(s.tmp_0, "RANCH");
    r0 = pxsim_Array__push(s.tmp_0, "WAVER");
    r0 = pxsim_Array__push(s.tmp_0, "HOOPS");
    r0 = pxsim_Array__push(s.tmp_0, "GRAIL");
    r0 = pxsim_Array__push(s.tmp_0, "JUICY");
    r0 = pxsim_Array__push(s.tmp_0, "ALLOY");
    r0 = pxsim_Array__push(s.tmp_0, "SCOFF");
    r0 = pxsim_Array__push(s.tmp_0, "GLUED");
    r0 = pxsim_Array__push(s.tmp_0, "NOTCH");
    r0 = pxsim_Array__push(s.tmp_0, "BRUNT");
    r0 = pxsim_Array__push(s.tmp_0, "WARMS");
    r0 = pxsim_Array__push(s.tmp_0, "TWIST");
    r0 = pxsim_Array__push(s.tmp_0, "RISKY");
    r0 = pxsim_Array__push(s.tmp_0, "OBEYS");
    r0 = pxsim_Array__push(s.tmp_0, "HARPS");
    r0 = pxsim_Array__push(s.tmp_0, "TIDAL");
    r0 = pxsim_Array__push(s.tmp_0, "PRIER");
    r0 = pxsim_Array__push(s.tmp_0, "ENDOW");
    r0 = pxsim_Array__push(s.tmp_0, "FAIRS");
    r0 = pxsim_Array__push(s.tmp_0, "BAKED");
    r0 = pxsim_Array__push(s.tmp_0, "PIVOT");
    r0 = pxsim_Array__push(s.tmp_0, "WIRED");
    r0 = pxsim_Array__push(s.tmp_0, "RAFTS");
    r0 = pxsim_Array__push(s.tmp_0, "PLATS");
    r0 = pxsim_Array__push(s.tmp_0, "STINT");
    r0 = pxsim_Array__push(s.tmp_0, "RAGES");
    r0 = pxsim_Array__push(s.tmp_0, "DUPED");
    r0 = pxsim_Array__push(s.tmp_0, "VOUCH");
    r0 = pxsim_Array__push(s.tmp_0, "ANNEX");
    r0 = pxsim_Array__push(s.tmp_0, "HUNTS");
    r0 = pxsim_Array__push(s.tmp_0, "PROBE");
    r0 = pxsim_Array__push(s.tmp_0, "FOUNT");
    r0 = pxsim_Array__push(s.tmp_0, "CAGED");
    r0 = pxsim_Array__push(s.tmp_0, "LOOPS");
    r0 = pxsim_Array__push(s.tmp_0, "TUNED");
    r0 = pxsim_Array__push(s.tmp_0, "POSER");
    r0 = pxsim_Array__push(s.tmp_0, "SNORT");
    r0 = pxsim_Array__push(s.tmp_0, "FILMY");
    r0 = pxsim_Array__push(s.tmp_0, "FEINT");
    r0 = pxsim_Array__push(s.tmp_0, "BATON");
    r0 = pxsim_Array__push(s.tmp_0, "SCION");
    r0 = pxsim_Array__push(s.tmp_0, "CLOVE");
    r0 = pxsim_Array__push(s.tmp_0, "WHOOP");
    r0 = pxsim_Array__push(s.tmp_0, "DEBUT");
    r0 = pxsim_Array__push(s.tmp_0, "PAILS");
    r0 = pxsim_Array__push(s.tmp_0, "DESKS");
    r0 = pxsim_Array__push(s.tmp_0, "SIDED");
    r0 = pxsim_Array__push(s.tmp_0, "TRITE");
    r0 = pxsim_Array__push(s.tmp_0, "POPPY");
    r0 = pxsim_Array__push(s.tmp_0, "EQUIP");
    r0 = pxsim_Array__push(s.tmp_0, "URINE");
    r0 = pxsim_Array__push(s.tmp_0, "DEEMS");
    r0 = pxsim_Array__push(s.tmp_0, "HERON");
    r0 = pxsim_Array__push(s.tmp_0, "SHIRK");
    r0 = pxsim_Array__push(s.tmp_0, "SORES");
    r0 = pxsim_Array__push(s.tmp_0, "ASHEN");
    r0 = pxsim_Array__push(s.tmp_0, "VERSO");
    r0 = pxsim_Array__push(s.tmp_0, "SWOOP");
    r0 = pxsim_Array__push(s.tmp_0, "SOFAS");
    r0 = pxsim_Array__push(s.tmp_0, "TIMED");
    r0 = pxsim_Array__push(s.tmp_0, "SCOUR");
    r0 = pxsim_Array__push(s.tmp_0, "DREAR");
    r0 = pxsim_Array__push(s.tmp_0, "TRAYS");
    r0 = pxsim_Array__push(s.tmp_0, "LURKS");
    r0 = pxsim_Array__push(s.tmp_0, "GOURD");
    r0 = pxsim_Array__push(s.tmp_0, "WANED");
    r0 = pxsim_Array__push(s.tmp_0, "FELON");
    r0 = pxsim_Array__push(s.tmp_0, "RAYON");
    r0 = pxsim_Array__push(s.tmp_0, "BUDGE");
    r0 = pxsim_Array__push(s.tmp_0, "USURP");
    r0 = pxsim_Array__push(s.tmp_0, "JOKED");
    r0 = pxsim_Array__push(s.tmp_0, "QUAYS");
    r0 = pxsim_Array__push(s.tmp_0, "OTTER");
    r0 = pxsim_Array__push(s.tmp_0, "ABYSS");
    r0 = pxsim_Array__push(s.tmp_0, "SPICY");
    r0 = pxsim_Array__push(s.tmp_0, "VOTER");
    r0 = pxsim_Array__push(s.tmp_0, "SIREN");
    r0 = pxsim_Array__push(s.tmp_0, "ROOKS");
    r0 = pxsim_Array__push(s.tmp_0, "GLAND");
    r0 = pxsim_Array__push(s.tmp_0, "WIDEN");
    r0 = pxsim_Array__push(s.tmp_0, "PLUSH");
    r0 = pxsim_Array__push(s.tmp_0, "CRUMB");
    r0 = pxsim_Array__push(s.tmp_0, "LARVA");
    r0 = pxsim_Array__push(s.tmp_0, "BEVEL");
    r0 = pxsim_Array__push(s.tmp_0, "REELS");
    r0 = pxsim_Array__push(s.tmp_0, "RACEY");
    r0 = pxsim_Array__push(s.tmp_0, "KNELL");
    r0 = pxsim_Array__push(s.tmp_0, "LLAMA");
    r0 = pxsim_Array__push(s.tmp_0, "VENTS");
    r0 = pxsim_Array__push(s.tmp_0, "SLUMS");
    r0 = pxsim_Array__push(s.tmp_0, "GIRTH");
    r0 = pxsim_Array__push(s.tmp_0, "LAGER");
    r0 = pxsim_Array__push(s.tmp_0, "MAZES");
    r0 = pxsim_Array__push(s.tmp_0, "UNDID");
    r0 = pxsim_Array__push(s.tmp_0, "THYME");
    r0 = pxsim_Array__push(s.tmp_0, "BLUES");
    r0 = pxsim_Array__push(s.tmp_0, "SALVE");
    r0 = pxsim_Array__push(s.tmp_0, "SIRES");
    r0 = pxsim_Array__push(s.tmp_0, "ROAST");
    r0 = pxsim_Array__push(s.tmp_0, "YARNS");
    r0 = pxsim_Array__push(s.tmp_0, "SAWED");
    r0 = pxsim_Array__push(s.tmp_0, "SAVOR");
    r0 = pxsim_Array__push(s.tmp_0, "SWIMS");
    r0 = pxsim_Array__push(s.tmp_0, "HUSKS");
    r0 = pxsim_Array__push(s.tmp_0, "FAUNA");
    r0 = pxsim_Array__push(s.tmp_0, "COMBS");
    r0 = pxsim_Array__push(s.tmp_0, "VENAL");
    r0 = pxsim_Array__push(s.tmp_0, "BLINK");
    r0 = pxsim_Array__push(s.tmp_0, "CYNIC");
    r0 = pxsim_Array__push(s.tmp_0, "DUPES");
    r0 = pxsim_Array__push(s.tmp_0, "LOSER");
    r0 = pxsim_Array__push(s.tmp_0, "TERSE");
    r0 = pxsim_Array__push(s.tmp_0, "DUNES");
    r0 = pxsim_Array__push(s.tmp_0, "REBUS");
    r0 = pxsim_Array__push(s.tmp_0, "FUSSY");
    r0 = pxsim_Array__push(s.tmp_0, "DRILY");
    r0 = pxsim_Array__push(s.tmp_0, "HEWED");
    r0 = pxsim_Array__push(s.tmp_0, "ULTRA");
    r0 = pxsim_Array__push(s.tmp_0, "EBBED");
    r0 = pxsim_Array__push(s.tmp_0, "VIPER");
    r0 = pxsim_Array__push(s.tmp_0, "CAFES");
    r0 = pxsim_Array__push(s.tmp_0, "CRAZE");
    r0 = pxsim_Array__push(s.tmp_0, "DRONE");
    r0 = pxsim_Array__push(s.tmp_0, "GILLS");
    r0 = pxsim_Array__push(s.tmp_0, "CRYPT");
    r0 = pxsim_Array__push(s.tmp_0, "GRAFT");
    r0 = pxsim_Array__push(s.tmp_0, "HALTS");
    r0 = pxsim_Array__push(s.tmp_0, "GAPED");
    globals.WORDS___4037 = (s.tmp_0);
    r0 = pxsim_Array__mk();
    s.tmp_0 = r0;
    r0 = pxsim_Array__push(s.tmp_0, "MakeCode Arcade port of");
    r0 = pxsim_Array__push(s.tmp_0, "Wordle by Josh Wardle");
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = pxsim_Array__push(s.tmp_1, s.tmp_0);
    r0 = pxsim_Array__mk();
    s.tmp_2 = r0;
    r0 = pxsim_Array__push(s.tmp_2, "Programmed in");
    r0 = pxsim_Array__push(s.tmp_2, "MakeCode Arcade");
    r0 = pxsim_Array__push(s.tmp_1, s.tmp_2);
    r0 = pxsim_Array__mk();
    s.tmp_3 = r0;
    r0 = pxsim_Array__push(s.tmp_3, "by");
    r0 = pxsim_Array__push(s.tmp_3, "Alex K.");
    r0 = pxsim_Array__push(s.tmp_1, s.tmp_3);
    globals.TEXT_HEADLINES___62528 = (s.tmp_1);
    r0 = pxsim_Array__mk();
    s.tmp_0 = r0;
    r0 = pxsim_Array__push(s.tmp_0, "Green = Correct place");
    r0 = pxsim_Array__push(s.tmp_0, "Yellow = Wrong location");
    r0 = pxsim_Array__push(s.tmp_0, "Black = Letter not in word");
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = pxsim_Array__push(s.tmp_1, s.tmp_0);
    globals.TEXT_ACTIONS___62533 = (s.tmp_1);
    r0 = pxsim_Array__mk();
    s.tmp_0 = r0;
    r0 = pxsim_Array__push(s.tmp_0, "What's My");
    r0 = pxsim_Array__push(s.tmp_0, "Word?");
    globals.TEXT_TITLES___62536 = (s.tmp_0);
    globals.g_gameMode___62539 = (3);
    globals.g_splashScreen___62541 = (null);
    s.tmp_0 = controller_Button_onEvent__P1978_mk(s);
    s.tmp_0.arg0 = globals.A___1905;
    s.tmp_0.arg1 = 2049;
    s.tmp_0.arg2 = inline__P79535;
    s.callLocIdx = 67; s.pc = 44; return s.tmp_0;
  case 44:
    r0 = s.retval;
    s.tmp_0 = controller_Button_onEvent__P1978_mk(s);
    s.tmp_0.arg0 = globals.B___1906;
    s.tmp_0.arg1 = 2049;
    s.tmp_0.arg2 = inline__P79546;
    s.callLocIdx = 70; s.pc = 45; return s.tmp_0;
  case 45:
    r0 = s.retval;
    s.tmp_0 = controller_Button_onEvent__P1978_mk(s);
    s.tmp_0.arg0 = globals.down___1910;
    s.tmp_0.arg1 = 2049;
    s.tmp_0.arg2 = inline__P79558;
    s.callLocIdx = 72; s.pc = 46; return s.tmp_0;
  case 46:
    r0 = s.retval;
    s.tmp_0 = controller_Button_onEvent__P1978_mk(s);
    s.tmp_0.arg0 = globals.left___1907;
    s.tmp_0.arg1 = 2049;
    s.tmp_0.arg2 = inline__P79567;
    s.callLocIdx = 74; s.pc = 47; return s.tmp_0;
  case 47:
    r0 = s.retval;
    s.tmp_0 = controller_Button_onEvent__P1978_mk(s);
    s.tmp_0.arg0 = globals.right___1909;
    s.tmp_0.arg1 = 2049;
    s.tmp_0.arg2 = inline__P79576;
    s.callLocIdx = 76; s.pc = 48; return s.tmp_0;
  case 48:
    r0 = s.retval;
    s.tmp_0 = controller_Button_onEvent__P1978_mk(s);
    s.tmp_0.arg0 = globals.up___1908;
    s.tmp_0.arg1 = 2049;
    s.tmp_0.arg2 = inline__P79585;
    s.callLocIdx = 78; s.pc = 49; return s.tmp_0;
  case 49:
    r0 = s.retval;
    s.tmp_0 = controller_combos_attachCombo__P4023_mk(s);
    s.tmp_0.arg0 = "uuddlrlrba";
    s.tmp_0.arg1 = inline__P79592;
    s.callLocIdx = 82; s.pc = 50; return s.tmp_0;
  case 50:
    r0 = s.retval;
    s.tmp_0 = helpers__registerFactory__P2935_mk(s);
    s.tmp_0.arg0 = "image";
    s.tmp_0.arg1 = myImages_inline__P6828;
    s.callLocIdx = 84; s.pc = 51; return s.tmp_0;
  case 51:
    r0 = s.retval;
    s.tmp_0 = helpers__registerFactory__P2935_mk(s);
    s.tmp_0.arg0 = "animation";
    s.tmp_0.arg1 = myImages_inline__P6837;
    s.callLocIdx = 86; s.pc = 52; return s.tmp_0;
  case 52:
    r0 = s.retval;
    globals.g_game___62752 = (null);
    globals.g_stats___62622 = (null);
    s.tmp_0 = startAttractMode__P62554_mk(s);
    s.callLocIdx = 164; s.pc = 53; return s.tmp_0;
  case 53:
    r0 = s.retval;
    s.tmp_0 = game_onUpdate__P2628_mk(s);
    s.tmp_0.arg0 = inline__P62772;
    s.callLocIdx = 177; s.pc = 54; return s.tmp_0;
  case 54:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
_main___P84068.info = {"start":0,"length":0,"line":0,"column":0,"endLine":0,"endColumn":0,"fileName":"pxt_modules/arcade-text/main.ts","functionName":"<main>","argumentNames":[]}
_main___P84068.continuations = [  ]

function _main___P84068_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: _main___P84068, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
} }

const _hex4233 = pxsim.BufferMethods.createBufferFromHex("1f00210023002500270029002c002e003100340037003a003e004100450049004e00520057005c00620068006e0075007b0083008b0093009c00a500af00b900c400d000dc00e900f70006011501260137014a015d01720188019f01b801d201ee010b022a024b026e029302ba02e40210033f037003a403dc03170455049704dd0427057505c80520067d06e0064907b8072d08a9082d09b9094d0aea0a900b400cfa0cc00d910e6f0f5a1053115b1272139a14d41520178018f519801b231dde1e")
const _hex19118 = pxsim.BufferMethods.createBufferFromHex("2000000000000000210000005e0000002200000e000e0000230028fe28fe280024004c92ff926400250002651248a64026006c92926ca000270000000e000000280000007c82000029000000827c00002a005438103854002b0010107c1010002c000000907000002d001010101010002e000000606000002f000060100806003000003c42423c00310000447e4000003200004462524c00330000424a4e320034003028247e20003500004e4a4a32003600003c4a4a30003700000262120e00380000344a4a34003900000c52523c003a0000006c6c00003b000000967600003c001028284444003d002828282828003e004444282810003f0000025909060040003c425a560800410078141214780042007e4a4a4a34004300003c424224004400007e42423c004500007e4a4a42004600007e0a0a02004700003c425234004800007e08087e00490000427e4200004a002040423e02004b00007e081462004c00007e404040004d007e0418047e004e00007e04087e004f003c4242423c005000007e12120c005100003c5262bc005200007e12126c00530000244a522400540002027e0202005500003e40403e005600001e70701e0057007e2018207e00580042241824420059000608700806005a000062524a46005b00007e424200005c000006081060005d000042427e00005e000804020408005f00808080808000600000000204000061000030484878006200007e4848300063000030484848006400003048487e006500003068585000660000107c12040067000018a4a478006800007e08087000690000487a4000006a000040847d00006b00007e102840006c0000427e4000006d007808300870006e000078080870006f00003048483000700000fc24241800710000182424fc0072000078100810007300005058682800740000083e48200075000038404078007600001860601800770038403040380078000048303048007900005ca0a07c007a000048685848007b000008364100007c000000fe0000007d000041360800007e00000804080400a000000000000000a10000007a000000a200003048fc4800a30090fc92928400a400542844285400a5002a2c782c2a00a6000000ee000000a7000094aaaa5200a800000200020000a9003e414955413eaa0000242a2e0000ab00102854284400ac00001010107000ad00001010101000ae003e415d45413eaf00000202020200b000000814140800b1008888be888800b2000024322c0000b30000222a140000b400000004020000b50000f840207800b6000c1e7e027e00b700000010000000b800000080400000b90000243e200000ba0000242a240000bb00442854281000bc00025f70f84000bd00021f90c8b000be0011557af84000bf000030484d2000c000601916186000c100601816196000c200601a151a6000c300601a151a6100c400601914196000c500601a151a6000c6007c0a7e4a4200c700001ea1611200c800007c55564400c900007c56554400ca00007c56554600cb00007c55544500cc0000457e440000cd0000447e450000ce0000467d460000cf0000457c450000d000087e4a423c00d100007e09127d00d200003845463800d300003846453800d400003846453a00d500003a45463900d600003845443900d700442810284400d80000fc724e3f00d900003c41423c00da00003c42413c00db00003c42413e00dc00003c41403d00dd00040872090400de00007e24241800df00007c025a2400e0000030494a7800e10000304a497800e20000304a497a00e3000032494a7900e40000304a487a00e50000304a4d7a00e600304878685000e7000018a4642400e8000030695a5000e90000306a595000ea0000306a595200eb0000306a585200ec0000497a400000ed0000487a410000ee00004a79420000ef00004a78420000f00000304a4b3d00f100007a090a7100f2000030494a3000f30000304a493000f40000304a493200f5000032494a3100f60000304a483200f700101054101000f800007068583800f900003841427800fa00003842417800fb00003842417a00fc00003842407a00fd0000b84241f800fe0000ff24241800ff00005ca1a07d000001601915196000010100304a4a7a000201611a16196000030100314a4a790004013c0a094abc00050100182464bc000601003846452800070100304a4948000801003846452a00090100304a494a000a010038444528000b010030484a48000c010038454629000d010030494a49000e01007c454639000f0100314a497e001001087e4a423c00110130484c7e04001201007d55554500130100326a5a52001401007d56564500150100316a5a51001601007c55544400170100306a5850001801003f65a521001901001874ac28001a01007c555645001b010030695a51001c010038465536001d0100304a49f2001e010039465635001f0100314a4af100200100384455340021010018a4a578002201001ea1691a0023010018a6a578002401007812117a0025017e080a7102002601047e147e04002701047e0c08700028010002457e450029010002497a41002a0100457d4500002b01004a7a4200002c0100014a7a49002d0100014a7a41002e0100217fa100002f0100247da00000300100447d440000310100487840000032017e0022423e0033013d0040847d0034012040463d0600350100800af90200360100bf440a3100370100bf4814200038010078102848003901007c404241003a0100467d4000003b01003fa06020003c0100a17f2000003d01007c414241003e0100457e4100003f01007e40484000400100427e4008004101107e48404000420100527e4800004301007c0a117c00440100780a097000450100bf42043f00460100bc440438004701007c09127d00480100790a09700049010a06780870004a01003f02847f004b01003c048478004c013945454539004d0100324a4a32004e013946464639004f0100314a4a310050013a4544463900510132494832010052013c427e4a420053013048306850005401007c163548005501007812091000560100bf49093600570100bc480408005801007d1635480059010079120910005a010048565524005b0100505a6928005c010048565526005d0100505a692a005e010012a56912005f010028ac741400600100485556250061010050596a290062010101bf410100630100049f641000640104057e050400650100083d4a2100660102127e120200670100183e5820006801003a414239006901003a414279006a01003d41413d006b01003a42427a006c010039424239006d010039424279006e01003a45453a006f01003a45457a0070013a41403a010071013a41407a01007201001f60a01f007301001c60a03c00740178221122780075013842314238007601081261120800770100b84241fa00780104097009040079010064564d44007a0100486a5948007b010064544d44007c010048685a48007d010064554e45007e010048695a49007f0100087c0204008f01003452523c00920100887e090200a0013c42423c0806a101003048483008af01003e403e0806b001003840781008b501006a5a4a4e00b601005878585800d101003845463900d2010030494a3100e601003845563500e7010030494af100fa0100742a750000fb0100304c4a7d00fc0178147e554400fd0130487a695000fe010078744e3d00ff0100706a59380018020012a569120019020028ac7414001a020101bf4101001b0200049f641000bb0200000c0a0000bc0200000a060000bd020000060a0000c602000201020000c702000102010000c902000202020000d802000102020100d902000002000000da02000205020000db02000040800000dc02000201020100dd02020100020100740300000201000075030000804000007a030000c08000007e03000096760000840300000300000085030200030002008603037c12127c008703000010000000880303007e4a4200890303007e087e008a030300427e42008c03033c42423c008e0303000e700e008f03035c62625c00900302003b400200910378141214780092037e4a4a4a34009303007e0202020094036058465860009503007e4a4a420096030062524a46009703007e08087e0098033c4a4a4a3c00990300427e4200009a03007e081462009b036018061860009c037e0418047e009d03007e04087e009e0300424a4a42009f033c4242423c00a003007e02027e00a103007e12120c00a30300665a424200a40302027e020200a503060870080600a60318247e241800a703422418244200a8030e107e100e00a9035c6202625c00aa0300457c450000ab03040970090400ac030030484a7900ad030030685a5100ae0378100a09f000af03003a41200000b0033a4043403a00b103003048487800b20300fe25251a00b3030c30c0300c00b403344a4a4a3000b503003068585000b603021aa6a24200b7033c080404f800b803003c4a4a3c00b903003840200000ba03007820504800bb03641212227c00bc03fc2020103c00bd03182040201800be03112d2ba94100bf03003048483000c003087808780800c103f82424241800c2031824a4a44800c303304848582800c403000838482800c503384040403800c6031c20f8241800c703c4281028c400c8031c20fc201c00c903304820483000ca03000238422000cb03384240423800cc0330484a493000cd03384042413800ce03304822493000d0033c52525c2000d10310344a3c0800d203067804020400d303120a7c020400d4030d7009040800d5031824ff241800d603384828483800d70348302221d800da031c2221a14200db031824a4a44200dc037e1212020200dd0300fc24240400de033e2010087c00df030c0ac9281800e003700c621c7000e10301092516f800e2039ea0bea07e00e30398a0b8a07800e4030c1214107e00e503001028207800e603be9088887000e70348544e443800e803245252524c00e903285454544800ea0364524c526400eb03086458640800ec03385454542200ed03306848682400ee03184a7e4a1800ef031848ff0a0800f003483020205800f10378a4a4a49800f203304848485000f303006080847d00f4033c4a4a4a3c00f5030030585848000004007c555644000104007c55544500020401013f8579000304007c0605040004043c4a4a422400050400244a522400060400427e420000070400457c45000008042040423e020009047c027e4830000a047e087e4830000b0402027e0a72000c04007c102a45000d047c2112087c000e040c5152523d000f043f20e0203f00100478141214780011047e4a4a4a300012047e4a4a4a34001304007e020202001404c07c427ec0001504007e4a4a4200160476087e087600170424424a4a34001804007e08047e001904007d120a7d001a04007e081462001b04403c02027e001c047e0418047e001d04007e08087e001e043c4242423c001f047e0202027e002004007e12120c002104003c42422400220402027e02020023040e5050503e00240418247e241800250442241824420026043f2020bf600027040e1010107e0028047e407e407e0029043f203fa07f002a04027e484830002b047e4848307e002c04007e484830002d0424424a4a3c002e047e183c423c002f04006c12127e0030043048487840003104003c4a4a3100320400786850200033040078080808003404c0704878c000350430686850000036044830783048003704004058683000380478402010780039047942221279003a040078203048003b044030080878003c047810201078003d047810101078003e043048484830003f047808080878004004fc24242418004104304848485000420408087808080043041ca0a0a07c0044041824ff241800450400483030480046043c2020bc60004704182020207800480478407840780049043c203ca07c004a040878505020004b047850502078004c040078505020004d044858683000004e047830304830004f0450282878000050040030696a500051040032686a50005204023f0a887000530400780a09080054040030685848005504005058682800560400487a4000005704004a784200005804004080847d0059047008785020005a047810785020005b04047e141060005c040078223148005d047841221078005e0418a1a2a279005f043c20e0203c006204027f4a4830006304087e5850200070040e107e100e00710418207820180072043c4a4a4a3c0073043068586830007404001e70180c0075040018603010009004007e020203009104007808080c009204087e0a0a0200930420782808080096043b043f043be0970424183c1824c09a04003f040a31c09b04003c101824c0ae04060870080600af040c10e0100c00b004161870181600b1042c30e0302c00b20421120c1221c0b3040024181824c0ba047e0808087000bb04007e08087000d804003452523c00d904002868583000e20400457d450000e304004a7a420000e8043c4a4a4a3c00e904003058583000ee04003d41413d00ef04003a42427a00d005681020285000d105484848784000d205004830600000d305080808780800d405680808087800d505000008780000d605080818680800d705087808087800d805784050487800d905000008180000da0504040404fc00db05484848483800dc050e4848281800dd05087848487800de05582010487000df05000004fc0000e005004040487800e105000878483800e205487840281800e305041c0404fc00e405485848483800e50504f820140800e605485060685000e705f40424241c00e805080808087000e905785058403800ea05487808087800f005087800087800f105081800087800f205081800081800f305000010080000f405100800100800021e7c5455542800031e007e484930000a1e007c454438000b1e003049487e001e1e007c151404001f1e001079140800401e7e0419047e00411e780832087000561e007c15140800571e00fc25241800601e004854552400611e0050586a28006a1e04047d0404006b1e00083d482000801e7c2112207c00811e384132403800821e7c2012217c00831e384032413800841e7c2110217c00851e384230423800f21e040972080400f31e00b84142f800a3207e0a7a120a00a420a8fcaa828400a720087e2a1c0800ab200098a4a6bf02ac20183c5a5a4200af20627f224438009021103854101000912108047e0408009221101054381000932110207e201000942110381010381095212844fe442800")
const _hex10799 = pxsim.BufferMethods.createBufferFromHex("20000000000000000000000000000000000000000000000000002100000000000006fc0000000000000000000000000000000000220000001c00000000001c0000000000000000000000000000002300a000f807a000f807a00000000000000000000000000000002400000018022404460c8803000000000000000000000000000025003802c4017800200390040803000000000000000000000000260080037804a4041803800340040000000000000000000000002700000000001c00000000000000000000000000000000000000280000000000f8010606010800000000000000000000000000002900000001080606f801000000000000000000000000000000002a00040014000e001400040000000000000000000000000000002b0040004000f8034000400000000000000000000000000000002c000000000000090006000000000000000000000000000000002d000000800080008000000000000000000000000000000000002e000000000000060000000000000000000000000000000000002f00000c800360001c000300000000000000000000000000000030000000f80304040404f80300000000000000000000000000003100000004040404fc07000400040000000000000000000000003200000008060405c4043804000000000000000000000000000033000000080244044404b803000000000000000000000000000034000000800170010801fc070001000000000000000000000000350000023c0424042404c403000000000000000000000000000036000000f0034804440488030000000000000000000000000000370000000400c40734000c00000000000000000000000000000038000000b80344044404b803000000000000000000000000000039000000780284048802f00100000000000000000000000000003a000000000030060000000000000000000000000000000000003b000000000018090006000000000000000000000000000000003c004000a000a000a000100100000000000000000000000000003d002001200120012001200100000000000000000000000000003e0000001001a000a000a00040000000000000000000000000003f000000080084066400180000000000000000000000000000004000f0030c04c20822092409f80900000000000000000000000041000007f8008400f8000007000000000000000000000000000042000000fc0744044404b803000000000000000000000000000043000000f001080204040404080200000000000000000000000044000000fc0704040802f001000000000000000000000000000045000000fc07440444044404000000000000000000000000000046000000fc07440044004400000000000000000000000000000047000000f00108024404c803000000000000000000000000000048000000fc0740004000fc070000000000000000000000000000490000000404fc070404040400000000000000000000000000004a000000000200040004fc0300000000000000000000000000004b000000fc074000f0000c0304040000000000000000000000004c000000fc0700040004000400000000000000000000000000004d000000fc0738007000fc0700000000000000000000000000004e000000fc073800c003fc0700000000000000000000000000004f000000f80304040404f803000000000000000000000000000050000000fc07840084004400780000000000000000000000000051000000fc0102020206fc09000000000000000000000000000052000000fc074400c4013806000000000000000000000000000053000000180224044404880300000000000000000000000000005400000004000400fc070400040000000000000000000000000055000000fc0300040004fc03000000000000000000000000000056000c00f0030004f0030c00000000000000000000000000000057007c008007e001f0010007fc0000000000000000000000000058000404b8034000b80304040000000000000000000000000000590004003800c00730000c0000000000000000000000000000005a0004040407e4041c04040400000000000000000000000000005b0000000000ff0f0108010800000000000000000000000000005c0003001c0060008003000c00000000000000000000000000005d00000001080108ff0f000000000000000000000000000000005e004000380004003800400000000000000000000000000000005f00000800080008000800080000000000000000000000000000600000000000020004000000000000000000000000000000000061000000200390049004e007000000000000000000000000000062000000fc0710041004e003000000000000000000000000000063000000c001200210043004000200000000000000000000000064000000e00310041004fc07000000000000000000000000000065000000e00390049004e0040000000000000000000000000000660000001000f80714001400000000000000000000000000000067000000b806440944093c09040600000000000000000000000068000000fc0710001000e0070000000000000000000000000000690000000000f4070000000000000000000000000000000000006a00000800080008fd07000000000000000000000000000000006b000000fe078000e001100610040000000000000000000000006c0000000000fc030004000400000000000000000000000000006d00f00710001000e0071000e0070000000000000000000000006e000000f00710001000e00700000000000000000000000000006f000000e00310041004e003000000000000000000000000000070000000fc0f04010401f800000000000000000000000000000071000000f80004010401fc0f000000000000000000000000000072000000f00720001000100000000000000000000000000000007300000060029004900420030000000000000000000000000000740000001000fc0310041004000000000000000000000000000075000000f00300040004f007000000000000000000000000000076003000c0030004c003300000000000000000000000000000007700f0000007e003c0010007f000000000000000000000000000780010046003800060031004000000000000000000000000000079000c0870088007f0000c0000000000000000000000000000007a000000000410079004700410040000000000000000000000007b0000004000be070108010800000000000000000000000000007c0000000000ff0f0000000000000000000000000000000000007d00000001080108be07400000000000000000000000000000007e0080004000400080008000400000000000000000000000000090214000e0005001500140004000400040004000400040000000912100000000000018000400fe0f04001800000000000000000092210000400040004000400040004000400050015001e0004000932100000000000000030004fe0f000400030000000000000000")
const _hex19208 = pxsim.BufferMethods.createBufferFromHex("20000000000000002100001700000000220000030003000023000a1f0a1f0a0024000a17151d0a00250013090412190026000a15150a100027000003000000002800000e11000000290000110e0000002a00000a040a00002b0000040e0400002c000010080000002d000004040400002e000008000000002f0010080402010030000e11110e0000310000121f100000320019151512000033000911150b000034000c0a091f080035001715151509003600081416150800370011090503010038000a1515150a00390002150d0502003a00000a000000003b0000100a0000003c0000040a1100003d00000a0a0a00003e0000110a0400003f0002011505020040000e1115090e0041001e05051e000042001f15150a000043000e111111000044001f11110e000045001f151511000046001f050501000047000e1111150c0048001f04041f00004900111f110000004a000911110f01004b001f040a1100004c001f10101000004d001f0204021f004e001f0204081f004f000e11110e000050001f0505020000510006091916000052001f05050a10005300121515090000540001011f01010055000f10100f0000560007081008070057001f0804081f0058001b04041b0000590001021c0201005a001915131100005b00001f111100005c000102040810005d000011111f00005e000002010200005f00101010101000600000010200000061000c12121e100062001f141408000063000c121212000064000814141f000065000e15151200006600041e0501000067000215150f000068001f04041800006900001d000000006a000010100d00006b001f040a1000006c00000f101000006d001e0204021e006e001e02021c00006f000c12120c000070001e0a0a0400007100040a0a1e000072001c0202020000730010140a0200007400000f1414100075000e10101e1000760006081008060077001e1008101e007800120c0c12000079001214080402007a00121a161200007b0000041f1100007c00001f000000007d00111f040000007e00000404080800d3000c1213130c00f3000c12130d000004010e05051e100005010609191f080006010c121313120007010c121313000018010f0b1b19000019010e151d1a000041011f14121000004201100f1412000043011f0205081f0044011e03031c00005a0110140b0302005b0110140b0300007901121a171300007a01121a171300007b01121b171200007c01121b17120000")
const _hex4308 = pxsim.BufferMethods.createBufferFromHex("000000ffffffff2121ff93c4ff8135fff609249ca378dc52003fad87f2ff8e2ec4a4839f5c406ce5cdc491463d000000")
const _hex4830 = pxsim.BufferMethods.createBufferFromHex
const _hex4832 = pxsim.BufferMethods.createBufferFromHex
const _hex4834 = pxsim.BufferMethods.createBufferFromHex
const _hex4836 = pxsim.BufferMethods.createBufferFromHex("870420002000000000000000000000000000000000000000000000000000c0fcff0f000000000000000000000000bcddddfb000000000000000000000000dcbbbbfd000000000000000000000000ccbbbbfc0000000000000000000000c0bcd1bdfb0f00000000000000000000c01b11ddbb0f00000000000000000000c0bcbbbbcb0f00000000000000000000bc11d1ddddcb000000000000000000c01d11ddddddd10c0000000000000000bcd1cbbcfbcf1dcb00000000000000001ccdccddbdffdfc100000000000000001cccccdbcbffcfc10000000000000000dbcbccccfcffbfcd0000000000000000bbbdccccffcfdbbb0000000000000000b0dbbdbbbbdbbd0b000000000000000000b0cbccccbc0b000000000000000000000000000000000000000000000000000000d007700d00000000000000000000000070666607000000000000000000000000006776000000000000000000000000660700007066000000000000000000006766777766760000000000000000000060666666660600000000000000000066006766667600660000000000000000667600000000676600000000000000006766767777676676000000000000000060666666666666060000000000000000006766666666760000000000000000000000676666760000000000000000000000000000000000000000000000000000000000000000000000000000")
const _hex4838 = pxsim.BufferMethods.createBufferFromHex("8704200020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b0bb000000000000000000000000b000404500b0000000000000000000005b0b000400540b0000000000000000b0550400000054b5000000000000000000440040bb0040040000000000000000000040d4ddbb0000000000000000000000004055ddbd000000000000000000004b005455d5dd0b400b000000000000005b045411d5dd0b540b000000000000004b005411d5dd0b400b0000000000000000004055ddbd00000000000000000000000040d4ddbb0000000000000000000000440040bb0040040000000000000000b0550400000054b50000000000000000005b04000400540b000000000000000000b000404500b0000000000000000000000000b0bb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
const _hex4840 = pxsim.BufferMethods.createBufferFromHex
const _hex4842 = pxsim.BufferMethods.createBufferFromHex("8704200020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0fcff0f000000000000000000000000bcddddfb000000000000000000000000dcbbbbfd000000000000000000000000ccbbbbfc0000000000000000000000c0bcd1bdfb0f00000000000000000000c01b11ddbb0f00000000000000000000c0bcbbbbcb0f00000000000000000000bc11d1ddddcb000000000000000000c01d11ddddddd10c0000000000000000bcd1cbbcfbcf1dcb00000000000000001ccdccddbdffdfc100000000000000001cccccdbcbffcfc10000000000000000dbcbccccfcffbfcd0000000000000000bbbdccccffcfdbbb0000000000000000b0dbbdbbbbdbbd0b000000000000000000b0cbccccbc0b000000000000000000000000000000000000000000000000000000d007700d0000000000000000000000007066660700000000000000000000000000677600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
const _hex4844 = pxsim.BufferMethods.createBufferFromHex("870420002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b0cbcc0c0000000000000000000000b0db55d5cd0c00000000000000000000db555555ddcd000000000000000000b055555555d59d0b0000000000000000db55555555d59db900000000000000005b55555555d5ddb900000000000000b05db5cccc5bdddd990b000000000000b055ccccccccdddd9d0b000000000000b0b5ccccccccdbdd9d0b000000000000b0c5ccccccccdcdd9d0b000000000000b0c5ccdccbccdcdd9d0c000000000000b0cdcc5b55ccdcdd9d0c00000000000000ccdc55b5ccdcddc90000000000000000cccc5b55ccdbddc90000000000000000c0ccdccbccdd9d0c000000000000000000ccccccdbddcd00000000000000000000c0dcddddcd0c0000000000000000000000c0cccc0c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
const _hex4846 = pxsim.BufferMethods.createBufferFromHex("870420002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cc00000000000000b0bbbbbbbbcb00c0cd000000000000001bddddddddbd0c1ccd000000000000b011cbccccccbc0c1ccd000000000000b01d6c666666bc0cbccd000000000000b01d6c616661bc0c1ccd000000000000b01d6c161666bccc1bcd000000000000b01d6c666166bcccbbcd000000000000b01d6c666666bccc1bcd000000000000b01d6c666661bccc1bcd000000000000b01d6c666661bcccbbcd000000000000b01d6c666661bccc1bcd000000000000b01d6c666666bc0c1ccd000000000000b01dcbccccccbc0cbccd000000000000c0b1bbbbbbbbbb0cdccb000000000000c0bbbbbbbbbbcb00dc0c00000000000000cccccccccc0c00cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
const _hex4848 = pxsim.BufferMethods.createBufferFromHex("87042000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004004000000000000000000000000000054450000000000000000000000440b00bbbb00b0440000000000000040550b00000000b0550400000000000040b5000044bb00005b04000000000000b00b0044ddddbb00b00b0000000000000000405d55d5dd0b00000000000000000000d4555555ddbd0000000000000000000054555555d5bd0000000000000000b44055555555d5dd0b4b000000000040b54055555555d5dd0b5b040000000040b54055555555d5dd0b5b040000000000b44055115555d5dd0b4b000000000000000054115555d5bd00000000000000000000d4555555ddbd00000000000000000000405d55d5dd0b0000000000000000b00b0044ddddbb00b00b00000000000040b5000044bb00005b0400000000000040550b00000000b0550400000000000000440b00bbbb00b0440000000000000000000000544500000000000000000000000000004004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
const _hex4850 = pxsim.BufferMethods.createBufferFromHex("870420002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbbb00000000000000000000000000b055bb00bbbbbb000000000000000000b0b5bdbcbbbbddcb0000000000000000b0dbcb5b5555bbdd0c00000000000000b0cbdcbdbb5b55dbcd0000000000000000c0dddb11d15bb5bd0c00000000000000bbbd111111b155bb0c00000000000000db1b111111115bb5cb00000000000000db1bb11d1199b9d5cb00000000000000db1b11bb9199b955cb000000000000005b1b11b19b99995bcb000000000000005b1d1111bb99995ccb00000000000000b0b511bbbb99995ccb00000000000000b0d51d919999d95b0b00000000000000005bdb919999c9d50b0000000000000000b0d51b99d9bcb5000000000000000000005bd5bbbc550b00000000000000000000b05b5555bd000000000000000000000000b0bbbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")




function control___screen_inline__P4297(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

  case 1:
    r0 = pxsim_numops_toBoolDecr(true);
    if (!r0) { step = 4; continue; }
    globals.__updated___4294 = (false);
    s.tmp_0 = pause__P411_mk(s);
    s.tmp_0.arg0 = 200;
    s.callLocIdx = 5; s.pc = 5; return s.tmp_0;
  case 5:
    r0 = s.retval;
    r0 = pxsim_numops_toBoolDecr(globals.__updated___4294);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    s.tmp_2 = control___screen_update__P1788_mk(s);
    s.callLocIdx = 6; s.pc = 6; return s.tmp_2;
  case 6:
    r0 = s.retval;
    globals.__updated___4294 = (true);
  case 2:
  case 3:
    { step = 1; continue; }
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
control___screen_inline__P4297.info = {"start":396,"length":211,"line":17,"column":26,"endLine":26,"endColumn":5,"fileName":"pxt_modules/screen/frame.ts","functionName":"inline","argumentNames":[]}

function control___screen_inline__P4297_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control___screen_inline__P4297, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
} }





function _screen_internal_inline__P4315(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    r0 = pxsim_pxtcore.updateScreen(globals.screen___1827);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
_screen_internal_inline__P4315.info = {"start":753,"length":26,"line":22,"column":33,"endLine":22,"endColumn":59,"fileName":"pxt_modules/screen/targetoverrides.ts","functionName":"inline","argumentNames":[]}

function _screen_internal_inline__P4315_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: _screen_internal_inline__P4315, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
} }





function _screen_internal_inline__P4320(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = pxsim_pxtcore.updateStats(s.arg0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
_screen_internal_inline__P4320.info = {"start":816,"length":56,"line":23,"column":35,"endLine":25,"endColumn":5,"fileName":"pxt_modules/screen/targetoverrides.ts","functionName":"inline","argumentNames":["msg"]}

function _screen_internal_inline__P4320_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: _screen_internal_inline__P4320, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function info_inline__P4441(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = pxsim_numops_toBoolDecr(globals.infoState___4437);
    if (!r0) { step = 3; continue; }
    r0 = pxsim_numops_toBoolDecr(globals.infoStateStack___4439);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = pxsim_Array__mk();
    globals.infoStateStack___4439 = (r0);
  case 1:
  case 2:
    r0 = pxsim_pxtrt.mkMap();
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "state", globals.infoState___4437);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "scene", s.arg0);
    r0 = pxsim_Array__push(globals.infoStateStack___4439, s.tmp_0);
    globals.infoState___4437 = (undefined);
  case 3:
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
info_inline__P4441.info = {"start":1996,"length":259,"line":75,"column":29,"endLine":84,"endColumn":5,"fileName":"pxt_modules/game/info.ts","functionName":"inline","argumentNames":["oldScene"]}

function info_inline__P4441_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_inline__P4441, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function info_inline__P4456(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.scene___4457 = undefined;
    s.nextState___4466 = undefined;
    s.tmp_0 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 22; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    s.scene___4457 = (r0);
    globals.infoState___4437 = (undefined);
    s.tmp_0 = r0 = globals.infoStateStack___4439;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = pxsim_Array__length(globals.infoStateStack___4439);
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 5; continue; }
    r0 = pxsim_Array_.pop(globals.infoStateStack___4439);
    s.nextState___4466 = (r0);
    s.tmp_2 = if_scene_1_mk(s);
    s.tmp_2.arg0 = s.nextState___4466;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "scene");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["scene"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["scene"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 23; s.pc = 8; return s.tmp_2; }
    }
  case 8:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 == s.scene___4457);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.tmp_3 = if_state_1_mk(s);
    s.tmp_3.arg0 = s.nextState___4466;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "state");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["state"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["state"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 24; s.pc = 9; return s.tmp_3; }
    }
  case 9:
    r0 = s.retval;
    globals.infoState___4437 = (r0);
    { step = 4; continue; }
  case 3:
    r0 = pxsim_Array__push(globals.infoStateStack___4439, s.nextState___4466);
  case 4:
  case 5:
  case 6:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
info_inline__P4456.info = {"start":2287,"length":376,"line":86,"column":28,"endLine":97,"endColumn":5,"fileName":"pxt_modules/game/info.ts","functionName":"inline","argumentNames":[]}

function info_inline__P4456_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_inline__P4456, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  scene___4457: undefined,
  nextState___4466: undefined,
} }





function inline__P79535(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.tmp_0 = r0 = globals.g_gameMode___62539;
    r0 = pxsim_pxtcore.switch_eq(0, s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = pxsim_pxtcore.switch_eq(1, s.tmp_0);
    if (r0) { step = 2; continue; }
    r0 = pxsim_pxtcore.switch_eq(2, s.tmp_0);
    if (r0) { step = 3; continue; }
    r0 = s.tmp_0;
    { step = 4; continue; }
  case 1:
    s.tmp_1 = startGame__P62570_mk(s);
    s.callLocIdx = 65; s.pc = 5; return s.tmp_1;
  case 5:
    r0 = s.retval;
    { step = 4; continue; }
  case 2:
  case 3:
    s.tmp_0 = getGuess__P62572_mk(s);
    s.callLocIdx = 66; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
inline__P79535.info = {"start":89,"length":243,"line":3,"column":52,"endLine":14,"endColumn":1,"fileName":"controller.ts","functionName":"inline","argumentNames":[]}

function inline__P79535_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: inline__P79535, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
} }





function inline__P79546(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.tmp_0 = r0 = globals.g_gameMode___62539;
    r0 = pxsim_pxtcore.switch_eq(0, s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = pxsim_pxtcore.switch_eq(1, s.tmp_0);
    if (r0) { step = 2; continue; }
    r0 = pxsim_pxtcore.switch_eq(2, s.tmp_0);
    if (r0) { step = 3; continue; }
    r0 = s.tmp_0;
    { step = 4; continue; }
  case 1:
    s.tmp_1 = startGame__P62570_mk(s);
    s.callLocIdx = 68; s.pc = 5; return s.tmp_1;
  case 5:
    r0 = s.retval;
    { step = 4; continue; }
  case 2:
    s.tmp_0 = MainGame_revealPuzzle__P82304_mk(s);
    s.tmp_0.arg0 = globals.g_game___62752;
    s.callLocIdx = 69; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    { step = 4; continue; }
  case 3:
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
inline__P79546.info = {"start":414,"length":285,"line":16,"column":52,"endLine":29,"endColumn":1,"fileName":"controller.ts","functionName":"inline","argumentNames":[]}

function inline__P79546_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: inline__P79546, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
} }





function inline__P79558(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.tmp_0 = r0 = globals.g_gameMode___62539;
    r0 = pxsim_pxtcore.switch_eq(0, s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = pxsim_pxtcore.switch_eq(2, s.tmp_0);
    if (r0) { step = 2; continue; }
    r0 = s.tmp_0;
    { step = 3; continue; }
  case 1:
    s.tmp_1 = startGame__P62570_mk(s);
    s.callLocIdx = 71; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
    { step = 3; continue; }
  case 2:
  case 3:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
inline__P79558.info = {"start":784,"length":192,"line":31,"column":55,"endLine":40,"endColumn":1,"fileName":"controller.ts","functionName":"inline","argumentNames":[]}

function inline__P79558_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: inline__P79558, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
} }





function inline__P79567(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.tmp_0 = r0 = globals.g_gameMode___62539;
    r0 = pxsim_pxtcore.switch_eq(0, s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = pxsim_pxtcore.switch_eq(2, s.tmp_0);
    if (r0) { step = 2; continue; }
    r0 = s.tmp_0;
    { step = 3; continue; }
  case 1:
    s.tmp_1 = startGame__P62570_mk(s);
    s.callLocIdx = 73; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
    { step = 3; continue; }
  case 2:
  case 3:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
inline__P79567.info = {"start":1064,"length":192,"line":42,"column":55,"endLine":51,"endColumn":1,"fileName":"controller.ts","functionName":"inline","argumentNames":[]}

function inline__P79567_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: inline__P79567, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
} }





function inline__P79576(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.tmp_0 = r0 = globals.g_gameMode___62539;
    r0 = pxsim_pxtcore.switch_eq(0, s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = pxsim_pxtcore.switch_eq(2, s.tmp_0);
    if (r0) { step = 2; continue; }
    r0 = s.tmp_0;
    { step = 3; continue; }
  case 1:
    s.tmp_1 = startGame__P62570_mk(s);
    s.callLocIdx = 75; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
    { step = 3; continue; }
  case 2:
  case 3:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
inline__P79576.info = {"start":1345,"length":192,"line":53,"column":56,"endLine":62,"endColumn":1,"fileName":"controller.ts","functionName":"inline","argumentNames":[]}

function inline__P79576_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: inline__P79576, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
} }





function inline__P79585(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.tmp_0 = r0 = globals.g_gameMode___62539;
    r0 = pxsim_pxtcore.switch_eq(0, s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = pxsim_pxtcore.switch_eq(2, s.tmp_0);
    if (r0) { step = 2; continue; }
    r0 = s.tmp_0;
    { step = 3; continue; }
  case 1:
    s.tmp_1 = startGame__P62570_mk(s);
    s.callLocIdx = 77; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
    { step = 3; continue; }
  case 2:
  case 3:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
inline__P79585.info = {"start":1624,"length":192,"line":64,"column":53,"endLine":73,"endColumn":1,"fileName":"controller.ts","functionName":"inline","argumentNames":[]}

function inline__P79585_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: inline__P79585, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
} }





function inline__P79592(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.tmp_0 = Stats_show__P55111_mk(s);
    s.tmp_0.arg0 = globals.g_stats___62622;
    s.callLocIdx = 79; s.pc = 3; return s.tmp_0;
  case 3:
    r0 = s.retval;
    s.tmp_1 = game_ask__P2660_mk(s);
    s.tmp_1.arg0 = "Reset stats?";
    s.tmp_1.arg1 = undefined;
    s.callLocIdx = 80; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.tmp_2 = Stats_reset__P55115_mk(s);
    s.tmp_2.arg0 = globals.g_stats___62622;
    s.callLocIdx = 81; s.pc = 5; return s.tmp_2;
  case 5:
    r0 = s.retval;
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
inline__P79592.info = {"start":1891,"length":100,"line":75,"column":44,"endLine":80,"endColumn":1,"fileName":"controller.ts","functionName":"inline","argumentNames":[]}

function inline__P79592_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: inline__P79592, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
} }





function myImages_inline__P6828(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_1 = helpers_stringTrim__P123_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.callLocIdx = 83; s.pc = 5; return s.tmp_1;
  case 5:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_pxtcore.switch_eq("image1", s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = pxsim_pxtcore.switch_eq("bg", s.tmp_0);
    if (r0) { step = 2; continue; }
    r0 = s.tmp_0;
    { step = 3; continue; }
  case 1:
  case 2:
    r0 = pxsim.image.ofBuffer(_hex6834);
    { step = 4; continue; }
  case 3:
    r0 = null;
  case 4:
    return leave(s, r0)
  default: oops()
} } }
myImages_inline__P6828.info = {"start":97,"length":19488,"line":3,"column":38,"endLine":130,"endColumn":5,"fileName":"images.g.ts","functionName":"inline","argumentNames":["name"]}

function myImages_inline__P6828_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: myImages_inline__P6828, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }

const _hex6834 = pxsim.BufferMethods.createBufferFromHex("")




function myImages_inline__P6837(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = helpers_stringTrim__P123_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 85; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = null;
    return leave(s, r0)
  default: oops()
} } }
myImages_inline__P6837.info = {"start":19630,"length":105,"line":132,"column":42,"endLine":137,"endColumn":5,"fileName":"images.g.ts","functionName":"inline","argumentNames":["name"]}

function myImages_inline__P6837_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: myImages_inline__P6837, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function inline__P62772(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.tmp_0 = r0 = globals.g_gameMode___62539;
    r0 = pxsim_pxtcore.switch_eq(0, s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = pxsim_pxtcore.switch_eq(2, s.tmp_0);
    if (r0) { step = 4; continue; }
    r0 = pxsim_pxtcore.switch_eq(5, s.tmp_0);
    if (r0) { step = 5; continue; }
    r0 = s.tmp_0;
    { step = 10; continue; }
  case 1:
    s.tmp_3 = game_runtime__P2630_mk(s);
    s.callLocIdx = 171; s.pc = 11; return s.tmp_3;
  case 11:
    r0 = s.retval;
    s.tmp_2 = r0;
    s.tmp_5 = RotatingScreens_nextTime__P3941_mk(s);
    s.tmp_5.arg0 = globals.g_splashScreen___62541;
    s.callLocIdx = 172; s.pc = 12; return s.tmp_5;
  case 12:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = (s.tmp_2 >= s.tmp_4);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 2; continue; }
    s.tmp_6 = RotatingScreens_rotate__P3956_mk(s);
    s.tmp_6.arg0 = globals.g_splashScreen___62541;
    s.callLocIdx = 173; s.pc = 13; return s.tmp_6;
  case 13:
    r0 = s.retval;
  case 2:
  case 3:
    { step = 10; continue; }
  case 4:
    { step = 10; continue; }
  case 5:
    s.tmp_2 = game_runtime__P2630_mk(s);
    s.callLocIdx = 174; s.pc = 14; return s.tmp_2;
  case 14:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = globals.g_game___62752.fields["nextReveal"];
    s.tmp_3 = r0;
    r0 = (s.tmp_1 >= s.tmp_3);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 8; continue; }
    r0 = globals.g_game___62752.fields["revealFinished"];
    s.tmp_6 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_6);
    s.tmp_5 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_5);
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    if (!r0) { step = 6; continue; }
    s.tmp_7 = MainGame_revealNext__P82387_mk(s);
    s.tmp_7.arg0 = globals.g_game___62752;
    s.callLocIdx = 175; s.pc = 15; return s.tmp_7;
  case 15:
    r0 = s.retval;
    { step = 7; continue; }
  case 6:
    s.tmp_0 = startNextGuess__P62796_mk(s);
    s.callLocIdx = 176; s.pc = 16; return s.tmp_0;
  case 16:
    r0 = s.retval;
  case 7:
  case 8:
  case 9:
  case 10:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
inline__P62772.info = {"start":706,"length":623,"line":40,"column":14,"endLine":61,"endColumn":1,"fileName":"main.ts","functionName":"inline","argumentNames":[]}

function inline__P62772_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: inline__P62772, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
} }





function startNextGuess__P62796(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    r0 = globals.g_game___62752.fields["guess"];
    r0 = r0.fields["numMatches"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 == 5);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    r0 = globals.g_game___62752.fields["guessCount"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 <= 6);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 1; continue; }
    s.tmp_4 = endGame__P62797_mk(s);
    s.tmp_4.arg0 = true;
    s.callLocIdx = 188; s.pc = 7; return s.tmp_4;
  case 7:
    r0 = s.retval;
    { step = 2; continue; }
  case 1:
    s.tmp_0 = endGame__P62797_mk(s);
    s.tmp_0.arg0 = false;
    s.callLocIdx = 189; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
  case 2:
    { step = 6; continue; }
  case 3:
    r0 = globals.g_game___62752.fields["guessCount"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 >= 6);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    s.tmp_2 = music_Melody_playUntilDone__P1618_mk(s);
    s.tmp_2.arg0 = globals.wawawawaa___1627;
    s.tmp_2.arg1 = 255;
    s.callLocIdx = 190; s.pc = 9; return s.tmp_2;
  case 9:
    r0 = s.retval;
    s.tmp_0 = GameBoard_showGiveUpPrompt__P67284_mk(s);
    r0 = globals.g_game___62752.fields["board"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 191; s.pc = 10; return s.tmp_0;
  case 10:
    r0 = s.retval;
    s.tmp_0 = GameBoard_showWordPrompt__P67285_mk(s);
    r0 = globals.g_game___62752.fields["board"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 192; s.pc = 11; return s.tmp_0;
  case 11:
    r0 = s.retval;
    globals.g_gameMode___62539 = (1);
    { step = 5; continue; }
  case 4:
    s.tmp_0 = GameBoard_showWordPrompt__P67285_mk(s);
    r0 = globals.g_game___62752.fields["board"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 193; s.pc = 12; return s.tmp_0;
  case 12:
    r0 = s.retval;
    globals.g_gameMode___62539 = (2);
  case 5:
  case 6:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
startNextGuess__P62796.info = {"start":2086,"length":536,"line":97,"column":0,"endLine":113,"endColumn":1,"fileName":"main.ts","functionName":"startNextGuess","argumentNames":[]}

function startNextGuess__P62796_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: startNextGuess__P62796, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
} }





function GameBoard_showWordPrompt__P67285(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, GameBoard__C67279_VT)) failedCast(r0);
    s.tmp_0 = Sprite_setFlag__P2158_mk(s);
    r0 = s.arg0.fields["promptSprite"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = 128;
    s.tmp_0.arg2 = false;
    s.callLocIdx = 120; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
GameBoard_showWordPrompt__P67285.info = {"start":2718,"length":100,"line":85,"column":4,"endLine":87,"endColumn":5,"fileName":"board.ts","functionName":"showWordPrompt","argumentNames":["this"]}

function GameBoard_showWordPrompt__P67285_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: GameBoard_showWordPrompt__P67285, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function Sprite_setFlag__P2158(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1347;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1347]) return breakpoint(s, 3, 1347, r0);
  case 3:
    r0 = pxsim_numops_toBoolDecr(s.arg2);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1348;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1348]) return breakpoint(s, 4, 1348, r0);
  case 4:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["flags"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 | s.arg1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["flags"] = (s.tmp_1);
    { step = 2; continue; }
  case 1:
    s.lastBrkId = 1349;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1349]) return breakpoint(s, 5, 1349, r0);
  case 5:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.arg0.fields["flags"];
    s.tmp_4 = r0;
    r0 = (~ s.tmp_4);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 | s.arg1);
    s.tmp_2 = r0;
    r0 = (~ s.tmp_2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["flags"] = (s.tmp_1);
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite_setFlag__P2158.info = {"start":20884,"length":130,"line":679,"column":4,"endLine":682,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"setFlag","argumentNames":["this","flag","on"]}

function Sprite_setFlag__P2158_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_setFlag__P2158, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function GameBoard_showGiveUpPrompt__P67284(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, GameBoard__C67279_VT)) failedCast(r0);
    s.tmp_0 = Sprite_setFlag__P2158_mk(s);
    r0 = s.arg0.fields["giveUpSprite"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = 128;
    s.tmp_0.arg2 = false;
    s.callLocIdx = 119; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
GameBoard_showGiveUpPrompt__P67284.info = {"start":2610,"length":102,"line":81,"column":4,"endLine":83,"endColumn":5,"fileName":"board.ts","functionName":"showGiveUpPrompt","argumentNames":["this"]}

function GameBoard_showGiveUpPrompt__P67284_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: GameBoard_showGiveUpPrompt__P67284, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function music_Melody_constructor__P1613(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, music_Melody__C1610_VT)) failedCast(r0);
    s.lastBrkId = 558;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[558]) return breakpoint(s, 1, 558, r0);
  case 1:
    r0 = (s.arg0).fields["_text"] = (s.arg1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
music_Melody_constructor__P1613.info = {"start":6328,"length":67,"line":199,"column":8,"endLine":201,"endColumn":9,"fileName":"pxt_modules/mixer/melody.ts","functionName":"inline","argumentNames":["this","text"]}

function music_Melody_constructor__P1613_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: music_Melody_constructor__P1613, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
} }





function music_Melody_playUntilDone__P1618(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.p___7756 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, music_Melody__C1610_VT)) failedCast(r0);
    s.lastBrkId = 583;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[583]) return breakpoint(s, 1, 583, r0);
  case 1:
    s.tmp_0 = music_Melody_stop__P1615_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 86; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 584;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[584]) return breakpoint(s, 3, 584, r0);
  case 3:
    r0 = pxsim_pxtcore_mkClassInstance(music_MelodyPlayer__C1620_VT);
    s.tmp_0 = r0;
    s.tmp_1 = music_MelodyPlayer_constructor__P1623_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = s.arg0;
    s.callLocIdx = 87; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
    r0 = (s.arg0).fields["_player"] = (s.tmp_0);
    s.p___7756 = (s.tmp_0);
    s.lastBrkId = 585;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[585]) return breakpoint(s, 5, 585, r0);
  case 5:
    r0 = pxsim_pxtcore_mkAction(2, music_Melody_playUntilDone_inline__P7766);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.p___7756);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 1, s.arg0);
    r0 = s.arg0.fields["_player"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1).fields["onPlayFinished"] = (s.tmp_0);
    s.lastBrkId = 588;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[588]) return breakpoint(s, 6, 588, r0);
  case 6:
    s.tmp_0 = music_Melody_registerMelody__P4246_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 89; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    s.lastBrkId = 589;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[589]) return breakpoint(s, 8, 589, r0);
  case 8:
    s.tmp_0 = music_MelodyPlayer_play__P1625_mk(s);
    r0 = s.arg0.fields["_player"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = s.arg1;
    s.callLocIdx = 90; s.pc = 9; return s.tmp_0;
  case 9:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
music_Melody_playUntilDone__P1618.info = {"start":9667,"length":344,"line":299,"column":8,"endLine":308,"endColumn":9,"fileName":"pxt_modules/mixer/melody.ts","functionName":"playUntilDone","argumentNames":["this","volume"]}

function music_Melody_playUntilDone__P1618_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: music_Melody_playUntilDone__P1618, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  p___7756: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function music_Melody_playUntilDone_inline__P7766(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 586;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[586]) return breakpoint(s, 3, 586, r0);
  case 3:
    r0 = s.caps[1].fields["_player"];
    s.tmp_1 = r0;
    r0 = (s.caps[0] == s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 587;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[587]) return breakpoint(s, 4, 587, r0);
  case 4:
    s.tmp_2 = music_Melody_unregisterMelody__P4247_mk(s);
    s.tmp_2.arg0 = s.caps[1];
    s.callLocIdx = 88; s.pc = 5; return s.tmp_2;
  case 5:
    r0 = s.retval;
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
music_Melody_playUntilDone_inline__P7766.info = {"start":9823,"length":105,"line":302,"column":42,"endLine":305,"endColumn":13,"fileName":"pxt_modules/mixer/melody.ts","functionName":"inline","argumentNames":[]}

function music_Melody_playUntilDone_inline__P7766_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: music_Melody_playUntilDone_inline__P7766, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
} }





function music_Melody_unregisterMelody__P4247(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, music_Melody__C1610_VT)) failedCast(r0);
    s.lastBrkId = 569;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[569]) return breakpoint(s, 3, 569, r0);
  case 3:
    r0 = pxsim_numops_toBoolDecr(globals.music_Melody_playingMelodies___4249);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 570;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[570]) return breakpoint(s, 4, 570, r0);
  case 4:
    r0 = pxsim_Array_.removeElement(globals.music_Melody_playingMelodies___4249, s.arg0);
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
music_Melody_unregisterMelody__P4247.info = {"start":7471,"length":201,"line":235,"column":8,"endLine":240,"endColumn":9,"fileName":"pxt_modules/mixer/melody.ts","functionName":"unregisterMelody","argumentNames":["this"]}

function music_Melody_unregisterMelody__P4247_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: music_Melody_unregisterMelody__P4247, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function music_Melody_registerMelody__P4246(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, music_Melody__C1610_VT)) failedCast(r0);
    s.lastBrkId = 563;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[563]) return breakpoint(s, 5, 563, r0);
  case 5:
    r0 = pxsim_numops_toBoolDecr(globals.music_Melody_playingMelodies___4249);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 564;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[564]) return breakpoint(s, 6, 564, r0);
  case 6:
    r0 = pxsim_Array__mk();
    globals.music_Melody_playingMelodies___4249 = (r0);
  case 1:
  case 2:
    s.lastBrkId = 565;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[565]) return breakpoint(s, 7, 565, r0);
  case 7:
    r0 = pxsim_Array__length(globals.music_Melody_playingMelodies___4249);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > 4);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 566;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[566]) return breakpoint(s, 8, 566, r0);
  case 8:
    s.tmp_2 = music_Melody_stop__P1615_mk(s);
    s.tmp_3 = r0 = globals.music_Melody_playingMelodies___4249;
    r0 = pxsim_Array__length(globals.music_Melody_playingMelodies___4249);
    s.tmp_5 = r0;
    r0 = (s.tmp_5 - 1);
    s.tmp_4 = r0;
    r0 = pxsim_Array__getAt(s.tmp_3, s.tmp_4);
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 79; s.pc = 9; return s.tmp_2;
  case 9:
    r0 = s.retval;
  case 3:
  case 4:
    s.lastBrkId = 567;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[567]) return breakpoint(s, 10, 567, r0);
  case 10:
    r0 = pxsim_Array_.removeElement(globals.music_Melody_playingMelodies___4249, s.arg0);
    s.lastBrkId = 568;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[568]) return breakpoint(s, 11, 568, r0);
  case 11:
    r0 = pxsim_Array__push(globals.music_Melody_playingMelodies___4249, s.arg0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
music_Melody_registerMelody__P4246.info = {"start":6889,"length":573,"line":223,"column":8,"endLine":234,"endColumn":9,"fileName":"pxt_modules/mixer/melody.ts","functionName":"registerMelody","argumentNames":["this"]}

function music_Melody_registerMelody__P4246_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: music_Melody_registerMelody__P4246, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  arg0: undefined,
} }





function music_MelodyPlayer_play__P1625(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.notes___7789 = undefined;
    s.pos___7793 = undefined;
    s.duration___7794 = undefined;
    s.octave___7795 = undefined;
    s.tempo___7796 = undefined;
    s.hz___7797 = undefined;
    s.endHz___7798 = undefined;
    s.ms___7801 = undefined;
    s.timePos___7802 = undefined;
    s.startTime___7803 = undefined;
    s.now___7806 = undefined;
    s.envA___7807 = undefined;
    s.envD___7808 = undefined;
    s.envS___7809 = undefined;
    s.envR___7810 = undefined;
    s.soundWave___7811 = undefined;
    s.sndInstr___7812 = undefined;
    s.sndInstrPtr___7818 = undefined;
    s.addForm___7819 = undefined;
    s.scanNextWord___7879 = undefined;
    s.token___7936 = undefined;
    s.tokenKind___7937 = undefined;
    s.consumeToken___7940 = undefined;
    s.currNote___8016 = undefined;
    s.prevNote___8018 = undefined;
    s.timeLeft___8021 = undefined;
    s.note___8035 = undefined;
    s.i___8039 = undefined;
    s.noteChar___8045 = undefined;
    s.keyNumber___8119 = undefined;
    s.currMs___8136 = undefined;
    s.beat___8140 = undefined;
    s.timeLeft___8197 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, music_MelodyPlayer__C1620_VT)) failedCast(r0);
    r0 = pxsim_pxtrt.mklocRef();
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.arg1);
    s.arg1 = (s.tmp_0);
    s.lastBrkId = 605;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[605]) return breakpoint(s, 60, 605, r0);
  case 60:
    r0 = s.arg0.fields["melody"];
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 606;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[606]) return breakpoint(s, 61, 606, r0);
  case 61:
    { step = 59; continue; }
  case 1:
  case 2:
    s.lastBrkId = 607;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[607]) return breakpoint(s, 62, 607, r0);
  case 62:
    s.tmp_4 = r0 = s.arg1;
    s.tmp_6 = Math_clamp__P127_mk(s);
    s.tmp_6.arg0 = 0;
    s.tmp_6.arg1 = 255;
    r0 = pxsim_pxtrt_ldlocRef(s.arg1);
    s.tmp_8 = r0;
    s.tmp_10 = music_volume__P1605_mk(s);
    s.callLocIdx = 91; s.pc = 64; return s.tmp_10;
  case 64:
    r0 = s.retval;
    s.tmp_9 = r0;
    r0 = (s.tmp_8 * s.tmp_9);
    s.tmp_7 = r0;
    r0 = (s.tmp_7 >> 8);
    s.tmp_6.arg2 = r0;
    s.callLocIdx = 92; s.pc = 63; return s.tmp_6;
  case 63:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_4, s.tmp_5);
    s.lastBrkId = 608;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[608]) return breakpoint(s, 65, 608, r0);
  case 65:
    r0 = s.arg0.fields["melody"];
    r0 = r0.fields["_text"];
    s.notes___7789 = (r0);
    r0 = pxsim_pxtrt.mklocRef();
    s.pos___7793 = (r0);
    s.lastBrkId = 609;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[609]) return breakpoint(s, 66, 609, r0);
  case 66:
    r0 = pxsim_pxtrt_stlocRef(s.pos___7793, 0);
    r0 = pxsim_pxtrt.mklocRef();
    s.duration___7794 = (r0);
    s.lastBrkId = 610;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[610]) return breakpoint(s, 67, 610, r0);
  case 67:
    r0 = pxsim_pxtrt_stlocRef(s.duration___7794, 4);
    r0 = pxsim_pxtrt.mklocRef();
    s.octave___7795 = (r0);
    s.lastBrkId = 611;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[611]) return breakpoint(s, 68, 611, r0);
  case 68:
    r0 = pxsim_pxtrt_stlocRef(s.octave___7795, 4);
    r0 = pxsim_pxtrt.mklocRef();
    s.tempo___7796 = (r0);
    s.lastBrkId = 612;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[612]) return breakpoint(s, 69, 612, r0);
  case 69:
    r0 = pxsim_pxtrt_stlocRef(s.tempo___7796, 120);
    r0 = pxsim_pxtrt.mklocRef();
    s.hz___7797 = (r0);
    s.lastBrkId = 613;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[613]) return breakpoint(s, 70, 613, r0);
  case 70:
    r0 = pxsim_pxtrt_stlocRef(s.hz___7797, 0);
    r0 = pxsim_pxtrt.mklocRef();
    s.endHz___7798 = (r0);
    s.lastBrkId = 614;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[614]) return breakpoint(s, 71, 614, r0);
  case 71:
    r0 = pxsim_pxtrt_stlocRef(s.endHz___7798, -1);
    r0 = pxsim_pxtrt.mklocRef();
    s.ms___7801 = (r0);
    s.lastBrkId = 615;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[615]) return breakpoint(s, 72, 615, r0);
  case 72:
    r0 = pxsim_pxtrt_stlocRef(s.ms___7801, 0);
    s.lastBrkId = 616;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[616]) return breakpoint(s, 73, 616, r0);
  case 73:
    s.timePos___7802 = (0);
    s.lastBrkId = 617;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[617]) return breakpoint(s, 74, 617, r0);
  case 74:
    r0 = pxsim.control.millis();
    s.startTime___7803 = (r0);
    s.lastBrkId = 618;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[618]) return breakpoint(s, 75, 618, r0);
  case 75:
    s.now___7806 = (0);
    r0 = pxsim_pxtrt.mklocRef();
    s.envA___7807 = (r0);
    s.lastBrkId = 619;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[619]) return breakpoint(s, 76, 619, r0);
  case 76:
    r0 = pxsim_pxtrt_stlocRef(s.envA___7807, 0);
    r0 = pxsim_pxtrt.mklocRef();
    s.envD___7808 = (r0);
    s.lastBrkId = 620;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[620]) return breakpoint(s, 77, 620, r0);
  case 77:
    r0 = pxsim_pxtrt_stlocRef(s.envD___7808, 0);
    r0 = pxsim_pxtrt.mklocRef();
    s.envS___7809 = (r0);
    s.lastBrkId = 621;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[621]) return breakpoint(s, 78, 621, r0);
  case 78:
    r0 = pxsim_pxtrt_stlocRef(s.envS___7809, 255);
    r0 = pxsim_pxtrt.mklocRef();
    s.envR___7810 = (r0);
    s.lastBrkId = 622;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[622]) return breakpoint(s, 79, 622, r0);
  case 79:
    r0 = pxsim_pxtrt_stlocRef(s.envR___7810, 0);
    r0 = pxsim_pxtrt.mklocRef();
    s.soundWave___7811 = (r0);
    s.lastBrkId = 623;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[623]) return breakpoint(s, 80, 623, r0);
  case 80:
    r0 = pxsim_pxtrt_stlocRef(s.soundWave___7811, 1);
    s.lastBrkId = 624;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[624]) return breakpoint(s, 81, 624, r0);
  case 81:
    r0 = pxsim.control.createBuffer(60);
    s.sndInstr___7812 = (r0);
    r0 = pxsim_pxtrt.mklocRef();
    s.sndInstrPtr___7818 = (r0);
    s.lastBrkId = 625;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[625]) return breakpoint(s, 82, 625, r0);
  case 82:
    r0 = pxsim_pxtrt_stlocRef(s.sndInstrPtr___7818, 0);
    s.lastBrkId = 626;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[626]) return breakpoint(s, 83, 626, r0);
  case 83:
    r0 = pxsim_pxtcore_mkAction(10, addForm_inline__P7820);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.hz___7797);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 1, s.endHz___7798);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 2, s.ms___7801);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 3, s.duration___7794);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 4, s.tempo___7796);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 5, s.envR___7810);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 6, s.sndInstrPtr___7818);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 7, s.sndInstr___7812);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 8, s.soundWave___7811);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 9, s.arg1);
    s.addForm___7819 = (s.tmp_0);
    s.lastBrkId = 635;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[635]) return breakpoint(s, 84, 635, r0);
  case 84:
    r0 = pxsim_pxtcore_mkAction(3, scanNextWord_inline__P7880);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 1, s.pos___7793);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 2, s.notes___7789);
    s.scanNextWord___7879 = (s.tmp_0);
    r0 = pxsim_pxtrt.mklocRef();
    s.token___7936 = (r0);
    s.lastBrkId = 653;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[653]) return breakpoint(s, 85, 653, r0);
  case 85:
    s.tmp_0 = r0 = s.token___7936;
    r0 = pxsim_String_.mkEmpty();
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.tmp_1);
    r0 = pxsim_pxtrt.mklocRef();
    s.tokenKind___7937 = (r0);
    s.lastBrkId = 654;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[654]) return breakpoint(s, 86, 654, r0);
  case 86:
    r0 = pxsim_pxtrt_stlocRef(s.tokenKind___7937, 0);
    s.lastBrkId = 655;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[655]) return breakpoint(s, 87, 655, r0);
  case 87:
    r0 = pxsim_pxtcore_mkAction(13, consumeToken_inline__P7941);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.token___7936);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 1, s.tokenKind___7937);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 2, s.octave___7795);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 3, s.duration___7794);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 4, s.ms___7801);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 5, s.tempo___7796);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 6, s.hz___7797);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 7, s.soundWave___7811);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 8, s.envA___7807);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 9, s.envD___7808);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 10, s.envS___7809);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 11, s.envR___7810);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 12, s.endHz___7798);
    s.consumeToken___7940 = (s.tmp_0);
    s.lastBrkId = 687;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[687]) return breakpoint(s, 88, 687, r0);
  case 88:
  case 3:
    s.lastBrkId = 688;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[688]) return breakpoint(s, 89, 688, r0);
  case 89:
    r0 = pxsim_numops_toBoolDecr(true);
    if (!r0) { step = 58; continue; }
    s.lastBrkId = 689;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[689]) return breakpoint(s, 90, 689, r0);
  case 90:
    s.tmp_0 = lambda_1_mk(s);
    s.tmp_0.argL = s.scanNextWord___7879;
    setupLambda(s.tmp_0, s.tmp_0.argL);
    s.callLocIdx = 100; s.pc = 91; return s.tmp_0;
  case 91:
    r0 = s.retval;
    s.currNote___8016 = (r0);
    s.lastBrkId = 690;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[690]) return breakpoint(s, 92, 690, r0);
  case 92:
    s.prevNote___8018 = (false);
    s.lastBrkId = 691;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[691]) return breakpoint(s, 93, 691, r0);
  case 93:
    r0 = pxsim_numops_toBoolDecr(s.currNote___8016);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 8; continue; }
    s.lastBrkId = 692;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[692]) return breakpoint(s, 94, 692, r0);
  case 94:
    r0 = (s.timePos___7802 - s.now___7806);
    s.timeLeft___8021 = (r0);
    s.lastBrkId = 693;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[693]) return breakpoint(s, 95, 693, r0);
  case 95:
    r0 = (s.timeLeft___8021 > 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 694;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[694]) return breakpoint(s, 96, 694, r0);
  case 96:
    s.tmp_1 = pause__P411_mk(s);
    s.tmp_1.arg0 = s.timeLeft___8021;
    s.callLocIdx = 101; s.pc = 97; return s.tmp_1;
  case 97:
    r0 = s.retval;
  case 4:
  case 5:
    s.lastBrkId = 695;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[695]) return breakpoint(s, 98, 695, r0);
  case 98:
    r0 = s.arg0.fields["onPlayFinished"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 6; continue; }
    s.lastBrkId = 696;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[696]) return breakpoint(s, 99, 696, r0);
  case 99:
    s.tmp_1 = if_onPlayFinished_1_mk(s);
    s.tmp_1.arg0 = s.arg0;
    if (!s.tmp_1.arg0.vtable.iface) {
      setupLambda(s.tmp_1, pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "onPlayFinished"), 1);
      s.callLocIdx = 102; s.pc = 100; return s.tmp_1;
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["onPlayFinished"];
      if (s.tmp_1.fn == null) { setupLambda(s.tmp_1, s.tmp_1.arg0.fields["onPlayFinished"], 1); s.callLocIdx = 102; s.pc = 100; return s.tmp_1; }
      else if (s.tmp_1.fn.isGetter) { s.tmp_1.stage2Call = true; s.callLocIdx = 102; s.pc = 100; return s.tmp_1;; }
     else { s.callLocIdx = 102; s.pc = 100; return s.tmp_1; }
    }
  case 100:
    r0 = s.retval;
  case 6:
  case 7:
    s.lastBrkId = 697;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[697]) return breakpoint(s, 101, 697, r0);
  case 101:
    { step = 59; continue; }
  case 8:
  case 9:
    s.lastBrkId = 698;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[698]) return breakpoint(s, 102, 698, r0);
  case 102:
    r0 = pxsim_pxtrt_stlocRef(s.hz___7797, -1);
    s.lastBrkId = 699;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[699]) return breakpoint(s, 103, 699, r0);
  case 103:
    s.note___8035 = (0);
    s.lastBrkId = 700;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[700]) return breakpoint(s, 104, 700, r0);
  case 104:
    s.tmp_0 = r0 = s.token___7936;
    r0 = pxsim_String_.mkEmpty();
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.tmp_1);
    s.lastBrkId = 701;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[701]) return breakpoint(s, 105, 701, r0);
  case 105:
    r0 = pxsim_pxtrt_stlocRef(s.tokenKind___7937, 0);
    s.lastBrkId = 702;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[702]) return breakpoint(s, 106, 702, r0);
  case 106:
    s.i___8039 = (0);
    s.lastBrkId = 703;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[703]) return breakpoint(s, 107, 703, r0);
  case 107:
  case 10:
    s.lastBrkId = 704;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[704]) return breakpoint(s, 108, 704, r0);
  case 108:
    s.tmp_1 = r0 = s.i___8039;
    r0 = pxsim_String_.length(s.currNote___8016);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 41; continue; }
    s.lastBrkId = 705;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[705]) return breakpoint(s, 109, 705, r0);
  case 109:
    r0 = pxsim_String_.charAt(s.currNote___8016, s.i___8039);
    s.noteChar___8045 = (r0);
    s.lastBrkId = 706;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[706]) return breakpoint(s, 110, 706, r0);
  case 110:
    s.tmp_0 = r0 = s.noteChar___8045;
    r0 = pxsim_pxtcore.switch_eq("c", s.tmp_0);
    if (r0) { step = 11; continue; }
    r0 = pxsim_pxtcore.switch_eq("C", s.tmp_0);
    if (r0) { step = 12; continue; }
    r0 = pxsim_pxtcore.switch_eq("d", s.tmp_0);
    if (r0) { step = 13; continue; }
    r0 = pxsim_pxtcore.switch_eq("D", s.tmp_0);
    if (r0) { step = 14; continue; }
    r0 = pxsim_pxtcore.switch_eq("e", s.tmp_0);
    if (r0) { step = 15; continue; }
    r0 = pxsim_pxtcore.switch_eq("E", s.tmp_0);
    if (r0) { step = 16; continue; }
    r0 = pxsim_pxtcore.switch_eq("f", s.tmp_0);
    if (r0) { step = 17; continue; }
    r0 = pxsim_pxtcore.switch_eq("F", s.tmp_0);
    if (r0) { step = 18; continue; }
    r0 = pxsim_pxtcore.switch_eq("g", s.tmp_0);
    if (r0) { step = 19; continue; }
    r0 = pxsim_pxtcore.switch_eq("G", s.tmp_0);
    if (r0) { step = 20; continue; }
    r0 = pxsim_pxtcore.switch_eq("a", s.tmp_0);
    if (r0) { step = 21; continue; }
    r0 = pxsim_pxtcore.switch_eq("A", s.tmp_0);
    if (r0) { step = 22; continue; }
    r0 = pxsim_pxtcore.switch_eq("B", s.tmp_0);
    if (r0) { step = 23; continue; }
    r0 = pxsim_pxtcore.switch_eq("r", s.tmp_0);
    if (r0) { step = 24; continue; }
    r0 = pxsim_pxtcore.switch_eq("R", s.tmp_0);
    if (r0) { step = 25; continue; }
    r0 = pxsim_pxtcore.switch_eq("#", s.tmp_0);
    if (r0) { step = 26; continue; }
    r0 = pxsim_pxtcore.switch_eq("b", s.tmp_0);
    if (r0) { step = 27; continue; }
    r0 = pxsim_pxtcore.switch_eq(",", s.tmp_0);
    if (r0) { step = 30; continue; }
    r0 = pxsim_pxtcore.switch_eq("!", s.tmp_0);
    if (r0) { step = 31; continue; }
    r0 = pxsim_pxtcore.switch_eq("@", s.tmp_0);
    if (r0) { step = 32; continue; }
    r0 = pxsim_pxtcore.switch_eq("~", s.tmp_0);
    if (r0) { step = 33; continue; }
    r0 = pxsim_pxtcore.switch_eq(":", s.tmp_0);
    if (r0) { step = 34; continue; }
    r0 = pxsim_pxtcore.switch_eq("-", s.tmp_0);
    if (r0) { step = 35; continue; }
    r0 = pxsim_pxtcore.switch_eq("^", s.tmp_0);
    if (r0) { step = 36; continue; }
    r0 = s.tmp_0;
    { step = 37; continue; }
  case 11:
  case 12:
    s.lastBrkId = 707;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[707]) return breakpoint(s, 111, 707, r0);
  case 111:
    s.note___8035 = (1);
    s.lastBrkId = 708;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[708]) return breakpoint(s, 112, 708, r0);
  case 112:
    s.prevNote___8018 = (true);
    s.lastBrkId = 709;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[709]) return breakpoint(s, 113, 709, r0);
  case 113:
    { step = 40; continue; }
  case 13:
  case 14:
    s.lastBrkId = 710;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[710]) return breakpoint(s, 114, 710, r0);
  case 114:
    s.note___8035 = (3);
    s.lastBrkId = 711;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[711]) return breakpoint(s, 115, 711, r0);
  case 115:
    s.prevNote___8018 = (true);
    s.lastBrkId = 712;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[712]) return breakpoint(s, 116, 712, r0);
  case 116:
    { step = 40; continue; }
  case 15:
  case 16:
    s.lastBrkId = 713;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[713]) return breakpoint(s, 117, 713, r0);
  case 117:
    s.note___8035 = (5);
    s.lastBrkId = 714;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[714]) return breakpoint(s, 118, 714, r0);
  case 118:
    s.prevNote___8018 = (true);
    s.lastBrkId = 715;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[715]) return breakpoint(s, 119, 715, r0);
  case 119:
    { step = 40; continue; }
  case 17:
  case 18:
    s.lastBrkId = 716;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[716]) return breakpoint(s, 120, 716, r0);
  case 120:
    s.note___8035 = (6);
    s.lastBrkId = 717;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[717]) return breakpoint(s, 121, 717, r0);
  case 121:
    s.prevNote___8018 = (true);
    s.lastBrkId = 718;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[718]) return breakpoint(s, 122, 718, r0);
  case 122:
    { step = 40; continue; }
  case 19:
  case 20:
    s.lastBrkId = 719;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[719]) return breakpoint(s, 123, 719, r0);
  case 123:
    s.note___8035 = (8);
    s.lastBrkId = 720;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[720]) return breakpoint(s, 124, 720, r0);
  case 124:
    s.prevNote___8018 = (true);
    s.lastBrkId = 721;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[721]) return breakpoint(s, 125, 721, r0);
  case 125:
    { step = 40; continue; }
  case 21:
  case 22:
    s.lastBrkId = 722;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[722]) return breakpoint(s, 126, 722, r0);
  case 126:
    s.note___8035 = (10);
    s.lastBrkId = 723;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[723]) return breakpoint(s, 127, 723, r0);
  case 127:
    s.prevNote___8018 = (true);
    s.lastBrkId = 724;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[724]) return breakpoint(s, 128, 724, r0);
  case 128:
    { step = 40; continue; }
  case 23:
    s.lastBrkId = 725;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[725]) return breakpoint(s, 129, 725, r0);
  case 129:
    s.note___8035 = (12);
    s.lastBrkId = 726;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[726]) return breakpoint(s, 130, 726, r0);
  case 130:
    s.prevNote___8018 = (true);
    s.lastBrkId = 727;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[727]) return breakpoint(s, 131, 727, r0);
  case 131:
    { step = 40; continue; }
  case 24:
  case 25:
    s.lastBrkId = 728;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[728]) return breakpoint(s, 132, 728, r0);
  case 132:
    r0 = pxsim_pxtrt_stlocRef(s.hz___7797, 0);
    s.lastBrkId = 729;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[729]) return breakpoint(s, 133, 729, r0);
  case 133:
    s.prevNote___8018 = (false);
    s.lastBrkId = 730;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[730]) return breakpoint(s, 134, 730, r0);
  case 134:
    { step = 40; continue; }
  case 26:
    s.lastBrkId = 731;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[731]) return breakpoint(s, 135, 731, r0);
  case 135:
    r0 = (s.note___8035 + 1);
    s.note___8035 = (r0);
    s.lastBrkId = 732;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[732]) return breakpoint(s, 136, 732, r0);
  case 136:
    s.prevNote___8018 = (false);
    s.lastBrkId = 733;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[733]) return breakpoint(s, 137, 733, r0);
  case 137:
    { step = 40; continue; }
  case 27:
    s.lastBrkId = 734;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[734]) return breakpoint(s, 138, 734, r0);
  case 138:
    r0 = pxsim_numops_toBoolDecr(s.prevNote___8018);
    if (!r0) { step = 28; continue; }
    s.lastBrkId = 735;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[735]) return breakpoint(s, 139, 735, r0);
  case 139:
    r0 = (s.note___8035 - 1);
    s.note___8035 = (r0);
    { step = 29; continue; }
  case 28:
    s.lastBrkId = 736;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[736]) return breakpoint(s, 140, 736, r0);
  case 140:
    s.note___8035 = (12);
    s.lastBrkId = 737;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[737]) return breakpoint(s, 141, 737, r0);
  case 141:
    s.prevNote___8018 = (true);
  case 29:
    s.lastBrkId = 738;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[738]) return breakpoint(s, 142, 738, r0);
  case 142:
    { step = 40; continue; }
  case 30:
    s.lastBrkId = 739;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[739]) return breakpoint(s, 143, 739, r0);
  case 143:
    s.tmp_0 = lambda_1_mk(s);
    s.tmp_0.argL = s.consumeToken___7940;
    setupLambda(s.tmp_0, s.tmp_0.argL);
    s.callLocIdx = 103; s.pc = 144; return s.tmp_0;
  case 144:
    r0 = s.retval;
    s.lastBrkId = 740;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[740]) return breakpoint(s, 145, 740, r0);
  case 145:
    s.prevNote___8018 = (false);
    s.lastBrkId = 741;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[741]) return breakpoint(s, 146, 741, r0);
  case 146:
    { step = 40; continue; }
  case 31:
    s.lastBrkId = 742;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[742]) return breakpoint(s, 147, 742, r0);
  case 147:
    r0 = pxsim_pxtrt_stlocRef(s.tokenKind___7937, 4);
    s.lastBrkId = 743;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[743]) return breakpoint(s, 148, 743, r0);
  case 148:
    s.prevNote___8018 = (false);
    s.lastBrkId = 744;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[744]) return breakpoint(s, 149, 744, r0);
  case 149:
    { step = 40; continue; }
  case 32:
    s.lastBrkId = 745;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[745]) return breakpoint(s, 150, 745, r0);
  case 150:
    s.tmp_0 = lambda_1_mk(s);
    s.tmp_0.argL = s.consumeToken___7940;
    setupLambda(s.tmp_0, s.tmp_0.argL);
    s.callLocIdx = 104; s.pc = 151; return s.tmp_0;
  case 151:
    r0 = s.retval;
    s.lastBrkId = 746;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[746]) return breakpoint(s, 152, 746, r0);
  case 152:
    r0 = pxsim_pxtrt_stlocRef(s.tokenKind___7937, 8);
    s.lastBrkId = 747;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[747]) return breakpoint(s, 153, 747, r0);
  case 153:
    s.prevNote___8018 = (false);
    s.lastBrkId = 748;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[748]) return breakpoint(s, 154, 748, r0);
  case 154:
    { step = 40; continue; }
  case 33:
    s.lastBrkId = 749;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[749]) return breakpoint(s, 155, 749, r0);
  case 155:
    s.tmp_0 = lambda_1_mk(s);
    s.tmp_0.argL = s.consumeToken___7940;
    setupLambda(s.tmp_0, s.tmp_0.argL);
    s.callLocIdx = 105; s.pc = 156; return s.tmp_0;
  case 156:
    r0 = s.retval;
    s.lastBrkId = 750;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[750]) return breakpoint(s, 157, 750, r0);
  case 157:
    r0 = pxsim_pxtrt_stlocRef(s.tokenKind___7937, 7);
    s.lastBrkId = 751;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[751]) return breakpoint(s, 158, 751, r0);
  case 158:
    s.prevNote___8018 = (false);
    s.lastBrkId = 752;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[752]) return breakpoint(s, 159, 752, r0);
  case 159:
    { step = 40; continue; }
  case 34:
    s.lastBrkId = 753;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[753]) return breakpoint(s, 160, 753, r0);
  case 160:
    s.tmp_0 = lambda_1_mk(s);
    s.tmp_0.argL = s.consumeToken___7940;
    setupLambda(s.tmp_0, s.tmp_0.argL);
    s.callLocIdx = 106; s.pc = 161; return s.tmp_0;
  case 161:
    r0 = s.retval;
    s.lastBrkId = 754;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[754]) return breakpoint(s, 162, 754, r0);
  case 162:
    r0 = pxsim_pxtrt_stlocRef(s.tokenKind___7937, 2);
    s.lastBrkId = 755;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[755]) return breakpoint(s, 163, 755, r0);
  case 163:
    s.prevNote___8018 = (false);
    s.lastBrkId = 756;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[756]) return breakpoint(s, 164, 756, r0);
  case 164:
    { step = 40; continue; }
  case 35:
    s.lastBrkId = 757;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[757]) return breakpoint(s, 165, 757, r0);
  case 165:
    s.tmp_0 = lambda_1_mk(s);
    s.tmp_0.argL = s.consumeToken___7940;
    setupLambda(s.tmp_0, s.tmp_0.argL);
    s.callLocIdx = 107; s.pc = 166; return s.tmp_0;
  case 166:
    r0 = s.retval;
    s.lastBrkId = 758;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[758]) return breakpoint(s, 167, 758, r0);
  case 167:
    r0 = pxsim_pxtrt_stlocRef(s.tokenKind___7937, 3);
    s.lastBrkId = 759;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[759]) return breakpoint(s, 168, 759, r0);
  case 168:
    s.prevNote___8018 = (false);
    s.lastBrkId = 760;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[760]) return breakpoint(s, 169, 760, r0);
  case 169:
    { step = 40; continue; }
  case 36:
    s.lastBrkId = 761;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[761]) return breakpoint(s, 170, 761, r0);
  case 170:
    s.tmp_0 = lambda_1_mk(s);
    s.tmp_0.argL = s.consumeToken___7940;
    setupLambda(s.tmp_0, s.tmp_0.argL);
    s.callLocIdx = 108; s.pc = 171; return s.tmp_0;
  case 171:
    r0 = s.retval;
    s.lastBrkId = 762;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[762]) return breakpoint(s, 172, 762, r0);
  case 172:
    r0 = pxsim_pxtrt_stlocRef(s.tokenKind___7937, 5);
    s.lastBrkId = 763;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[763]) return breakpoint(s, 173, 763, r0);
  case 173:
    { step = 40; continue; }
  case 37:
    s.lastBrkId = 764;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[764]) return breakpoint(s, 174, 764, r0);
  case 174:
    r0 = pxsim_pxtrt_ldlocRef(s.tokenKind___7937);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 == 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 38; continue; }
    s.lastBrkId = 765;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[765]) return breakpoint(s, 175, 765, r0);
  case 175:
    r0 = pxsim_pxtrt_stlocRef(s.tokenKind___7937, 1);
  case 38:
  case 39:
    s.lastBrkId = 766;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[766]) return breakpoint(s, 176, 766, r0);
  case 176:
    s.tmp_0 = r0 = s.token___7936;
    r0 = pxsim_pxtrt_ldlocRef(s.token___7936);
    s.tmp_3 = r0;
    if ((s.tmp_3) && (s.tmp_3).vtable) {
    setupResume(s, 177);
    pxsim_String__stringConv(s.tmp_3);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_3) + ""; }
  case 177:
    r0 = s.retval;
    s.tmp_2 = r0;
    if ((s.noteChar___8045) && (s.noteChar___8045).vtable) {
    setupResume(s, 178);
    pxsim_String__stringConv(s.noteChar___8045);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.noteChar___8045) + ""; }
  case 178:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_String__concat(s.tmp_2, s.tmp_4);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.tmp_1);
    s.lastBrkId = 767;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[767]) return breakpoint(s, 179, 767, r0);
  case 179:
    s.prevNote___8018 = (false);
    s.lastBrkId = 768;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[768]) return breakpoint(s, 180, 768, r0);
  case 180:
  case 40:
    s.lastBrkId = 769;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[769]) return breakpoint(s, 181, 769, r0);
  case 181:
    r0 = (s.i___8039 + 1);
    s.i___8039 = (r0);
    { step = 10; continue; }
  case 41:
    s.lastBrkId = 770;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[770]) return breakpoint(s, 182, 770, r0);
  case 182:
    s.tmp_0 = lambda_1_mk(s);
    s.tmp_0.argL = s.consumeToken___7940;
    setupLambda(s.tmp_0, s.tmp_0.argL);
    s.callLocIdx = 109; s.pc = 183; return s.tmp_0;
  case 183:
    r0 = s.retval;
    s.lastBrkId = 771;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[771]) return breakpoint(s, 184, 771, r0);
  case 184:
    s.tmp_0 = r0 = s.note___8035;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 42; continue; }
    r0 = s.tmp_0;
    { step = 43; continue; }
  case 42:
    r0 = pxsim_pxtrt_ldlocRef(s.hz___7797);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 < 0);
  case 43:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 46; continue; }
    s.lastBrkId = 772;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[772]) return breakpoint(s, 185, 772, r0);
  case 185:
    s.tmp_3 = r0 = s.note___8035;
    r0 = pxsim_pxtrt_ldlocRef(s.octave___7795);
    s.tmp_6 = r0;
    r0 = (s.tmp_6 - 1);
    s.tmp_5 = r0;
    r0 = (12 * s.tmp_5);
    s.tmp_4 = r0;
    r0 = (s.tmp_3 + s.tmp_4);
    s.keyNumber___8119 = (r0);
    s.lastBrkId = 773;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[773]) return breakpoint(s, 186, 773, r0);
  case 186:
    s.tmp_1 = r0 = globals.freqs___4234;
    r0 = (s.keyNumber___8119 * 2);
    s.tmp_2 = r0;
    r0 = pxsim.BufferMethods.getNumber(s.tmp_1, 4, s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 44; continue; }
    r0 = s.tmp_0;
    { step = 45; continue; }
  case 44:
    r0 = 0;
  case 45:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.hz___7797, s.tmp_3);
  case 46:
  case 47:
    s.lastBrkId = 774;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[774]) return breakpoint(s, 187, 774, r0);
  case 187:
    r0 = pxsim_pxtrt_ldlocRef(s.ms___7801);
    s.currMs___8136 = (r0);
    s.lastBrkId = 775;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[775]) return breakpoint(s, 188, 775, r0);
  case 188:
    r0 = (s.currMs___8136 <= 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 48; continue; }
    s.lastBrkId = 776;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[776]) return breakpoint(s, 189, 776, r0);
  case 189:
    r0 = pxsim_pxtrt_ldlocRef(s.tempo___7796);
    s.tmp_1 = r0;
    r0 = pxsim.Math_.idiv(15000, s.tmp_1);
    s.beat___8140 = (r0);
    s.lastBrkId = 777;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[777]) return breakpoint(s, 190, 777, r0);
  case 190:
    r0 = pxsim_pxtrt_ldlocRef(s.duration___7794);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 * s.beat___8140);
    s.currMs___8136 = (r0);
  case 48:
  case 49:
    s.lastBrkId = 778;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[778]) return breakpoint(s, 191, 778, r0);
  case 191:
    r0 = pxsim_pxtrt_ldlocRef(s.hz___7797);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 50; continue; }
    { step = 55; continue; }
  case 50:
    s.lastBrkId = 779;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[779]) return breakpoint(s, 192, 779, r0);
  case 192:
    r0 = pxsim_pxtrt_ldlocRef(s.hz___7797);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 == 0);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 51; continue; }
    s.lastBrkId = 780;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[780]) return breakpoint(s, 193, 780, r0);
  case 193:
    r0 = (s.timePos___7802 + s.currMs___8136);
    s.timePos___7802 = (r0);
    { step = 54; continue; }
  case 51:
    s.lastBrkId = 781;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[781]) return breakpoint(s, 194, 781, r0);
  case 194:
    r0 = pxsim_pxtrt_ldlocRef(s.endHz___7798);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 52; continue; }
    s.lastBrkId = 782;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[782]) return breakpoint(s, 195, 782, r0);
  case 195:
    s.tmp_2 = r0 = s.endHz___7798;
    r0 = pxsim_pxtrt_ldlocRef(s.hz___7797);
    s.tmp_3 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_2, s.tmp_3);
  case 52:
  case 53:
    s.lastBrkId = 783;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[783]) return breakpoint(s, 196, 783, r0);
  case 196:
    r0 = pxsim_pxtrt_stlocRef(s.sndInstrPtr___7818, 0);
    s.lastBrkId = 784;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[784]) return breakpoint(s, 197, 784, r0);
  case 197:
    s.tmp_0 = lambda_5_mk(s);
    s.tmp_0.argL = s.addForm___7819;
    r0 = pxsim_pxtrt_ldlocRef(s.envA___7807);
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = 0;
    s.tmp_0.arg2 = 255;
    s.tmp_0.arg3 = 0;
    setupLambda(s.tmp_0, s.tmp_0.argL);
    s.callLocIdx = 110; s.pc = 198; return s.tmp_0;
  case 198:
    r0 = s.retval;
    s.lastBrkId = 785;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[785]) return breakpoint(s, 199, 785, r0);
  case 199:
    s.tmp_0 = lambda_5_mk(s);
    s.tmp_0.argL = s.addForm___7819;
    r0 = pxsim_pxtrt_ldlocRef(s.envD___7808);
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = 255;
    r0 = pxsim_pxtrt_ldlocRef(s.envS___7809);
    s.tmp_0.arg2 = r0;
    r0 = pxsim_pxtrt_ldlocRef(s.envA___7807);
    s.tmp_0.arg3 = r0;
    setupLambda(s.tmp_0, s.tmp_0.argL);
    s.callLocIdx = 111; s.pc = 200; return s.tmp_0;
  case 200:
    r0 = s.retval;
    s.lastBrkId = 786;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[786]) return breakpoint(s, 201, 786, r0);
  case 201:
    s.tmp_0 = lambda_5_mk(s);
    s.tmp_0.argL = s.addForm___7819;
    s.tmp_1 = r0 = s.currMs___8136;
    r0 = pxsim_pxtrt_ldlocRef(s.envA___7807);
    s.tmp_3 = r0;
    r0 = pxsim_pxtrt_ldlocRef(s.envD___7808);
    s.tmp_4 = r0;
    r0 = (s.tmp_3 + s.tmp_4);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 - s.tmp_2);
    s.tmp_0.arg0 = r0;
    r0 = pxsim_pxtrt_ldlocRef(s.envS___7809);
    s.tmp_0.arg1 = r0;
    r0 = pxsim_pxtrt_ldlocRef(s.envS___7809);
    s.tmp_0.arg2 = r0;
    r0 = pxsim_pxtrt_ldlocRef(s.envD___7808);
    s.tmp_5 = r0;
    r0 = pxsim_pxtrt_ldlocRef(s.envA___7807);
    s.tmp_6 = r0;
    r0 = (s.tmp_5 + s.tmp_6);
    s.tmp_0.arg3 = r0;
    setupLambda(s.tmp_0, s.tmp_0.argL);
    s.callLocIdx = 112; s.pc = 202; return s.tmp_0;
  case 202:
    r0 = s.retval;
    s.lastBrkId = 787;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[787]) return breakpoint(s, 203, 787, r0);
  case 203:
    s.tmp_0 = lambda_5_mk(s);
    s.tmp_0.argL = s.addForm___7819;
    r0 = pxsim_pxtrt_ldlocRef(s.envR___7810);
    s.tmp_0.arg0 = r0;
    r0 = pxsim_pxtrt_ldlocRef(s.envS___7809);
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = 0;
    s.tmp_0.arg3 = s.currMs___8136;
    setupLambda(s.tmp_0, s.tmp_0.argL);
    s.callLocIdx = 113; s.pc = 204; return s.tmp_0;
  case 204:
    r0 = s.retval;
    s.lastBrkId = 788;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[788]) return breakpoint(s, 205, 788, r0);
  case 205:
    s.tmp_0 = music_MelodyPlayer_queuePlayInstructions__P4251_mk(s);
    s.tmp_0.arg0 = s.arg0;
    r0 = (s.timePos___7802 - s.now___7806);
    s.tmp_0.arg1 = r0;
    s.tmp_1 = r0 = s.sndInstr___7812;
    r0 = pxsim_pxtrt_ldlocRef(s.sndInstrPtr___7818);
    s.tmp_2 = r0;
    r0 = pxsim.BufferMethods.slice(s.tmp_1, 0, s.tmp_2);
    s.tmp_0.arg2 = r0;
    s.callLocIdx = 114; s.pc = 206; return s.tmp_0;
  case 206:
    r0 = s.retval;
    s.lastBrkId = 789;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[789]) return breakpoint(s, 207, 789, r0);
  case 207:
    r0 = pxsim_pxtrt_stlocRef(s.endHz___7798, -1);
    s.lastBrkId = 790;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[790]) return breakpoint(s, 208, 790, r0);
  case 208:
    r0 = (s.timePos___7802 + s.currMs___8136);
    s.timePos___7802 = (r0);
  case 54:
  case 55:
    s.lastBrkId = 791;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[791]) return breakpoint(s, 209, 791, r0);
  case 209:
    r0 = (s.timePos___7802 - s.now___7806);
    s.timeLeft___8197 = (r0);
    s.lastBrkId = 792;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[792]) return breakpoint(s, 210, 792, r0);
  case 210:
    r0 = (s.timeLeft___8197 > 200);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 56; continue; }
    s.lastBrkId = 793;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[793]) return breakpoint(s, 211, 793, r0);
  case 211:
    s.tmp_1 = pause__P411_mk(s);
    r0 = (s.timeLeft___8197 - 100);
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 115; s.pc = 212; return s.tmp_1;
  case 212:
    r0 = s.retval;
    s.lastBrkId = 794;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[794]) return breakpoint(s, 213, 794, r0);
  case 213:
    r0 = pxsim.control.millis();
    s.tmp_0 = r0;
    r0 = (s.tmp_0 - s.startTime___7803);
    s.now___7806 = (r0);
  case 56:
  case 57:
    { step = 3; continue; }
  case 58:
  case 59:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
music_MelodyPlayer_play__P1625.info = {"start":11361,"length":9259,"line":348,"column":8,"endLine":582,"endColumn":9,"fileName":"pxt_modules/mixer/melody.ts","functionName":"play","argumentNames":["this","volume"]}

function music_MelodyPlayer_play__P1625_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: music_MelodyPlayer_play__P1625, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  notes___7789: undefined,
  pos___7793: undefined,
  duration___7794: undefined,
  octave___7795: undefined,
  tempo___7796: undefined,
  hz___7797: undefined,
  endHz___7798: undefined,
  ms___7801: undefined,
  timePos___7802: undefined,
  startTime___7803: undefined,
  now___7806: undefined,
  envA___7807: undefined,
  envD___7808: undefined,
  envS___7809: undefined,
  envR___7810: undefined,
  soundWave___7811: undefined,
  sndInstr___7812: undefined,
  sndInstrPtr___7818: undefined,
  addForm___7819: undefined,
  scanNextWord___7879: undefined,
  token___7936: undefined,
  tokenKind___7937: undefined,
  consumeToken___7940: undefined,
  currNote___8016: undefined,
  prevNote___8018: undefined,
  timeLeft___8021: undefined,
  note___8035: undefined,
  i___8039: undefined,
  noteChar___8045: undefined,
  keyNumber___8119: undefined,
  currMs___8136: undefined,
  beat___8140: undefined,
  timeLeft___8197: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function addForm_inline__P7820(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.freqStart___7825 = undefined;
    s.freqEnd___7827 = undefined;
    s.envelopeWidth___7829 = undefined;
    s.slope___7847 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 627;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[627]) return breakpoint(s, 7, 627, r0);
  case 7:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[0]);
    s.freqStart___7825 = (r0);
    s.lastBrkId = 628;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[628]) return breakpoint(s, 8, 628, r0);
  case 8:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.freqEnd___7827 = (r0);
    s.lastBrkId = 629;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[629]) return breakpoint(s, 9, 629, r0);
  case 9:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[2]);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = pxsim_pxtrt_ldlocRef(s.caps[2]);
    { step = 2; continue; }
  case 1:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[3]);
    s.tmp_3 = r0;
    r0 = pxsim_pxtrt_ldlocRef(s.caps[4]);
    s.tmp_5 = r0;
    r0 = pxsim.Math_.idiv(15000, s.tmp_5);
    s.tmp_4 = r0;
    r0 = (s.tmp_3 * s.tmp_4);
    s.tmp_2 = r0;
    r0 = pxsim_pxtrt_ldlocRef(s.caps[5]);
    s.tmp_6 = r0;
    r0 = (s.tmp_2 + s.tmp_6);
  case 2:
    // jmp value (already in r0)
    s.tmp_7 = r0;
    s.envelopeWidth___7829 = (s.tmp_7);
    s.lastBrkId = 630;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[630]) return breakpoint(s, 10, 630, r0);
  case 10:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_ldlocRef(s.caps[0]);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 != s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 3; continue; }
    r0 = s.tmp_0;
    { step = 4; continue; }
  case 3:
    r0 = (s.envelopeWidth___7829 != 0);
  case 4:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 631;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[631]) return breakpoint(s, 11, 631, r0);
  case 11:
    r0 = (s.freqEnd___7827 - s.freqStart___7825);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 / s.envelopeWidth___7829);
    s.slope___7847 = (r0);
    s.lastBrkId = 632;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[632]) return breakpoint(s, 12, 632, r0);
  case 12:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[0]);
    s.tmp_0 = r0;
    r0 = (s.slope___7847 * s.arg3);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 + s.tmp_1);
    s.freqStart___7825 = (r0);
    s.lastBrkId = 633;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[633]) return breakpoint(s, 13, 633, r0);
  case 13:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[0]);
    s.tmp_0 = r0;
    s.tmp_2 = r0 = s.slope___7847;
    r0 = (s.arg3 + s.arg0);
    s.tmp_3 = r0;
    r0 = (s.tmp_2 * s.tmp_3);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 + s.tmp_1);
    s.freqEnd___7827 = (r0);
  case 5:
  case 6:
    s.lastBrkId = 634;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[634]) return breakpoint(s, 14, 634, r0);
  case 14:
    s.tmp_0 = r0 = s.caps[6];
    s.tmp_2 = music_addNote__P4250_mk(s);
    s.tmp_2.arg0 = s.caps[7];
    r0 = pxsim_pxtrt_ldlocRef(s.caps[6]);
    s.tmp_2.arg1 = r0;
    s.tmp_2.arg2 = s.arg0;
    s.tmp_2.arg3 = s.arg1;
    s.tmp_2.arg4 = s.arg2;
    r0 = pxsim_pxtrt_ldlocRef(s.caps[8]);
    s.tmp_2.arg5 = r0;
    s.tmp_2.arg6 = s.freqStart___7825;
    r0 = pxsim_pxtrt_ldlocRef(s.caps[9]);
    s.tmp_2.arg7 = r0;
    s.tmp_2.arg8 = s.freqEnd___7827;
    s.callLocIdx = 93; s.pc = 15; return s.tmp_2;
  case 15:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
addForm_inline__P7820.info = {"start":12169,"length":643,"line":374,"column":28,"endLine":385,"endColumn":13,"fileName":"pxt_modules/mixer/melody.ts","functionName":"inline","argumentNames":["formDuration","beg","end","msOff"]}

function addForm_inline__P7820_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: addForm_inline__P7820, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  freqStart___7825: undefined,
  freqEnd___7827: undefined,
  envelopeWidth___7829: undefined,
  slope___7847: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function scanNextWord_inline__P7880(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.c___7889 = undefined;
    s.note___7906 = undefined;
    s.c___7912 = undefined;
    s.lastBrkId = 636;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[636]) return breakpoint(s, 24, 636, r0);
  case 24:
    r0 = s.caps[0].fields["melody"];
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 637;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[637]) return breakpoint(s, 25, 637, r0);
  case 25:
    r0 = pxsim_String_.mkEmpty();
    { step = 23; continue; }
  case 1:
  case 2:
    s.lastBrkId = 638;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[638]) return breakpoint(s, 26, 638, r0);
  case 26:
  case 3:
    s.lastBrkId = 639;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[639]) return breakpoint(s, 27, 639, r0);
  case 27:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.tmp_4 = r0;
    r0 = pxsim_String_.length(s.caps[2]);
    s.tmp_5 = r0;
    r0 = (s.tmp_4 < s.tmp_5);
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 12; continue; }
    s.lastBrkId = 640;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[640]) return breakpoint(s, 28, 640, r0);
  case 28:
    s.tmp_6 = r0 = s.caps[2];
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.tmp_7 = r0;
    r0 = pxsim_String_.charAt(s.tmp_6, s.tmp_7);
    s.c___7889 = (r0);
    s.lastBrkId = 641;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[641]) return breakpoint(s, 29, 641, r0);
  case 29:
    r0 = (s.c___7889 != " ");
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 4; continue; }
    r0 = s.tmp_0;
    { step = 5; continue; }
  case 4:
    r0 = (s.c___7889 != "\r");
  case 5:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBool(s.tmp_1);
    if (r0) { step = 6; continue; }
    r0 = s.tmp_1;
    { step = 7; continue; }
  case 6:
    r0 = (s.c___7889 != "\n");
  case 7:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBool(s.tmp_2);
    if (r0) { step = 8; continue; }
    r0 = s.tmp_2;
    { step = 9; continue; }
  case 8:
    r0 = (s.c___7889 != "\t");
  case 9:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 10; continue; }
    s.lastBrkId = 642;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[642]) return breakpoint(s, 30, 642, r0);
  case 30:
    { step = 12; continue; }
  case 10:
  case 11:
    s.lastBrkId = 643;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[643]) return breakpoint(s, 31, 643, r0);
  case 31:
    s.tmp_4 = r0 = s.caps[1];
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.tmp_6 = r0;
    r0 = (s.tmp_6 + 1);
    s.tmp_5 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_4, s.tmp_5);
    { step = 3; continue; }
  case 12:
    s.lastBrkId = 644;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[644]) return breakpoint(s, 32, 644, r0);
  case 32:
    r0 = pxsim_String_.mkEmpty();
    s.note___7906 = (r0);
    s.lastBrkId = 645;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[645]) return breakpoint(s, 33, 645, r0);
  case 33:
  case 13:
    s.lastBrkId = 646;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[646]) return breakpoint(s, 34, 646, r0);
  case 34:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.tmp_1 = r0;
    r0 = pxsim_String_.length(s.caps[2]);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 22; continue; }
    s.lastBrkId = 647;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[647]) return breakpoint(s, 35, 647, r0);
  case 35:
    s.tmp_3 = r0 = s.caps[2];
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.tmp_4 = r0;
    r0 = pxsim_String_.charAt(s.tmp_3, s.tmp_4);
    s.c___7912 = (r0);
    s.lastBrkId = 648;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[648]) return breakpoint(s, 36, 648, r0);
  case 36:
    r0 = (s.c___7912 == " ");
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 14; continue; }
    r0 = s.tmp_0;
    { step = 15; continue; }
  case 14:
    r0 = (s.c___7912 == "\r");
  case 15:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBool(s.tmp_1);
    if (!r0) { step = 16; continue; }
    r0 = s.tmp_1;
    { step = 17; continue; }
  case 16:
    r0 = (s.c___7912 == "\n");
  case 17:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBool(s.tmp_2);
    if (!r0) { step = 18; continue; }
    r0 = s.tmp_2;
    { step = 19; continue; }
  case 18:
    r0 = (s.c___7912 == "\t");
  case 19:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 20; continue; }
    s.lastBrkId = 649;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[649]) return breakpoint(s, 37, 649, r0);
  case 37:
    { step = 22; continue; }
  case 20:
  case 21:
    s.lastBrkId = 650;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[650]) return breakpoint(s, 38, 650, r0);
  case 38:
    if ((s.note___7906) && (s.note___7906).vtable) {
    setupResume(s, 39);
    pxsim_String__stringConv(s.note___7906);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.note___7906) + ""; }
  case 39:
    r0 = s.retval;
    s.tmp_4 = r0;
    if ((s.c___7912) && (s.c___7912).vtable) {
    setupResume(s, 40);
    pxsim_String__stringConv(s.c___7912);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.c___7912) + ""; }
  case 40:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = pxsim_String__concat(s.tmp_4, s.tmp_5);
    s.note___7906 = (r0);
    s.lastBrkId = 651;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[651]) return breakpoint(s, 41, 651, r0);
  case 41:
    s.tmp_0 = r0 = s.caps[1];
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + 1);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.tmp_1);
    { step = 13; continue; }
  case 22:
    s.lastBrkId = 652;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[652]) return breakpoint(s, 42, 652, r0);
  case 42:
    r0 = s.note___7906;
  case 23:
    return leave(s, r0)
  default: oops()
} } }
scanNextWord_inline__P7880.info = {"start":12847,"length":708,"line":387,"column":33,"endLine":409,"endColumn":13,"fileName":"pxt_modules/mixer/melody.ts","functionName":"inline","argumentNames":[]}

function scanNextWord_inline__P7880_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scanNextWord_inline__P7880, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  c___7889: undefined,
  note___7906: undefined,
  c___7912: undefined,
} }





function consumeToken_inline__P7941(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.d___7947 = undefined;
    s.lastBrkId = 656;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[656]) return breakpoint(s, 17, 656, r0);
  case 17:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[0]);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 != 0);
  case 2:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 15; continue; }
    s.lastBrkId = 657;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[657]) return breakpoint(s, 18, 657, r0);
  case 18:
    s.tmp_3 = parseInt__P97_mk(s);
    r0 = pxsim_pxtrt_ldlocRef(s.caps[0]);
    s.tmp_3.arg0 = r0;
    s.tmp_3.arg1 = undefined;
    s.callLocIdx = 94; s.pc = 19; return s.tmp_3;
  case 19:
    r0 = s.retval;
    s.d___7947 = (r0);
    s.lastBrkId = 658;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[658]) return breakpoint(s, 20, 658, r0);
  case 20:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.tmp_0 = r0;
    r0 = pxsim_pxtcore.switch_eq(1, s.tmp_0);
    if (r0) { step = 3; continue; }
    r0 = pxsim_pxtcore.switch_eq(2, s.tmp_0);
    if (r0) { step = 4; continue; }
    r0 = pxsim_pxtcore.switch_eq(3, s.tmp_0);
    if (r0) { step = 5; continue; }
    r0 = pxsim_pxtcore.switch_eq(4, s.tmp_0);
    if (r0) { step = 6; continue; }
    r0 = pxsim_pxtcore.switch_eq(6, s.tmp_0);
    if (r0) { step = 7; continue; }
    r0 = pxsim_pxtcore.switch_eq(7, s.tmp_0);
    if (r0) { step = 8; continue; }
    r0 = pxsim_pxtcore.switch_eq(8, s.tmp_0);
    if (r0) { step = 9; continue; }
    r0 = pxsim_pxtcore.switch_eq(9, s.tmp_0);
    if (r0) { step = 10; continue; }
    r0 = pxsim_pxtcore.switch_eq(10, s.tmp_0);
    if (r0) { step = 11; continue; }
    r0 = pxsim_pxtcore.switch_eq(11, s.tmp_0);
    if (r0) { step = 12; continue; }
    r0 = pxsim_pxtcore.switch_eq(5, s.tmp_0);
    if (r0) { step = 13; continue; }
    r0 = s.tmp_0;
    { step = 14; continue; }
  case 3:
    s.lastBrkId = 659;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[659]) return breakpoint(s, 21, 659, r0);
  case 21:
    r0 = pxsim_pxtrt_stlocRef(s.caps[2], s.d___7947);
    s.lastBrkId = 660;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[660]) return breakpoint(s, 22, 660, r0);
  case 22:
    { step = 14; continue; }
  case 4:
    s.lastBrkId = 661;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[661]) return breakpoint(s, 23, 661, r0);
  case 23:
    s.tmp_0 = r0 = s.caps[3];
    s.tmp_2 = Math_max__P130_mk(s);
    s.tmp_2.arg0 = 1;
    s.tmp_3 = Math_min__P131_mk(s);
    s.tmp_3.arg0 = 16;
    s.tmp_3.arg1 = s.d___7947;
    s.callLocIdx = 95; s.pc = 25; return s.tmp_3;
  case 25:
    r0 = s.retval;
    s.tmp_2.arg1 = r0;
    s.callLocIdx = 96; s.pc = 24; return s.tmp_2;
  case 24:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.tmp_1);
    s.lastBrkId = 662;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[662]) return breakpoint(s, 26, 662, r0);
  case 26:
    r0 = pxsim_pxtrt_stlocRef(s.caps[4], -1);
    s.lastBrkId = 663;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[663]) return breakpoint(s, 27, 663, r0);
  case 27:
    { step = 14; continue; }
  case 5:
    s.lastBrkId = 664;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[664]) return breakpoint(s, 28, 664, r0);
  case 28:
    s.tmp_0 = r0 = s.caps[5];
    s.tmp_2 = Math_max__P130_mk(s);
    s.tmp_2.arg0 = 1;
    s.tmp_2.arg1 = s.d___7947;
    s.callLocIdx = 97; s.pc = 29; return s.tmp_2;
  case 29:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.tmp_1);
    s.lastBrkId = 665;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[665]) return breakpoint(s, 30, 665, r0);
  case 30:
    { step = 14; continue; }
  case 6:
    s.lastBrkId = 666;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[666]) return breakpoint(s, 31, 666, r0);
  case 31:
    r0 = pxsim_pxtrt_stlocRef(s.caps[6], s.d___7947);
    s.lastBrkId = 667;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[667]) return breakpoint(s, 32, 667, r0);
  case 32:
    r0 = pxsim_pxtrt_stlocRef(s.caps[1], 6);
    s.lastBrkId = 668;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[668]) return breakpoint(s, 33, 668, r0);
  case 33:
    { step = 14; continue; }
  case 7:
    s.lastBrkId = 669;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[669]) return breakpoint(s, 34, 669, r0);
  case 34:
    r0 = pxsim_pxtrt_stlocRef(s.caps[4], s.d___7947);
    s.lastBrkId = 670;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[670]) return breakpoint(s, 35, 670, r0);
  case 35:
    { step = 14; continue; }
  case 8:
    s.lastBrkId = 671;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[671]) return breakpoint(s, 36, 671, r0);
  case 36:
    s.tmp_0 = r0 = s.caps[7];
    s.tmp_2 = Math_clamp__P127_mk(s);
    s.tmp_2.arg0 = 1;
    s.tmp_2.arg1 = 18;
    s.tmp_2.arg2 = s.d___7947;
    s.callLocIdx = 98; s.pc = 37; return s.tmp_2;
  case 37:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.tmp_1);
    s.lastBrkId = 672;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[672]) return breakpoint(s, 38, 672, r0);
  case 38:
    { step = 14; continue; }
  case 9:
    s.lastBrkId = 673;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[673]) return breakpoint(s, 39, 673, r0);
  case 39:
    r0 = pxsim_pxtrt_stlocRef(s.caps[8], s.d___7947);
    s.lastBrkId = 674;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[674]) return breakpoint(s, 40, 674, r0);
  case 40:
    r0 = pxsim_pxtrt_stlocRef(s.caps[1], 9);
    s.lastBrkId = 675;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[675]) return breakpoint(s, 41, 675, r0);
  case 41:
    { step = 14; continue; }
  case 10:
    s.lastBrkId = 676;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[676]) return breakpoint(s, 42, 676, r0);
  case 42:
    r0 = pxsim_pxtrt_stlocRef(s.caps[9], s.d___7947);
    s.lastBrkId = 677;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[677]) return breakpoint(s, 43, 677, r0);
  case 43:
    r0 = pxsim_pxtrt_stlocRef(s.caps[1], 10);
    s.lastBrkId = 678;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[678]) return breakpoint(s, 44, 678, r0);
  case 44:
    { step = 14; continue; }
  case 11:
    s.lastBrkId = 679;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[679]) return breakpoint(s, 45, 679, r0);
  case 45:
    s.tmp_0 = r0 = s.caps[10];
    s.tmp_2 = Math_clamp__P127_mk(s);
    s.tmp_2.arg0 = 0;
    s.tmp_2.arg1 = 255;
    s.tmp_2.arg2 = s.d___7947;
    s.callLocIdx = 99; s.pc = 46; return s.tmp_2;
  case 46:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.tmp_1);
    s.lastBrkId = 680;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[680]) return breakpoint(s, 47, 680, r0);
  case 47:
    r0 = pxsim_pxtrt_stlocRef(s.caps[1], 11);
    s.lastBrkId = 681;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[681]) return breakpoint(s, 48, 681, r0);
  case 48:
    { step = 14; continue; }
  case 12:
    s.lastBrkId = 682;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[682]) return breakpoint(s, 49, 682, r0);
  case 49:
    r0 = pxsim_pxtrt_stlocRef(s.caps[11], s.d___7947);
    s.lastBrkId = 683;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[683]) return breakpoint(s, 50, 683, r0);
  case 50:
    { step = 14; continue; }
  case 13:
    s.lastBrkId = 684;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[684]) return breakpoint(s, 51, 684, r0);
  case 51:
    r0 = pxsim_pxtrt_stlocRef(s.caps[12], s.d___7947);
    s.lastBrkId = 685;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[685]) return breakpoint(s, 52, 685, r0);
  case 52:
  case 14:
    s.lastBrkId = 686;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[686]) return breakpoint(s, 53, 686, r0);
  case 53:
    s.tmp_0 = r0 = s.caps[0];
    r0 = pxsim_String_.mkEmpty();
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.tmp_1);
  case 15:
  case 16:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
consumeToken_inline__P7941.info = {"start":14841,"length":1189,"line":448,"column":33,"endLine":469,"endColumn":13,"fileName":"pxt_modules/mixer/melody.ts","functionName":"inline","argumentNames":[]}

function consumeToken_inline__P7941_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: consumeToken_inline__P7941, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  d___7947: undefined,
} }





function music_MelodyPlayer_queuePlayInstructions__P4251(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, music_MelodyPlayer__C1620_VT)) failedCast(r0);
    s.lastBrkId = 604;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[604]) return breakpoint(s, 1, 604, r0);
  case 1:
    r0 = pxsim.music.queuePlayInstructions(s.arg1, s.arg2);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
music_MelodyPlayer_queuePlayInstructions__P4251.info = {"start":11226,"length":125,"line":344,"column":8,"endLine":346,"endColumn":9,"fileName":"pxt_modules/mixer/melody.ts","functionName":"queuePlayInstructions","argumentNames":["this","timeDelta","buf"]}

function music_MelodyPlayer_queuePlayInstructions__P4251_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: music_MelodyPlayer_queuePlayInstructions__P4251, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function music_addNote__P4250(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.arg5 = (s.lambdaArgs[5]);
      s.arg6 = (s.lambdaArgs[6]);
      s.arg7 = (s.lambdaArgs[7]);
      s.arg8 = (s.lambdaArgs[8]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 591;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[591]) return breakpoint(s, 3, 591, r0);
  case 3:
    r0 = (s.arg2 > 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 592;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[592]) return breakpoint(s, 4, 592, r0);
  case 4:
    r0 = pxsim.BufferMethods.setNumber(s.arg0, 2, s.arg1, s.arg5);
    s.lastBrkId = 593;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[593]) return breakpoint(s, 5, 593, r0);
  case 5:
    s.tmp_0 = r0 = s.arg0;
    r0 = (s.arg1 + 1);
    s.tmp_1 = r0;
    r0 = pxsim.BufferMethods.setNumber(s.tmp_0, 2, s.tmp_1, 0);
    s.lastBrkId = 594;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[594]) return breakpoint(s, 6, 594, r0);
  case 6:
    s.tmp_0 = r0 = s.arg0;
    r0 = (s.arg1 + 2);
    s.tmp_1 = r0;
    r0 = pxsim.BufferMethods.setNumber(s.tmp_0, 4, s.tmp_1, s.arg6);
    s.lastBrkId = 595;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[595]) return breakpoint(s, 7, 595, r0);
  case 7:
    s.tmp_0 = r0 = s.arg0;
    r0 = (s.arg1 + 4);
    s.tmp_1 = r0;
    r0 = pxsim.BufferMethods.setNumber(s.tmp_0, 4, s.tmp_1, s.arg2);
    s.lastBrkId = 596;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[596]) return breakpoint(s, 8, 596, r0);
  case 8:
    s.tmp_0 = r0 = s.arg0;
    r0 = (s.arg1 + 6);
    s.tmp_1 = r0;
    r0 = (s.arg3 * s.arg7);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 >> 6);
    s.tmp_2 = r0;
    r0 = pxsim.BufferMethods.setNumber(s.tmp_0, 4, s.tmp_1, s.tmp_2);
    s.lastBrkId = 597;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[597]) return breakpoint(s, 9, 597, r0);
  case 9:
    s.tmp_0 = r0 = s.arg0;
    r0 = (s.arg1 + 8);
    s.tmp_1 = r0;
    r0 = (s.arg4 * s.arg7);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 >> 6);
    s.tmp_2 = r0;
    r0 = pxsim.BufferMethods.setNumber(s.tmp_0, 4, s.tmp_1, s.tmp_2);
    s.lastBrkId = 598;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[598]) return breakpoint(s, 10, 598, r0);
  case 10:
    s.tmp_0 = r0 = s.arg0;
    r0 = (s.arg1 + 10);
    s.tmp_1 = r0;
    r0 = pxsim.BufferMethods.setNumber(s.tmp_0, 4, s.tmp_1, s.arg8);
    s.lastBrkId = 599;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[599]) return breakpoint(s, 11, 599, r0);
  case 11:
    r0 = (s.arg1 + 12);
    s.arg1 = (r0);
  case 1:
  case 2:
    s.lastBrkId = 600;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[600]) return breakpoint(s, 12, 600, r0);
  case 12:
    r0 = pxsim.BufferMethods.setNumber(s.arg0, 2, s.arg1, 0);
    s.lastBrkId = 601;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[601]) return breakpoint(s, 13, 601, r0);
  case 13:
    r0 = s.arg1;
    return leave(s, r0)
  default: oops()
} } }
music_addNote__P4250.info = {"start":10086,"length":904,"line":315,"column":4,"endLine":328,"endColumn":5,"fileName":"pxt_modules/mixer/melody.ts","functionName":"addNote","argumentNames":["sndInstr","sndInstrPtr","ms","beg","end","soundWave","hz","volume","endHz"]}

function music_addNote__P4250_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: music_addNote__P4250, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
  arg5: undefined,
  arg6: undefined,
  arg7: undefined,
  arg8: undefined,
} }





function music_volume__P1605(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 533;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[533]) return breakpoint(s, 1, 533, r0);
  case 1:
    s.tmp_0 = music_initVolume__P4242_mk(s);
    s.callLocIdx = 68; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 534;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[534]) return breakpoint(s, 3, 534, r0);
  case 3:
    r0 = globals.globalVolume___4238;
    return leave(s, r0)
  default: oops()
} } }
music_volume__P1605.info = {"start":1781,"length":90,"line":61,"column":4,"endLine":64,"endColumn":5,"fileName":"pxt_modules/mixer/melody.ts","functionName":"volume","argumentNames":[]}

function music_volume__P1605_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: music_volume__P1605, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
} }





function music_initVolume__P4242(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 528;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[528]) return breakpoint(s, 3, 528, r0);
  case 3:
    r0 = (globals.globalVolume___4238 === null);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 529;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[529]) return breakpoint(s, 4, 529, r0);
  case 4:
    globals.globalVolume___4238 = (0);
    s.lastBrkId = 530;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[530]) return breakpoint(s, 5, 530, r0);
  case 5:
    s.tmp_0 = music_setVolume__P1604_mk(s);
    r0 = pxsim_pxtcore.getConfig(59, 128);
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 65; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
music_initVolume__P4242.info = {"start":1014,"length":180,"line":33,"column":4,"endLine":38,"endColumn":5,"fileName":"pxt_modules/mixer/melody.ts","functionName":"initVolume","argumentNames":[]}

function music_initVolume__P4242_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: music_initVolume__P4242, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
} }





function music_setVolume__P1604(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 531;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[531]) return breakpoint(s, 3, 531, r0);
  case 3:
    s.tmp_0 = Math_clamp__P127_mk(s);
    s.tmp_0.arg0 = 0;
    s.tmp_0.arg1 = 255;
    r0 = (s.arg0 | 0);
    s.tmp_0.arg2 = r0;
    s.callLocIdx = 66; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    globals.globalVolume___4238 = (r0);
    s.lastBrkId = 532;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[532]) return breakpoint(s, 5, 532, r0);
  case 5:
    r0 = (globals.globalVolume___4238 > 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = 1;
    { step = 2; continue; }
  case 1:
    r0 = 0;
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    s.tmp_2 = music_enableAmp__P4241_mk(s);
    s.tmp_2.arg0 = s.tmp_1;
    s.callLocIdx = 67; s.pc = 6; return s.tmp_2;
  case 6:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
music_setVolume__P1604.info = {"start":1533,"length":153,"line":51,"column":4,"endLine":54,"endColumn":5,"fileName":"pxt_modules/mixer/melody.ts","functionName":"setVolume","argumentNames":["volume"]}

function music_setVolume__P1604_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: music_setVolume__P1604, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function music_enableAmp__P4241(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 527;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[527]) return breakpoint(s, 1, 527, r0);
  case 1:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
music_enableAmp__P4241.info = {"start":944,"length":64,"line":29,"column":4,"endLine":31,"endColumn":5,"fileName":"pxt_modules/mixer/melody.ts","functionName":"enableAmp","argumentNames":["en"]}

function music_enableAmp__P4241_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: music_enableAmp__P4241, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function Math_min__P131(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 257;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[257]) return breakpoint(s, 4, 257, r0);
  case 4:
    r0 = (s.arg0 <= s.arg1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 258;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[258]) return breakpoint(s, 5, 258, r0);
  case 5:
    r0 = s.arg0;
    { step = 3; continue; }
  case 1:
  case 2:
    s.lastBrkId = 259;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[259]) return breakpoint(s, 6, 259, r0);
  case 6:
    r0 = s.arg1;
  case 3:
    return leave(s, r0)
  default: oops()
} } }
Math_min__P131.info = {"start":16779,"length":105,"line":565,"column":4,"endLine":568,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"min","argumentNames":["a","b"]}

function Math_min__P131_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Math_min__P131, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Math_max__P130(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 254;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[254]) return breakpoint(s, 4, 254, r0);
  case 4:
    r0 = (s.arg0 >= s.arg1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 255;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[255]) return breakpoint(s, 5, 255, r0);
  case 5:
    r0 = s.arg0;
    { step = 3; continue; }
  case 1:
  case 2:
    s.lastBrkId = 256;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[256]) return breakpoint(s, 6, 256, r0);
  case 6:
    r0 = s.arg1;
  case 3:
    return leave(s, r0)
  default: oops()
} } }
Math_max__P130.info = {"start":16564,"length":105,"line":556,"column":4,"endLine":559,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"max","argumentNames":["a","b"]}

function Math_max__P130_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Math_max__P130, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Math_clamp__P127(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 247;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[247]) return breakpoint(s, 1, 247, r0);
  case 1:
    s.tmp_0 = Math_min__P131_mk(s);
    s.tmp_0.arg0 = s.arg1;
    s.tmp_1 = Math_max__P130_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.tmp_1.arg1 = s.arg2;
    s.callLocIdx = 20; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 21; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leave(s, r0)
  default: oops()
} } }
Math_clamp__P127.info = {"start":15643,"length":130,"line":528,"column":4,"endLine":530,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"clamp","argumentNames":["min","max","value"]}

function Math_clamp__P127_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Math_clamp__P127, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function parseInt__P97(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.start___8248 = undefined;
    s.sign___8278 = undefined;
    s.output___8323 = undefined;
    s.hasDigit___8324 = undefined;
    s.i___8325 = undefined;
    s.code___8332 = undefined;
    s.val___8339 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 1;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1]) return breakpoint(s, 47, 1, r0);
  case 47:
    r0 = pxsim_numops_toBoolDecr(s.arg0);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 6; continue; }
  case 1:
    r0 = (s.arg1 != null);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBool(s.tmp_2);
    if (r0) { step = 2; continue; }
    r0 = s.tmp_2;
    { step = 5; continue; }
  case 2:
    r0 = (s.arg1 < 2);
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBool(s.tmp_3);
    if (!r0) { step = 3; continue; }
    r0 = s.tmp_3;
    { step = 4; continue; }
  case 3:
    r0 = (s.arg1 > 36);
  case 4:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    r0 = s.tmp_4;
  case 5:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    r0 = s.tmp_5;
  case 6:
    // jmp value (already in r0)
    s.tmp_6 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_6);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 2;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2]) return breakpoint(s, 48, 2, r0);
  case 48:
    r0 = NaN;
    { step = 46; continue; }
  case 7:
  case 8:
    s.lastBrkId = 3;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3]) return breakpoint(s, 49, 3, r0);
  case 49:
    s.start___8248 = (0);
    s.lastBrkId = 4;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[4]) return breakpoint(s, 50, 4, r0);
  case 50:
  case 9:
    s.lastBrkId = 5;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[5]) return breakpoint(s, 51, 5, r0);
  case 51:
    s.tmp_1 = r0 = s.start___8248;
    r0 = pxsim_String_.length(s.arg0);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 10; continue; }
    r0 = s.tmp_0;
    { step = 11; continue; }
  case 10:
    s.tmp_3 = helpers_isWhitespace__P124_mk(s);
    r0 = pxsim_String_.charCodeAt(s.arg0, s.start___8248);
    s.tmp_3.arg0 = r0;
    s.callLocIdx = 0; s.pc = 52; return s.tmp_3;
  case 52:
    r0 = s.retval;
  case 11:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    if (!r0) { step = 12; continue; }
    s.lastBrkId = 6;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[6]) return breakpoint(s, 53, 6, r0);
  case 53:
    r0 = (s.start___8248 + 1);
    s.start___8248 = (r0);
    { step = 9; continue; }
  case 12:
    s.lastBrkId = 7;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[7]) return breakpoint(s, 54, 7, r0);
  case 54:
    s.tmp_1 = r0 = s.start___8248;
    r0 = pxsim_String_.length(s.arg0);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 === s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 13; continue; }
    s.lastBrkId = 8;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[8]) return breakpoint(s, 55, 8, r0);
  case 55:
    r0 = NaN;
    { step = 46; continue; }
  case 13:
  case 14:
    s.lastBrkId = 9;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[9]) return breakpoint(s, 56, 9, r0);
  case 56:
    s.sign___8278 = (1);
    s.lastBrkId = 10;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[10]) return breakpoint(s, 57, 10, r0);
  case 57:
    r0 = pxsim_String_.charAt(s.arg0, s.start___8248);
    s.tmp_0 = r0;
    r0 = pxsim_pxtcore.switch_eq("-", s.tmp_0);
    if (r0) { step = 15; continue; }
    r0 = pxsim_pxtcore.switch_eq("+", s.tmp_0);
    if (r0) { step = 16; continue; }
    r0 = s.tmp_0;
    { step = 17; continue; }
  case 15:
    s.lastBrkId = 11;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[11]) return breakpoint(s, 58, 11, r0);
  case 58:
    s.sign___8278 = (-1);
  case 16:
    s.lastBrkId = 12;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[12]) return breakpoint(s, 59, 12, r0);
  case 59:
    r0 = (s.start___8248 + 1);
    s.start___8248 = (r0);
  case 17:
    s.lastBrkId = 13;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[13]) return breakpoint(s, 60, 13, r0);
  case 60:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 18; continue; }
    r0 = s.tmp_0;
    { step = 19; continue; }
  case 18:
    r0 = (s.arg1 == 16);
  case 19:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBool(s.tmp_2);
    if (r0) { step = 20; continue; }
    r0 = s.tmp_2;
    { step = 21; continue; }
  case 20:
    r0 = pxsim_String_.charAt(s.arg0, s.start___8248);
    s.tmp_3 = r0;
    r0 = ("0" === s.tmp_3);
  case 21:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBool(s.tmp_4);
    if (r0) { step = 22; continue; }
    r0 = s.tmp_4;
    { step = 25; continue; }
  case 22:
    s.tmp_7 = r0 = s.arg0;
    r0 = (s.start___8248 + 1);
    s.tmp_8 = r0;
    r0 = pxsim_String_.charAt(s.tmp_7, s.tmp_8);
    s.tmp_6 = r0;
    r0 = ("x" === s.tmp_6);
    s.tmp_5 = r0;
    r0 = pxsim_numops_toBool(s.tmp_5);
    if (!r0) { step = 23; continue; }
    r0 = s.tmp_5;
    { step = 24; continue; }
  case 23:
    s.tmp_10 = r0 = s.arg0;
    r0 = (s.start___8248 + 1);
    s.tmp_11 = r0;
    r0 = pxsim_String_.charAt(s.tmp_10, s.tmp_11);
    s.tmp_9 = r0;
    r0 = ("X" === s.tmp_9);
  case 24:
    // jmp value (already in r0)
    s.tmp_12 = r0;
    r0 = s.tmp_12;
  case 25:
    // jmp value (already in r0)
    s.tmp_13 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_13);
    if (!r0) { step = 26; continue; }
    s.lastBrkId = 14;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[14]) return breakpoint(s, 61, 14, r0);
  case 61:
    s.arg1 = (16);
    s.lastBrkId = 15;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[15]) return breakpoint(s, 62, 15, r0);
  case 62:
    r0 = (s.start___8248 + 2);
    s.start___8248 = (r0);
    { step = 29; continue; }
  case 26:
    s.lastBrkId = 16;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[16]) return breakpoint(s, 63, 16, r0);
  case 63:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 27; continue; }
    s.lastBrkId = 17;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[17]) return breakpoint(s, 64, 17, r0);
  case 64:
    s.arg1 = (10);
  case 27:
  case 28:
  case 29:
    s.lastBrkId = 18;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[18]) return breakpoint(s, 65, 18, r0);
  case 65:
    s.output___8323 = (0);
    s.lastBrkId = 19;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[19]) return breakpoint(s, 66, 19, r0);
  case 66:
    s.hasDigit___8324 = (false);
    s.lastBrkId = 20;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[20]) return breakpoint(s, 67, 20, r0);
  case 67:
    s.i___8325 = (s.start___8248);
    s.lastBrkId = 21;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[21]) return breakpoint(s, 68, 21, r0);
  case 68:
  case 30:
    s.lastBrkId = 22;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[22]) return breakpoint(s, 69, 22, r0);
  case 69:
    s.tmp_1 = r0 = s.i___8325;
    r0 = pxsim_String_.length(s.arg0);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 45; continue; }
    s.lastBrkId = 23;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[23]) return breakpoint(s, 70, 23, r0);
  case 70:
    r0 = pxsim_String_.charCodeAt(s.arg0, s.i___8325);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 | 32);
    s.code___8332 = (r0);
    s.lastBrkId = 24;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[24]) return breakpoint(s, 71, 24, r0);
  case 71:
    s.val___8339 = (undefined);
    s.lastBrkId = 25;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[25]) return breakpoint(s, 72, 25, r0);
  case 72:
    r0 = (s.code___8332 >= 48);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 31; continue; }
    r0 = s.tmp_0;
    { step = 32; continue; }
  case 31:
    r0 = (s.code___8332 < 58);
  case 32:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 33; continue; }
    s.lastBrkId = 26;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[26]) return breakpoint(s, 73, 26, r0);
  case 73:
    r0 = (s.code___8332 - 48);
    s.val___8339 = (r0);
    { step = 38; continue; }
  case 33:
    s.lastBrkId = 27;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[27]) return breakpoint(s, 74, 27, r0);
  case 74:
    r0 = (s.code___8332 >= 97);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 34; continue; }
    r0 = s.tmp_0;
    { step = 35; continue; }
  case 34:
    r0 = (s.code___8332 < 123);
  case 35:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 36; continue; }
    s.lastBrkId = 28;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[28]) return breakpoint(s, 75, 28, r0);
  case 75:
    r0 = (10 + s.code___8332);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - 97);
    s.val___8339 = (r0);
  case 36:
  case 37:
  case 38:
    s.lastBrkId = 29;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[29]) return breakpoint(s, 76, 29, r0);
  case 76:
    r0 = (s.val___8339 == undefined);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 39; continue; }
    r0 = s.tmp_0;
    { step = 40; continue; }
  case 39:
    r0 = (s.val___8339 >= s.arg1);
  case 40:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 43; continue; }
    s.lastBrkId = 30;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[30]) return breakpoint(s, 77, 30, r0);
  case 77:
    r0 = pxsim_numops_toBoolDecr(s.hasDigit___8324);
    s.tmp_3 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 41; continue; }
    s.lastBrkId = 31;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[31]) return breakpoint(s, 78, 31, r0);
  case 78:
    r0 = NaN;
    { step = 46; continue; }
  case 41:
  case 42:
    s.lastBrkId = 32;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[32]) return breakpoint(s, 79, 32, r0);
  case 79:
    { step = 45; continue; }
  case 43:
  case 44:
    s.lastBrkId = 33;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[33]) return breakpoint(s, 80, 33, r0);
  case 80:
    s.hasDigit___8324 = (true);
    s.lastBrkId = 34;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[34]) return breakpoint(s, 81, 34, r0);
  case 81:
    r0 = (s.output___8323 * s.arg1);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 + s.val___8339);
    s.output___8323 = (r0);
    s.lastBrkId = 35;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[35]) return breakpoint(s, 82, 35, r0);
  case 82:
    r0 = (s.i___8325 + 1);
    s.i___8325 = (r0);
    { step = 30; continue; }
  case 45:
    s.lastBrkId = 36;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[36]) return breakpoint(s, 83, 36, r0);
  case 83:
    r0 = (s.sign___8278 * s.output___8323);
  case 46:
    return leave(s, r0)
  default: oops()
} } }
parseInt__P97.info = {"start":1064,"length":1690,"line":44,"column":0,"endLine":103,"endColumn":1,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"parseInt","argumentNames":["text","radix"]}

function parseInt__P97_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: parseInt__P97, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  tmp_12: undefined,
  tmp_13: undefined,
  start___8248: undefined,
  sign___8278: undefined,
  output___8323: undefined,
  hasDigit___8324: undefined,
  i___8325: undefined,
  code___8332: undefined,
  val___8339: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function helpers_isWhitespace__P124(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 244;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[244]) return breakpoint(s, 13, 244, r0);
  case 13:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_pxtcore.switch_eq(9, s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = pxsim_pxtcore.switch_eq(11, s.tmp_0);
    if (r0) { step = 2; continue; }
    r0 = pxsim_pxtcore.switch_eq(12, s.tmp_0);
    if (r0) { step = 3; continue; }
    r0 = pxsim_pxtcore.switch_eq(32, s.tmp_0);
    if (r0) { step = 4; continue; }
    r0 = pxsim_pxtcore.switch_eq(160, s.tmp_0);
    if (r0) { step = 5; continue; }
    r0 = pxsim_pxtcore.switch_eq(65279, s.tmp_0);
    if (r0) { step = 6; continue; }
    r0 = pxsim_pxtcore.switch_eq(10, s.tmp_0);
    if (r0) { step = 7; continue; }
    r0 = pxsim_pxtcore.switch_eq(13, s.tmp_0);
    if (r0) { step = 8; continue; }
    r0 = pxsim_pxtcore.switch_eq(8232, s.tmp_0);
    if (r0) { step = 9; continue; }
    r0 = pxsim_pxtcore.switch_eq(8233, s.tmp_0);
    if (r0) { step = 10; continue; }
    r0 = s.tmp_0;
    { step = 11; continue; }
  case 1:
  case 2:
  case 3:
  case 4:
  case 5:
  case 6:
  case 7:
  case 8:
  case 9:
  case 10:
    s.lastBrkId = 245;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[245]) return breakpoint(s, 14, 245, r0);
  case 14:
    r0 = true;
    { step = 12; continue; }
  case 11:
    s.lastBrkId = 246;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[246]) return breakpoint(s, 15, 246, r0);
  case 15:
    r0 = false;
    { step = 12; continue; }
    r0 = undefined;
  case 12:
    return leave(s, r0)
  default: oops()
} } }
helpers_isWhitespace__P124.info = {"start":14864,"length":674,"line":503,"column":4,"endLine":520,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"isWhitespace","argumentNames":["c"]}

function helpers_isWhitespace__P124_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_isWhitespace__P124, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function music_MelodyPlayer_constructor__P1623(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, music_MelodyPlayer__C1620_VT)) failedCast(r0);
    s.lastBrkId = 602;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[602]) return breakpoint(s, 1, 602, r0);
  case 1:
    r0 = (s.arg0).fields["melody"] = (s.arg1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
music_MelodyPlayer_constructor__P1623.info = {"start":11095,"length":62,"line":336,"column":8,"endLine":338,"endColumn":9,"fileName":"pxt_modules/mixer/melody.ts","functionName":"inline","argumentNames":["this","m"]}

function music_MelodyPlayer_constructor__P1623_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: music_MelodyPlayer_constructor__P1623, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
} }





function music_Melody_stop__P1615(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, music_Melody__C1610_VT)) failedCast(r0);
    s.lastBrkId = 559;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[559]) return breakpoint(s, 3, 559, r0);
  case 3:
    r0 = s.arg0.fields["_player"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 560;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[560]) return breakpoint(s, 4, 560, r0);
  case 4:
    s.tmp_1 = music_MelodyPlayer_stop__P1624_mk(s);
    r0 = s.arg0.fields["_player"];
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 77; s.pc = 5; return s.tmp_1;
  case 5:
    r0 = s.retval;
    s.lastBrkId = 561;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[561]) return breakpoint(s, 6, 561, r0);
  case 6:
    r0 = (s.arg0).fields["_player"] = (null);
  case 1:
  case 2:
    s.lastBrkId = 562;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[562]) return breakpoint(s, 7, 562, r0);
  case 7:
    s.tmp_0 = music_Melody_unregisterMelody__P4247_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 78; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
music_Melody_stop__P1615.info = {"start":6706,"length":173,"line":215,"column":8,"endLine":221,"endColumn":9,"fileName":"pxt_modules/mixer/melody.ts","functionName":"stop","argumentNames":["this"]}

function music_Melody_stop__P1615_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: music_Melody_stop__P1615, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function music_MelodyPlayer_stop__P1624(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, music_MelodyPlayer__C1620_VT)) failedCast(r0);
    s.lastBrkId = 603;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[603]) return breakpoint(s, 1, 603, r0);
  case 1:
    r0 = (s.arg0).fields["melody"] = (null);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
music_MelodyPlayer_stop__P1624.info = {"start":11167,"length":49,"line":340,"column":8,"endLine":342,"endColumn":9,"fileName":"pxt_modules/mixer/melody.ts","functionName":"stop","argumentNames":["this"]}

function music_MelodyPlayer_stop__P1624_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: music_MelodyPlayer_stop__P1624, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function endGame__P62797(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = pxsim_numops_toBoolDecr(s.arg0);
    if (!r0) { step = 3; continue; }
    s.tmp_0 = Stats_addWin__P55118_mk(s);
    s.tmp_0.arg0 = globals.g_stats___62622;
    r0 = globals.g_game___62752.fields["guessCount"];
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 178; s.pc = 5; return s.tmp_0;
  case 5:
    r0 = s.retval;
    r0 = globals.g_game___62752.fields["guessCount"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 == 1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = " guess!!";
    { step = 2; continue; }
  case 1:
    r0 = " guesses!";
  case 2:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    s.tmp_3 = game_splash__P2603_mk(s);
    r0 = globals.g_game___62752.fields["puzzleWord"];
    s.tmp_5 = r0;
    if ((s.tmp_5) && (s.tmp_5).vtable) {
    setupResume(s, 7);
    pxsim_String__stringConv(s.tmp_5);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_5) + ""; }
  case 7:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_String__concat(s.tmp_4, "!");
    s.tmp_3.arg0 = r0;
    r0 = globals.g_game___62752.fields["guessCount"];
    s.tmp_9 = r0;
    if ((s.tmp_9) && (s.tmp_9).vtable) {
    setupResume(s, 8);
    pxsim_String__stringConv(s.tmp_9);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_9) + ""; }
  case 8:
    r0 = s.retval;
    s.tmp_8 = r0;
    r0 = pxsim_String__concat("Got it in ", s.tmp_8);
    s.tmp_7 = r0;
    if ((s.tmp_7) && (s.tmp_7).vtable) {
    setupResume(s, 9);
    pxsim_String__stringConv(s.tmp_7);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_7) + ""; }
  case 9:
    r0 = s.retval;
    s.tmp_6 = r0;
    if ((s.tmp_2) && (s.tmp_2).vtable) {
    setupResume(s, 10);
    pxsim_String__stringConv(s.tmp_2);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_2) + ""; }
  case 10:
    r0 = s.retval;
    s.tmp_10 = r0;
    r0 = pxsim_String__concat(s.tmp_6, s.tmp_10);
    s.tmp_3.arg1 = r0;
    s.callLocIdx = 180; s.pc = 6; return s.tmp_3;
  case 6:
    r0 = s.retval;
    s.tmp_0 = Stats_show__P55111_mk(s);
    s.tmp_0.arg0 = globals.g_stats___62622;
    s.callLocIdx = 181; s.pc = 11; return s.tmp_0;
  case 11:
    r0 = s.retval;
    s.tmp_0 = game_over__P2619_mk(s);
    s.tmp_0.arg0 = true;
    s.tmp_0.arg1 = globals.confetti___2879;
    s.callLocIdx = 182; s.pc = 12; return s.tmp_0;
  case 12:
    r0 = s.retval;
    { step = 4; continue; }
  case 3:
    s.tmp_0 = Stats_addLoss__P55117_mk(s);
    s.tmp_0.arg0 = globals.g_stats___62622;
    s.callLocIdx = 183; s.pc = 13; return s.tmp_0;
  case 13:
    r0 = s.retval;
    s.tmp_0 = Stats_show__P55111_mk(s);
    s.tmp_0.arg0 = globals.g_stats___62622;
    s.callLocIdx = 184; s.pc = 14; return s.tmp_0;
  case 14:
    r0 = s.retval;
    s.tmp_0 = game_over__P2619_mk(s);
    s.tmp_0.arg0 = false;
    s.tmp_0.arg1 = globals.dissolve___2899;
    s.callLocIdx = 185; s.pc = 15; return s.tmp_0;
  case 15:
    r0 = s.retval;
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
endGame__P62797.info = {"start":1380,"length":421,"line":67,"column":0,"endLine":80,"endColumn":1,"fileName":"main.ts","functionName":"endGame","argumentNames":["win"]}

function endGame__P62797_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: endGame__P62797, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  arg0: undefined,
} }





function dissolve_inline__P8548(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.i___8551 = undefined;
    s.x___8562 = undefined;
    s.y___8568 = undefined;
    s.w___8574 = undefined;
    s.h___8578 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = pxsim_ImageMethods.width(s.arg0);
    s.tmp_1 = r0;
    r0 = pxsim_ImageMethods.height(s.arg0);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 * s.tmp_2);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 >> 5);
    s.i___8551 = (r0);
  case 1:
    r0 = (s.i___8551 > 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    s.tmp_1 = Math_FastRandom_randomRange__P2668_mk(s);
    s.tmp_1.arg0 = s.arg1;
    s.tmp_1.arg1 = 0;
    r0 = pxsim_ImageMethods.width(s.arg0);
    s.tmp_1.arg2 = r0;
    s.callLocIdx = 48; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    s.x___8562 = (r0);
    s.tmp_0 = Math_FastRandom_randomRange__P2668_mk(s);
    s.tmp_0.arg0 = s.arg1;
    s.tmp_0.arg1 = 0;
    r0 = pxsim_ImageMethods.height(s.arg0);
    s.tmp_0.arg2 = r0;
    s.callLocIdx = 49; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.y___8568 = (r0);
    s.tmp_0 = Math_FastRandom_randomRange__P2668_mk(s);
    s.tmp_0.arg0 = s.arg1;
    s.tmp_0.arg1 = 1;
    s.tmp_0.arg2 = 3;
    s.callLocIdx = 50; s.pc = 5; return s.tmp_0;
  case 5:
    r0 = s.retval;
    s.w___8574 = (r0);
    s.tmp_0 = Math_FastRandom_randomRange__P2668_mk(s);
    s.tmp_0.arg0 = s.arg1;
    s.tmp_0.arg1 = 1;
    s.tmp_0.arg2 = 3;
    s.callLocIdx = 51; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    s.h___8578 = (r0);
    s.tmp_0 = helpers_imageDrawRect__P1756_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.x___8562;
    s.tmp_0.arg2 = s.y___8568;
    s.tmp_0.arg3 = s.w___8574;
    s.tmp_0.arg4 = s.h___8578;
    s.tmp_0.arg5 = 0;
    s.callLocIdx = 52; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    r0 = (s.i___8551 - 1);
    s.i___8551 = (r0);
    { step = 1; continue; }
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
dissolve_inline__P8548.info = {"start":2199,"length":360,"line":60,"column":49,"endLine":69,"endColumn":5,"fileName":"pxt_modules/game/effects.ts","functionName":"inline","argumentNames":["input","r"]}

function dissolve_inline__P8548_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: dissolve_inline__P8548, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  i___8551: undefined,
  x___8562: undefined,
  y___8568: undefined,
  w___8574: undefined,
  h___8578: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function helpers_imageDrawRect__P1756(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.arg5 = (s.lambdaArgs[5]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 817;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[817]) return breakpoint(s, 6, 817, r0);
  case 6:
    r0 = (s.arg3 == 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = (s.arg4 == 0);
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 818;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[818]) return breakpoint(s, 7, 818, r0);
  case 7:
    { step = 5; continue; }
  case 3:
  case 4:
    s.lastBrkId = 819;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[819]) return breakpoint(s, 8, 819, r0);
  case 8:
    r0 = (s.arg3 - 1);
    s.arg3 = (r0);
    s.lastBrkId = 820;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[820]) return breakpoint(s, 9, 820, r0);
  case 9:
    r0 = (s.arg4 - 1);
    s.arg4 = (r0);
    s.lastBrkId = 821;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[821]) return breakpoint(s, 10, 821, r0);
  case 10:
    s.tmp_0 = helpers_imageDrawLine__P1755_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.tmp_0.arg2 = s.arg2;
    r0 = (s.arg1 + s.arg3);
    s.tmp_0.arg3 = r0;
    s.tmp_0.arg4 = s.arg2;
    s.tmp_0.arg5 = s.arg5;
    s.callLocIdx = 130; s.pc = 11; return s.tmp_0;
  case 11:
    r0 = s.retval;
    s.lastBrkId = 822;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[822]) return breakpoint(s, 12, 822, r0);
  case 12:
    s.tmp_0 = helpers_imageDrawLine__P1755_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.tmp_0.arg2 = s.arg2;
    s.tmp_0.arg3 = s.arg1;
    r0 = (s.arg2 + s.arg4);
    s.tmp_0.arg4 = r0;
    s.tmp_0.arg5 = s.arg5;
    s.callLocIdx = 131; s.pc = 13; return s.tmp_0;
  case 13:
    r0 = s.retval;
    s.lastBrkId = 823;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[823]) return breakpoint(s, 14, 823, r0);
  case 14:
    s.tmp_0 = helpers_imageDrawLine__P1755_mk(s);
    s.tmp_0.arg0 = s.arg0;
    r0 = (s.arg1 + s.arg3);
    s.tmp_0.arg1 = r0;
    r0 = (s.arg2 + s.arg4);
    s.tmp_0.arg2 = r0;
    r0 = (s.arg1 + s.arg3);
    s.tmp_0.arg3 = r0;
    s.tmp_0.arg4 = s.arg2;
    s.tmp_0.arg5 = s.arg5;
    s.callLocIdx = 132; s.pc = 15; return s.tmp_0;
  case 15:
    r0 = s.retval;
    s.lastBrkId = 824;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[824]) return breakpoint(s, 16, 824, r0);
  case 16:
    s.tmp_0 = helpers_imageDrawLine__P1755_mk(s);
    s.tmp_0.arg0 = s.arg0;
    r0 = (s.arg1 + s.arg3);
    s.tmp_0.arg1 = r0;
    r0 = (s.arg2 + s.arg4);
    s.tmp_0.arg2 = r0;
    s.tmp_0.arg3 = s.arg1;
    r0 = (s.arg2 + s.arg4);
    s.tmp_0.arg4 = r0;
    s.tmp_0.arg5 = s.arg5;
    s.callLocIdx = 133; s.pc = 17; return s.tmp_0;
  case 17:
    r0 = s.retval;
  case 5:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
helpers_imageDrawRect__P1756.info = {"start":5233,"length":370,"line":166,"column":4,"endLine":174,"endColumn":5,"fileName":"pxt_modules/screen/image.ts","functionName":"imageDrawRect","argumentNames":["img","x","y","w","h","c"]}

function helpers_imageDrawRect__P1756_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_imageDrawRect__P1756, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
  arg5: undefined,
} }





function helpers_imageDrawLine__P1755(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.arg5 = (s.lambdaArgs[5]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 816;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[816]) return breakpoint(s, 1, 816, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = helpers_pack__P4286_mk(s);
    s.tmp_2.arg0 = s.arg1;
    s.tmp_2.arg1 = s.arg2;
    s.callLocIdx = 128; s.pc = 2; return s.tmp_2;
  case 2:
    r0 = s.retval;
    s.tmp_1 = r0;
    s.tmp_4 = helpers_pack__P4286_mk(s);
    s.tmp_4.arg0 = s.arg3;
    s.tmp_4.arg1 = s.arg4;
    s.callLocIdx = 129; s.pc = 3; return s.tmp_4;
  case 3:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = pxsim_ImageMethods._drawLine(s.tmp_0, s.tmp_1, s.tmp_3, s.arg5);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
helpers_imageDrawLine__P1755.info = {"start":5069,"length":159,"line":163,"column":4,"endLine":165,"endColumn":5,"fileName":"pxt_modules/screen/image.ts","functionName":"imageDrawLine","argumentNames":["img","x","y","w","h","c"]}

function helpers_imageDrawLine__P1755_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_imageDrawLine__P1755, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
  arg5: undefined,
} }





function helpers_pack__P4286(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 813;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[813]) return breakpoint(s, 1, 813, r0);
  case 1:
    s.tmp_2 = Math_clamp__P127_mk(s);
    s.tmp_2.arg0 = -30000;
    s.tmp_2.arg1 = 30000;
    r0 = (s.arg0 | 0);
    s.tmp_2.arg2 = r0;
    s.callLocIdx = 123; s.pc = 2; return s.tmp_2;
  case 2:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 & 65535);
    s.tmp_0 = r0;
    s.tmp_5 = Math_clamp__P127_mk(s);
    s.tmp_5.arg0 = -30000;
    s.tmp_5.arg1 = 30000;
    r0 = (s.arg1 | 0);
    s.tmp_5.arg2 = r0;
    s.callLocIdx = 124; s.pc = 3; return s.tmp_5;
  case 3:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = (s.tmp_4 << 16);
    s.tmp_3 = r0;
    r0 = (s.tmp_0 | s.tmp_3);
    return leave(s, r0)
  default: oops()
} } }
helpers_pack__P4286.info = {"start":3636,"length":145,"line":130,"column":4,"endLine":132,"endColumn":5,"fileName":"pxt_modules/screen/image.ts","functionName":"pack","argumentNames":["x","y"]}

function helpers_pack__P4286_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_pack__P4286, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Math_FastRandom_randomRange__P2668(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Math_FastRandom__C2664_VT)) failedCast(r0);
    s.lastBrkId = 3063;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3063]) return breakpoint(s, 3, 3063, r0);
  case 3:
    r0 = (s.arg2 > s.arg1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.tmp_2 = Math_FastRandom_next__P2667_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 1284; s.pc = 4; return s.tmp_2;
  case 4:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.arg2 - s.arg1);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 + 1);
    s.tmp_3 = r0;
    r0 = (s.tmp_1 % s.tmp_3);
    { step = 2; continue; }
  case 1:
    r0 = 0;
  case 2:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    r0 = (s.arg1 + s.tmp_5);
    return leave(s, r0)
  default: oops()
} } }
Math_FastRandom_randomRange__P2668.info = {"start":2079,"length":131,"line":62,"column":8,"endLine":64,"endColumn":9,"fileName":"pxt_modules/game/mathUtil.ts","functionName":"randomRange","argumentNames":["this","min","max"]}

function Math_FastRandom_randomRange__P2668_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Math_FastRandom_randomRange__P2668, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function Math_FastRandom_next__P2667(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Math_FastRandom__C2664_VT)) failedCast(r0);
    s.lastBrkId = 3062;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3062]) return breakpoint(s, 1, 3062, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.arg0.fields["lfsr"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 >> 1);
    s.tmp_2 = r0;
    r0 = s.arg0.fields["lfsr"];
    s.tmp_7 = r0;
    r0 = (s.tmp_7 & 1);
    s.tmp_6 = r0;
    r0 = (0 - s.tmp_6);
    s.tmp_5 = r0;
    r0 = (s.tmp_5 & 46080);
    s.tmp_4 = r0;
    r0 = (s.tmp_2 ^ s.tmp_4);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["lfsr"] = (s.tmp_1);
    r0 = s.tmp_1;
    return leave(s, r0)
  default: oops()
} } }
Math_FastRandom_next__P2667.info = {"start":1713,"length":107,"line":53,"column":8,"endLine":55,"endColumn":9,"fileName":"pxt_modules/game/mathUtil.ts","functionName":"next","argumentNames":["this"]}

function Math_FastRandom_next__P2667_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Math_FastRandom_next__P2667, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  arg0: undefined,
} }





function effects_ImageEffect_constructor__P2895(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, effects_ImageEffect__C2894_VT)) failedCast(r0);
    s.lastBrkId = 3556;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3556]) return breakpoint(s, 1, 3556, r0);
  case 1:
    r0 = (s.arg0).fields["effect"] = (s.arg2);
    s.lastBrkId = 3557;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3557]) return breakpoint(s, 2, 3557, r0);
  case 2:
    r0 = pxsim_pxtcore_mkClassInstance(Math_FastRandom__C2664_VT);
    s.tmp_0 = r0;
    s.tmp_1 = Math_FastRandom_constructor__P2666_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = undefined;
    s.callLocIdx = 1585; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    r0 = (s.arg0).fields["fastRandom"] = (s.tmp_0);
    s.lastBrkId = 3558;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3558]) return breakpoint(s, 4, 3558, r0);
  case 4:
    r0 = (s.arg0).fields["preferredDelay"] = (s.arg1);
    s.lastBrkId = 3559;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3559]) return breakpoint(s, 5, 3559, r0);
  case 5:
    r0 = (s.arg0).fields["times"] = (undefined);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
effects_ImageEffect_constructor__P2895.info = {"start":410,"length":290,"line":10,"column":8,"endLine":15,"endColumn":9,"fileName":"pxt_modules/game/effects.ts","functionName":"inline","argumentNames":["this","defaultRate","effectFactory"]}

function effects_ImageEffect_constructor__P2895_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: effects_ImageEffect_constructor__P2895, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function Stats_addLoss__P55117(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Stats__C55116_VT)) failedCast(r0);
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["games"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["games"] = (s.tmp_1);
    r0 = (s.arg0).fields["streak"] = (0);
    s.tmp_0 = Stats_save__P55120_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 88; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Stats_addLoss__P55117.info = {"start":177,"length":95,"line":10,"column":4,"endLine":14,"endColumn":5,"fileName":"stats.ts","functionName":"addLoss","argumentNames":["this"]}

function Stats_addLoss__P55117_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Stats_addLoss__P55117, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function Stats_save__P55120(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Stats__C55116_VT)) failedCast(r0);
    s.tmp_0 = settings_writeNumber__P1856_mk(s);
    s.tmp_0.arg0 = "saved";
    s.tmp_0.arg1 = 1;
    s.callLocIdx = 99; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    s.tmp_0 = settings_writeNumber__P1856_mk(s);
    s.tmp_0.arg0 = "wins";
    r0 = s.arg0.fields["wins"];
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 100; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.tmp_0 = settings_writeNumber__P1856_mk(s);
    s.tmp_0.arg0 = "streak";
    r0 = s.arg0.fields["streak"];
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 101; s.pc = 3; return s.tmp_0;
  case 3:
    r0 = s.retval;
    s.tmp_0 = settings_writeNumber__P1856_mk(s);
    s.tmp_0.arg0 = "games";
    r0 = s.arg0.fields["games"];
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 102; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.tmp_0 = settings_writeNumberArray__P1857_mk(s);
    s.tmp_0.arg0 = "guesses";
    r0 = s.arg0.fields["guesses"];
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 103; s.pc = 5; return s.tmp_0;
  case 5:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Stats_save__P55120.info = {"start":1025,"length":277,"line":41,"column":4,"endLine":47,"endColumn":5,"fileName":"stats.ts","functionName":"save","argumentNames":["this"]}

function Stats_save__P55120_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Stats_save__P55120, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function settings_writeNumberArray__P1857(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 968;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[968]) return breakpoint(s, 1, 968, r0);
  case 1:
    s.tmp_0 = settings_writeBuffer__P1853_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_1 = msgpack_packNumberArray__P182_mk(s);
    s.tmp_1.arg0 = s.arg1;
    s.callLocIdx = 171; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 172; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
settings_writeNumberArray__P1857.info = {"start":2464,"length":127,"line":96,"column":4,"endLine":98,"endColumn":5,"fileName":"pxt_modules/settings/settings.ts","functionName":"writeNumberArray","argumentNames":["key","value"]}

function settings_writeNumberArray__P1857_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: settings_writeNumberArray__P1857, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function settings_writeBuffer__P1853(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 963;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[963]) return breakpoint(s, 3, 963, r0);
  case 3:
    r0 = pxsim.settings._set(s.arg0, s.arg1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 964;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[964]) return breakpoint(s, 4, 964, r0);
  case 4:
    r0 = pxsim.settings._userClean();
    s.lastBrkId = 965;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[965]) return breakpoint(s, 5, 965, r0);
  case 5:
    r0 = pxsim_pxtrt.panic(920);
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
settings_writeBuffer__P1853.info = {"start":1538,"length":290,"line":63,"column":4,"endLine":70,"endColumn":5,"fileName":"pxt_modules/settings/settings.ts","functionName":"writeBuffer","argumentNames":["key","value"]}

function settings_writeBuffer__P1853_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: settings_writeBuffer__P1853, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function msgpack_packNumberArray__P182(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.off___17575 = undefined;
    s.n___17577 = undefined;
    s.unnamed1624___U2 = undefined;
    s.unnamed1625___U3 = undefined;
    s.buf___17587 = undefined;
    s.n___17593 = undefined;
    s.unnamed1626___U6 = undefined;
    s.unnamed1627___U7 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 330;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[330]) return breakpoint(s, 5, 330, r0);
  case 5:
    s.off___17575 = (0);
    s.lastBrkId = 331;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[331]) return breakpoint(s, 6, 331, r0);
  case 6:
    s.n___17577 = (undefined);
    s.unnamed1624___U2 = (s.arg0);
    s.unnamed1625___U3 = (0);
    s.lastBrkId = 332;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[332]) return breakpoint(s, 7, 332, r0);
  case 7:
  case 1:
    s.tmp_0 = r0 = s.unnamed1625___U3;
    r0 = pxsim_Array__length(s.unnamed1624___U2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 2; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1624___U2, s.unnamed1625___U3);
    s.n___17577 = (r0);
    s.lastBrkId = 333;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[333]) return breakpoint(s, 8, 333, r0);
  case 8:
    s.tmp_2 = r0 = s.off___17575;
    s.tmp_4 = msgpack_packNumberCore__P4144_mk(s);
    s.tmp_4.arg0 = null;
    s.tmp_4.arg1 = s.off___17575;
    s.tmp_4.arg2 = s.n___17577;
    s.callLocIdx = 27; s.pc = 9; return s.tmp_4;
  case 9:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_2 + s.tmp_3);
    s.off___17575 = (r0);
    r0 = (s.unnamed1625___U3 + 1);
    s.unnamed1625___U3 = (r0);
    { step = 1; continue; }
  case 2:
    s.unnamed1624___U2 = (undefined);
    s.lastBrkId = 334;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[334]) return breakpoint(s, 10, 334, r0);
  case 10:
    r0 = pxsim.control.createBuffer(s.off___17575);
    s.buf___17587 = (r0);
    s.lastBrkId = 335;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[335]) return breakpoint(s, 11, 335, r0);
  case 11:
    s.off___17575 = (0);
    s.lastBrkId = 336;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[336]) return breakpoint(s, 12, 336, r0);
  case 12:
    s.n___17593 = (undefined);
    s.unnamed1626___U6 = (s.arg0);
    s.unnamed1627___U7 = (0);
    s.lastBrkId = 337;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[337]) return breakpoint(s, 13, 337, r0);
  case 13:
  case 3:
    s.tmp_0 = r0 = s.unnamed1627___U7;
    r0 = pxsim_Array__length(s.unnamed1626___U6);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 4; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1626___U6, s.unnamed1627___U7);
    s.n___17593 = (r0);
    s.lastBrkId = 338;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[338]) return breakpoint(s, 14, 338, r0);
  case 14:
    s.tmp_2 = r0 = s.off___17575;
    s.tmp_4 = msgpack_packNumberCore__P4144_mk(s);
    s.tmp_4.arg0 = s.buf___17587;
    s.tmp_4.arg1 = s.off___17575;
    s.tmp_4.arg2 = s.n___17593;
    s.callLocIdx = 28; s.pc = 15; return s.tmp_4;
  case 15:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_2 + s.tmp_3);
    s.off___17575 = (r0);
    r0 = (s.unnamed1627___U7 + 1);
    s.unnamed1627___U7 = (r0);
    { step = 3; continue; }
  case 4:
    s.unnamed1626___U6 = (undefined);
    s.lastBrkId = 339;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[339]) return breakpoint(s, 16, 339, r0);
  case 16:
    r0 = s.buf___17587;
    return leave(s, r0)
  default: oops()
} } }
msgpack_packNumberArray__P182.info = {"start":3427,"length":330,"line":117,"column":4,"endLine":128,"endColumn":5,"fileName":"pxt_modules/base/buffer.ts","functionName":"packNumberArray","argumentNames":["nums"]}

function msgpack_packNumberArray__P182_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: msgpack_packNumberArray__P182, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  off___17575: undefined,
  n___17577: undefined,
  unnamed1624___U2: undefined,
  unnamed1625___U3: undefined,
  buf___17587: undefined,
  n___17593: undefined,
  unnamed1626___U6: undefined,
  unnamed1627___U7: undefined,
  arg0: undefined,
} }





function msgpack_packNumberCore__P4144(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.tag___17607 = undefined;
    s.fmt___17650 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 293;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[293]) return breakpoint(s, 24, 293, r0);
  case 24:
    s.tag___17607 = (203);
    s.lastBrkId = 294;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[294]) return breakpoint(s, 25, 294, r0);
  case 25:
    s.tmp_1 = r0 = s.arg2;
    r0 = (s.arg2 << 0);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 == s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    s.tmp_3 = r0 = s.arg2;
    r0 = (s.arg2 >>> 0);
    s.tmp_4 = r0;
    r0 = (s.tmp_3 == s.tmp_4);
  case 2:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_5);
    if (!r0) { step = 19; continue; }
    s.lastBrkId = 295;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[295]) return breakpoint(s, 26, 295, r0);
  case 26:
    r0 = (-31 <= s.arg2);
    s.tmp_6 = r0;
    r0 = pxsim_numops_toBool(s.tmp_6);
    if (r0) { step = 3; continue; }
    r0 = s.tmp_6;
    { step = 4; continue; }
  case 3:
    r0 = (s.arg2 <= 127);
  case 4:
    // jmp value (already in r0)
    s.tmp_7 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_7);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 296;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[296]) return breakpoint(s, 27, 296, r0);
  case 27:
    r0 = pxsim_numops_toBoolDecr(s.arg0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 297;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[297]) return breakpoint(s, 28, 297, r0);
  case 28:
    r0 = pxsim.BufferMethods.setByte(s.arg0, s.arg1, s.arg2);
  case 5:
  case 6:
    s.lastBrkId = 298;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[298]) return breakpoint(s, 29, 298, r0);
  case 29:
    r0 = 1;
    { step = 23; continue; }
    { step = 18; continue; }
  case 7:
    s.lastBrkId = 299;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[299]) return breakpoint(s, 30, 299, r0);
  case 30:
    r0 = (0 <= s.arg2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 12; continue; }
    s.lastBrkId = 300;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[300]) return breakpoint(s, 31, 300, r0);
  case 31:
    r0 = (s.arg2 <= 255);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 8; continue; }
    s.lastBrkId = 301;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[301]) return breakpoint(s, 32, 301, r0);
  case 32:
    s.tag___17607 = (204);
    { step = 11; continue; }
  case 8:
    s.lastBrkId = 302;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[302]) return breakpoint(s, 33, 302, r0);
  case 33:
    r0 = (s.arg2 <= 65535);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 303;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[303]) return breakpoint(s, 34, 303, r0);
  case 34:
    s.tag___17607 = (205);
    { step = 10; continue; }
  case 9:
    s.lastBrkId = 304;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[304]) return breakpoint(s, 35, 304, r0);
  case 35:
    s.tag___17607 = (206);
  case 10:
  case 11:
    { step = 17; continue; }
  case 12:
    s.lastBrkId = 305;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[305]) return breakpoint(s, 36, 305, r0);
  case 36:
    r0 = (-127 <= s.arg2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 13; continue; }
    s.lastBrkId = 306;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[306]) return breakpoint(s, 37, 306, r0);
  case 37:
    s.tag___17607 = (208);
    { step = 16; continue; }
  case 13:
    s.lastBrkId = 307;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[307]) return breakpoint(s, 38, 307, r0);
  case 38:
    r0 = (-32767 <= s.arg2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 14; continue; }
    s.lastBrkId = 308;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[308]) return breakpoint(s, 39, 308, r0);
  case 39:
    s.tag___17607 = (209);
    { step = 15; continue; }
  case 14:
    s.lastBrkId = 309;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[309]) return breakpoint(s, 40, 309, r0);
  case 40:
    s.tag___17607 = (210);
  case 15:
  case 16:
  case 17:
  case 18:
  case 19:
  case 20:
    s.lastBrkId = 310;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[310]) return breakpoint(s, 41, 310, r0);
  case 41:
    s.tmp_0 = msgpack_tagFormat__P4143_mk(s);
    s.tmp_0.arg0 = s.tag___17607;
    s.callLocIdx = 23; s.pc = 42; return s.tmp_0;
  case 42:
    r0 = s.retval;
    s.fmt___17650 = (r0);
    s.lastBrkId = 311;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[311]) return breakpoint(s, 43, 311, r0);
  case 43:
    r0 = pxsim_numops_toBoolDecr(s.arg0);
    if (!r0) { step = 21; continue; }
    s.lastBrkId = 312;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[312]) return breakpoint(s, 44, 312, r0);
  case 44:
    r0 = pxsim.BufferMethods.setByte(s.arg0, s.arg1, s.tag___17607);
    s.lastBrkId = 313;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[313]) return breakpoint(s, 45, 313, r0);
  case 45:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_1 = r0 = s.fmt___17650;
    r0 = (s.arg1 + 1);
    s.tmp_2 = r0;
    r0 = pxsim.BufferMethods.setNumber(s.tmp_0, s.tmp_1, s.tmp_2, s.arg2);
  case 21:
  case 22:
    s.lastBrkId = 314;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[314]) return breakpoint(s, 46, 314, r0);
  case 46:
    s.tmp_1 = pins_sizeOf__P173_mk(s);
    s.tmp_1.arg0 = s.fmt___17650;
    s.callLocIdx = 24; s.pc = 47; return s.tmp_1;
  case 47:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = (s.tmp_0 + 1);
  case 23:
    return leave(s, r0)
  default: oops()
} } }
msgpack_packNumberCore__P4144.info = {"start":1632,"length":951,"line":56,"column":4,"endLine":86,"endColumn":5,"fileName":"pxt_modules/base/buffer.ts","functionName":"packNumberCore","argumentNames":["buf","offset","num"]}

function msgpack_packNumberCore__P4144_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: msgpack_packNumberCore__P4144, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tag___17607: undefined,
  fmt___17650: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function msgpack_tagFormat__P4143(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 284;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[284]) return breakpoint(s, 10, 284, r0);
  case 10:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_pxtcore.switch_eq(203, s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = pxsim_pxtcore.switch_eq(204, s.tmp_0);
    if (r0) { step = 2; continue; }
    r0 = pxsim_pxtcore.switch_eq(205, s.tmp_0);
    if (r0) { step = 3; continue; }
    r0 = pxsim_pxtcore.switch_eq(206, s.tmp_0);
    if (r0) { step = 4; continue; }
    r0 = pxsim_pxtcore.switch_eq(208, s.tmp_0);
    if (r0) { step = 5; continue; }
    r0 = pxsim_pxtcore.switch_eq(209, s.tmp_0);
    if (r0) { step = 6; continue; }
    r0 = pxsim_pxtcore.switch_eq(210, s.tmp_0);
    if (r0) { step = 7; continue; }
    r0 = s.tmp_0;
    { step = 8; continue; }
  case 1:
    s.lastBrkId = 285;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[285]) return breakpoint(s, 11, 285, r0);
  case 11:
    r0 = 16;
    { step = 9; continue; }
  case 2:
    s.lastBrkId = 286;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[286]) return breakpoint(s, 12, 286, r0);
  case 12:
    r0 = 7;
    { step = 9; continue; }
  case 3:
    s.lastBrkId = 287;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[287]) return breakpoint(s, 13, 287, r0);
  case 13:
    r0 = 9;
    { step = 9; continue; }
  case 4:
    s.lastBrkId = 288;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[288]) return breakpoint(s, 14, 288, r0);
  case 14:
    r0 = 12;
    { step = 9; continue; }
  case 5:
    s.lastBrkId = 289;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[289]) return breakpoint(s, 15, 289, r0);
  case 15:
    r0 = 6;
    { step = 9; continue; }
  case 6:
    s.lastBrkId = 290;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[290]) return breakpoint(s, 16, 290, r0);
  case 16:
    r0 = 8;
    { step = 9; continue; }
  case 7:
    s.lastBrkId = 291;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[291]) return breakpoint(s, 17, 291, r0);
  case 17:
    r0 = 10;
    { step = 9; continue; }
  case 8:
    s.lastBrkId = 292;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[292]) return breakpoint(s, 18, 292, r0);
  case 18:
    r0 = null;
    { step = 9; continue; }
    r0 = undefined;
  case 9:
    return leave(s, r0)
  default: oops()
} } }
msgpack_tagFormat__P4143.info = {"start":1145,"length":481,"line":42,"column":4,"endLine":54,"endColumn":5,"fileName":"pxt_modules/base/buffer.ts","functionName":"tagFormat","argumentNames":["tag"]}

function msgpack_tagFormat__P4143_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: msgpack_tagFormat__P4143, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function pins_sizeOf__P173(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 283;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[283]) return breakpoint(s, 1, 283, r0);
  case 1:
    s.tmp_0 = Buffer_sizeOfNumberFormat__P213_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 22; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leave(s, r0)
  default: oops()
} } }
pins_sizeOf__P173.info = {"start":42,"length":101,"line":2,"column":4,"endLine":4,"endColumn":5,"fileName":"pxt_modules/base/buffer.ts","functionName":"sizeOf","argumentNames":["format"]}

function pins_sizeOf__P173_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: pins_sizeOf__P173, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function Buffer_sizeOfNumberFormat__P213(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 340;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[340]) return breakpoint(s, 19, 340, r0);
  case 19:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_pxtcore.switch_eq(1, s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = pxsim_pxtcore.switch_eq(2, s.tmp_0);
    if (r0) { step = 2; continue; }
    r0 = pxsim_pxtcore.switch_eq(6, s.tmp_0);
    if (r0) { step = 3; continue; }
    r0 = pxsim_pxtcore.switch_eq(7, s.tmp_0);
    if (r0) { step = 4; continue; }
    r0 = pxsim_pxtcore.switch_eq(3, s.tmp_0);
    if (r0) { step = 5; continue; }
    r0 = pxsim_pxtcore.switch_eq(4, s.tmp_0);
    if (r0) { step = 6; continue; }
    r0 = pxsim_pxtcore.switch_eq(8, s.tmp_0);
    if (r0) { step = 7; continue; }
    r0 = pxsim_pxtcore.switch_eq(9, s.tmp_0);
    if (r0) { step = 8; continue; }
    r0 = pxsim_pxtcore.switch_eq(5, s.tmp_0);
    if (r0) { step = 9; continue; }
    r0 = pxsim_pxtcore.switch_eq(10, s.tmp_0);
    if (r0) { step = 10; continue; }
    r0 = pxsim_pxtcore.switch_eq(12, s.tmp_0);
    if (r0) { step = 11; continue; }
    r0 = pxsim_pxtcore.switch_eq(11, s.tmp_0);
    if (r0) { step = 12; continue; }
    r0 = pxsim_pxtcore.switch_eq(15, s.tmp_0);
    if (r0) { step = 13; continue; }
    r0 = pxsim_pxtcore.switch_eq(13, s.tmp_0);
    if (r0) { step = 14; continue; }
    r0 = pxsim_pxtcore.switch_eq(16, s.tmp_0);
    if (r0) { step = 15; continue; }
    r0 = pxsim_pxtcore.switch_eq(14, s.tmp_0);
    if (r0) { step = 16; continue; }
    r0 = s.tmp_0;
    { step = 17; continue; }
  case 1:
  case 2:
  case 3:
  case 4:
    s.lastBrkId = 341;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[341]) return breakpoint(s, 20, 341, r0);
  case 20:
    r0 = 1;
    { step = 18; continue; }
  case 5:
  case 6:
  case 7:
  case 8:
    s.lastBrkId = 342;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[342]) return breakpoint(s, 21, 342, r0);
  case 21:
    r0 = 2;
    { step = 18; continue; }
  case 9:
  case 10:
  case 11:
  case 12:
  case 13:
  case 14:
    s.lastBrkId = 343;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[343]) return breakpoint(s, 22, 343, r0);
  case 22:
    r0 = 4;
    { step = 18; continue; }
  case 15:
  case 16:
    s.lastBrkId = 344;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[344]) return breakpoint(s, 23, 344, r0);
  case 23:
    r0 = 8;
    { step = 18; continue; }
  case 17:
    s.lastBrkId = 345;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[345]) return breakpoint(s, 24, 345, r0);
  case 24:
    r0 = 0;
  case 18:
    return leave(s, r0)
  default: oops()
} } }
Buffer_sizeOfNumberFormat__P213.info = {"start":14912,"length":856,"line":508,"column":4,"endLine":532,"endColumn":5,"fileName":"pxt_modules/base/buffer.ts","functionName":"sizeOfNumberFormat","argumentNames":["format"]}

function Buffer_sizeOfNumberFormat__P213_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Buffer_sizeOfNumberFormat__P213, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function settings_writeNumber__P1856(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 967;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[967]) return breakpoint(s, 1, 967, r0);
  case 1:
    r0 = pxsim_Array__mk();
    s.tmp_0 = r0;
    r0 = pxsim_Array__push(s.tmp_0, s.arg1);
    s.tmp_1 = settings_writeBuffer__P1853_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.tmp_2 = msgpack_packNumberArray__P182_mk(s);
    s.tmp_2.arg0 = s.tmp_0;
    s.callLocIdx = 169; s.pc = 3; return s.tmp_2;
  case 3:
    r0 = s.retval;
    s.tmp_1.arg1 = r0;
    s.callLocIdx = 170; s.pc = 2; return s.tmp_1;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
settings_writeNumber__P1856.info = {"start":2265,"length":122,"line":89,"column":4,"endLine":91,"endColumn":5,"fileName":"pxt_modules/settings/settings.ts","functionName":"writeNumber","argumentNames":["key","value"]}

function settings_writeNumber__P1856_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: settings_writeNumber__P1856, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function confetti_inline__P8739(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.factory___8742 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = pxsim_pxtcore_mkClassInstance(particles_ConfettiFactory__C2823_VT);
    s.tmp_0 = r0;
    s.tmp_2 = if_width_1_mk(s);
    s.tmp_2.arg0 = s.arg0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "width");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["width"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["width"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 42; s.pc = 3; return s.tmp_2; }
    }
  case 3:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 1; continue; }
    s.tmp_3 = if_width_1_mk(s);
    s.tmp_3.arg0 = s.arg0;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "width");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["width"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["width"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 43; s.pc = 4; return s.tmp_3; }
    }
  case 4:
    r0 = s.retval;
    { step = 2; continue; }
  case 1:
    r0 = 16;
  case 2:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    s.tmp_5 = particles_ConfettiFactory_constructor__P2824_mk(s);
    s.tmp_5.arg0 = s.tmp_0;
    s.tmp_5.arg1 = s.tmp_4;
    s.tmp_5.arg2 = 16;
    s.callLocIdx = 44; s.pc = 5; return s.tmp_5;
  case 5:
    r0 = s.retval;
    s.factory___8742 = (s.tmp_0);
    s.tmp_0 = particles_SprayFactory_setSpeed__P2800_mk(s);
    s.tmp_0.arg0 = s.factory___8742;
    s.tmp_0.arg1 = 30;
    s.callLocIdx = 45; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    r0 = pxsim_pxtcore_mkClassInstance(particles_ParticleSource__C2756_VT);
    s.tmp_0 = r0;
    s.tmp_1 = particles_ParticleSource_constructor__P2761_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = s.arg0;
    s.tmp_1.arg2 = s.arg1;
    s.tmp_1.arg3 = s.factory___8742;
    s.callLocIdx = 46; s.pc = 7; return s.tmp_1;
  case 7:
    r0 = s.retval;
    r0 = s.tmp_0;
    return leave(s, r0)
  default: oops()
} } }
confetti_inline__P8739.info = {"start":7534,"length":284,"line":191,"column":59,"endLine":195,"endColumn":5,"fileName":"pxt_modules/game/particleeffects.ts","functionName":"inline","argumentNames":["anchor","particlesPerSecond"]}

function confetti_inline__P8739_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: confetti_inline__P8739, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  factory___8742: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function particles_ParticleSource_constructor__P2761(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.sources___8763 = undefined;
    s.removedSource___8772 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_ParticleSource__C2756_VT)) failedCast(r0);
    s.lastBrkId = 3301;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3301]) return breakpoint(s, 5, 3301, r0);
  case 5:
    s.tmp_0 = sprites_BaseSprite_constructor__P1888_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 0;
    s.callLocIdx = 1453; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    s.lastBrkId = 3302;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3302]) return breakpoint(s, 7, 3302, r0);
  case 7:
    s.tmp_0 = particles_init__P4899_mk(s);
    s.callLocIdx = 1454; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
    s.lastBrkId = 3303;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3303]) return breakpoint(s, 9, 3303, r0);
  case 9:
    s.tmp_0 = particles_particleSources__P4905_mk(s);
    s.callLocIdx = 1455; s.pc = 10; return s.tmp_0;
  case 10:
    r0 = s.retval;
    s.sources___8763 = (r0);
    s.lastBrkId = 3304;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3304]) return breakpoint(s, 11, 3304, r0);
  case 11:
    r0 = pxsim_Array__length(s.sources___8763);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 >= globals.MAX_SOURCES___4891);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3305;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3305]) return breakpoint(s, 12, 3305, r0);
  case 12:
    s.tmp_2 = particles_sortSources__P4902_mk(s);
    s.tmp_2.arg0 = s.sources___8763;
    s.callLocIdx = 1456; s.pc = 13; return s.tmp_2;
  case 13:
    r0 = s.retval;
    s.lastBrkId = 3306;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3306]) return breakpoint(s, 14, 3306, r0);
  case 14:
    s.tmp_0 = helpers_arrayShift__P102_mk(s);
    s.tmp_0.arg0 = s.sources___8763;
    s.callLocIdx = 1457; s.pc = 15; return s.tmp_0;
  case 15:
    r0 = s.retval;
    s.removedSource___8772 = (r0);
    s.lastBrkId = 3307;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3307]) return breakpoint(s, 16, 3307, r0);
  case 16:
    s.tmp_0 = particles_ParticleSource_clear__P2771_mk(s);
    s.tmp_0.arg0 = s.removedSource___8772;
    s.callLocIdx = 1458; s.pc = 17; return s.tmp_0;
  case 17:
    r0 = s.retval;
    s.lastBrkId = 3308;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3308]) return breakpoint(s, 18, 3308, r0);
  case 18:
    s.tmp_0 = particles_ParticleSource_destroy__P2770_mk(s);
    s.tmp_0.arg0 = s.removedSource___8772;
    s.callLocIdx = 1459; s.pc = 19; return s.tmp_0;
  case 19:
    r0 = s.retval;
  case 1:
  case 2:
    s.lastBrkId = 3309;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3309]) return breakpoint(s, 20, 3309, r0);
  case 20:
    r0 = (s.arg0).fields["pFlags"] = (0);
    s.lastBrkId = 3310;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3310]) return breakpoint(s, 21, 3310, r0);
  case 21:
    s.tmp_0 = particles_ParticleSource_setRate__P2773_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg2;
    s.callLocIdx = 1460; s.pc = 22; return s.tmp_0;
  case 22:
    r0 = s.retval;
    s.lastBrkId = 3311;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3311]) return breakpoint(s, 23, 3311, r0);
  case 23:
    s.tmp_0 = particles_ParticleSource_setAcceleration__P2765_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 0;
    s.tmp_0.arg2 = 0;
    s.callLocIdx = 1461; s.pc = 24; return s.tmp_0;
  case 24:
    r0 = s.retval;
    s.lastBrkId = 3312;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3312]) return breakpoint(s, 25, 3312, r0);
  case 25:
    s.tmp_0 = particles_ParticleSource_setAnchor__P2772_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.callLocIdx = 1462; s.pc = 26; return s.tmp_0;
  case 26:
    r0 = s.retval;
    s.lastBrkId = 3313;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3313]) return breakpoint(s, 27, 3313, r0);
  case 27:
    r0 = (s.arg0).fields["lifespan"] = (undefined);
    s.lastBrkId = 3314;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3314]) return breakpoint(s, 28, 3314, r0);
  case 28:
    r0 = (s.arg0).fields["_dt"] = (0);
    s.lastBrkId = 3315;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3315]) return breakpoint(s, 29, 3315, r0);
  case 29:
    r0 = (s.arg0).fields["priority"] = (0);
    s.lastBrkId = 3316;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3316]) return breakpoint(s, 30, 3316, r0);
  case 30:
    s.tmp_0 = r0 = s.arg3;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 3; continue; }
    r0 = s.tmp_0;
    { step = 4; continue; }
  case 3:
    r0 = globals.defaultFactory___2776;
  case 4:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    s.tmp_2 = particles_ParticleSource_setFactory__P2775_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.tmp_2.arg1 = s.tmp_1;
    s.callLocIdx = 1463; s.pc = 31; return s.tmp_2;
  case 31:
    r0 = s.retval;
    s.lastBrkId = 3317;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3317]) return breakpoint(s, 32, 3317, r0);
  case 32:
    r0 = pxsim_Array__push(s.sources___8763, s.arg0);
    s.lastBrkId = 3318;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3318]) return breakpoint(s, 33, 3318, r0);
  case 33:
    s.tmp_0 = particles_ParticleSource_enabled__P2769_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = true;
    s.callLocIdx = 1464; s.pc = 34; return s.tmp_0;
  case 34:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_ParticleSource_constructor__P2761.info = {"start":2307,"length":899,"line":87,"column":8,"endLine":110,"endColumn":9,"fileName":"pxt_modules/game/particles.ts","functionName":"inline","argumentNames":["this","anchor","particlesPerSecond","factory"]}

function particles_ParticleSource_constructor__P2761_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_ParticleSource_constructor__P2761, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  sources___8763: undefined,
  removedSource___8772: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function particles_particleSources__P4905(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.sources___9231 = undefined;
    s.lastBrkId = 3436;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3436]) return breakpoint(s, 1, 3436, r0);
  case 1:
    s.tmp_0 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 1515; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = r0.fields["particleSources"];
    s.sources___9231 = (r0);
    s.lastBrkId = 3437;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3437]) return breakpoint(s, 3, 3437, r0);
  case 3:
    r0 = s.sources___9231;
    return leave(s, r0)
  default: oops()
} } }
particles_particleSources__P4905.info = {"start":12848,"length":119,"line":421,"column":4,"endLine":424,"endColumn":5,"fileName":"pxt_modules/game/particles.ts","functionName":"particleSources","argumentNames":[]}

function particles_particleSources__P4905_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_particleSources__P4905, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  sources___9231: undefined,
} }





function particles_sortSources__P4902(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3423;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3423]) return breakpoint(s, 1, 3423, r0);
  case 1:
    s.tmp_0 = helpers_arraySort__P105_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = particles_sortSources_inline__P9076;
    s.callLocIdx = 1502; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_sortSources__P4902.info = {"start":10026,"length":129,"line":332,"column":4,"endLine":334,"endColumn":5,"fileName":"pxt_modules/game/particles.ts","functionName":"sortSources","argumentNames":["sources"]}

function particles_sortSources__P4902_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_sortSources__P4902, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function particles_sortSources_inline__P9076(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0.fields["priority"];
    s.tmp_1 = r0;
    r0 = s.arg1.fields["priority"];
    s.tmp_2 = r0;
    r0 = (s.tmp_1 - s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = s.arg0.fields["id"];
    s.tmp_3 = r0;
    r0 = s.arg1.fields["id"];
    s.tmp_4 = r0;
    r0 = (s.tmp_3 - s.tmp_4);
  case 2:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    r0 = s.tmp_5;
    return leave(s, r0)
  default: oops()
} } }
particles_sortSources_inline__P9076.info = {"start":10097,"length":50,"line":333,"column":21,"endLine":333,"endColumn":71,"fileName":"pxt_modules/game/particles.ts","functionName":"inline","argumentNames":["a","b"]}

function particles_sortSources_inline__P9076_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_sortSources_inline__P9076, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function helpers_arraySort__P105(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 74;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[74]) return breakpoint(s, 5, 74, r0);
  case 5:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = pxsim_Array__length(s.arg0);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 > 1);
  case 2:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 75;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[75]) return breakpoint(s, 6, 75, r0);
  case 6:
    s.arg1 = (helpers_arraySort_inline__P9099);
  case 3:
  case 4:
    s.lastBrkId = 93;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[93]) return breakpoint(s, 7, 93, r0);
  case 7:
    s.tmp_0 = helpers_sortHelper__P4128_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.callLocIdx = 3; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
    return leave(s, r0)
  default: oops()
} } }
helpers_arraySort__P105.info = {"start":5663,"length":859,"line":207,"column":4,"endLine":227,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"arraySort","argumentNames":["arr","callbackfn"]}

function helpers_arraySort__P105_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_arraySort__P105, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function helpers_arraySort_inline__P9099(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.aIsUndef___9102 = undefined;
    s.bIsUndef___9106 = undefined;
    s.aIsNull___9117 = undefined;
    s.bIsNull___9121 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 76;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[76]) return breakpoint(s, 18, 76, r0);
  case 18:
    r0 = (s.arg0 === undefined);
    s.aIsUndef___9102 = (r0);
    s.lastBrkId = 77;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[77]) return breakpoint(s, 19, 77, r0);
  case 19:
    r0 = (s.arg1 === undefined);
    s.bIsUndef___9106 = (r0);
    s.lastBrkId = 78;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[78]) return breakpoint(s, 20, 78, r0);
  case 20:
    s.tmp_0 = r0 = s.aIsUndef___9102;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = s.bIsUndef___9106;
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 79;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[79]) return breakpoint(s, 21, 79, r0);
  case 21:
    r0 = 0;
    { step = 17; continue; }
    { step = 8; continue; }
  case 3:
    s.lastBrkId = 80;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[80]) return breakpoint(s, 22, 80, r0);
  case 22:
    r0 = pxsim_numops_toBoolDecr(s.aIsUndef___9102);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 81;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[81]) return breakpoint(s, 23, 81, r0);
  case 23:
    r0 = 1;
    { step = 17; continue; }
    { step = 7; continue; }
  case 4:
    s.lastBrkId = 82;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[82]) return breakpoint(s, 24, 82, r0);
  case 24:
    r0 = pxsim_numops_toBoolDecr(s.bIsUndef___9106);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 83;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[83]) return breakpoint(s, 25, 83, r0);
  case 25:
    r0 = -1;
    { step = 17; continue; }
  case 5:
  case 6:
  case 7:
  case 8:
    s.lastBrkId = 84;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[84]) return breakpoint(s, 26, 84, r0);
  case 26:
    r0 = (s.arg0 === null);
    s.aIsNull___9117 = (r0);
    s.lastBrkId = 85;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[85]) return breakpoint(s, 27, 85, r0);
  case 27:
    r0 = (s.arg1 === null);
    s.bIsNull___9121 = (r0);
    s.lastBrkId = 86;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[86]) return breakpoint(s, 28, 86, r0);
  case 28:
    s.tmp_0 = r0 = s.aIsNull___9117;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 9; continue; }
    r0 = s.tmp_0;
    { step = 10; continue; }
  case 9:
    r0 = s.bIsNull___9121;
  case 10:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 11; continue; }
    s.lastBrkId = 87;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[87]) return breakpoint(s, 29, 87, r0);
  case 29:
    r0 = 0;
    { step = 17; continue; }
    { step = 16; continue; }
  case 11:
    s.lastBrkId = 88;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[88]) return breakpoint(s, 30, 88, r0);
  case 30:
    r0 = pxsim_numops_toBoolDecr(s.aIsNull___9117);
    if (!r0) { step = 12; continue; }
    s.lastBrkId = 89;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[89]) return breakpoint(s, 31, 89, r0);
  case 31:
    r0 = 1;
    { step = 17; continue; }
    { step = 15; continue; }
  case 12:
    s.lastBrkId = 90;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[90]) return breakpoint(s, 32, 90, r0);
  case 32:
    r0 = pxsim_numops_toBoolDecr(s.bIsNull___9121);
    if (!r0) { step = 13; continue; }
    s.lastBrkId = 91;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[91]) return breakpoint(s, 33, 91, r0);
  case 33:
    r0 = -1;
    { step = 17; continue; }
  case 13:
  case 14:
  case 15:
  case 16:
    s.lastBrkId = 92;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[92]) return breakpoint(s, 34, 92, r0);
  case 34:
    if ((s.arg0) && (s.arg0).vtable) {
    setupResume(s, 35);
    pxsim_String__stringConv(s.arg0);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.arg0) + ""; }
  case 35:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = pxsim_String_.mkEmpty();
    s.tmp_4 = r0;
    r0 = pxsim_String__concat(s.tmp_3, s.tmp_4);
    s.tmp_2 = r0;
    if ((s.arg1) && (s.arg1).vtable) {
    setupResume(s, 36);
    pxsim_String__stringConv(s.arg1);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.arg1) + ""; }
  case 36:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = pxsim_String_.mkEmpty();
    s.tmp_7 = r0;
    r0 = pxsim_String__concat(s.tmp_6, s.tmp_7);
    s.tmp_5 = r0;
    r0 = pxsim_String_.compare(s.tmp_2, s.tmp_5);
  case 17:
    return leave(s, r0)
  default: oops()
} } }
helpers_arraySort_inline__P9099.info = {"start":5826,"length":636,"line":209,"column":25,"endLine":224,"endColumn":13,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"inline","argumentNames":["a","b"]}

function helpers_arraySort_inline__P9099_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_arraySort_inline__P9099, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  aIsUndef___9102: undefined,
  bIsUndef___9106: undefined,
  aIsNull___9117: undefined,
  bIsNull___9121: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function helpers_sortHelper__P4128(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.len___9156 = undefined;
    s.i___9159 = undefined;
    s.j___9165 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 60;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[60]) return breakpoint(s, 12, 60, r0);
  case 12:
    r0 = pxsim_Array__length(s.arg0);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 <= 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
  case 2:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 61;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[61]) return breakpoint(s, 13, 61, r0);
  case 13:
    r0 = s.arg0;
    { step = 11; continue; }
  case 3:
  case 4:
    s.lastBrkId = 62;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[62]) return breakpoint(s, 14, 62, r0);
  case 14:
    r0 = pxsim_Array__length(s.arg0);
    s.len___9156 = (r0);
    s.lastBrkId = 63;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[63]) return breakpoint(s, 15, 63, r0);
  case 15:
    s.i___9159 = (0);
    s.lastBrkId = 64;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[64]) return breakpoint(s, 16, 64, r0);
  case 16:
  case 5:
    s.lastBrkId = 65;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[65]) return breakpoint(s, 17, 65, r0);
  case 17:
    s.tmp_1 = r0 = s.i___9159;
    r0 = (s.len___9156 - 1);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 10; continue; }
    s.lastBrkId = 66;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[66]) return breakpoint(s, 18, 66, r0);
  case 18:
    r0 = (s.i___9159 + 1);
    s.j___9165 = (r0);
    s.lastBrkId = 67;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[67]) return breakpoint(s, 19, 67, r0);
  case 19:
  case 6:
    s.lastBrkId = 68;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[68]) return breakpoint(s, 20, 68, r0);
  case 20:
    r0 = (s.j___9165 < s.len___9156);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 69;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[69]) return breakpoint(s, 21, 69, r0);
  case 21:
    s.tmp_3 = lambda_3_mk(s);
    s.tmp_3.argL = s.arg1;
    r0 = pxsim_Array__getAt(s.arg0, s.i___9159);
    s.tmp_3.arg0 = r0;
    r0 = pxsim_Array__getAt(s.arg0, s.j___9165);
    s.tmp_3.arg1 = r0;
    setupLambda(s.tmp_3, s.tmp_3.argL);
    s.callLocIdx = 1; s.pc = 22; return s.tmp_3;
  case 22:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_2 > 0);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 70;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[70]) return breakpoint(s, 23, 70, r0);
  case 23:
    s.tmp_4 = helpers_swap__P4127_mk(s);
    s.tmp_4.arg0 = s.arg0;
    s.tmp_4.arg1 = s.i___9159;
    s.tmp_4.arg2 = s.j___9165;
    s.callLocIdx = 2; s.pc = 24; return s.tmp_4;
  case 24:
    r0 = s.retval;
  case 7:
  case 8:
    s.lastBrkId = 71;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[71]) return breakpoint(s, 25, 71, r0);
  case 25:
    r0 = (s.j___9165 + 1);
    s.j___9165 = (r0);
    { step = 6; continue; }
  case 9:
    s.lastBrkId = 72;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[72]) return breakpoint(s, 26, 72, r0);
  case 26:
    r0 = (s.i___9159 + 1);
    s.i___9159 = (r0);
    { step = 5; continue; }
  case 10:
    s.lastBrkId = 73;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[73]) return breakpoint(s, 27, 73, r0);
  case 27:
    r0 = s.arg0;
  case 11:
    return leave(s, r0)
  default: oops()
} } }
helpers_sortHelper__P4128.info = {"start":5176,"length":481,"line":191,"column":4,"endLine":205,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"sortHelper","argumentNames":["arr","callbackfn"]}

function helpers_sortHelper__P4128_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_sortHelper__P4128, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  len___9156: undefined,
  i___9159: undefined,
  j___9165: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function helpers_swap__P4127(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.temp___9194 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 57;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[57]) return breakpoint(s, 1, 57, r0);
  case 1:
    r0 = pxsim_Array__getAt(s.arg0, s.arg1);
    s.temp___9194 = (r0);
    s.lastBrkId = 58;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[58]) return breakpoint(s, 2, 58, r0);
  case 2:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_1 = r0 = s.arg1;
    r0 = pxsim_Array__getAt(s.arg0, s.arg2);
    s.tmp_2 = r0;
    r0 = pxsim_Array_.setAt(s.tmp_0, s.tmp_1, s.tmp_2);
    s.lastBrkId = 59;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[59]) return breakpoint(s, 3, 59, r0);
  case 3:
    r0 = pxsim_Array_.setAt(s.arg0, s.arg2, s.temp___9194);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
helpers_swap__P4127.info = {"start":5030,"length":140,"line":185,"column":4,"endLine":189,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"swap","argumentNames":["arr","i","j"]}

function helpers_swap__P4127_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_swap__P4127, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  temp___9194: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function particles_init__P4899(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.scene___9236 = undefined;
    s.lastBrkId = 3401;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3401]) return breakpoint(s, 4, 3401, r0);
  case 4:
    s.tmp_0 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 1492; s.pc = 5; return s.tmp_0;
  case 5:
    r0 = s.retval;
    s.scene___9236 = (r0);
    s.lastBrkId = 3402;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3402]) return breakpoint(s, 6, 3402, r0);
  case 6:
    r0 = s.scene___9236.fields["particleSources"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3403;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3403]) return breakpoint(s, 7, 3403, r0);
  case 7:
    { step = 3; continue; }
  case 1:
  case 2:
    s.lastBrkId = 3404;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3404]) return breakpoint(s, 8, 3404, r0);
  case 8:
    s.tmp_1 = r0 = s.scene___9236;
    r0 = pxsim_Array__mk();
    s.tmp_2 = r0;
    r0 = (s.tmp_1).fields["particleSources"] = (s.tmp_2);
    s.lastBrkId = 3405;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3405]) return breakpoint(s, 9, 3405, r0);
  case 9:
    r0 = pxsim.control.millis();
    globals.lastUpdate___4894 = (r0);
    s.lastBrkId = 3406;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3406]) return breakpoint(s, 10, 3406, r0);
  case 10:
    s.tmp_0 = game_onUpdate__P2628_mk(s);
    s.tmp_0.arg0 = particles_updateParticles__P4900;
    s.callLocIdx = 1493; s.pc = 11; return s.tmp_0;
  case 11:
    r0 = s.retval;
    s.lastBrkId = 3407;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3407]) return breakpoint(s, 12, 3407, r0);
  case 12:
    s.tmp_0 = game_onUpdateInterval__P2629_mk(s);
    s.tmp_0.arg0 = 250;
    s.tmp_0.arg1 = particles_pruneParticles__P4901;
    s.callLocIdx = 1494; s.pc = 13; return s.tmp_0;
  case 13:
    r0 = s.retval;
  case 3:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_init__P4899.info = {"start":9236,"length":276,"line":304,"column":4,"endLine":311,"endColumn":5,"fileName":"pxt_modules/game/particles.ts","functionName":"init","argumentNames":[]}

function particles_init__P4899_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_init__P4899, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  scene___9236: undefined,
} }





function particles_pruneParticles__P4901(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.sources___9251 = undefined;
    s.lastBrkId = 3420;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3420]) return breakpoint(s, 3, 3420, r0);
  case 3:
    s.tmp_0 = particles_particleSources__P4905_mk(s);
    s.callLocIdx = 1498; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.sources___9251 = (r0);
    s.lastBrkId = 3421;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3421]) return breakpoint(s, 5, 3421, r0);
  case 5:
    r0 = pxsim_numops_toBoolDecr(s.sources___9251);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3422;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3422]) return breakpoint(s, 6, 3422, r0);
  case 6:
    s.tmp_0 = helpers_arrayForEach__P109_mk(s);
    s.tmp_1 = helpers_arraySlice__P115_mk(s);
    s.tmp_1.arg0 = s.sources___9251;
    s.tmp_1.arg1 = 0;
    r0 = pxsim_Array__length(s.sources___9251);
    s.tmp_1.arg2 = r0;
    s.callLocIdx = 1499; s.pc = 8; return s.tmp_1;
  case 8:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = particles_pruneParticles_inline__P9260;
    s.callLocIdx = 1501; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_pruneParticles__P4901.info = {"start":9864,"length":156,"line":327,"column":4,"endLine":330,"endColumn":5,"fileName":"pxt_modules/game/particles.ts","functionName":"pruneParticles","argumentNames":[]}

function particles_pruneParticles__P4901_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_pruneParticles__P4901, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  sources___9251: undefined,
} }





function particles_pruneParticles_inline__P9260(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = particles_ParticleSource__prune__P2764_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1500; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_pruneParticles_inline__P9260.info = {"start":9997,"length":15,"line":329,"column":62,"endLine":329,"endColumn":77,"fileName":"pxt_modules/game/particles.ts","functionName":"inline","argumentNames":["s"]}

function particles_pruneParticles_inline__P9260_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_pruneParticles_inline__P9260, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function particles_ParticleSource__prune__P2764(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.scene___9023 = undefined;
    s.sources___9031 = undefined;
    s.current___9045 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_ParticleSource__C2756_VT)) failedCast(r0);
    s.lastBrkId = 3358;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3358]) return breakpoint(s, 21, 3358, r0);
  case 21:
  case 1:
    s.lastBrkId = 3359;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3359]) return breakpoint(s, 22, 3359, r0);
  case 22:
    r0 = s.arg0.fields["head"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 2; continue; }
    r0 = s.tmp_0;
    { step = 3; continue; }
  case 2:
    r0 = s.arg0.fields["head"];
    r0 = r0.fields["lifespan"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 <= 0);
  case 3:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 3360;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3360]) return breakpoint(s, 23, 3360, r0);
  case 23:
    r0 = s.arg0.fields["head"];
    r0 = r0.fields["next"];
    s.tmp_3 = r0;
    r0 = (s.arg0).fields["head"] = (s.tmp_3);
    { step = 1; continue; }
  case 4:
    s.lastBrkId = 3361;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3361]) return breakpoint(s, 24, 3361, r0);
  case 24:
    r0 = s.arg0.fields["pFlags"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 & 2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 5; continue; }
    r0 = s.tmp_0;
    { step = 6; continue; }
  case 5:
    r0 = s.arg0.fields["head"];
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
  case 6:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    if (!r0) { step = 13; continue; }
    s.lastBrkId = 3362;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3362]) return breakpoint(s, 25, 3362, r0);
  case 25:
    s.tmp_5 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 1473; s.pc = 26; return s.tmp_5;
  case 26:
    r0 = s.retval;
    s.scene___9023 = (r0);
    s.lastBrkId = 3363;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3363]) return breakpoint(s, 27, 3363, r0);
  case 27:
    r0 = pxsim_numops_toBoolDecr(s.scene___9023);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 3364;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3364]) return breakpoint(s, 28, 3364, r0);
  case 28:
    r0 = s.scene___9023.fields["allSprites"];
    s.tmp_0 = r0;
    r0 = pxsim_Array_.removeElement(s.tmp_0, s.arg0);
  case 7:
  case 8:
    s.lastBrkId = 3365;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3365]) return breakpoint(s, 29, 3365, r0);
  case 29:
    s.tmp_0 = particles_particleSources__P4905_mk(s);
    s.callLocIdx = 1474; s.pc = 30; return s.tmp_0;
  case 30:
    r0 = s.retval;
    s.sources___9031 = (r0);
    s.lastBrkId = 3366;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3366]) return breakpoint(s, 31, 3366, r0);
  case 31:
    s.tmp_0 = r0 = s.sources___9031;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 9; continue; }
    r0 = s.tmp_0;
    { step = 10; continue; }
  case 9:
    r0 = pxsim_Array__length(s.sources___9031);
  case 10:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 11; continue; }
    s.lastBrkId = 3367;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3367]) return breakpoint(s, 32, 3367, r0);
  case 32:
    r0 = pxsim_Array_.removeElement(s.sources___9031, s.arg0);
  case 11:
  case 12:
    s.lastBrkId = 3368;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3368]) return breakpoint(s, 33, 3368, r0);
  case 33:
    r0 = s.arg0.fields["anchor"];
    s.tmp_0 = r0;
    r0 = (s.tmp_0 == undefined);
  case 13:
  case 14:
    s.lastBrkId = 3369;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3369]) return breakpoint(s, 34, 3369, r0);
  case 34:
    r0 = s.arg0.fields["head"];
    s.current___9045 = (r0);
    s.lastBrkId = 3370;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3370]) return breakpoint(s, 35, 3370, r0);
  case 35:
  case 15:
    s.lastBrkId = 3371;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3371]) return breakpoint(s, 36, 3371, r0);
  case 36:
    s.tmp_0 = r0 = s.current___9045;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 16; continue; }
    r0 = s.tmp_0;
    { step = 17; continue; }
  case 16:
    r0 = s.current___9045.fields["next"];
  case 17:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 20; continue; }
    s.lastBrkId = 3372;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3372]) return breakpoint(s, 37, 3372, r0);
  case 37:
    r0 = s.current___9045.fields["next"];
    r0 = r0.fields["lifespan"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 <= 0);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 18; continue; }
    s.lastBrkId = 3373;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3373]) return breakpoint(s, 38, 3373, r0);
  case 38:
    r0 = s.current___9045.fields["next"];
    r0 = r0.fields["next"];
    s.tmp_4 = r0;
    r0 = (s.current___9045).fields["next"] = (s.tmp_4);
    { step = 19; continue; }
  case 18:
    s.lastBrkId = 3374;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3374]) return breakpoint(s, 39, 3374, r0);
  case 39:
    r0 = s.current___9045.fields["next"];
    s.current___9045 = (r0);
  case 19:
    { step = 15; continue; }
  case 20:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_ParticleSource__prune__P2764.info = {"start":5104,"length":830,"line":166,"column":8,"endLine":189,"endColumn":9,"fileName":"pxt_modules/game/particles.ts","functionName":"_prune","argumentNames":["this"]}

function particles_ParticleSource__prune__P2764_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_ParticleSource__prune__P2764, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  scene___9023: undefined,
  sources___9031: undefined,
  current___9045: undefined,
  arg0: undefined,
} }





function helpers_arraySlice__P115(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.res___9267 = undefined;
    s.len___9269 = undefined;
    s.i___9303 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 142;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[142]) return breakpoint(s, 16, 142, r0);
  case 16:
    r0 = pxsim_Array__mk();
    s.res___9267 = (r0);
    s.lastBrkId = 143;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[143]) return breakpoint(s, 17, 143, r0);
  case 17:
    r0 = pxsim_Array__length(s.arg0);
    s.len___9269 = (r0);
    s.lastBrkId = 144;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[144]) return breakpoint(s, 18, 144, r0);
  case 18:
    r0 = (s.arg1 === undefined);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 145;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[145]) return breakpoint(s, 19, 145, r0);
  case 19:
    s.arg1 = (0);
    { step = 4; continue; }
  case 1:
    s.lastBrkId = 146;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[146]) return breakpoint(s, 20, 146, r0);
  case 20:
    r0 = (s.arg1 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 147;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[147]) return breakpoint(s, 21, 147, r0);
  case 21:
    s.tmp_1 = Math_max__P130_mk(s);
    r0 = (s.len___9269 + s.arg1);
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = 0;
    s.callLocIdx = 9; s.pc = 22; return s.tmp_1;
  case 22:
    r0 = s.retval;
    s.arg1 = (r0);
  case 2:
  case 3:
  case 4:
    s.lastBrkId = 148;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[148]) return breakpoint(s, 23, 148, r0);
  case 23:
    r0 = (s.arg1 > s.len___9269);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 149;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[149]) return breakpoint(s, 24, 149, r0);
  case 24:
    r0 = s.res___9267;
    { step = 15; continue; }
  case 5:
  case 6:
    s.lastBrkId = 150;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[150]) return breakpoint(s, 25, 150, r0);
  case 25:
    r0 = (s.arg2 === undefined);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 151;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[151]) return breakpoint(s, 26, 151, r0);
  case 26:
    s.arg2 = (s.len___9269);
    { step = 10; continue; }
  case 7:
    s.lastBrkId = 152;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[152]) return breakpoint(s, 27, 152, r0);
  case 27:
    r0 = (s.arg2 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 8; continue; }
    s.lastBrkId = 153;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[153]) return breakpoint(s, 28, 153, r0);
  case 28:
    r0 = (s.len___9269 + s.arg2);
    s.arg2 = (r0);
  case 8:
  case 9:
  case 10:
    s.lastBrkId = 154;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[154]) return breakpoint(s, 29, 154, r0);
  case 29:
    r0 = (s.arg2 > s.len___9269);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 11; continue; }
    s.lastBrkId = 155;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[155]) return breakpoint(s, 30, 155, r0);
  case 30:
    s.arg2 = (s.len___9269);
  case 11:
  case 12:
    s.lastBrkId = 156;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[156]) return breakpoint(s, 31, 156, r0);
  case 31:
    s.i___9303 = (s.arg1);
    s.lastBrkId = 157;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[157]) return breakpoint(s, 32, 157, r0);
  case 32:
  case 13:
    s.lastBrkId = 158;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[158]) return breakpoint(s, 33, 158, r0);
  case 33:
    r0 = (s.i___9303 < s.arg2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 14; continue; }
    s.lastBrkId = 159;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[159]) return breakpoint(s, 34, 159, r0);
  case 34:
    s.tmp_1 = r0 = s.res___9267;
    r0 = pxsim_Array__getAt(s.arg0, s.i___9303);
    s.tmp_2 = r0;
    r0 = pxsim_Array__push(s.tmp_1, s.tmp_2);
    s.lastBrkId = 160;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[160]) return breakpoint(s, 35, 160, r0);
  case 35:
    r0 = (s.i___9303 + 1);
    s.i___9303 = (r0);
    { step = 13; continue; }
  case 14:
    s.lastBrkId = 161;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[161]) return breakpoint(s, 36, 161, r0);
  case 36:
    r0 = s.res___9267;
  case 15:
    return leave(s, r0)
  default: oops()
} } }
helpers_arraySlice__P115.info = {"start":9027,"length":690,"line":303,"column":4,"endLine":328,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"arraySlice","argumentNames":["arr","start","end"]}

function helpers_arraySlice__P115_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_arraySlice__P115, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  res___9267: undefined,
  len___9269: undefined,
  i___9303: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function helpers_arrayForEach__P109(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.len___9320 = undefined;
    s.i___9323 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 110;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[110]) return breakpoint(s, 3, 110, r0);
  case 3:
    r0 = pxsim_Array__length(s.arg0);
    s.len___9320 = (r0);
    s.lastBrkId = 111;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[111]) return breakpoint(s, 4, 111, r0);
  case 4:
    s.i___9323 = (0);
    s.lastBrkId = 112;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[112]) return breakpoint(s, 5, 112, r0);
  case 5:
  case 1:
    s.lastBrkId = 113;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[113]) return breakpoint(s, 6, 113, r0);
  case 6:
    r0 = (s.i___9323 < s.len___9320);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 114;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[114]) return breakpoint(s, 7, 114, r0);
  case 7:
    s.tmp_1 = lambda_3_mk(s);
    s.tmp_1.argL = s.arg1;
    r0 = pxsim_Array__getAt(s.arg0, s.i___9323);
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = s.i___9323;
    setupLambda(s.tmp_1, s.tmp_1.argL);
    s.callLocIdx = 6; s.pc = 8; return s.tmp_1;
  case 8:
    r0 = s.retval;
    s.lastBrkId = 115;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[115]) return breakpoint(s, 9, 115, r0);
  case 9:
    r0 = (s.i___9323 + 1);
    s.i___9323 = (r0);
    { step = 1; continue; }
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
helpers_arrayForEach__P109.info = {"start":7439,"length":250,"line":254,"column":4,"endLine":259,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"arrayForEach","argumentNames":["arr","callbackfn"]}

function helpers_arrayForEach__P109_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_arrayForEach__P109, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  len___9320: undefined,
  i___9323: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function particles_updateParticles__P4900(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.sources___9805 = undefined;
    s.time___9812 = undefined;
    s.dt___9815 = undefined;
    s.i___9821 = undefined;
    s.lastBrkId = 3408;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3408]) return breakpoint(s, 6, 3408, r0);
  case 6:
    s.tmp_0 = particles_particleSources__P4905_mk(s);
    s.callLocIdx = 1495; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    s.sources___9805 = (r0);
    s.lastBrkId = 3409;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3409]) return breakpoint(s, 8, 3409, r0);
  case 8:
    r0 = pxsim_numops_toBoolDecr(s.sources___9805);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3410;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3410]) return breakpoint(s, 9, 3410, r0);
  case 9:
    { step = 5; continue; }
  case 1:
  case 2:
    s.lastBrkId = 3411;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3411]) return breakpoint(s, 10, 3411, r0);
  case 10:
    s.tmp_2 = particles_sortSources__P4902_mk(s);
    s.tmp_2.arg0 = s.sources___9805;
    s.callLocIdx = 1496; s.pc = 11; return s.tmp_2;
  case 11:
    r0 = s.retval;
    s.lastBrkId = 3412;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3412]) return breakpoint(s, 12, 3412, r0);
  case 12:
    r0 = pxsim.control.millis();
    s.time___9812 = (r0);
    s.lastBrkId = 3413;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3413]) return breakpoint(s, 13, 3413, r0);
  case 13:
    r0 = (s.time___9812 - globals.lastUpdate___4894);
    s.dt___9815 = (r0);
    s.lastBrkId = 3414;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3414]) return breakpoint(s, 14, 3414, r0);
  case 14:
    globals.lastUpdate___4894 = (s.time___9812);
    s.lastBrkId = 3415;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3415]) return breakpoint(s, 15, 3415, r0);
  case 15:
    s.i___9821 = (0);
    s.lastBrkId = 3416;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3416]) return breakpoint(s, 16, 3416, r0);
  case 16:
  case 3:
    s.lastBrkId = 3417;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3417]) return breakpoint(s, 17, 3417, r0);
  case 17:
    s.tmp_1 = r0 = s.i___9821;
    r0 = pxsim_Array__length(s.sources___9805);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 3418;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3418]) return breakpoint(s, 18, 3418, r0);
  case 18:
    s.tmp_3 = particles_ParticleSource__update__P2763_mk(s);
    r0 = pxsim_Array__getAt(s.sources___9805, s.i___9821);
    s.tmp_3.arg0 = r0;
    s.tmp_3.arg1 = s.dt___9815;
    s.callLocIdx = 1497; s.pc = 19; return s.tmp_3;
  case 19:
    r0 = s.retval;
    s.lastBrkId = 3419;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3419]) return breakpoint(s, 20, 3419, r0);
  case 20:
    r0 = (s.i___9821 + 1);
    s.i___9821 = (r0);
    { step = 3; continue; }
  case 4:
  case 5:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_updateParticles__P4900.info = {"start":9518,"length":340,"line":313,"column":4,"endLine":325,"endColumn":5,"fileName":"pxt_modules/game/particles.ts","functionName":"updateParticles","argumentNames":[]}

function particles_updateParticles__P4900_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_updateParticles__P4900, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  sources___9805: undefined,
  time___9812: undefined,
  dt___9815: undefined,
  i___9821: undefined,
} }





function particles_ParticleSource__update__P2763(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.p___9884 = undefined;
    s.current___9903 = undefined;
    s.fixedDt___9911 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_ParticleSource__C2756_VT)) failedCast(r0);
    s.lastBrkId = 3327;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3327]) return breakpoint(s, 28, 3327, r0);
  case 28:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["timer"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - s.arg1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["timer"] = (s.tmp_1);
    s.lastBrkId = 3328;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3328]) return breakpoint(s, 29, 3328, r0);
  case 29:
    r0 = s.arg0.fields["lifespan"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 !== undefined);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 3329;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3329]) return breakpoint(s, 30, 3329, r0);
  case 30:
    s.tmp_2 = r0 = s.arg0;
    r0 = s.tmp_2.fields["lifespan"];
    s.tmp_4 = r0;
    r0 = (s.tmp_4 - s.arg1);
    s.tmp_3 = r0;
    r0 = (s.tmp_2).fields["lifespan"] = (s.tmp_3);
    s.lastBrkId = 3330;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3330]) return breakpoint(s, 31, 3330, r0);
  case 31:
    r0 = s.arg0.fields["lifespan"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 <= 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3331;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3331]) return breakpoint(s, 32, 3331, r0);
  case 32:
    r0 = (s.arg0).fields["lifespan"] = (undefined);
    s.lastBrkId = 3332;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3332]) return breakpoint(s, 33, 3332, r0);
  case 33:
    s.tmp_0 = particles_ParticleSource_destroy__P2770_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1468; s.pc = 34; return s.tmp_0;
  case 34:
    r0 = s.retval;
  case 1:
  case 2:
    { step = 10; continue; }
  case 3:
    s.lastBrkId = 3333;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3333]) return breakpoint(s, 35, 3333, r0);
  case 35:
    r0 = s.arg0.fields["anchor"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 4; continue; }
    r0 = s.tmp_0;
    { step = 5; continue; }
  case 4:
    s.tmp_2 = if_flags_1_mk(s);
    r0 = s.arg0.fields["anchor"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "flags");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["flags"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["flags"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1469; s.pc = 36; return s.tmp_2; }
    }
  case 36:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 !== undefined);
  case 5:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBool(s.tmp_3);
    if (r0) { step = 6; continue; }
    r0 = s.tmp_3;
    { step = 7; continue; }
  case 6:
    s.tmp_5 = if_flags_1_mk(s);
    r0 = s.arg0.fields["anchor"];
    s.tmp_5.arg0 = r0;
    if (!s.tmp_5.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_5.arg0, "flags");
    } else {
      s.tmp_5.fn = s.tmp_5.arg0.vtable.iface["flags"];
      if (s.tmp_5.fn == null) { s.retval = s.tmp_5.arg0.fields["flags"]; }
      else if (!s.tmp_5.fn.isGetter) { s.retval = bind(s.tmp_5); }
     else { s.callLocIdx = 1470; s.pc = 37; return s.tmp_5; }
    }
  case 37:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = (s.tmp_4 & 2);
  case 7:
    // jmp value (already in r0)
    s.tmp_6 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_6);
    if (!r0) { step = 8; continue; }
    s.lastBrkId = 3334;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3334]) return breakpoint(s, 38, 3334, r0);
  case 38:
    r0 = (s.arg0).fields["lifespan"] = (750);
  case 8:
  case 9:
  case 10:
    s.lastBrkId = 3335;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3335]) return breakpoint(s, 39, 3335, r0);
  case 39:
  case 11:
    s.lastBrkId = 3336;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3336]) return breakpoint(s, 40, 3336, r0);
  case 40:
    r0 = s.arg0.fields["timer"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 12; continue; }
    r0 = s.tmp_0;
    { step = 13; continue; }
  case 12:
    s.tmp_2 = particles_ParticleSource_enabled__P2768_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 1471; s.pc = 41; return s.tmp_2;
  case 41:
    r0 = s.retval;
  case 13:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 16; continue; }
    s.lastBrkId = 3337;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3337]) return breakpoint(s, 42, 3337, r0);
  case 42:
    s.tmp_4 = r0 = s.arg0;
    r0 = s.tmp_4.fields["timer"];
    s.tmp_6 = r0;
    r0 = s.arg0.fields["period"];
    s.tmp_7 = r0;
    r0 = (s.tmp_6 + s.tmp_7);
    s.tmp_5 = r0;
    r0 = (s.tmp_4).fields["timer"] = (s.tmp_5);
    s.lastBrkId = 3338;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3338]) return breakpoint(s, 43, 3338, r0);
  case 43:
    s.tmp_0 = particles_ParticleFactory__C2792_v0_2_mk(s);
    r0 = s.arg0.fields["_factory"];
    s.tmp_0.arg0 = r0;
    r0 = s.arg0.fields["anchor"];
    s.tmp_0.arg1 = r0;
    if (!checkSubtype(s.tmp_0.arg0, particles_ParticleFactory__C2792_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.createParticle;
    s.pc = 44; return s.tmp_0;
  case 44:
    r0 = s.retval;
    s.p___9884 = (r0);
    s.lastBrkId = 3339;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3339]) return breakpoint(s, 45, 3339, r0);
  case 45:
    r0 = pxsim_numops_toBoolDecr(s.p___9884);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 14; continue; }
    s.lastBrkId = 3340;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3340]) return breakpoint(s, 46, 3340, r0);
  case 46:
    { step = 11; continue; }
  case 14:
  case 15:
    s.lastBrkId = 3341;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3341]) return breakpoint(s, 47, 3341, r0);
  case 47:
    r0 = s.arg0.fields["head"];
    s.tmp_2 = r0;
    r0 = (s.p___9884).fields["next"] = (s.tmp_2);
    s.lastBrkId = 3342;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3342]) return breakpoint(s, 48, 3342, r0);
  case 48:
    r0 = (s.arg0).fields["head"] = (s.p___9884);
    { step = 11; continue; }
  case 16:
    s.lastBrkId = 3343;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3343]) return breakpoint(s, 49, 3343, r0);
  case 49:
    r0 = s.arg0.fields["head"];
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 17; continue; }
    s.lastBrkId = 3344;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3344]) return breakpoint(s, 50, 3344, r0);
  case 50:
    { step = 27; continue; }
  case 17:
  case 18:
    s.lastBrkId = 3345;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3345]) return breakpoint(s, 51, 3345, r0);
  case 51:
    r0 = s.arg0.fields["head"];
    s.current___9903 = (r0);
    s.lastBrkId = 3346;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3346]) return breakpoint(s, 52, 3346, r0);
  case 52:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["_dt"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + s.arg1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_dt"] = (s.tmp_1);
    s.lastBrkId = 3347;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3347]) return breakpoint(s, 53, 3347, r0);
  case 53:
    s.tmp_0 = Fx8__P149_mk(s);
    r0 = s.arg0.fields["_dt"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 1472; s.pc = 54; return s.tmp_0;
  case 54:
    r0 = s.retval;
    s.fixedDt___9911 = (r0);
    s.lastBrkId = 3348;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3348]) return breakpoint(s, 55, 3348, r0);
  case 55:
    r0 = pxsim_numops_toBoolDecr(s.fixedDt___9911);
    if (!r0) { step = 23; continue; }
    s.lastBrkId = 3349;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3349]) return breakpoint(s, 56, 3349, r0);
  case 56:
  case 19:
    s.lastBrkId = 3350;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3350]) return breakpoint(s, 57, 3350, r0);
  case 57:
    r0 = s.current___9903.fields["lifespan"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 20; continue; }
    s.lastBrkId = 3351;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3351]) return breakpoint(s, 58, 3351, r0);
  case 58:
    s.tmp_2 = r0 = s.current___9903;
    r0 = s.tmp_2.fields["lifespan"];
    s.tmp_4 = r0;
    r0 = (s.tmp_4 - s.arg1);
    s.tmp_3 = r0;
    r0 = (s.tmp_2).fields["lifespan"] = (s.tmp_3);
    s.lastBrkId = 3352;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3352]) return breakpoint(s, 59, 3352, r0);
  case 59:
    s.tmp_0 = particles_ParticleSource__C2756_v4_3_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.current___9903;
    s.tmp_0.arg2 = s.fixedDt___9911;
    if (!checkSubtype(s.tmp_0.arg0, particles_ParticleSource__C2756_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.updateParticle;
    s.pc = 60; return s.tmp_0;
  case 60:
    r0 = s.retval;
  case 20:
  case 21:
    s.lastBrkId = 3353;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3353]) return breakpoint(s, 61, 3353, r0);
  case 61:
    r0 = s.current___9903.fields["next"];
    s.tmp_0 = r0;
    s.current___9903 = (r0);
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 22; continue; }
    { step = 19; continue; }
  case 22:
    s.lastBrkId = 3354;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3354]) return breakpoint(s, 62, 3354, r0);
  case 62:
    r0 = (s.arg0).fields["_dt"] = (0);
    { step = 26; continue; }
  case 23:
    s.lastBrkId = 3355;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3355]) return breakpoint(s, 63, 3355, r0);
  case 63:
  case 24:
    s.lastBrkId = 3356;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3356]) return breakpoint(s, 64, 3356, r0);
  case 64:
    s.tmp_0 = r0 = s.current___9903;
    r0 = s.tmp_0.fields["lifespan"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - s.arg1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["lifespan"] = (s.tmp_1);
    s.lastBrkId = 3357;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3357]) return breakpoint(s, 65, 3357, r0);
  case 65:
    r0 = s.current___9903.fields["next"];
    s.tmp_0 = r0;
    s.current___9903 = (r0);
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 25; continue; }
    { step = 24; continue; }
  case 25:
  case 26:
  case 27:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_ParticleSource__update__P2763.info = {"start":3694,"length":1400,"line":124,"column":8,"endLine":164,"endColumn":9,"fileName":"pxt_modules/game/particles.ts","functionName":"_update","argumentNames":["this","dt"]}

function particles_ParticleSource__update__P2763_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_ParticleSource__update__P2763, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  p___9884: undefined,
  current___9903: undefined,
  fixedDt___9911: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function particles_ParticleSource_updateParticle__P4896(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_ParticleSource__C2756_VT)) failedCast(r0);
    s.lastBrkId = 3394;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3394]) return breakpoint(s, 1, 3394, r0);
  case 1:
    s.tmp_0 = Fx_rightShift__P169_mk(s);
    s.tmp_0.arg0 = s.arg2;
    s.tmp_0.arg1 = 10;
    s.callLocIdx = 1480; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.arg2 = (r0);
    s.lastBrkId = 3395;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3395]) return breakpoint(s, 3, 3395, r0);
  case 3:
    s.tmp_0 = r0 = s.arg1;
    s.tmp_2 = Fx_add__P157_mk(s);
    r0 = s.arg1.fields["vx"];
    s.tmp_2.arg0 = r0;
    s.tmp_3 = Fx_mul__P160_mk(s);
    r0 = s.arg0.fields["ax"];
    s.tmp_3.arg0 = r0;
    s.tmp_3.arg1 = s.arg2;
    s.callLocIdx = 1481; s.pc = 5; return s.tmp_3;
  case 5:
    r0 = s.retval;
    s.tmp_2.arg1 = r0;
    s.callLocIdx = 1482; s.pc = 4; return s.tmp_2;
  case 4:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["vx"] = (s.tmp_1);
    s.lastBrkId = 3396;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3396]) return breakpoint(s, 6, 3396, r0);
  case 6:
    s.tmp_0 = r0 = s.arg1;
    s.tmp_2 = Fx_add__P157_mk(s);
    r0 = s.arg1.fields["vy"];
    s.tmp_2.arg0 = r0;
    s.tmp_3 = Fx_mul__P160_mk(s);
    r0 = s.arg0.fields["ay"];
    s.tmp_3.arg0 = r0;
    s.tmp_3.arg1 = s.arg2;
    s.callLocIdx = 1483; s.pc = 8; return s.tmp_3;
  case 8:
    r0 = s.retval;
    s.tmp_2.arg1 = r0;
    s.callLocIdx = 1484; s.pc = 7; return s.tmp_2;
  case 7:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["vy"] = (s.tmp_1);
    s.lastBrkId = 3397;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3397]) return breakpoint(s, 9, 3397, r0);
  case 9:
    s.tmp_0 = r0 = s.arg1;
    s.tmp_2 = Fx_add__P157_mk(s);
    r0 = s.arg1.fields["_x"];
    s.tmp_2.arg0 = r0;
    s.tmp_3 = Fx_mul__P160_mk(s);
    r0 = s.arg1.fields["vx"];
    s.tmp_3.arg0 = r0;
    s.tmp_3.arg1 = s.arg2;
    s.callLocIdx = 1485; s.pc = 11; return s.tmp_3;
  case 11:
    r0 = s.retval;
    s.tmp_2.arg1 = r0;
    s.callLocIdx = 1486; s.pc = 10; return s.tmp_2;
  case 10:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_x"] = (s.tmp_1);
    s.lastBrkId = 3398;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3398]) return breakpoint(s, 12, 3398, r0);
  case 12:
    s.tmp_0 = r0 = s.arg1;
    s.tmp_2 = Fx_add__P157_mk(s);
    r0 = s.arg1.fields["_y"];
    s.tmp_2.arg0 = r0;
    s.tmp_3 = Fx_mul__P160_mk(s);
    r0 = s.arg1.fields["vy"];
    s.tmp_3.arg0 = r0;
    s.tmp_3.arg1 = s.arg2;
    s.callLocIdx = 1487; s.pc = 14; return s.tmp_3;
  case 14:
    r0 = s.retval;
    s.tmp_2.arg1 = r0;
    s.callLocIdx = 1488; s.pc = 13; return s.tmp_2;
  case 13:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_y"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_ParticleSource_updateParticle__P4896.info = {"start":8248,"length":357,"line":277,"column":8,"endLine":285,"endColumn":9,"fileName":"pxt_modules/game/particles.ts","functionName":"updateParticle","argumentNames":["this","p","fixedDt"]}

function particles_ParticleSource_updateParticle__P4896_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_ParticleSource_updateParticle__P4896, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function Fx_rightShift__P169(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 280;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[280]) return breakpoint(s, 1, 280, r0);
  case 1:
    r0 = (s.arg0 >> s.arg1);
    return leave(s, r0)
  default: oops()
} } }
Fx_rightShift__P169.info = {"start":2031,"length":108,"line":65,"column":4,"endLine":67,"endColumn":5,"fileName":"pxt_modules/base/fixed.ts","functionName":"rightShift","argumentNames":["a","n"]}

function Fx_rightShift__P169_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Fx_rightShift__P169, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
} }





function Fx_mul__P160(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 266;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[266]) return breakpoint(s, 1, 266, r0);
  case 1:
    r0 = pxsim.Math_.imul(s.arg0, s.arg1);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 >> 8);
    return leave(s, r0)
  default: oops()
} } }
Fx_mul__P160.info = {"start":872,"length":133,"line":29,"column":4,"endLine":31,"endColumn":5,"fileName":"pxt_modules/base/fixed.ts","functionName":"mul","argumentNames":["a","b"]}

function Fx_mul__P160_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Fx_mul__P160, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Fx_add__P157(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 263;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[263]) return breakpoint(s, 1, 263, r0);
  case 1:
    r0 = (s.arg0 + s.arg1);
    return leave(s, r0)
  default: oops()
} } }
Fx_add__P157.info = {"start":511,"length":118,"line":20,"column":4,"endLine":22,"endColumn":5,"fileName":"pxt_modules/base/fixed.ts","functionName":"add","argumentNames":["a","b"]}

function Fx_add__P157_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Fx_add__P157, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
} }





function particles_ParticleFactory_createParticle__P2794(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.p___10008 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_ParticleFactory__C2792_VT)) failedCast(r0);
    s.lastBrkId = 3463;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3463]) return breakpoint(s, 1, 3463, r0);
  case 1:
    r0 = pxsim_pxtcore_mkClassInstance(particles_Particle__C2737_VT);
    s.p___10008 = (r0);
    s.lastBrkId = 3464;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3464]) return breakpoint(s, 2, 3464, r0);
  case 2:
    s.tmp_0 = r0 = s.p___10008;
    s.tmp_2 = Fx8__P149_mk(s);
    s.tmp_3 = if_x_1_mk(s);
    s.tmp_3.arg0 = s.arg1;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "x");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["x"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["x"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1522; s.pc = 4; return s.tmp_3; }
    }
  case 4:
    r0 = s.retval;
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 1523; s.pc = 3; return s.tmp_2;
  case 3:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_x"] = (s.tmp_1);
    s.lastBrkId = 3465;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3465]) return breakpoint(s, 5, 3465, r0);
  case 5:
    s.tmp_0 = r0 = s.p___10008;
    s.tmp_2 = Fx8__P149_mk(s);
    s.tmp_3 = if_y_1_mk(s);
    s.tmp_3.arg0 = s.arg1;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "y");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["y"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["y"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1524; s.pc = 7; return s.tmp_3; }
    }
  case 7:
    r0 = s.retval;
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 1525; s.pc = 6; return s.tmp_2;
  case 6:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_y"] = (s.tmp_1);
    s.lastBrkId = 3466;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3466]) return breakpoint(s, 8, 3466, r0);
  case 8:
    r0 = (s.p___10008).fields["vx"] = (0);
    s.lastBrkId = 3467;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3467]) return breakpoint(s, 9, 3467, r0);
  case 9:
    r0 = (s.p___10008).fields["vy"] = (0);
    s.lastBrkId = 3468;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3468]) return breakpoint(s, 10, 3468, r0);
  case 10:
    r0 = (s.p___10008).fields["lifespan"] = (500);
    s.lastBrkId = 3469;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3469]) return breakpoint(s, 11, 3469, r0);
  case 11:
    r0 = s.p___10008;
    return leave(s, r0)
  default: oops()
} } }
particles_ParticleFactory_createParticle__P2794.info = {"start":1822,"length":282,"line":67,"column":8,"endLine":77,"endColumn":9,"fileName":"pxt_modules/game/particlefactories.ts","functionName":"createParticle","argumentNames":["this","anchor"]}

function particles_ParticleFactory_createParticle__P2794_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_ParticleFactory_createParticle__P2794, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  p___10008: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function game_onUpdateInterval__P2629(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.timer___9342 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 2781;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2781]) return breakpoint(s, 6, 2781, r0);
  case 6:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = (s.arg0 < 0);
  case 2:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2782;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2782]) return breakpoint(s, 7, 2782, r0);
  case 7:
    { step = 5; continue; }
  case 3:
  case 4:
    r0 = pxsim_pxtrt.mklocRef();
    s.timer___9342 = (r0);
    s.lastBrkId = 2783;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2783]) return breakpoint(s, 8, 2783, r0);
  case 8:
    r0 = pxsim_pxtrt_stlocRef(s.timer___9342, 0);
    s.lastBrkId = 2784;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2784]) return breakpoint(s, 9, 2784, r0);
  case 9:
    r0 = pxsim_pxtcore_mkAction(3, game_onUpdateInterval_inline__P9346);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.timer___9342);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 1, s.arg0);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 2, s.arg1);
    s.tmp_1 = control_EventContext_registerFrameHandler__P401_mk(s);
    s.tmp_2 = game_eventContext__P2612_mk(s);
    s.callLocIdx = 1143; s.pc = 11; return s.tmp_2;
  case 11:
    r0 = s.retval;
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = 19;
    s.tmp_1.arg2 = s.tmp_0;
    s.callLocIdx = 1147; s.pc = 10; return s.tmp_1;
  case 10:
    r0 = s.retval;
  case 5:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_onUpdateInterval__P2629.info = {"start":891,"length":401,"line":28,"column":4,"endLine":38,"endColumn":5,"fileName":"pxt_modules/game/gameutil.ts","functionName":"onUpdateInterval","argumentNames":["period","a"]}

function game_onUpdateInterval__P2629_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_onUpdateInterval__P2629, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  timer___9342: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function game_onUpdateInterval_inline__P9346(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.time___9347 = undefined;
    s.lastBrkId = 2785;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2785]) return breakpoint(s, 3, 2785, r0);
  case 3:
    s.tmp_0 = scene_Scene_millis__P2520_mk(s);
    s.tmp_1 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 1144; s.pc = 5; return s.tmp_1;
  case 5:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 1145; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.time___9347 = (r0);
    s.lastBrkId = 2786;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2786]) return breakpoint(s, 6, 2786, r0);
  case 6:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[0]);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 <= s.time___9347);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2787;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2787]) return breakpoint(s, 7, 2787, r0);
  case 7:
    s.tmp_2 = r0 = s.caps[0];
    r0 = (s.time___9347 + s.caps[1]);
    s.tmp_3 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_2, s.tmp_3);
    s.lastBrkId = 2788;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2788]) return breakpoint(s, 8, 2788, r0);
  case 8:
    s.tmp_0 = lambda_1_mk(s);
    s.tmp_0.argL = s.caps[2];
    setupLambda(s.tmp_0, s.tmp_0.argL);
    s.callLocIdx = 1146; s.pc = 9; return s.tmp_0;
  case 9:
    r0 = s.retval;
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_onUpdateInterval_inline__P9346.info = {"start":1105,"length":179,"line":31,"column":81,"endLine":37,"endColumn":9,"fileName":"pxt_modules/game/gameutil.ts","functionName":"inline","argumentNames":[]}

function game_onUpdateInterval_inline__P9346_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_onUpdateInterval_inline__P9346, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  time___9347: undefined,
} }





function scene_Scene_millis__P2520(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_Scene__C2496_VT)) failedCast(r0);
    s.lastBrkId = 2304;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2304]) return breakpoint(s, 1, 2304, r0);
  case 1:
    r0 = s.arg0.fields["_millis"];
    return leave(s, r0)
  default: oops()
} } }
scene_Scene_millis__P2520.info = {"start":6788,"length":61,"line":189,"column":8,"endLine":191,"endColumn":9,"fileName":"pxt_modules/game/scene.ts","functionName":"millis","argumentNames":["this"]}

function scene_Scene_millis__P2520_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Scene_millis__P2520, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function control_EventContext_registerFrameHandler__P401(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.fn___9374 = undefined;
    s.i___9383 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, control_EventContext__C393_VT)) failedCast(r0);
    s.lastBrkId = 481;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[481]) return breakpoint(s, 8, 481, r0);
  case 8:
    r0 = s.arg0.fields["frameCallbacks"];
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 482;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[482]) return breakpoint(s, 9, 482, r0);
  case 9:
    s.tmp_3 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_4 = r0;
    r0 = (s.tmp_3).fields["frameCallbacks"] = (s.tmp_4);
    s.lastBrkId = 483;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[483]) return breakpoint(s, 10, 483, r0);
  case 10:
    s.tmp_0 = control_EventContext_registerFrameCallbacks__P4205_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 57; s.pc = 11; return s.tmp_0;
  case 11:
    r0 = s.retval;
  case 1:
  case 2:
    s.lastBrkId = 484;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[484]) return breakpoint(s, 12, 484, r0);
  case 12:
    r0 = pxsim_pxtcore_mkClassInstance(control_FrameCallback__C390_VT);
    s.fn___9374 = (r0);
    s.lastBrkId = 485;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[485]) return breakpoint(s, 13, 485, r0);
  case 13:
    r0 = (s.fn___9374).fields["order"] = (s.arg1);
    s.lastBrkId = 486;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[486]) return breakpoint(s, 14, 486, r0);
  case 14:
    r0 = (s.fn___9374).fields["handler"] = (s.arg2);
    s.lastBrkId = 487;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[487]) return breakpoint(s, 15, 487, r0);
  case 15:
    s.i___9383 = (0);
    s.lastBrkId = 488;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[488]) return breakpoint(s, 16, 488, r0);
  case 16:
  case 3:
    s.lastBrkId = 489;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[489]) return breakpoint(s, 17, 489, r0);
  case 17:
    s.tmp_1 = r0 = s.i___9383;
    r0 = s.arg0.fields["frameCallbacks"];
    s.tmp_3 = r0;
    r0 = pxsim_Array__length(s.tmp_3);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 6; continue; }
    s.lastBrkId = 490;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[490]) return breakpoint(s, 18, 490, r0);
  case 18:
    r0 = s.arg0.fields["frameCallbacks"];
    s.tmp_6 = r0;
    r0 = pxsim_Array__getAt(s.tmp_6, s.i___9383);
    r0 = r0.fields["order"];
    s.tmp_5 = r0;
    r0 = (s.tmp_5 > s.arg1);
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 491;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[491]) return breakpoint(s, 19, 491, r0);
  case 19:
    r0 = s.arg0.fields["frameCallbacks"];
    s.tmp_7 = r0;
    r0 = pxsim_Array_.insertAt(s.tmp_7, s.i___9383, s.fn___9374);
    s.lastBrkId = 492;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[492]) return breakpoint(s, 20, 492, r0);
  case 20:
    r0 = s.fn___9374;
    { step = 7; continue; }
  case 4:
  case 5:
    s.lastBrkId = 493;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[493]) return breakpoint(s, 21, 493, r0);
  case 21:
    r0 = (s.i___9383 + 1);
    s.i___9383 = (r0);
    { step = 3; continue; }
  case 6:
    s.lastBrkId = 494;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[494]) return breakpoint(s, 22, 494, r0);
  case 22:
    r0 = s.arg0.fields["frameCallbacks"];
    s.tmp_0 = r0;
    r0 = pxsim_Array__push(s.tmp_0, s.fn___9374);
    s.lastBrkId = 495;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[495]) return breakpoint(s, 23, 495, r0);
  case 23:
    r0 = s.fn___9374;
  case 7:
    return leave(s, r0)
  default: oops()
} } }
control_EventContext_registerFrameHandler__P401.info = {"start":4675,"length":643,"line":143,"column":8,"endLine":160,"endColumn":9,"fileName":"pxt_modules/base/eventcontext.ts","functionName":"registerFrameHandler","argumentNames":["this","order","handler"]}

function control_EventContext_registerFrameHandler__P401_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control_EventContext_registerFrameHandler__P401, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  fn___9374: undefined,
  i___9383: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function control_EventContext_registerFrameCallbacks__P4205(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.worker___9417 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, control_EventContext__C393_VT)) failedCast(r0);
    s.lastBrkId = 457;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[457]) return breakpoint(s, 4, 457, r0);
  case 4:
    r0 = s.arg0.fields["frameCallbacks"];
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 458;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[458]) return breakpoint(s, 5, 458, r0);
  case 5:
    { step = 3; continue; }
  case 1:
  case 2:
    s.lastBrkId = 459;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[459]) return breakpoint(s, 6, 459, r0);
  case 6:
    r0 = s.arg0.fields["frameWorker"];
    s.worker___9417 = (r0);
    s.lastBrkId = 460;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[460]) return breakpoint(s, 7, 460, r0);
  case 7:
    r0 = pxsim_pxtcore_mkAction(2, control_EventContext_registerFrameCallbacks_inline__P9423);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 1, s.worker___9417);
    r0 = pxsim.control.runInParallel(s.tmp_0);
  case 3:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
control_EventContext_registerFrameCallbacks__P4205.info = {"start":3481,"length":895,"line":105,"column":8,"endLine":129,"endColumn":9,"fileName":"pxt_modules/base/eventcontext.ts","functionName":"registerFrameCallbacks","argumentNames":["this"]}

function control_EventContext_registerFrameCallbacks__P4205_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control_EventContext_registerFrameCallbacks__P4205, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  worker___9417: undefined,
  arg0: undefined,
} }





function control_EventContext_registerFrameCallbacks_inline__P9423(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.delay___9453 = undefined;
    s.lastBrkId = 461;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[461]) return breakpoint(s, 5, 461, r0);
  case 5:
    r0 = s.caps[0].fields["runningCallbacks"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 462;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[462]) return breakpoint(s, 6, 462, r0);
  case 6:
    r0 = pxsim_pxtcore_mkAction(1, control_EventContext_registerFrameCallbacks_inline__P9429);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_1, 0, s.caps[0]);
    s.tmp_2 = pauseUntil__P365_mk(s);
    s.tmp_2.arg0 = s.tmp_1;
    s.tmp_2.arg1 = undefined;
    s.callLocIdx = 51; s.pc = 7; return s.tmp_2;
  case 7:
    r0 = s.retval;
  case 1:
  case 2:
    s.lastBrkId = 463;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[463]) return breakpoint(s, 8, 463, r0);
  case 8:
    r0 = (s.caps[0]).fields["runningCallbacks"] = (true);
    s.lastBrkId = 464;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[464]) return breakpoint(s, 9, 464, r0);
  case 9:
    r0 = (s.caps[0]).fields["framesInSample"] = (0);
    s.lastBrkId = 465;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[465]) return breakpoint(s, 10, 465, r0);
  case 10:
    r0 = (s.caps[0]).fields["timeInSample"] = (0);
    s.lastBrkId = 466;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[466]) return breakpoint(s, 11, 466, r0);
  case 11:
    r0 = (s.caps[0]).fields["deltaTimeMillis"] = (0);
    s.lastBrkId = 467;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[467]) return breakpoint(s, 12, 467, r0);
  case 12:
    s.tmp_0 = r0 = s.caps[0];
    r0 = pxsim.control.millis();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["prevTimeMillis"] = (s.tmp_1);
    s.lastBrkId = 468;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[468]) return breakpoint(s, 13, 468, r0);
  case 13:
  case 3:
    s.lastBrkId = 469;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[469]) return breakpoint(s, 14, 469, r0);
  case 14:
    r0 = s.caps[0].fields["frameWorker"];
    s.tmp_1 = r0;
    r0 = (s.caps[1] == s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 470;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[470]) return breakpoint(s, 15, 470, r0);
  case 15:
    s.tmp_2 = control_EventContext_runCallbacks__P4204_mk(s);
    s.tmp_2.arg0 = s.caps[0];
    s.callLocIdx = 52; s.pc = 16; return s.tmp_2;
  case 16:
    r0 = s.retval;
    s.delay___9453 = (r0);
    s.lastBrkId = 471;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[471]) return breakpoint(s, 17, 471, r0);
  case 17:
    s.tmp_0 = pause__P411_mk(s);
    s.tmp_0.arg0 = s.delay___9453;
    s.callLocIdx = 53; s.pc = 18; return s.tmp_0;
  case 18:
    r0 = s.retval;
    { step = 3; continue; }
  case 4:
    s.lastBrkId = 472;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[472]) return breakpoint(s, 19, 472, r0);
  case 19:
    r0 = (s.caps[0]).fields["runningCallbacks"] = (false);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
control_EventContext_registerFrameCallbacks_inline__P9423.info = {"start":3642,"length":723,"line":109,"column":34,"endLine":128,"endColumn":13,"fileName":"pxt_modules/base/eventcontext.ts","functionName":"inline","argumentNames":[]}

function control_EventContext_registerFrameCallbacks_inline__P9423_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control_EventContext_registerFrameCallbacks_inline__P9423, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  delay___9453: undefined,
} }





function control_EventContext_registerFrameCallbacks_inline__P9429(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    r0 = s.caps[0].fields["runningCallbacks"];
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_0);
    return leave(s, r0)
  default: oops()
} } }
control_EventContext_registerFrameCallbacks_inline__P9429.info = {"start":3873,"length":28,"line":113,"column":31,"endLine":113,"endColumn":59,"fileName":"pxt_modules/base/eventcontext.ts","functionName":"inline","argumentNames":[]}

function control_EventContext_registerFrameCallbacks_inline__P9429_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control_EventContext_registerFrameCallbacks_inline__P9429, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
} }





function control_EventContext_runCallbacks__P4204(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.loopStart___9462 = undefined;
    s.f___9475 = undefined;
    s.unnamed1628___U2 = undefined;
    s.unnamed1629___U3 = undefined;
    s.runtime___9480 = undefined;
    s.fps___9500 = undefined;
    s.delay___9562 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, control_EventContext__C393_VT)) failedCast(r0);
    s.lastBrkId = 434;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[434]) return breakpoint(s, 13, 434, r0);
  case 13:
    s.lastBrkId = 435;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[435]) return breakpoint(s, 14, 435, r0);
  case 14:
    r0 = pxsim.control.millis();
    s.loopStart___9462 = (r0);
    s.lastBrkId = 436;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[436]) return breakpoint(s, 15, 436, r0);
  case 15:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.arg0.fields["prevTimeMillis"];
    s.tmp_2 = r0;
    r0 = (s.loopStart___9462 - s.tmp_2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["deltaTimeMillis"] = (s.tmp_1);
    s.lastBrkId = 437;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[437]) return breakpoint(s, 16, 437, r0);
  case 16:
    r0 = (s.arg0).fields["prevTimeMillis"] = (s.loopStart___9462);
    s.lastBrkId = 438;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[438]) return breakpoint(s, 17, 438, r0);
  case 17:
    s.f___9475 = (undefined);
    r0 = s.arg0.fields["frameCallbacks"];
    s.unnamed1628___U2 = (r0);
    s.unnamed1629___U3 = (0);
    s.lastBrkId = 439;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[439]) return breakpoint(s, 18, 439, r0);
  case 18:
  case 1:
    s.tmp_0 = r0 = s.unnamed1629___U3;
    r0 = pxsim_Array__length(s.unnamed1628___U2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 2; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1628___U2, s.unnamed1629___U3);
    s.f___9475 = (r0);
    s.lastBrkId = 440;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[440]) return breakpoint(s, 19, 440, r0);
  case 19:
    s.tmp_2 = if_handler_1_mk(s);
    s.tmp_2.arg0 = s.f___9475;
    if (!s.tmp_2.arg0.vtable.iface) {
      setupLambda(s.tmp_2, pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "handler"), 1);
      s.callLocIdx = 48; s.pc = 20; return s.tmp_2;
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["handler"];
      if (s.tmp_2.fn == null) { setupLambda(s.tmp_2, s.tmp_2.arg0.fields["handler"], 1); s.callLocIdx = 48; s.pc = 20; return s.tmp_2; }
      else if (s.tmp_2.fn.isGetter) { s.tmp_2.stage2Call = true; s.callLocIdx = 48; s.pc = 20; return s.tmp_2;; }
     else { s.callLocIdx = 48; s.pc = 20; return s.tmp_2; }
    }
  case 20:
    r0 = s.retval;
    r0 = (s.unnamed1629___U3 + 1);
    s.unnamed1629___U3 = (r0);
    { step = 1; continue; }
  case 2:
    s.unnamed1628___U2 = (undefined);
    s.lastBrkId = 441;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[441]) return breakpoint(s, 21, 441, r0);
  case 21:
    r0 = pxsim.control.millis();
    s.tmp_0 = r0;
    r0 = (s.tmp_0 - s.loopStart___9462);
    s.runtime___9480 = (r0);
    s.lastBrkId = 442;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[442]) return breakpoint(s, 22, 442, r0);
  case 22:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["timeInSample"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + s.runtime___9480);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["timeInSample"] = (s.tmp_1);
    s.lastBrkId = 443;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[443]) return breakpoint(s, 23, 443, r0);
  case 23:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["framesInSample"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["framesInSample"] = (s.tmp_1);
    s.lastBrkId = 444;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[444]) return breakpoint(s, 24, 444, r0);
  case 24:
    r0 = s.arg0.fields["timeInSample"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > 1000);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 3; continue; }
    r0 = s.tmp_0;
    { step = 4; continue; }
  case 3:
    r0 = s.arg0.fields["framesInSample"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 > 30);
  case 4:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 11; continue; }
    s.lastBrkId = 445;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[445]) return breakpoint(s, 25, 445, r0);
  case 25:
    r0 = s.arg0.fields["framesInSample"];
    s.tmp_4 = r0;
    r0 = s.arg0.fields["timeInSample"];
    s.tmp_6 = r0;
    r0 = (s.tmp_6 / 1000);
    s.tmp_5 = r0;
    r0 = (s.tmp_4 / s.tmp_5);
    s.fps___9500 = (r0);
    s.lastBrkId = 446;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[446]) return breakpoint(s, 26, 446, r0);
  case 26:
    r0 = pxsim.Math_.round(s.fps___9500);
    s.tmp_1 = r0;
    if ((s.tmp_1) && (s.tmp_1).vtable) {
    setupResume(s, 27);
    pxsim_String__stringConv(s.tmp_1);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_1) + ""; }
  case 27:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_String__concat("fps:", s.tmp_0);
    globals.control_EventContext_lastStats___395 = (r0);
    s.lastBrkId = 447;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[447]) return breakpoint(s, 28, 447, r0);
  case 28:
    r0 = (s.fps___9500 < 99);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 448;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[448]) return breakpoint(s, 29, 448, r0);
  case 29:
    if ((globals.control_EventContext_lastStats___395) && (globals.control_EventContext_lastStats___395).vtable) {
    setupResume(s, 30);
    pxsim_String__stringConv(globals.control_EventContext_lastStats___395);
    checkResumeConsumed();
    return;
    } else { s.retval = (globals.control_EventContext_lastStats___395) + ""; }
  case 30:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.fps___9500 * 10);
    s.tmp_7 = r0;
    r0 = pxsim.Math_.round(s.tmp_7);
    s.tmp_6 = r0;
    r0 = (s.tmp_6 % 10);
    s.tmp_5 = r0;
    if ((s.tmp_5) && (s.tmp_5).vtable) {
    setupResume(s, 31);
    pxsim_String__stringConv(s.tmp_5);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_5) + ""; }
  case 31:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_String__concat(".", s.tmp_4);
    s.tmp_3 = r0;
    if ((s.tmp_3) && (s.tmp_3).vtable) {
    setupResume(s, 32);
    pxsim_String__stringConv(s.tmp_3);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_3) + ""; }
  case 32:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_String__concat(s.tmp_1, s.tmp_2);
    globals.control_EventContext_lastStats___395 = (r0);
  case 5:
  case 6:
    s.lastBrkId = 449;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[449]) return breakpoint(s, 33, 449, r0);
  case 33:
    s.tmp_2 = control_ramSize__P344_mk(s);
    s.callLocIdx = 49; s.pc = 34; return s.tmp_2;
  case 34:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > 2000000);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 7; continue; }
    r0 = s.tmp_0;
    { step = 8; continue; }
  case 7:
    r0 = pxsim.control.profilingEnabled();
  case 8:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 450;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[450]) return breakpoint(s, 35, 450, r0);
  case 35:
    r0 = pxsim_String_.mkEmpty();
    s.tmp_8 = r0;
    r0 = (s.fps___9500 * 100);
    s.tmp_11 = r0;
    r0 = (s.tmp_11 | 0);
    s.tmp_10 = r0;
    if ((s.tmp_10) && (s.tmp_10).vtable) {
    setupResume(s, 36);
    pxsim_String__stringConv(s.tmp_10);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_10) + ""; }
  case 36:
    r0 = s.retval;
    s.tmp_9 = r0;
    r0 = pxsim_String__concat(s.tmp_8, s.tmp_9);
    s.tmp_7 = r0;
    r0 = pxsim_String__concat(s.tmp_7, "/100 fps - ");
    s.tmp_6 = r0;
    r0 = s.arg0.fields["framesInSample"];
    s.tmp_13 = r0;
    if ((s.tmp_13) && (s.tmp_13).vtable) {
    setupResume(s, 37);
    pxsim_String__stringConv(s.tmp_13);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_13) + ""; }
  case 37:
    r0 = s.retval;
    s.tmp_12 = r0;
    r0 = pxsim_String__concat(s.tmp_6, s.tmp_12);
    s.tmp_5 = r0;
    r0 = pxsim_String__concat(s.tmp_5, " frames");
    s.tmp_4 = r0;
    r0 = pxsim.control.dmesg(s.tmp_4);
    s.lastBrkId = 451;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[451]) return breakpoint(s, 38, 451, r0);
  case 38:
    r0 = pxsim.control.gc();
    s.lastBrkId = 452;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[452]) return breakpoint(s, 39, 452, r0);
  case 39:
    r0 = pxsim_pxtcore.dumpPerfCounters();
  case 9:
  case 10:
    s.lastBrkId = 453;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[453]) return breakpoint(s, 40, 453, r0);
  case 40:
    r0 = (s.arg0).fields["timeInSample"] = (0);
    s.lastBrkId = 454;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[454]) return breakpoint(s, 41, 454, r0);
  case 41:
    r0 = (s.arg0).fields["framesInSample"] = (0);
  case 11:
  case 12:
    s.lastBrkId = 455;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[455]) return breakpoint(s, 42, 455, r0);
  case 42:
    s.tmp_0 = Math_max__P130_mk(s);
    s.tmp_0.arg0 = 1;
    r0 = (20 - s.runtime___9480);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 50; s.pc = 43; return s.tmp_0;
  case 43:
    r0 = s.retval;
    s.delay___9562 = (r0);
    s.lastBrkId = 456;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[456]) return breakpoint(s, 44, 456, r0);
  case 44:
    r0 = s.delay___9562;
    return leave(s, r0)
  default: oops()
} } }
control_EventContext_runCallbacks__P4204.info = {"start":2182,"length":1246,"line":74,"column":8,"endLine":102,"endColumn":9,"fileName":"pxt_modules/base/eventcontext.ts","functionName":"runCallbacks","argumentNames":["this"]}

function control_EventContext_runCallbacks__P4204_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control_EventContext_runCallbacks__P4204, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  tmp_12: undefined,
  tmp_13: undefined,
  loopStart___9462: undefined,
  f___9475: undefined,
  unnamed1628___U2: undefined,
  unnamed1629___U3: undefined,
  runtime___9480: undefined,
  fps___9500: undefined,
  delay___9562: undefined,
  arg0: undefined,
} }





function control_ramSize__P344(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 347;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[347]) return breakpoint(s, 3, 347, r0);
  case 3:
    r0 = pxsim_pxtcore.getConfig(205, 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    s.tmp_1 = control__ramSize__P4170_mk(s);
    s.callLocIdx = 29; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
  case 2:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = s.tmp_2;
    return leave(s, r0)
  default: oops()
} } }
control_ramSize__P344.info = {"start":4847,"length":100,"line":165,"column":4,"endLine":167,"endColumn":5,"fileName":"pxt_modules/base/control.ts","functionName":"ramSize","argumentNames":[]}

function control_ramSize__P344_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control_ramSize__P344, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
} }





function control__ramSize__P4170(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 346;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[346]) return breakpoint(s, 1, 346, r0);
  case 1:
    r0 = 33554432;
    return leave(s, r0)
  default: oops()
} } }
control__ramSize__P4170.info = {"start":4727,"length":60,"line":160,"column":4,"endLine":162,"endColumn":5,"fileName":"pxt_modules/base/control.ts","functionName":"_ramSize","argumentNames":[]}

function control__ramSize__P4170_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control__ramSize__P4170, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
} }





function pauseUntil__P365(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 379;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[379]) return breakpoint(s, 8, 379, r0);
  case 8:
    r0 = pxsim_numops_toBoolDecr(s.arg0);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    s.tmp_2 = lambda_1_mk(s);
    s.tmp_2.argL = s.arg0;
    setupLambda(s.tmp_2, s.tmp_2.argL);
    s.callLocIdx = 35; s.pc = 9; return s.tmp_2;
  case 9:
    r0 = s.retval;
  case 2:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 380;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[380]) return breakpoint(s, 10, 380, r0);
  case 10:
    { step = 7; continue; }
  case 3:
  case 4:
    s.lastBrkId = 381;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[381]) return breakpoint(s, 11, 381, r0);
  case 11:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    s.tmp_5 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_5);
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 382;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[382]) return breakpoint(s, 12, 382, r0);
  case 12:
    s.arg1 = (0);
  case 5:
  case 6:
    s.lastBrkId = 383;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[383]) return breakpoint(s, 13, 383, r0);
  case 13:
    s.tmp_0 = control___queuePollEvent__P364_mk(s);
    s.tmp_0.arg0 = s.arg1;
    s.tmp_0.arg1 = s.arg0;
    s.tmp_0.arg2 = undefined;
    s.callLocIdx = 36; s.pc = 14; return s.tmp_0;
  case 14:
    r0 = s.retval;
  case 7:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
pauseUntil__P365.info = {"start":2224,"length":227,"line":73,"column":0,"endLine":77,"endColumn":1,"fileName":"pxt_modules/base/poll.ts","functionName":"pauseUntil","argumentNames":["condition","timeOut"]}

function pauseUntil__P365_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: pauseUntil__P365, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function control___queuePollEvent__P364(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.ev___9584 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 371;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[371]) return breakpoint(s, 5, 371, r0);
  case 5:
    r0 = pxsim_pxtcore_mkClassInstance(control_PollEvent__C4178_VT);
    s.tmp_0 = r0;
    s.tmp_1 = control_PollEvent_constructor__P4179_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = 1023;
    r0 = pxsim.control.allocateNotifyEvent();
    s.tmp_1.arg2 = r0;
    r0 = pxsim.control.millis();
    s.tmp_1.arg3 = r0;
    s.tmp_1.arg4 = s.arg0;
    s.tmp_1.arg5 = s.arg1;
    r0 = pxsim_numops_toBoolDecr(s.arg2);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
    s.tmp_1.arg6 = r0;
    s.callLocIdx = 33; s.pc = 6; return s.tmp_1;
  case 6:
    r0 = s.retval;
    s.ev___9584 = (s.tmp_0);
    s.lastBrkId = 372;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[372]) return breakpoint(s, 7, 372, r0);
  case 7:
    r0 = pxsim_numops_toBoolDecr(globals._pollEventQueue___4181);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 373;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[373]) return breakpoint(s, 8, 373, r0);
  case 8:
    r0 = pxsim_Array__mk();
    s.tmp_2 = r0;
    r0 = pxsim_Array__push(s.tmp_2, s.ev___9584);
    globals._pollEventQueue___4181 = (s.tmp_2);
    s.lastBrkId = 374;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[374]) return breakpoint(s, 9, 374, r0);
  case 9:
    r0 = pxsim.control.runInParallel(control_pollEvents__P4182);
    { step = 2; continue; }
  case 1:
    s.lastBrkId = 375;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[375]) return breakpoint(s, 10, 375, r0);
  case 10:
    r0 = pxsim_Array__push(globals._pollEventQueue___4181, s.ev___9584);
  case 2:
    s.lastBrkId = 376;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[376]) return breakpoint(s, 11, 376, r0);
  case 11:
    r0 = pxsim_numops_toBoolDecr(s.arg2);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 377;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[377]) return breakpoint(s, 12, 377, r0);
  case 12:
    s.tmp_0 = control_onEvent__P389_mk(s);
    r0 = s.ev___9584.fields["eid"];
    s.tmp_0.arg0 = r0;
    r0 = s.ev___9584.fields["vid"];
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = s.arg2;
    s.tmp_0.arg3 = 16;
    s.callLocIdx = 34; s.pc = 13; return s.tmp_0;
  case 13:
    r0 = s.retval;
    { step = 4; continue; }
  case 3:
    s.lastBrkId = 378;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[378]) return breakpoint(s, 14, 378, r0);
  case 14:
    r0 = s.ev___9584.fields["eid"];
    s.tmp_0 = r0;
    r0 = s.ev___9584.fields["vid"];
    s.tmp_1 = r0;
    setupResume(s, 15);
    pxsim.control.waitForEvent(s.tmp_0, s.tmp_1);
    checkResumeConsumed();
    return;
  case 15:
    r0 = s.retval;
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
control___queuePollEvent__P364.info = {"start":1262,"length":758,"line":39,"column":4,"endLine":64,"endColumn":5,"fileName":"pxt_modules/base/poll.ts","functionName":"__queuePollEvent","argumentNames":["timeOut","condition","handler"]}

function control___queuePollEvent__P364_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control___queuePollEvent__P364, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  ev___9584: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function control_pollEvents__P4182(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.now___9711 = undefined;
    s.i___9714 = undefined;
    s.ev___9720 = undefined;
    s.lastBrkId = 356;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[356]) return breakpoint(s, 13, 356, r0);
  case 13:
  case 1:
    s.lastBrkId = 357;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[357]) return breakpoint(s, 14, 357, r0);
  case 14:
    r0 = pxsim_Array__length(globals._pollEventQueue___4181);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 12; continue; }
    s.lastBrkId = 358;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[358]) return breakpoint(s, 15, 358, r0);
  case 15:
    r0 = pxsim.control.millis();
    s.now___9711 = (r0);
    s.lastBrkId = 359;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[359]) return breakpoint(s, 16, 359, r0);
  case 16:
    s.i___9714 = (0);
    s.lastBrkId = 360;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[360]) return breakpoint(s, 17, 360, r0);
  case 17:
  case 2:
    s.lastBrkId = 361;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[361]) return breakpoint(s, 18, 361, r0);
  case 18:
    s.tmp_1 = r0 = s.i___9714;
    r0 = pxsim_Array__length(globals._pollEventQueue___4181);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 11; continue; }
    s.lastBrkId = 362;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[362]) return breakpoint(s, 19, 362, r0);
  case 19:
    r0 = pxsim_Array__getAt(globals._pollEventQueue___4181, s.i___9714);
    s.ev___9720 = (r0);
    s.lastBrkId = 363;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[363]) return breakpoint(s, 20, 363, r0);
  case 20:
    s.tmp_1 = if_condition_1_mk(s);
    s.tmp_1.arg0 = s.ev___9720;
    if (!s.tmp_1.arg0.vtable.iface) {
      setupLambda(s.tmp_1, pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "condition"), 1);
      s.callLocIdx = 30; s.pc = 21; return s.tmp_1;
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["condition"];
      if (s.tmp_1.fn == null) { setupLambda(s.tmp_1, s.tmp_1.arg0.fields["condition"], 1); s.callLocIdx = 30; s.pc = 21; return s.tmp_1; }
      else if (s.tmp_1.fn.isGetter) { s.tmp_1.stage2Call = true; s.callLocIdx = 30; s.pc = 21; return s.tmp_1;; }
     else { s.callLocIdx = 30; s.pc = 21; return s.tmp_1; }
    }
  case 21:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 3; continue; }
    r0 = s.tmp_0;
    { step = 6; continue; }
  case 3:
    r0 = s.ev___9720.fields["timeOut"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 > 0);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBool(s.tmp_2);
    if (r0) { step = 4; continue; }
    r0 = s.tmp_2;
    { step = 5; continue; }
  case 4:
    r0 = s.ev___9720.fields["start"];
    s.tmp_5 = r0;
    r0 = (s.now___9711 - s.tmp_5);
    s.tmp_4 = r0;
    r0 = s.ev___9720.fields["timeOut"];
    s.tmp_6 = r0;
    r0 = (s.tmp_4 > s.tmp_6);
  case 5:
    // jmp value (already in r0)
    s.tmp_7 = r0;
    r0 = s.tmp_7;
  case 6:
    // jmp value (already in r0)
    s.tmp_8 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_8);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 364;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[364]) return breakpoint(s, 22, 364, r0);
  case 22:
    r0 = s.ev___9720.fields["eid"];
    s.tmp_9 = r0;
    r0 = s.ev___9720.fields["vid"];
    s.tmp_10 = r0;
    r0 = pxsim.control.raiseEvent(s.tmp_9, s.tmp_10);
    s.lastBrkId = 365;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[365]) return breakpoint(s, 23, 365, r0);
  case 23:
    r0 = s.ev___9720.fields["once"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 366;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[366]) return breakpoint(s, 24, 366, r0);
  case 24:
    s.tmp_1 = helpers_arraySplice__P100_mk(s);
    s.tmp_1.arg0 = globals._pollEventQueue___4181;
    s.tmp_1.arg1 = s.i___9714;
    s.tmp_1.arg2 = 1;
    s.callLocIdx = 31; s.pc = 25; return s.tmp_1;
  case 25:
    r0 = s.retval;
    s.lastBrkId = 367;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[367]) return breakpoint(s, 26, 367, r0);
  case 26:
    r0 = (s.i___9714 - 1);
    s.i___9714 = (r0);
  case 7:
  case 8:
  case 9:
  case 10:
    s.lastBrkId = 368;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[368]) return breakpoint(s, 27, 368, r0);
  case 27:
    r0 = (s.i___9714 + 1);
    s.i___9714 = (r0);
    { step = 2; continue; }
  case 11:
    s.lastBrkId = 369;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[369]) return breakpoint(s, 28, 369, r0);
  case 28:
    s.tmp_0 = pause__P411_mk(s);
    s.tmp_0.arg0 = 50;
    s.callLocIdx = 32; s.pc = 29; return s.tmp_0;
  case 29:
    r0 = s.retval;
    { step = 1; continue; }
  case 12:
    s.lastBrkId = 370;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[370]) return breakpoint(s, 30, 370, r0);
  case 30:
    globals._pollEventQueue___4181 = (undefined);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
control_pollEvents__P4182.info = {"start":618,"length":638,"line":20,"column":4,"endLine":37,"endColumn":5,"fileName":"pxt_modules/base/poll.ts","functionName":"pollEvents","argumentNames":[]}

function control_pollEvents__P4182_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control_pollEvents__P4182, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  now___9711: undefined,
  i___9714: undefined,
  ev___9720: undefined,
} }





function helpers_arraySplice__P100(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.i___9768 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 37;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[37]) return breakpoint(s, 6, 37, r0);
  case 6:
    r0 = (s.arg1 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 38;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[38]) return breakpoint(s, 7, 38, r0);
  case 7:
    { step = 5; continue; }
  case 1:
  case 2:
    s.lastBrkId = 39;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[39]) return breakpoint(s, 8, 39, r0);
  case 8:
    s.i___9768 = (0);
    s.lastBrkId = 40;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[40]) return breakpoint(s, 9, 40, r0);
  case 9:
  case 3:
    s.lastBrkId = 41;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[41]) return breakpoint(s, 10, 41, r0);
  case 10:
    r0 = (s.i___9768 < s.arg2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 42;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[42]) return breakpoint(s, 11, 42, r0);
  case 11:
    r0 = pxsim_Array_.removeAt(s.arg0, s.arg1);
    s.lastBrkId = 43;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[43]) return breakpoint(s, 12, 43, r0);
  case 12:
    r0 = (s.i___9768 + 1);
    s.i___9768 = (r0);
    { step = 3; continue; }
  case 4:
  case 5:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
helpers_arraySplice__P100.info = {"start":3642,"length":213,"line":137,"column":4,"endLine":144,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"arraySplice","argumentNames":["arr","start","len"]}

function helpers_arraySplice__P100_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_arraySplice__P100, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  i___9768: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function control_PollEvent_constructor__P4179(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.arg5 = (s.lambdaArgs[5]);
      s.arg6 = (s.lambdaArgs[6]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, control_PollEvent__C4178_VT)) failedCast(r0);
    s.lastBrkId = 349;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[349]) return breakpoint(s, 1, 349, r0);
  case 1:
    r0 = (s.arg0).fields["eid"] = (s.arg1);
    s.lastBrkId = 350;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[350]) return breakpoint(s, 2, 350, r0);
  case 2:
    r0 = (s.arg0).fields["vid"] = (s.arg2);
    s.lastBrkId = 351;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[351]) return breakpoint(s, 3, 351, r0);
  case 3:
    r0 = (s.arg0).fields["start"] = (s.arg3);
    s.lastBrkId = 352;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[352]) return breakpoint(s, 4, 352, r0);
  case 4:
    r0 = (s.arg0).fields["timeOut"] = (s.arg4);
    s.lastBrkId = 353;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[353]) return breakpoint(s, 5, 353, r0);
  case 5:
    r0 = (s.arg0).fields["condition"] = (s.arg5);
    s.lastBrkId = 354;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[354]) return breakpoint(s, 6, 354, r0);
  case 6:
    r0 = (s.arg0).fields["once"] = (s.arg6);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
control_PollEvent_constructor__P4179.info = {"start":239,"length":316,"line":8,"column":8,"endLine":15,"endColumn":9,"fileName":"pxt_modules/base/poll.ts","functionName":"inline","argumentNames":["this","eid","vid","start","timeOut","condition","once"]}

function control_PollEvent_constructor__P4179_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control_PollEvent_constructor__P4179, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
  arg5: undefined,
  arg6: undefined,
} }





function control_onEvent__P389(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.ctx___9627 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 417;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[417]) return breakpoint(s, 3, 417, r0);
  case 3:
    s.tmp_0 = control_eventContext__P406_mk(s);
    s.callLocIdx = 45; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.ctx___9627 = (r0);
    s.lastBrkId = 418;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[418]) return breakpoint(s, 5, 418, r0);
  case 5:
    r0 = pxsim_numops_toBoolDecr(s.ctx___9627);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 419;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[419]) return breakpoint(s, 6, 419, r0);
  case 6:
    r0 = pxsim.control.internalOnEvent(s.arg0, s.arg1, s.arg2, s.arg3);
    { step = 2; continue; }
  case 1:
    s.lastBrkId = 420;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[420]) return breakpoint(s, 7, 420, r0);
  case 7:
    s.tmp_0 = control_EventContext_registerHandler__P403_mk(s);
    s.tmp_0.arg0 = s.ctx___9627;
    s.tmp_0.arg1 = s.arg0;
    s.tmp_0.arg2 = s.arg1;
    s.tmp_0.arg3 = s.arg2;
    s.tmp_0.arg4 = s.arg3;
    s.callLocIdx = 46; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
control_onEvent__P389.info = {"start":336,"length":325,"line":9,"column":4,"endLine":15,"endColumn":5,"fileName":"pxt_modules/base/eventcontext.ts","functionName":"onEvent","argumentNames":["src","value","handler","flags"]}

function control_onEvent__P389_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control_onEvent__P389, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  ctx___9627: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function control_eventContext__P406(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 505;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[505]) return breakpoint(s, 3, 505, r0);
  case 3:
    r0 = pxsim_numops_toBoolDecr(globals.eventContexts___4207);
    if (!r0) { step = 1; continue; }
    s.tmp_0 = r0 = globals.eventContexts___4207;
    r0 = pxsim_Array__length(globals.eventContexts___4207);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - 1);
    s.tmp_1 = r0;
    r0 = pxsim_Array__getAt(s.tmp_0, s.tmp_1);
    { step = 2; continue; }
  case 1:
    r0 = undefined;
  case 2:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = s.tmp_3;
    return leave(s, r0)
  default: oops()
} } }
control_eventContext__P406.info = {"start":6907,"length":136,"line":209,"column":4,"endLine":211,"endColumn":5,"fileName":"pxt_modules/base/eventcontext.ts","functionName":"eventContext","argumentNames":[]}

function control_eventContext__P406_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control_eventContext__P406, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
} }





function control_EventContext_registerHandler__P403(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.h___9650 = undefined;
    s.unnamed1634___U1 = undefined;
    s.unnamed1635___U2 = undefined;
    s.hn___9673 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, control_EventContext__C393_VT)) failedCast(r0);
    s.lastBrkId = 496;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[496]) return breakpoint(s, 8, 496, r0);
  case 8:
    s.h___9650 = (undefined);
    r0 = s.arg0.fields["handlers"];
    s.unnamed1634___U1 = (r0);
    s.unnamed1635___U2 = (0);
    s.lastBrkId = 497;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[497]) return breakpoint(s, 9, 497, r0);
  case 9:
  case 1:
    s.tmp_0 = r0 = s.unnamed1635___U2;
    r0 = pxsim_Array__length(s.unnamed1634___U1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 6; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1634___U1, s.unnamed1635___U2);
    s.h___9650 = (r0);
    s.lastBrkId = 498;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[498]) return breakpoint(s, 10, 498, r0);
  case 10:
    r0 = s.h___9650.fields["src"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 == s.arg1);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBool(s.tmp_2);
    if (r0) { step = 2; continue; }
    r0 = s.tmp_2;
    { step = 3; continue; }
  case 2:
    r0 = s.h___9650.fields["value"];
    s.tmp_4 = r0;
    r0 = (s.tmp_4 == s.arg2);
  case 3:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_5);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 499;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[499]) return breakpoint(s, 11, 499, r0);
  case 11:
    r0 = (s.h___9650).fields["flags"] = (s.arg4);
    s.lastBrkId = 500;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[500]) return breakpoint(s, 12, 500, r0);
  case 12:
    r0 = (s.h___9650).fields["handler"] = (s.arg3);
    s.lastBrkId = 501;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[501]) return breakpoint(s, 13, 501, r0);
  case 13:
    { step = 7; continue; }
  case 4:
  case 5:
    r0 = (s.unnamed1635___U2 + 1);
    s.unnamed1635___U2 = (r0);
    { step = 1; continue; }
  case 6:
    s.unnamed1634___U1 = (undefined);
    s.lastBrkId = 502;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[502]) return breakpoint(s, 14, 502, r0);
  case 14:
    r0 = pxsim_pxtcore_mkClassInstance(control_EventHandler__C4199_VT);
    s.tmp_0 = r0;
    s.tmp_1 = control_EventHandler_constructor__P4202_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = s.arg1;
    s.tmp_1.arg2 = s.arg2;
    s.tmp_1.arg3 = s.arg3;
    s.tmp_1.arg4 = s.arg4;
    s.callLocIdx = 58; s.pc = 15; return s.tmp_1;
  case 15:
    r0 = s.retval;
    s.hn___9673 = (s.tmp_0);
    s.lastBrkId = 503;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[503]) return breakpoint(s, 16, 503, r0);
  case 16:
    r0 = s.arg0.fields["handlers"];
    s.tmp_0 = r0;
    r0 = pxsim_Array__push(s.tmp_0, s.hn___9673);
    s.lastBrkId = 504;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[504]) return breakpoint(s, 17, 504, r0);
  case 17:
    s.tmp_0 = control_EventHandler_register__P4200_mk(s);
    s.tmp_0.arg0 = s.hn___9673;
    s.callLocIdx = 59; s.pc = 18; return s.tmp_0;
  case 18:
    r0 = s.retval;
  case 7:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
control_EventContext_registerHandler__P403.info = {"start":5573,"length":525,"line":169,"column":8,"endLine":182,"endColumn":9,"fileName":"pxt_modules/base/eventcontext.ts","functionName":"registerHandler","argumentNames":["this","src","value","handler","flags"]}

function control_EventContext_registerHandler__P403_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control_EventContext_registerHandler__P403, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  h___9650: undefined,
  unnamed1634___U1: undefined,
  unnamed1635___U2: undefined,
  hn___9673: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
} }





function control_EventHandler_constructor__P4202(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, control_EventHandler__C4199_VT)) failedCast(r0);
    r0 = (s.arg0).fields["src"] = (s.arg1);
    r0 = (s.arg0).fields["value"] = (s.arg2);
    r0 = (s.arg0).fields["handler"] = (s.arg3);
    r0 = (s.arg0).fields["flags"] = (s.arg4);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
control_EventHandler_constructor__P4202.info = {"start":786,"length":165,"line":23,"column":8,"endLine":28,"endColumn":13,"fileName":"pxt_modules/base/eventcontext.ts","functionName":"inline","argumentNames":["this","src","value","handler","flags"]}

function control_EventHandler_constructor__P4202_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control_EventHandler_constructor__P4202, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
} }





function control_EventHandler_register__P4200(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, control_EventHandler__C4199_VT)) failedCast(r0);
    s.lastBrkId = 421;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[421]) return breakpoint(s, 1, 421, r0);
  case 1:
    r0 = pxsim_pxtcore_mkAction(1, control_EventHandler_register_inline__P9694);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    r0 = s.arg0.fields["src"];
    s.tmp_1 = r0;
    r0 = s.arg0.fields["value"];
    s.tmp_2 = r0;
    r0 = s.arg0.fields["flags"];
    s.tmp_3 = r0;
    r0 = pxsim.control.internalOnEvent(s.tmp_1, s.tmp_2, s.tmp_0, s.tmp_3);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
control_EventHandler_register__P4200.info = {"start":961,"length":165,"line":30,"column":8,"endLine":34,"endColumn":9,"fileName":"pxt_modules/base/eventcontext.ts","functionName":"register","argumentNames":["this"]}

function control_EventHandler_register__P4200_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control_EventHandler_register__P4200, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
} }





function control_EventHandler_register_inline__P9694(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 422;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[422]) return breakpoint(s, 3, 422, r0);
  case 3:
    r0 = s.caps[0].fields["handler"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 423;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[423]) return breakpoint(s, 4, 423, r0);
  case 4:
    s.tmp_1 = if_handler_1_mk(s);
    s.tmp_1.arg0 = s.caps[0];
    if (!s.tmp_1.arg0.vtable.iface) {
      setupLambda(s.tmp_1, pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "handler"), 1);
      s.callLocIdx = 47; s.pc = 5; return s.tmp_1;
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["handler"];
      if (s.tmp_1.fn == null) { setupLambda(s.tmp_1, s.tmp_1.arg0.fields["handler"], 1); s.callLocIdx = 47; s.pc = 5; return s.tmp_1; }
      else if (s.tmp_1.fn.isGetter) { s.tmp_1.stage2Call = true; s.callLocIdx = 47; s.pc = 5; return s.tmp_1;; }
     else { s.callLocIdx = 47; s.pc = 5; return s.tmp_1; }
    }
  case 5:
    r0 = s.retval;
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
control_EventHandler_register_inline__P9694.info = {"start":1032,"length":71,"line":31,"column":58,"endLine":33,"endColumn":13,"fileName":"pxt_modules/base/eventcontext.ts","functionName":"inline","argumentNames":[]}

function control_EventHandler_register_inline__P9694_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control_EventHandler_register_inline__P9694, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
} }





function MAX_SOURCES_inline__P9207(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.sz___9208 = undefined;
    s.tmp_0 = control_ramSize__P344_mk(s);
    s.callLocIdx = 38; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    s.sz___9208 = (r0);
    r0 = (s.sz___9208 <= 102400);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = 8;
    { step = 5; continue; }
    { step = 4; continue; }
  case 1:
    r0 = (s.sz___9208 <= 204800);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 2; continue; }
    r0 = 16;
    { step = 5; continue; }
    { step = 3; continue; }
  case 2:
    r0 = 50;
    { step = 5; continue; }
  case 3:
  case 4:
    r0 = undefined;
  case 5:
    return leave(s, r0)
  default: oops()
} } }
MAX_SOURCES_inline__P9207.info = {"start":240,"length":217,"line":9,"column":25,"endLine":18,"endColumn":5,"fileName":"pxt_modules/game/particles.ts","functionName":"inline","argumentNames":[]}

function MAX_SOURCES_inline__P9207_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: MAX_SOURCES_inline__P9207, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  sz___9208: undefined,
} }





function particles_SprayFactory_constructor__P2797(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_SprayFactory__C2796_VT)) failedCast(r0);
    s.lastBrkId = 3471;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3471]) return breakpoint(s, 1, 3471, r0);
  case 1:
    s.tmp_0 = particles_ParticleFactory_constructor__P2793_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1528; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 3472;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3472]) return breakpoint(s, 3, 3472, r0);
  case 3:
    s.tmp_0 = particles_initTrig__P4920_mk(s);
    s.callLocIdx = 1529; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.lastBrkId = 3473;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3473]) return breakpoint(s, 5, 3473, r0);
  case 5:
    s.tmp_0 = particles_SprayFactory_setSpeed__P2800_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.callLocIdx = 1530; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    s.lastBrkId = 3474;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3474]) return breakpoint(s, 7, 3474, r0);
  case 7:
    s.tmp_0 = particles_SprayFactory_setDirection__P2801_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg2;
    s.tmp_0.arg2 = s.arg3;
    s.callLocIdx = 1531; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_SprayFactory_constructor__P2797.info = {"start":2623,"length":218,"line":98,"column":8,"endLine":103,"endColumn":9,"fileName":"pxt_modules/game/particlefactories.ts","functionName":"inline","argumentNames":["this","speed","centerDegrees","arcDegrees"]}

function particles_SprayFactory_constructor__P2797_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_SprayFactory_constructor__P2797, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function particles_initTrig__P4920(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 3440;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3440]) return breakpoint(s, 3, 3440, r0);
  case 3:
    r0 = pxsim_numops_toBoolDecr(globals.cachedSin___4906);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3441;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3441]) return breakpoint(s, 4, 3441, r0);
  case 4:
    s.tmp_2 = particles_cacheSin__P2790_mk(s);
    s.tmp_2.arg0 = 100;
    s.callLocIdx = 1517; s.pc = 5; return s.tmp_2;
  case 5:
    r0 = s.retval;
    globals.cachedSin___4906 = (r0);
    s.lastBrkId = 3442;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3442]) return breakpoint(s, 6, 3442, r0);
  case 6:
    s.tmp_0 = particles_cacheCos__P2791_mk(s);
    s.tmp_0.arg0 = 100;
    s.callLocIdx = 1518; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    globals.cachedCos___4907 = (r0);
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_initTrig__P4920.info = {"start":291,"length":155,"line":11,"column":4,"endLine":16,"endColumn":5,"fileName":"pxt_modules/game/particlefactories.ts","functionName":"initTrig","argumentNames":[]}

function particles_initTrig__P4920_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_initTrig__P4920, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
} }





function particles_cacheCos__P2791(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.cos___8901 = undefined;
    s.anglePerSlice___8903 = undefined;
    s.i___8909 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3451;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3451]) return breakpoint(s, 3, 3451, r0);
  case 3:
    r0 = pxsim_Array__mk();
    s.cos___8901 = (r0);
    s.lastBrkId = 3452;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3452]) return breakpoint(s, 4, 3452, r0);
  case 4:
    r0 = (6.283185307179586 / s.arg0);
    s.anglePerSlice___8903 = (r0);
    s.lastBrkId = 3453;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3453]) return breakpoint(s, 5, 3453, r0);
  case 5:
    s.i___8909 = (0);
    s.lastBrkId = 3454;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3454]) return breakpoint(s, 6, 3454, r0);
  case 6:
  case 1:
    s.lastBrkId = 3455;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3455]) return breakpoint(s, 7, 3455, r0);
  case 7:
    r0 = (s.i___8909 < s.arg0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 3456;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3456]) return breakpoint(s, 8, 3456, r0);
  case 8:
    s.tmp_1 = r0 = s.cos___8901;
    s.tmp_3 = Fx8__P149_mk(s);
    r0 = (s.i___8909 * s.anglePerSlice___8903);
    s.tmp_4 = r0;
    r0 = pxsim.Math_.cos(s.tmp_4);
    s.tmp_3.arg0 = r0;
    s.callLocIdx = 1520; s.pc = 9; return s.tmp_3;
  case 9:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_Array__push(s.tmp_1, s.tmp_2);
    s.lastBrkId = 3457;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3457]) return breakpoint(s, 10, 3457, r0);
  case 10:
    r0 = (s.i___8909 + 1);
    s.i___8909 = (r0);
    { step = 1; continue; }
  case 2:
    s.lastBrkId = 3458;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3458]) return breakpoint(s, 11, 3458, r0);
  case 11:
    r0 = s.cos___8901;
    return leave(s, r0)
  default: oops()
} } }
particles_cacheCos__P2791.info = {"start":1005,"length":263,"line":35,"column":4,"endLine":42,"endColumn":5,"fileName":"pxt_modules/game/particlefactories.ts","functionName":"cacheCos","argumentNames":["slices"]}

function particles_cacheCos__P2791_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_cacheCos__P2791, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  cos___8901: undefined,
  anglePerSlice___8903: undefined,
  i___8909: undefined,
  arg0: undefined,
} }





function particles_cacheSin__P2790(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.sin___8927 = undefined;
    s.anglePerSlice___8929 = undefined;
    s.i___8935 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3443;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3443]) return breakpoint(s, 3, 3443, r0);
  case 3:
    r0 = pxsim_Array__mk();
    s.sin___8927 = (r0);
    s.lastBrkId = 3444;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3444]) return breakpoint(s, 4, 3444, r0);
  case 4:
    r0 = (6.283185307179586 / s.arg0);
    s.anglePerSlice___8929 = (r0);
    s.lastBrkId = 3445;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3445]) return breakpoint(s, 5, 3445, r0);
  case 5:
    s.i___8935 = (0);
    s.lastBrkId = 3446;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3446]) return breakpoint(s, 6, 3446, r0);
  case 6:
  case 1:
    s.lastBrkId = 3447;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3447]) return breakpoint(s, 7, 3447, r0);
  case 7:
    r0 = (s.i___8935 < s.arg0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 3448;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3448]) return breakpoint(s, 8, 3448, r0);
  case 8:
    s.tmp_1 = r0 = s.sin___8927;
    s.tmp_3 = Fx8__P149_mk(s);
    r0 = (s.i___8935 * s.anglePerSlice___8929);
    s.tmp_4 = r0;
    r0 = pxsim.Math_.sin(s.tmp_4);
    s.tmp_3.arg0 = r0;
    s.callLocIdx = 1519; s.pc = 9; return s.tmp_3;
  case 9:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_Array__push(s.tmp_1, s.tmp_2);
    s.lastBrkId = 3449;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3449]) return breakpoint(s, 10, 3449, r0);
  case 10:
    r0 = (s.i___8935 + 1);
    s.i___8935 = (r0);
    { step = 1; continue; }
  case 2:
    s.lastBrkId = 3450;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3450]) return breakpoint(s, 11, 3450, r0);
  case 11:
    r0 = s.sin___8927;
    return leave(s, r0)
  default: oops()
} } }
particles_cacheSin__P2790.info = {"start":594,"length":263,"line":22,"column":4,"endLine":29,"endColumn":5,"fileName":"pxt_modules/game/particlefactories.ts","functionName":"cacheSin","argumentNames":["slices"]}

function particles_cacheSin__P2790_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_cacheSin__P2790, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  sin___8927: undefined,
  anglePerSlice___8929: undefined,
  i___8935: undefined,
  arg0: undefined,
} }





function particles_SprayFactory_setDirection__P2801(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_SprayFactory__C2796_VT)) failedCast(r0);
    s.lastBrkId = 3482;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3482]) return breakpoint(s, 1, 3482, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_4 = particles_toRadians__P4925_mk(s);
    s.tmp_5 = r0 = s.arg1;
    r0 = (s.arg2 >> 1);
    s.tmp_6 = r0;
    r0 = (s.tmp_5 - s.tmp_6);
    s.tmp_4.arg0 = r0;
    s.callLocIdx = 1539; s.pc = 2; return s.tmp_4;
  case 2:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_3 / globals.angleSlice___4919);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 | 0);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["minAngle"] = (s.tmp_1);
    s.lastBrkId = 3483;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3483]) return breakpoint(s, 3, 3483, r0);
  case 3:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_4 = particles_toRadians__P4925_mk(s);
    s.tmp_4.arg0 = s.arg2;
    s.callLocIdx = 1540; s.pc = 4; return s.tmp_4;
  case 4:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_3 / globals.angleSlice___4919);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 | 0);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["spread"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_SprayFactory_setDirection__P2801.info = {"start":3424,"length":228,"line":123,"column":8,"endLine":126,"endColumn":9,"fileName":"pxt_modules/game/particlefactories.ts","functionName":"setDirection","argumentNames":["this","centerDegrees","arcDegrees"]}

function particles_SprayFactory_setDirection__P2801_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_SprayFactory_setDirection__P2801, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function particles_toRadians__P4925(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3459;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3459]) return breakpoint(s, 3, 3459, r0);
  case 3:
    r0 = (s.arg0 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3460;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3460]) return breakpoint(s, 4, 3460, r0);
  case 4:
    s.tmp_3 = Math_abs__P128_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.callLocIdx = 1521; s.pc = 5; return s.tmp_3;
  case 5:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_2 % 360);
    s.tmp_1 = r0;
    r0 = (360 - s.tmp_1);
    s.arg0 = (r0);
    { step = 2; continue; }
  case 1:
    s.lastBrkId = 3461;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3461]) return breakpoint(s, 6, 3461, r0);
  case 6:
    r0 = (s.arg0 % 360);
    s.arg0 = (r0);
  case 2:
    s.lastBrkId = 3462;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3462]) return breakpoint(s, 7, 3462, r0);
  case 7:
    r0 = (s.arg0 * 0.017453292519943295);
    return leave(s, r0)
  default: oops()
} } }
particles_toRadians__P4925.info = {"start":1307,"length":206,"line":45,"column":4,"endLine":52,"endColumn":5,"fileName":"pxt_modules/game/particlefactories.ts","functionName":"toRadians","argumentNames":["degrees"]}

function particles_toRadians__P4925_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_toRadians__P4925, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
} }





function Math_abs__P128(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 248;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[248]) return breakpoint(s, 3, 248, r0);
  case 3:
    r0 = (s.arg0 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = (0 - s.arg0);
    { step = 2; continue; }
  case 1:
    r0 = s.arg0;
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = s.tmp_1;
    return leave(s, r0)
  default: oops()
} } }
Math_abs__P128.info = {"start":16095,"length":77,"line":538,"column":4,"endLine":540,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"abs","argumentNames":["x"]}

function Math_abs__P128_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Math_abs__P128, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function particles_ParticleFactory_constructor__P2793(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_ParticleFactory__C2792_VT)) failedCast(r0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_ParticleFactory_constructor__P2793.info = {"start":1617,"length":78,"line":59,"column":8,"endLine":61,"endColumn":9,"fileName":"pxt_modules/game/particlefactories.ts","functionName":"inline","argumentNames":["this"]}

function particles_ParticleFactory_constructor__P2793_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_ParticleFactory_constructor__P2793, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function particles_ParticleSource_setFactory__P2775(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_ParticleSource__C2756_VT)) failedCast(r0);
    s.lastBrkId = 3392;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3392]) return breakpoint(s, 3, 3392, r0);
  case 3:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3393;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3393]) return breakpoint(s, 4, 3393, r0);
  case 4:
    r0 = (s.arg0).fields["_factory"] = (s.arg1);
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_ParticleSource_setFactory__P2775.info = {"start":8124,"length":114,"line":272,"column":8,"endLine":275,"endColumn":9,"fileName":"pxt_modules/game/particles.ts","functionName":"setFactory","argumentNames":["this","factory"]}

function particles_ParticleSource_setFactory__P2775_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_ParticleSource_setFactory__P2775, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
} }





function particles_ParticleSource_setRate__P2773(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_ParticleSource__C2756_VT)) failedCast(r0);
    s.lastBrkId = 3389;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3389]) return breakpoint(s, 1, 3389, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    r0 = (1000 / s.arg1);
    s.tmp_2 = r0;
    r0 = pxsim.Math_.ceil(s.tmp_2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["period"] = (s.tmp_1);
    s.lastBrkId = 3390;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3390]) return breakpoint(s, 2, 3390, r0);
  case 2:
    r0 = (s.arg0).fields["timer"] = (0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_ParticleSource_setRate__P2773.info = {"start":7802,"length":139,"line":259,"column":8,"endLine":262,"endColumn":9,"fileName":"pxt_modules/game/particles.ts","functionName":"setRate","argumentNames":["this","particlesPerSecond"]}

function particles_ParticleSource_setRate__P2773_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_ParticleSource_setRate__P2773, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function particles_ParticleSource_setAnchor__P2772(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_ParticleSource__C2756_VT)) failedCast(r0);
    s.lastBrkId = 3388;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3388]) return breakpoint(s, 1, 3388, r0);
  case 1:
    r0 = (s.arg0).fields["anchor"] = (s.arg1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_ParticleSource_setAnchor__P2772.info = {"start":7594,"length":79,"line":251,"column":8,"endLine":253,"endColumn":9,"fileName":"pxt_modules/game/particles.ts","functionName":"setAnchor","argumentNames":["this","anchor"]}

function particles_ParticleSource_setAnchor__P2772_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_ParticleSource_setAnchor__P2772, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
} }





function particles_ParticleSource_clear__P2771(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_ParticleSource__C2756_VT)) failedCast(r0);
    s.lastBrkId = 3387;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3387]) return breakpoint(s, 1, 3387, r0);
  case 1:
    r0 = (s.arg0).fields["head"] = (undefined);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_ParticleSource_clear__P2771.info = {"start":7424,"length":54,"line":243,"column":8,"endLine":245,"endColumn":9,"fileName":"pxt_modules/game/particles.ts","functionName":"clear","argumentNames":["this"]}

function particles_ParticleSource_clear__P2771_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_ParticleSource_clear__P2771, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function particles_ParticleSource_destroy__P2770(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_ParticleSource__C2756_VT)) failedCast(r0);
    s.lastBrkId = 3384;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3384]) return breakpoint(s, 1, 3384, r0);
  case 1:
    s.tmp_0 = particles_ParticleSource_enabled__P2769_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = false;
    s.callLocIdx = 1478; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 3385;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3385]) return breakpoint(s, 3, 3385, r0);
  case 3:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["pFlags"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 | 2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["pFlags"] = (s.tmp_1);
    s.lastBrkId = 3386;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3386]) return breakpoint(s, 4, 3386, r0);
  case 4:
    s.tmp_0 = particles_ParticleSource__prune__P2764_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1479; s.pc = 5; return s.tmp_0;
  case 5:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_ParticleSource_destroy__P2770.info = {"start":7094,"length":240,"line":233,"column":8,"endLine":238,"endColumn":9,"fileName":"pxt_modules/game/particles.ts","functionName":"destroy","argumentNames":["this"]}

function particles_ParticleSource_destroy__P2770_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_ParticleSource_destroy__P2770, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function particles_ParticleSource_enabled__P2769(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_ParticleSource__C2756_VT)) failedCast(r0);
    s.lastBrkId = 3381;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3381]) return breakpoint(s, 5, 3381, r0);
  case 5:
    s.tmp_1 = r0 = s.arg1;
    s.tmp_3 = particles_ParticleSource_enabled__P2768_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.callLocIdx = 1477; s.pc = 6; return s.tmp_3;
  case 6:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1 !== s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 3382;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3382]) return breakpoint(s, 7, 3382, r0);
  case 7:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    if (!r0) { step = 1; continue; }
    r0 = s.arg0.fields["pFlags"];
    s.tmp_4 = r0;
    r0 = (s.tmp_4 | 1);
    { step = 2; continue; }
  case 1:
    r0 = s.arg0.fields["pFlags"];
    s.tmp_5 = r0;
    r0 = (s.tmp_5 ^ 1);
  case 2:
    // jmp value (already in r0)
    s.tmp_6 = r0;
    r0 = (s.arg0).fields["pFlags"] = (s.tmp_6);
    s.lastBrkId = 3383;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3383]) return breakpoint(s, 8, 3383, r0);
  case 8:
    r0 = (s.arg0).fields["timer"] = (0);
  case 3:
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_ParticleSource_enabled__P2769.info = {"start":6816,"length":214,"line":223,"column":8,"endLine":228,"endColumn":9,"fileName":"pxt_modules/game/particles.ts","functionName":"enabled","argumentNames":["this","v"]}

function particles_ParticleSource_enabled__P2769_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_ParticleSource_enabled__P2769, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function particles_ParticleSource_enabled__P2768(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_ParticleSource__C2756_VT)) failedCast(r0);
    s.lastBrkId = 3380;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3380]) return breakpoint(s, 1, 3380, r0);
  case 1:
    r0 = s.arg0.fields["pFlags"];
    s.tmp_4 = r0;
    r0 = (s.tmp_4 & 1);
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_0);
    return leaveAccessor(s, r0)
  default: oops()
} } }
particles_ParticleSource_enabled__P2768.info = {"start":6622,"length":76,"line":216,"column":8,"endLine":218,"endColumn":9,"fileName":"pxt_modules/game/particles.ts","functionName":"enabled","argumentNames":["this"]}
particles_ParticleSource_enabled__P2768.isGetter = true;

function particles_ParticleSource_enabled__P2768_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_ParticleSource_enabled__P2768, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }





function particles_ParticleSource_setAcceleration__P2765(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_ParticleSource__C2756_VT)) failedCast(r0);
    s.lastBrkId = 3375;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3375]) return breakpoint(s, 1, 3375, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Fx8__P149_mk(s);
    s.tmp_2.arg0 = s.arg1;
    s.callLocIdx = 1475; s.pc = 2; return s.tmp_2;
  case 2:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["ax"] = (s.tmp_1);
    s.lastBrkId = 3376;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3376]) return breakpoint(s, 3, 3376, r0);
  case 3:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Fx8__P149_mk(s);
    s.tmp_2.arg0 = s.arg2;
    s.callLocIdx = 1476; s.pc = 4; return s.tmp_2;
  case 4:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["ay"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_ParticleSource_setAcceleration__P2765.info = {"start":6026,"length":113,"line":194,"column":8,"endLine":197,"endColumn":9,"fileName":"pxt_modules/game/particles.ts","functionName":"setAcceleration","argumentNames":["this","ax","ay"]}

function particles_ParticleSource_setAcceleration__P2765_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_ParticleSource_setAcceleration__P2765, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function sprites_BaseSprite_constructor__P1888(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_BaseSprite__C1886_VT)) failedCast(r0);
    s.lastBrkId = 986;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[986]) return breakpoint(s, 1, 986, r0);
  case 1:
    s.tmp_0 = sprites_BaseSprite_z__P1891_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.callLocIdx = 178; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 987;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[987]) return breakpoint(s, 3, 987, r0);
  case 3:
    s.tmp_0 = scene_Scene_addSprite__P2521_mk(s);
    s.tmp_1 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 179; s.pc = 5; return s.tmp_1;
  case 5:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = s.arg0;
    s.callLocIdx = 180; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
sprites_BaseSprite_constructor__P1888.info = {"start":344,"length":170,"line":15,"column":8,"endLine":20,"endColumn":9,"fileName":"pxt_modules/game/basesprite.ts","functionName":"inline","argumentNames":["this","z"]}

function sprites_BaseSprite_constructor__P1888_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_BaseSprite_constructor__P1888, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function scene_Scene_addSprite__P2521(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_Scene__C2496_VT)) failedCast(r0);
    s.lastBrkId = 2305;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2305]) return breakpoint(s, 1, 2305, r0);
  case 1:
    r0 = s.arg0.fields["allSprites"];
    s.tmp_0 = r0;
    r0 = pxsim_Array__push(s.tmp_0, s.arg1);
    s.lastBrkId = 2306;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2306]) return breakpoint(s, 2, 2306, r0);
  case 2:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["spriteNextId"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["spriteNextId"] = (s.tmp_1);
    s.tmp_3 = if_id_2_mk(s);
    s.tmp_3.arg0 = s.arg1;
    s.tmp_3.arg1 = s.tmp_2;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapSetByString(s.tmp_3.arg0, "id", s.tmp_3.arg1);
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["set/id"];
      if (s.tmp_3.fn === null) { s.tmp_3.arg0.fields["id"] = s.tmp_3.arg1; }
      else if (s.tmp_3.fn === undefined) { failedCast(s.tmp_3.arg0) } 
     else { s.callLocIdx = 940; s.pc = 3; return s.tmp_3; }
    }
  case 3:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_Scene_addSprite__P2521.info = {"start":6859,"length":128,"line":193,"column":8,"endLine":196,"endColumn":9,"fileName":"pxt_modules/game/scene.ts","functionName":"addSprite","argumentNames":["this","sprite"]}

function scene_Scene_addSprite__P2521_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Scene_addSprite__P2521, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function sprites_BaseSprite_z__P1891(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_BaseSprite__C1886_VT)) failedCast(r0);
    s.lastBrkId = 990;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[990]) return breakpoint(s, 3, 990, r0);
  case 3:
    r0 = s.arg0.fields["_z"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 !== s.arg1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 991;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[991]) return breakpoint(s, 4, 991, r0);
  case 4:
    r0 = (s.arg0).fields["_z"] = (s.arg1);
    s.lastBrkId = 992;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[992]) return breakpoint(s, 5, 992, r0);
  case 5:
    s.tmp_1 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 181; s.pc = 6; return s.tmp_1;
  case 6:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = s.tmp_0.fields["flags"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 | 1);
    s.tmp_2 = r0;
    r0 = (s.tmp_0).fields["flags"] = (s.tmp_2);
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
sprites_BaseSprite_z__P1891.info = {"start":656,"length":174,"line":30,"column":8,"endLine":35,"endColumn":9,"fileName":"pxt_modules/game/basesprite.ts","functionName":"z","argumentNames":["this","v"]}

function sprites_BaseSprite_z__P1891_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_BaseSprite_z__P1891, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function sprites_BaseSprite_z__P1890(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_BaseSprite__C1886_VT)) failedCast(r0);
    s.lastBrkId = 989;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[989]) return breakpoint(s, 1, 989, r0);
  case 1:
    r0 = s.arg0.fields["_z"];
    return leaveAccessor(s, r0)
  default: oops()
} } }
sprites_BaseSprite_z__P1890.info = {"start":591,"length":55,"line":26,"column":8,"endLine":28,"endColumn":9,"fileName":"pxt_modules/game/basesprite.ts","functionName":"z","argumentNames":["this"]}
sprites_BaseSprite_z__P1890.isGetter = true;

function sprites_BaseSprite_z__P1890_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_BaseSprite_z__P1890, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function helpers_arrayShift__P102(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 44;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[44]) return breakpoint(s, 1, 44, r0);
  case 1:
    r0 = pxsim_Array_.removeAt(s.arg0, 0);
    return leave(s, r0)
  default: oops()
} } }
helpers_arrayShift__P102.info = {"start":4045,"length":82,"line":153,"column":4,"endLine":155,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"arrayShift","argumentNames":["arr"]}

function helpers_arrayShift__P102_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_arrayShift__P102, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function particles_SprayFactory_setSpeed__P2800(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_SprayFactory__C2796_VT)) failedCast(r0);
    s.lastBrkId = 3481;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3481]) return breakpoint(s, 1, 3481, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Fx8__P149_mk(s);
    s.tmp_2.arg0 = s.arg1;
    s.callLocIdx = 1538; s.pc = 2; return s.tmp_2;
  case 2:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["speed"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_SprayFactory_setSpeed__P2800.info = {"start":3322,"length":92,"line":119,"column":8,"endLine":121,"endColumn":9,"fileName":"pxt_modules/game/particlefactories.ts","functionName":"setSpeed","argumentNames":["this","pixelsPerSecond"]}

function particles_SprayFactory_setSpeed__P2800_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_SprayFactory_setSpeed__P2800, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function particles_ConfettiFactory_constructor__P2824(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.confetti___10078 = undefined;
    s.i___10094 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_ConfettiFactory__C2823_VT)) failedCast(r0);
    s.lastBrkId = 3509;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3509]) return breakpoint(s, 3, 3509, r0);
  case 3:
    r0 = pxsim_Array__mk();
    s.tmp_0 = r0;
    r0 = pxsim.image.ofBuffer(_hex10081);
    s.tmp_1 = r0;
    r0 = pxsim_Array__push(s.tmp_0, s.tmp_1);
    r0 = pxsim.image.ofBuffer(_hex10083);
    s.tmp_2 = r0;
    r0 = pxsim_Array__push(s.tmp_0, s.tmp_2);
    r0 = pxsim.image.ofBuffer(_hex10085);
    s.tmp_3 = r0;
    r0 = pxsim_Array__push(s.tmp_0, s.tmp_3);
    r0 = pxsim.image.ofBuffer(_hex10087);
    s.tmp_4 = r0;
    r0 = pxsim_Array__push(s.tmp_0, s.tmp_4);
    r0 = pxsim.image.ofBuffer(_hex10089);
    s.tmp_5 = r0;
    r0 = pxsim_Array__push(s.tmp_0, s.tmp_5);
    s.confetti___10078 = (s.tmp_0);
    s.lastBrkId = 3510;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3510]) return breakpoint(s, 4, 3510, r0);
  case 4:
    s.tmp_0 = particles_ShapeFactory_constructor__P2819_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.tmp_0.arg2 = s.arg2;
    r0 = pxsim_Array__getAt(s.confetti___10078, 0);
    s.tmp_0.arg3 = r0;
    s.callLocIdx = 1563; s.pc = 5; return s.tmp_0;
  case 5:
    r0 = s.retval;
    s.lastBrkId = 3511;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3511]) return breakpoint(s, 6, 3511, r0);
  case 6:
    s.i___10094 = (1);
    s.lastBrkId = 3512;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3512]) return breakpoint(s, 7, 3512, r0);
  case 7:
  case 1:
    s.lastBrkId = 3513;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3513]) return breakpoint(s, 8, 3513, r0);
  case 8:
    s.tmp_1 = r0 = s.i___10094;
    r0 = pxsim_Array__length(s.confetti___10078);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 3514;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3514]) return breakpoint(s, 9, 3514, r0);
  case 9:
    s.tmp_3 = particles_ShapeFactory_addShape__P2820_mk(s);
    s.tmp_3.arg0 = s.arg0;
    r0 = pxsim_Array__getAt(s.confetti___10078, s.i___10094);
    s.tmp_3.arg1 = r0;
    s.callLocIdx = 1564; s.pc = 10; return s.tmp_3;
  case 10:
    r0 = s.retval;
    s.lastBrkId = 3515;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3515]) return breakpoint(s, 11, 3515, r0);
  case 11:
    r0 = (s.i___10094 + 1);
    s.i___10094 = (r0);
    { step = 1; continue; }
  case 2:
    s.lastBrkId = 3516;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3516]) return breakpoint(s, 12, 3516, r0);
  case 12:
    r0 = (s.arg0).fields["minLifespan"] = (1000);
    s.lastBrkId = 3517;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3517]) return breakpoint(s, 13, 3517, r0);
  case 13:
    r0 = (s.arg0).fields["maxLifespan"] = (4500);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_ConfettiFactory_constructor__P2824.info = {"start":7755,"length":706,"line":247,"column":8,"endLine":274,"endColumn":9,"fileName":"pxt_modules/game/particlefactories.ts","functionName":"inline","argumentNames":["this","xRange","yRange"]}

function particles_ConfettiFactory_constructor__P2824_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_ConfettiFactory_constructor__P2824, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  confetti___10078: undefined,
  i___10094: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }

const _hex10081 = pxsim.BufferMethods.createBufferFromHex("87040100010000000f000000")
const _hex10083 = pxsim.BufferMethods.createBufferFromHex("8704010002000000ff000000")
const _hex10085 = pxsim.BufferMethods.createBufferFromHex("87040200010000000f0000000f000000")
const _hex10087 = pxsim.BufferMethods.createBufferFromHex("8704020002000000ff0000000f000000")
const _hex10089 = pxsim.BufferMethods.createBufferFromHex("87040200020000000f000000ff000000")




function particles_ShapeFactory_addShape__P2820(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_ShapeFactory__C2818_VT)) failedCast(r0);
    s.lastBrkId = 3501;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3501]) return breakpoint(s, 3, 3501, r0);
  case 3:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3502;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3502]) return breakpoint(s, 4, 3502, r0);
  case 4:
    r0 = s.arg0.fields["sources"];
    s.tmp_0 = r0;
    r0 = pxsim_Array__push(s.tmp_0, s.arg1);
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_ShapeFactory_addShape__P2820.info = {"start":7079,"length":83,"line":225,"column":8,"endLine":227,"endColumn":9,"fileName":"pxt_modules/game/particlefactories.ts","functionName":"addShape","argumentNames":["this","shape"]}

function particles_ShapeFactory_addShape__P2820_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_ShapeFactory_addShape__P2820, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function particles_ShapeFactory_constructor__P2819(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_ShapeFactory__C2818_VT)) failedCast(r0);
    s.lastBrkId = 3497;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3497]) return breakpoint(s, 1, 3497, r0);
  case 1:
    s.tmp_0 = particles_AreaFactory_constructor__P2807_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.tmp_0.arg2 = s.arg2;
    s.tmp_0.arg3 = undefined;
    s.tmp_0.arg4 = undefined;
    s.callLocIdx = 1553; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 3498;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3498]) return breakpoint(s, 3, 3498, r0);
  case 3:
    r0 = pxsim_Array__mk();
    s.tmp_0 = r0;
    r0 = pxsim_Array__push(s.tmp_0, s.arg3);
    r0 = (s.arg0).fields["sources"] = (s.tmp_0);
    s.lastBrkId = 3499;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3499]) return breakpoint(s, 4, 3499, r0);
  case 4:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Fx8__P149_mk(s);
    r0 = pxsim_ImageMethods.width(s.arg3);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 >> 1);
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 1554; s.pc = 5; return s.tmp_2;
  case 5:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["ox"] = (s.tmp_1);
    s.lastBrkId = 3500;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3500]) return breakpoint(s, 6, 3500, r0);
  case 6:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Fx8__P149_mk(s);
    r0 = pxsim_ImageMethods.height(s.arg3);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 >> 1);
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 1555; s.pc = 7; return s.tmp_2;
  case 7:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["oy"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_ShapeFactory_constructor__P2819.info = {"start":6668,"length":285,"line":212,"column":8,"endLine":219,"endColumn":9,"fileName":"pxt_modules/game/particlefactories.ts","functionName":"inline","argumentNames":["this","xRange","yRange","source"]}

function particles_ShapeFactory_constructor__P2819_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_ShapeFactory_constructor__P2819, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function particles_AreaFactory_constructor__P2807(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_AreaFactory__C2802_VT)) failedCast(r0);
    s.lastBrkId = 3484;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3484]) return breakpoint(s, 5, 3484, r0);
  case 5:
    s.tmp_0 = particles_SprayFactory_constructor__P2797_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 40;
    s.tmp_0.arg2 = 0;
    s.tmp_0.arg3 = 90;
    s.callLocIdx = 1541; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    s.lastBrkId = 3485;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3485]) return breakpoint(s, 7, 3485, r0);
  case 7:
    r0 = (s.arg0).fields["xRange"] = (s.arg1);
    s.lastBrkId = 3486;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3486]) return breakpoint(s, 8, 3486, r0);
  case 8:
    r0 = (s.arg0).fields["yRange"] = (s.arg2);
    s.lastBrkId = 3487;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3487]) return breakpoint(s, 9, 3487, r0);
  case 9:
    r0 = pxsim_numops_toBoolDecr(s.arg3);
    if (!r0) { step = 1; continue; }
    r0 = s.arg3;
    { step = 2; continue; }
  case 1:
    r0 = 150;
  case 2:
    // jmp value (already in r0)
    s.tmp_0 = r0;
    r0 = (s.arg0).fields["minLifespan"] = (s.tmp_0);
    s.lastBrkId = 3488;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3488]) return breakpoint(s, 10, 3488, r0);
  case 10:
    r0 = pxsim_numops_toBoolDecr(s.arg4);
    if (!r0) { step = 3; continue; }
    r0 = s.arg4;
    { step = 4; continue; }
  case 3:
    r0 = 850;
  case 4:
    // jmp value (already in r0)
    s.tmp_0 = r0;
    r0 = (s.arg0).fields["maxLifespan"] = (s.tmp_0);
    s.lastBrkId = 3489;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3489]) return breakpoint(s, 11, 3489, r0);
  case 11:
    r0 = pxsim_pxtcore_mkClassInstance(Math_FastRandom__C2664_VT);
    s.tmp_0 = r0;
    s.tmp_1 = Math_FastRandom_constructor__P2666_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = undefined;
    s.callLocIdx = 1542; s.pc = 12; return s.tmp_1;
  case 12:
    r0 = s.retval;
    r0 = (s.arg0).fields["galois"] = (s.tmp_0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_AreaFactory_constructor__P2807.info = {"start":3950,"length":374,"line":139,"column":8,"endLine":146,"endColumn":9,"fileName":"pxt_modules/game/particlefactories.ts","functionName":"inline","argumentNames":["this","xRange","yRange","minLifespan","maxLifespan"]}

function particles_AreaFactory_constructor__P2807_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_AreaFactory_constructor__P2807, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
} }





function effects_ScreenEffect_constructor__P2872(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, effects_ScreenEffect__C2871_VT)) failedCast(r0);
    s.lastBrkId = 3536;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3536]) return breakpoint(s, 1, 3536, r0);
  case 1:
    s.tmp_0 = effects_ParticleEffect_constructor__P2868_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.tmp_0.arg2 = s.arg3;
    s.tmp_0.arg3 = s.arg4;
    s.callLocIdx = 1573; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 3537;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3537]) return breakpoint(s, 3, 3537, r0);
  case 3:
    r0 = (s.arg0).fields["sceneDefaultRate"] = (s.arg2);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
effects_ScreenEffect_constructor__P2872.info = {"start":2911,"length":332,"line":81,"column":8,"endLine":85,"endColumn":9,"fileName":"pxt_modules/game/particleeffects.ts","functionName":"inline","argumentNames":["this","anchorDefault","sceneDefault","defaultLifespan","sourceFactory"]}

function effects_ScreenEffect_constructor__P2872_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: effects_ScreenEffect_constructor__P2872, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
} }





function effects_ParticleEffect_constructor__P2868(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, effects_ParticleEffect__C2867_VT)) failedCast(r0);
    s.lastBrkId = 3518;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3518]) return breakpoint(s, 1, 3518, r0);
  case 1:
    r0 = (s.arg0).fields["sourceFactory"] = (s.arg3);
    s.lastBrkId = 3519;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3519]) return breakpoint(s, 2, 3519, r0);
  case 2:
    r0 = (s.arg0).fields["defaultRate"] = (s.arg1);
    s.lastBrkId = 3520;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3520]) return breakpoint(s, 3, 3520, r0);
  case 3:
    r0 = (s.arg0).fields["defaultLifespan"] = (s.arg2);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
effects_ParticleEffect_constructor__P2868.info = {"start":384,"length":364,"line":13,"column":8,"endLine":18,"endColumn":9,"fileName":"pxt_modules/game/particleeffects.ts","functionName":"inline","argumentNames":["this","defaultParticlesPerSecond","defaultLifespan","sourceFactory"]}

function effects_ParticleEffect_constructor__P2868_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: effects_ParticleEffect_constructor__P2868, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function game_over__P2619(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.scoreInfo___10215 = undefined;
    s.highScore___10219 = undefined;
    s.overDialog___10248 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 2735;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2735]) return breakpoint(s, 18, 2735, r0);
  case 18:
    s.tmp_0 = game_init__P4564_mk(s);
    s.tmp_0.arg0 = undefined;
    s.callLocIdx = 1121; s.pc = 19; return s.tmp_0;
  case 19:
    r0 = s.retval;
    s.lastBrkId = 2736;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2736]) return breakpoint(s, 20, 2736, r0);
  case 20:
    r0 = pxsim_numops_toBoolDecr(globals.__isOver___4563);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2737;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2737]) return breakpoint(s, 21, 2737, r0);
  case 21:
    { step = 17; continue; }
  case 1:
  case 2:
    s.lastBrkId = 2738;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2738]) return breakpoint(s, 22, 2738, r0);
  case 22:
    globals.__isOver___4563 = (true);
    s.lastBrkId = 2739;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2739]) return breakpoint(s, 23, 2739, r0);
  case 23:
    r0 = pxsim_numops_toBoolDecr(globals.__gameOverHandler___4561);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2740;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2740]) return breakpoint(s, 24, 2740, r0);
  case 24:
    s.tmp_0 = lambda_2_mk(s);
    s.tmp_0.argL = globals.__gameOverHandler___4561;
    s.tmp_0.arg0 = s.arg0;
    setupLambda(s.tmp_0, s.tmp_0.argL);
    s.callLocIdx = 1122; s.pc = 25; return s.tmp_0;
  case 25:
    r0 = s.retval;
    { step = 16; continue; }
  case 3:
    s.lastBrkId = 2741;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2741]) return breakpoint(s, 26, 2741, r0);
  case 26:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 6; continue; }
    s.lastBrkId = 2742;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2742]) return breakpoint(s, 27, 2742, r0);
  case 27:
    r0 = pxsim_numops_toBoolDecr(s.arg0);
    if (!r0) { step = 4; continue; }
    r0 = globals.winEffect___2607;
    { step = 5; continue; }
  case 4:
    r0 = globals.loseEffect___2608;
  case 5:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    s.arg1 = (s.tmp_2);
  case 6:
  case 7:
    s.lastBrkId = 2743;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2743]) return breakpoint(s, 28, 2743, r0);
  case 28:
    s.tmp_0 = info_PlayerInfo_getState__P2322_mk(s);
    s.tmp_0.arg0 = globals.player1___2340;
    s.callLocIdx = 1123; s.pc = 29; return s.tmp_0;
  case 29:
    r0 = s.retval;
    s.scoreInfo___10215 = (r0);
    s.lastBrkId = 2744;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2744]) return breakpoint(s, 30, 2744, r0);
  case 30:
    s.tmp_0 = info_highScore__P2288_mk(s);
    s.callLocIdx = 1124; s.pc = 31; return s.tmp_0;
  case 31:
    r0 = s.retval;
    s.highScore___10219 = (r0);
    s.lastBrkId = 2745;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2745]) return breakpoint(s, 32, 2745, r0);
  case 32:
    r0 = s.scoreInfo___10215.fields["score"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > s.highScore___10219);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 8; continue; }
    s.lastBrkId = 2746;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2746]) return breakpoint(s, 33, 2746, r0);
  case 33:
    s.tmp_2 = info_saveHighScore__P2285_mk(s);
    s.callLocIdx = 1125; s.pc = 34; return s.tmp_2;
  case 34:
    r0 = s.retval;
  case 8:
  case 9:
    s.lastBrkId = 2747;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2747]) return breakpoint(s, 35, 2747, r0);
  case 35:
  case 10:
    s.lastBrkId = 2748;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2748]) return breakpoint(s, 36, 2748, r0);
  case 36:
    s.tmp_0 = r0 = globals._sceneStack___4557;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 11; continue; }
    r0 = s.tmp_0;
    { step = 12; continue; }
  case 11:
    r0 = pxsim_Array__length(globals._sceneStack___4557);
  case 12:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 13; continue; }
    s.lastBrkId = 2749;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2749]) return breakpoint(s, 37, 2749, r0);
  case 37:
    s.tmp_2 = scene_Scene_destroy__P2522_mk(s);
    s.tmp_2.arg0 = globals._scene___4556;
    s.callLocIdx = 1126; s.pc = 38; return s.tmp_2;
  case 38:
    r0 = s.retval;
    s.lastBrkId = 2750;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2750]) return breakpoint(s, 39, 2750, r0);
  case 39:
    s.tmp_0 = game_popScene__P2614_mk(s);
    s.callLocIdx = 1127; s.pc = 40; return s.tmp_0;
  case 40:
    r0 = s.retval;
    { step = 10; continue; }
  case 13:
    s.lastBrkId = 2751;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2751]) return breakpoint(s, 41, 2751, r0);
  case 41:
    s.tmp_0 = game_pushScene__P2613_mk(s);
    s.callLocIdx = 1128; s.pc = 42; return s.tmp_0;
  case 42:
    r0 = s.retval;
    s.lastBrkId = 2752;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2752]) return breakpoint(s, 43, 2752, r0);
  case 43:
    s.tmp_0 = scene_setBackgroundImage__P2536_mk(s);
    r0 = pxsim_ImageMethods.clone(globals.screen___1827);
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 1129; s.pc = 44; return s.tmp_0;
  case 44:
    r0 = s.retval;
    s.lastBrkId = 2753;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2753]) return breakpoint(s, 45, 2753, r0);
  case 45:
    r0 = pxsim_numops_toBoolDecr(s.arg0);
    if (!r0) { step = 14; continue; }
    s.lastBrkId = 2754;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2754]) return breakpoint(s, 46, 2754, r0);
  case 46:
    s.tmp_0 = music_Melody_play__P1617_mk(s);
    s.tmp_0.arg0 = globals.winSound___4555;
    s.tmp_0.arg1 = 255;
    s.callLocIdx = 1130; s.pc = 47; return s.tmp_0;
  case 47:
    r0 = s.retval;
    { step = 15; continue; }
  case 14:
    s.lastBrkId = 2755;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2755]) return breakpoint(s, 48, 2755, r0);
  case 48:
    s.tmp_0 = music_Melody_play__P1617_mk(s);
    s.tmp_0.arg0 = globals.loseSound___4553;
    s.tmp_0.arg1 = 255;
    s.callLocIdx = 1131; s.pc = 49; return s.tmp_0;
  case 49:
    r0 = s.retval;
  case 15:
    s.lastBrkId = 2756;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2756]) return breakpoint(s, 50, 2756, r0);
  case 50:
    s.tmp_0 = if_startScreenEffect_1_mk(s);
    s.tmp_0.arg0 = s.arg1;
    if (!s.tmp_0.arg0.vtable.iface) {
      setupLambda(s.tmp_0, pxsim_pxtrt.mapGetByString(s.tmp_0.arg0, "startScreenEffect"), 1);
      s.callLocIdx = 1132; s.pc = 51; return s.tmp_0;
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["startScreenEffect"];
      if (s.tmp_0.fn == null) { setupLambda(s.tmp_0, s.tmp_0.arg0.fields["startScreenEffect"], 1); s.callLocIdx = 1132; s.pc = 51; return s.tmp_0; }
      else if (s.tmp_0.fn.isGetter) { s.tmp_0.stage2Call = true; s.callLocIdx = 1132; s.pc = 51; return s.tmp_0;; }
     else { s.callLocIdx = 1132; s.pc = 51; return s.tmp_0; }
    }
  case 51:
    r0 = s.retval;
    s.lastBrkId = 2757;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2757]) return breakpoint(s, 52, 2757, r0);
  case 52:
    s.tmp_0 = pause__P411_mk(s);
    s.tmp_0.arg0 = 400;
    s.callLocIdx = 1133; s.pc = 53; return s.tmp_0;
  case 53:
    r0 = s.retval;
    s.lastBrkId = 2758;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2758]) return breakpoint(s, 54, 2758, r0);
  case 54:
    r0 = pxsim_pxtcore_mkClassInstance(game_GameOverDialog__C2593_VT);
    s.tmp_0 = r0;
    s.tmp_1 = game_GameOverDialog_constructor__P2594_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = s.arg0;
    r0 = s.scoreInfo___10215.fields["score"];
    s.tmp_1.arg2 = r0;
    s.tmp_1.arg3 = s.highScore___10219;
    s.callLocIdx = 1134; s.pc = 55; return s.tmp_1;
  case 55:
    r0 = s.retval;
    s.overDialog___10248 = (s.tmp_0);
    s.lastBrkId = 2759;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2759]) return breakpoint(s, 56, 2759, r0);
  case 56:
    r0 = pxsim_pxtcore_mkAction(1, game_over_inline__P10258);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.overDialog___10248);
    s.tmp_1 = scene_createRenderable__P2460_mk(s);
    s.tmp_1.arg0 = 100;
    s.tmp_1.arg1 = s.tmp_0;
    s.tmp_1.arg2 = undefined;
    s.callLocIdx = 1135; s.pc = 57; return s.tmp_1;
  case 57:
    r0 = s.retval;
    s.lastBrkId = 2762;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2762]) return breakpoint(s, 58, 2762, r0);
  case 58:
    s.tmp_0 = pause__P411_mk(s);
    s.tmp_0.arg0 = 500;
    s.callLocIdx = 1136; s.pc = 59; return s.tmp_0;
  case 59:
    r0 = s.retval;
    s.lastBrkId = 2763;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2763]) return breakpoint(s, 60, 2763, r0);
  case 60:
    s.tmp_0 = game_GameOverDialog_displayCursor__P2595_mk(s);
    s.tmp_0.arg0 = s.overDialog___10248;
    s.callLocIdx = 1137; s.pc = 61; return s.tmp_0;
  case 61:
    r0 = s.retval;
    s.lastBrkId = 2764;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2764]) return breakpoint(s, 62, 2764, r0);
  case 62:
    s.tmp_0 = game_waitAnyButton__P2611_mk(s);
    s.callLocIdx = 1138; s.pc = 63; return s.tmp_0;
  case 63:
    r0 = s.retval;
    s.lastBrkId = 2765;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2765]) return breakpoint(s, 64, 2765, r0);
  case 64:
    setupResume(s, 65);
    pxsim.control.reset();
    checkResumeConsumed();
    return;
  case 65:
    r0 = s.retval;
  case 16:
  case 17:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_over__P2619.info = {"start":5382,"length":1774,"line":181,"column":4,"endLine":232,"endColumn":5,"fileName":"pxt_modules/game/game.ts","functionName":"over","argumentNames":["win","effect"]}

function game_over__P2619_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_over__P2619, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  scoreInfo___10215: undefined,
  highScore___10219: undefined,
  overDialog___10248: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function game_over_inline__P10258(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 2760;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2760]) return breakpoint(s, 1, 2760, r0);
  case 1:
    s.tmp_0 = game_GameOverDialog__C2593_v0_1_mk(s);
    s.tmp_0.arg0 = s.caps[0];
    if (!checkSubtype(s.tmp_0.arg0, game_GameOverDialog__C2593_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.update;
    s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 2761;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2761]) return breakpoint(s, 3, 2761, r0);
  case 3:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.caps[0].fields["image"];
    s.tmp_1 = r0;
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_4 = r0;
    r0 = s.caps[0].fields["image"];
    s.tmp_6 = r0;
    r0 = pxsim_ImageMethods.height(s.tmp_6);
    s.tmp_5 = r0;
    r0 = (s.tmp_4 - s.tmp_5);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 >> 1);
    s.tmp_2 = r0;
    r0 = pxsim_ImageMethods.drawTransparentImage(s.tmp_0, s.tmp_1, 0, s.tmp_2);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_over_inline__P10258.info = {"start":6721,"length":254,"line":218,"column":48,"endLine":225,"endColumn":13,"fileName":"pxt_modules/game/game.ts","functionName":"inline","argumentNames":["target"]}

function game_over_inline__P10258_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_over_inline__P10258, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  arg0: undefined,
} }





function game_init__P4564(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 2676;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2676]) return breakpoint(s, 13, 2676, r0);
  case 13:
    r0 = pxsim_numops_toBoolDecr(globals._scene___4556);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = s.arg0;
  case 2:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2677;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2677]) return breakpoint(s, 14, 2677, r0);
  case 14:
    r0 = pxsim_pxtcore_mkClassInstance(scene_Scene__C2496_VT);
    s.tmp_3 = r0;
    s.tmp_4 = scene_Scene_constructor__P2517_mk(s);
    s.tmp_4.arg0 = s.tmp_3;
    s.tmp_5 = control_pushEventContext__P407_mk(s);
    s.callLocIdx = 1085; s.pc = 16; return s.tmp_5;
  case 16:
    r0 = s.retval;
    s.tmp_4.arg1 = r0;
    s.tmp_4.arg2 = globals._scene___4556;
    s.callLocIdx = 1086; s.pc = 15; return s.tmp_4;
  case 15:
    r0 = s.retval;
    globals._scene___4556 = (s.tmp_3);
  case 3:
  case 4:
    s.lastBrkId = 2678;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2678]) return breakpoint(s, 17, 2678, r0);
  case 17:
    s.tmp_0 = scene_Scene_init__P2518_mk(s);
    s.tmp_0.arg0 = globals._scene___4556;
    s.callLocIdx = 1087; s.pc = 18; return s.tmp_0;
  case 18:
    r0 = s.retval;
    s.lastBrkId = 2679;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2679]) return breakpoint(s, 19, 2679, r0);
  case 19:
    r0 = pxsim_numops_toBoolDecr(globals.winEffect___2607);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 2680;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2680]) return breakpoint(s, 20, 2680, r0);
  case 20:
    globals.winEffect___2607 = (globals.confetti___2879);
  case 5:
  case 6:
    s.lastBrkId = 2681;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2681]) return breakpoint(s, 21, 2681, r0);
  case 21:
    r0 = pxsim_numops_toBoolDecr(globals.loseEffect___2608);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 2682;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2682]) return breakpoint(s, 22, 2682, r0);
  case 22:
    globals.loseEffect___2608 = (globals.melt___2900);
  case 7:
  case 8:
    s.lastBrkId = 2683;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2683]) return breakpoint(s, 23, 2683, r0);
  case 23:
    r0 = pxsim_numops_toBoolDecr(globals.winSound___4555);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 2684;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2684]) return breakpoint(s, 24, 2684, r0);
  case 24:
    globals.winSound___4555 = (globals.powerUp___1630);
  case 9:
  case 10:
    s.lastBrkId = 2685;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2685]) return breakpoint(s, 25, 2685, r0);
  case 25:
    r0 = pxsim_numops_toBoolDecr(globals.loseSound___4553);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 11; continue; }
    s.lastBrkId = 2686;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2686]) return breakpoint(s, 26, 2686, r0);
  case 26:
    globals.loseSound___4553 = (globals.wawawawaa___1627);
  case 11:
  case 12:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_init__P4564.info = {"start":1202,"length":452,"line":45,"column":4,"endLine":60,"endColumn":5,"fileName":"pxt_modules/game/game.ts","functionName":"init","argumentNames":["forceNewScene"]}

function game_init__P4564_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_init__P4564, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  arg0: undefined,
} }





function melt_inline__P12526(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.rounds___12529 = undefined;
    s.j___12537 = undefined;
    s.x___12542 = undefined;
    s.y___12548 = undefined;
    s.c___12554 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = pxsim_ImageMethods.width(s.arg0);
    s.tmp_1 = r0;
    r0 = pxsim_ImageMethods.height(s.arg0);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 * s.tmp_2);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 >> 5);
    s.rounds___12529 = (r0);
    s.j___12537 = (0);
  case 1:
    r0 = (s.j___12537 < s.rounds___12529);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    s.tmp_1 = Math_FastRandom_randomRange__P2668_mk(s);
    s.tmp_1.arg0 = s.arg1;
    s.tmp_1.arg1 = 0;
    r0 = pxsim_ImageMethods.width(s.arg0);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - 1);
    s.tmp_1.arg2 = r0;
    s.callLocIdx = 54; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    s.x___12542 = (r0);
    s.tmp_0 = Math_FastRandom_randomRange__P2668_mk(s);
    s.tmp_0.arg0 = s.arg1;
    s.tmp_0.arg1 = 0;
    r0 = pxsim_ImageMethods.height(s.arg0);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - 3);
    s.tmp_0.arg2 = r0;
    s.callLocIdx = 55; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.y___12548 = (r0);
    r0 = pxsim_ImageMethods.getPixel(s.arg0, s.x___12542, s.y___12548);
    s.c___12554 = (r0);
    s.tmp_0 = r0 = s.arg0;
    s.tmp_1 = r0 = s.x___12542;
    r0 = (s.y___12548 + 1);
    s.tmp_2 = r0;
    r0 = pxsim_ImageMethods.setPixel(s.tmp_0, s.tmp_1, s.tmp_2, s.c___12554);
    s.tmp_0 = r0 = s.arg0;
    s.tmp_1 = r0 = s.x___12542;
    r0 = (s.y___12548 + 2);
    s.tmp_2 = r0;
    r0 = pxsim_ImageMethods.setPixel(s.tmp_0, s.tmp_1, s.tmp_2, s.c___12554);
    r0 = (s.j___12537 + 1);
    s.j___12537 = (r0);
    { step = 1; continue; }
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
melt_inline__P12526.info = {"start":2652,"length":386,"line":72,"column":45,"endLine":81,"endColumn":5,"fileName":"pxt_modules/game/effects.ts","functionName":"inline","argumentNames":["input","r"]}

function melt_inline__P12526_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: melt_inline__P12526, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  rounds___12529: undefined,
  j___12537: undefined,
  x___12542: undefined,
  y___12548: undefined,
  c___12554: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function scene_Scene_init__P2518(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_Scene__C2496_VT)) failedCast(r0);
    s.lastBrkId = 2272;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2272]) return breakpoint(s, 4, 2272, r0);
  case 4:
    r0 = s.arg0.fields["allSprites"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2273;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2273]) return breakpoint(s, 5, 2273, r0);
  case 5:
    { step = 3; continue; }
  case 1:
  case 2:
    s.lastBrkId = 2274;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2274]) return breakpoint(s, 6, 2274, r0);
  case 6:
    s.tmp_1 = power_poke__P1728_mk(s);
    s.callLocIdx = 920; s.pc = 7; return s.tmp_1;
  case 7:
    r0 = s.retval;
    s.lastBrkId = 2275;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2275]) return breakpoint(s, 8, 2275, r0);
  case 8:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["allSprites"] = (s.tmp_1);
    s.lastBrkId = 2276;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2276]) return breakpoint(s, 9, 2276, r0);
  case 9:
    r0 = (s.arg0).fields["spriteNextId"] = (0);
    s.lastBrkId = 2277;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2277]) return breakpoint(s, 10, 2277, r0);
  case 10:
    r0 = pxsim_pxtcore_mkAction(1, scene_Scene_init_inline__P12592);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    s.tmp_1 = control_EventContext_registerFrameHandler__P401_mk(s);
    r0 = s.arg0.fields["eventContext"];
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = 8;
    s.tmp_1.arg2 = s.tmp_0;
    s.callLocIdx = 923; s.pc = 11; return s.tmp_1;
  case 11:
    r0 = s.retval;
    s.lastBrkId = 2281;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2281]) return breakpoint(s, 12, 2281, r0);
  case 12:
    s.tmp_0 = control_EventContext_registerFrameHandler__P401_mk(s);
    r0 = s.arg0.fields["eventContext"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = 13;
    s.tmp_0.arg2 = controller__moveSprites__P1925;
    s.callLocIdx = 924; s.pc = 13; return s.tmp_0;
  case 13:
    r0 = s.retval;
    s.lastBrkId = 2282;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2282]) return breakpoint(s, 14, 2282, r0);
  case 14:
    r0 = pxsim_pxtcore_mkAction(1, scene_Scene_init_inline__P12615);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    s.tmp_1 = control_EventContext_registerFrameHandler__P401_mk(s);
    r0 = s.arg0.fields["eventContext"];
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = 15;
    s.tmp_1.arg2 = s.tmp_0;
    s.callLocIdx = 926; s.pc = 15; return s.tmp_1;
  case 15:
    r0 = s.retval;
    s.lastBrkId = 2285;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2285]) return breakpoint(s, 16, 2285, r0);
  case 16:
    r0 = pxsim_pxtcore_mkAction(1, scene_Scene_init_inline__P12628);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    s.tmp_1 = control_EventContext_registerFrameHandler__P401_mk(s);
    r0 = s.arg0.fields["eventContext"];
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = 55;
    s.tmp_1.arg2 = s.tmp_0;
    s.callLocIdx = 930; s.pc = 17; return s.tmp_1;
  case 17:
    r0 = s.retval;
    s.lastBrkId = 2291;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2291]) return breakpoint(s, 18, 2291, r0);
  case 18:
    r0 = pxsim_pxtcore_mkAction(1, scene_Scene_init_inline__P12649);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    s.tmp_1 = control_EventContext_registerFrameHandler__P401_mk(s);
    r0 = s.arg0.fields["eventContext"];
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = 90;
    s.tmp_1.arg2 = s.tmp_0;
    s.callLocIdx = 932; s.pc = 19; return s.tmp_1;
  case 19:
    r0 = s.retval;
    s.lastBrkId = 2294;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2294]) return breakpoint(s, 20, 2294, r0);
  case 20:
    r0 = pxsim_pxtcore_mkAction(1, scene_Scene_init_inline__P12657);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    s.tmp_1 = control_EventContext_registerFrameHandler__P401_mk(s);
    r0 = s.arg0.fields["eventContext"];
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = 150;
    s.tmp_1.arg2 = s.tmp_0;
    s.callLocIdx = 936; s.pc = 21; return s.tmp_1;
  case 21:
    r0 = s.retval;
    s.lastBrkId = 2301;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2301]) return breakpoint(s, 22, 2301, r0);
  case 22:
    s.tmp_0 = control_EventContext_registerFrameHandler__P401_mk(s);
    r0 = s.arg0.fields["eventContext"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = 200;
    s.tmp_0.arg2 = control___screen_update__P1788;
    s.callLocIdx = 937; s.pc = 23; return s.tmp_0;
  case 23:
    r0 = s.retval;
    s.lastBrkId = 2302;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2302]) return breakpoint(s, 24, 2302, r0);
  case 24:
    r0 = pxsim_pxtcore_mkAction(1, scene_Scene_init_inline__P12686);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    s.tmp_1 = helpers_arrayForEach__P109_mk(s);
    s.tmp_1.arg0 = globals.scene_Scene_initializers___2516;
    s.tmp_1.arg1 = s.tmp_0;
    s.callLocIdx = 939; s.pc = 25; return s.tmp_1;
  case 25:
    r0 = s.retval;
  case 3:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_Scene_init__P2518.info = {"start":4168,"length":2477,"line":122,"column":8,"endLine":180,"endColumn":9,"fileName":"pxt_modules/game/scene.ts","functionName":"init","argumentNames":["this"]}

function scene_Scene_init__P2518_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Scene_init__P2518, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function scene_Scene_init_inline__P12592(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 2278;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2278]) return breakpoint(s, 1, 2278, r0);
  case 1:
    s.tmp_0 = r0 = s.caps[0];
    r0 = s.tmp_0.fields["_millis"];
    s.tmp_2 = r0;
    r0 = s.caps[0].fields["eventContext"];
    r0 = r0.fields["deltaTimeMillis"];
    s.tmp_3 = r0;
    r0 = (s.tmp_2 + s.tmp_3);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_millis"] = (s.tmp_1);
    s.lastBrkId = 2279;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2279]) return breakpoint(s, 2, 2279, r0);
  case 2:
    s.lastBrkId = 2280;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2280]) return breakpoint(s, 3, 2280, r0);
  case 3:
    s.tmp_0 = controller___update__P1953_mk(s);
    s.tmp_1 = control_EventContext_deltaTime__P398_mk(s);
    r0 = s.caps[0].fields["eventContext"];
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 921; s.pc = 5; return s.tmp_1;
  case 5:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 922; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_Scene_init_inline__P12592.info = {"start":4458,"length":217,"line":129,"column":72,"endLine":133,"endColumn":13,"fileName":"pxt_modules/game/scene.ts","functionName":"inline","argumentNames":[]}

function scene_Scene_init_inline__P12592_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Scene_init_inline__P12592, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
} }





function scene_Scene_init_inline__P12615(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 2283;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2283]) return breakpoint(s, 1, 2283, r0);
  case 1:
    s.lastBrkId = 2284;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2284]) return breakpoint(s, 2, 2284, r0);
  case 2:
    s.tmp_0 = PhysicsEngine__C2238_v4_2_mk(s);
    r0 = s.caps[0].fields["physicsEngine"];
    s.tmp_0.arg0 = r0;
    s.tmp_1 = control_EventContext_deltaTime__P398_mk(s);
    r0 = s.caps[0].fields["eventContext"];
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 925; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    if (!checkSubtype(s.tmp_0.arg0, PhysicsEngine__C2238_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.move;
    s.pc = 3; return s.tmp_0;
  case 3:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_Scene_init_inline__P12615.info = {"start":4970,"length":159,"line":138,"column":69,"endLine":141,"endColumn":13,"fileName":"pxt_modules/game/scene.ts","functionName":"inline","argumentNames":[]}

function scene_Scene_init_inline__P12615_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Scene_init_inline__P12615, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
} }





function scene_Scene_init_inline__P12628(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.dt___12629 = undefined;
    s.s___12637 = undefined;
    s.unnamed1654___U2 = undefined;
    s.unnamed1655___U3 = undefined;
    s.lastBrkId = 2286;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2286]) return breakpoint(s, 3, 2286, r0);
  case 3:
    s.tmp_0 = control_EventContext_deltaTime__P398_mk(s);
    r0 = s.caps[0].fields["eventContext"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 927; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.dt___12629 = (r0);
    s.lastBrkId = 2287;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2287]) return breakpoint(s, 5, 2287, r0);
  case 5:
    s.tmp_0 = scene_Camera_update__P2453_mk(s);
    r0 = s.caps[0].fields["camera"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 928; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    s.lastBrkId = 2288;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2288]) return breakpoint(s, 7, 2288, r0);
  case 7:
    s.s___12637 = (undefined);
    r0 = s.caps[0].fields["allSprites"];
    s.unnamed1654___U2 = (r0);
    s.unnamed1655___U3 = (0);
    s.lastBrkId = 2289;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2289]) return breakpoint(s, 8, 2289, r0);
  case 8:
  case 1:
    s.tmp_0 = r0 = s.unnamed1655___U3;
    r0 = pxsim_Array__length(s.unnamed1654___U2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 2; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1654___U2, s.unnamed1655___U3);
    s.s___12637 = (r0);
    s.lastBrkId = 2290;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2290]) return breakpoint(s, 9, 2290, r0);
  case 9:
    s.tmp_2 = if___update_3_mk(s);
    s.tmp_2.arg0 = s.s___12637;
    r0 = s.caps[0].fields["camera"];
    s.tmp_2.arg1 = r0;
    s.tmp_2.arg2 = s.dt___12629;
    if (!s.tmp_2.arg0.vtable.iface) {
      setupLambda(s.tmp_2, pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "__update"), 3);
      s.callLocIdx = 929; s.pc = 10; return s.tmp_2;
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["__update"];
      if (s.tmp_2.fn == null) { setupLambda(s.tmp_2, s.tmp_2.arg0.fields["__update"], 3); s.callLocIdx = 929; s.pc = 10; return s.tmp_2; }
      else if (s.tmp_2.fn.isGetter) { s.tmp_2.stage2Call = true; s.callLocIdx = 929; s.pc = 10; return s.tmp_2;; }
     else { s.callLocIdx = 929; s.pc = 10; return s.tmp_2; }
    }
  case 10:
    r0 = s.retval;
    r0 = (s.unnamed1655___U3 + 1);
    s.unnamed1655___U3 = (r0);
    { step = 1; continue; }
  case 2:
    s.unnamed1654___U2 = (undefined);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_Scene_init_inline__P12628.info = {"start":5318,"length":214,"line":147,"column":79,"endLine":153,"endColumn":13,"fileName":"pxt_modules/game/scene.ts","functionName":"inline","argumentNames":[]}

function scene_Scene_init_inline__P12628_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Scene_init_inline__P12628, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  dt___12629: undefined,
  s___12637: undefined,
  unnamed1654___U2: undefined,
  unnamed1655___U3: undefined,
} }





function scene_Scene_init_inline__P12649(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 2292;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2292]) return breakpoint(s, 1, 2292, r0);
  case 1:
    s.lastBrkId = 2293;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2293]) return breakpoint(s, 2, 2293, r0);
  case 2:
    s.tmp_0 = scene_Scene_render__P2523_mk(s);
    s.tmp_0.arg0 = s.caps[0];
    s.callLocIdx = 931; s.pc = 3; return s.tmp_0;
  case 3:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_Scene_init_inline__P12649.info = {"start":5673,"length":109,"line":158,"column":76,"endLine":161,"endColumn":13,"fileName":"pxt_modules/game/scene.ts","functionName":"inline","argumentNames":[]}

function scene_Scene_init_inline__P12649_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Scene_init_inline__P12649, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
} }





function scene_Scene_init_inline__P12657(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 2295;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2295]) return breakpoint(s, 7, 2295, r0);
  case 7:
    s.tmp_0 = r0 = globals.stats___2606;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = globals.control_EventContext_onStats___396;
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2296;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2296]) return breakpoint(s, 8, 2296, r0);
  case 8:
    s.tmp_2 = lambda_2_mk(s);
    s.tmp_2.argL = globals.control_EventContext_onStats___396;
    if ((globals.control_EventContext_lastStats___395) && (globals.control_EventContext_lastStats___395).vtable) {
    setupResume(s, 10);
    pxsim_String__stringConv(globals.control_EventContext_lastStats___395);
    checkResumeConsumed();
    return;
    } else { s.retval = (globals.control_EventContext_lastStats___395) + ""; }
  case 10:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = s.caps[0].fields["allSprites"];
    s.tmp_8 = r0;
    r0 = pxsim_Array__length(s.tmp_8);
    s.tmp_7 = r0;
    if ((s.tmp_7) && (s.tmp_7).vtable) {
    setupResume(s, 11);
    pxsim_String__stringConv(s.tmp_7);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_7) + ""; }
  case 11:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = pxsim_String__concat(" sprites:", s.tmp_6);
    s.tmp_5 = r0;
    if ((s.tmp_5) && (s.tmp_5).vtable) {
    setupResume(s, 12);
    pxsim_String__stringConv(s.tmp_5);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_5) + ""; }
  case 12:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_String__concat(s.tmp_3, s.tmp_4);
    s.tmp_2.arg0 = r0;
    setupLambda(s.tmp_2, s.tmp_2.argL);
    s.callLocIdx = 933; s.pc = 9; return s.tmp_2;
  case 9:
    r0 = s.retval;
  case 3:
  case 4:
    s.lastBrkId = 2297;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2297]) return breakpoint(s, 13, 2297, r0);
  case 13:
    r0 = pxsim_numops_toBoolDecr(globals.debug___2605);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 2298;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2298]) return breakpoint(s, 14, 2298, r0);
  case 14:
    s.tmp_0 = PhysicsEngine__C2238_v3_1_mk(s);
    r0 = s.caps[0].fields["physicsEngine"];
    s.tmp_0.arg0 = r0;
    if (!checkSubtype(s.tmp_0.arg0, PhysicsEngine__C2238_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.draw;
    s.pc = 15; return s.tmp_0;
  case 15:
    r0 = s.retval;
  case 5:
  case 6:
    s.lastBrkId = 2299;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2299]) return breakpoint(s, 16, 2299, r0);
  case 16:
    s.tmp_0 = game_consoleOverlay_draw__P2732_mk(s);
    s.callLocIdx = 934; s.pc = 17; return s.tmp_0;
  case 17:
    r0 = s.retval;
    s.lastBrkId = 2300;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2300]) return breakpoint(s, 18, 2300, r0);
  case 18:
    s.tmp_0 = power_checkDeepSleep__P1729_mk(s);
    s.callLocIdx = 935; s.pc = 19; return s.tmp_0;
  case 19:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_Scene_init_inline__P12657.info = {"start":5899,"length":504,"line":163,"column":80,"endLine":175,"endColumn":13,"fileName":"pxt_modules/game/scene.ts","functionName":"inline","argumentNames":[]}

function scene_Scene_init_inline__P12657_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Scene_init_inline__P12657, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
} }





function scene_Scene_init_inline__P12686(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = lambda_2_mk(s);
    s.tmp_0.argL = s.arg0;
    s.tmp_0.arg0 = s.caps[0];
    setupLambda(s.tmp_0, s.tmp_0.argL);
    s.callLocIdx = 938; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_Scene_init_inline__P12686.info = {"start":6621,"length":12,"line":179,"column":39,"endLine":179,"endColumn":51,"fileName":"pxt_modules/game/scene.ts","functionName":"inline","argumentNames":["f"]}

function scene_Scene_init_inline__P12686_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Scene_init_inline__P12686, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function game_consoleOverlay_draw__P2732(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.height___12735 = undefined;
    s.top___12740 = undefined;
    s.i___12746 = undefined;
    s.t___12759 = undefined;
    s.tOff___12766 = undefined;
    s.tab___12768 = undefined;
    s.unnamed1658___U6 = undefined;
    s.unnamed1659___U7 = undefined;
    s.padding___12770 = undefined;
    s.lastBrkId = 3277;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3277]) return breakpoint(s, 14, 3277, r0);
  case 14:
    r0 = pxsim_numops_toBoolDecr(globals.consoleStrings___4854);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    s.tmp_2 = scene_systemMenu_isVisible__P2713_mk(s);
    s.callLocIdx = 1445; s.pc = 15; return s.tmp_2;
  case 15:
    r0 = s.retval;
  case 2:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 3278;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3278]) return breakpoint(s, 16, 3278, r0);
  case 16:
    { step = 13; continue; }
  case 3:
  case 4:
    s.lastBrkId = 3279;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3279]) return breakpoint(s, 17, 3279, r0);
  case 17:
    s.tmp_5 = if_charHeight_1_mk(s);
    s.tmp_5.arg0 = globals.consoleFont___4862;
    if (!s.tmp_5.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_5.arg0, "charHeight");
    } else {
      s.tmp_5.fn = s.tmp_5.arg0.vtable.iface["charHeight"];
      if (s.tmp_5.fn == null) { s.retval = s.tmp_5.arg0.fields["charHeight"]; }
      else if (!s.tmp_5.fn.isGetter) { s.retval = bind(s.tmp_5); }
     else { s.callLocIdx = 1446; s.pc = 18; return s.tmp_5; }
    }
  case 18:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = (s.tmp_4 + 2);
    s.height___12735 = (r0);
    s.lastBrkId = 3280;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3280]) return breakpoint(s, 19, 3280, r0);
  case 19:
    r0 = pxsim_numops_toBoolDecr(globals.stats___2606);
    if (!r0) { step = 5; continue; }
    r0 = s.height___12735;
    { step = 6; continue; }
  case 5:
    r0 = 0;
  case 6:
    // jmp value (already in r0)
    s.tmp_0 = r0;
    r0 = (2 + s.tmp_0);
    s.top___12740 = (r0);
    s.lastBrkId = 3281;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3281]) return breakpoint(s, 20, 3281, r0);
  case 20:
    s.i___12746 = (0);
    s.lastBrkId = 3282;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3282]) return breakpoint(s, 21, 3282, r0);
  case 21:
  case 7:
    s.lastBrkId = 3283;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3283]) return breakpoint(s, 22, 3283, r0);
  case 22:
    s.tmp_1 = r0 = s.i___12746;
    r0 = pxsim_Array__length(globals.consoleStrings___4854);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 12; continue; }
    s.lastBrkId = 3284;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3284]) return breakpoint(s, 23, 3284, r0);
  case 23:
    r0 = pxsim_Array__getAt(globals.consoleStrings___4854, s.i___12746);
    s.tmp_5 = r0;
    r0 = pxsim_String_.indexOf(s.tmp_5, "\t", undefined);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 >= 0);
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 10; continue; }
    s.lastBrkId = 3285;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3285]) return breakpoint(s, 24, 3285, r0);
  case 24:
    s.tmp_6 = helpers_stringSplit__P122_mk(s);
    r0 = pxsim_Array__getAt(globals.consoleStrings___4854, s.i___12746);
    s.tmp_6.arg0 = r0;
    s.tmp_6.arg1 = "\t";
    s.tmp_6.arg2 = undefined;
    s.callLocIdx = 1447; s.pc = 25; return s.tmp_6;
  case 25:
    r0 = s.retval;
    s.t___12759 = (r0);
    s.lastBrkId = 3286;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3286]) return breakpoint(s, 26, 3286, r0);
  case 26:
    s.tOff___12766 = (0);
    s.lastBrkId = 3287;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3287]) return breakpoint(s, 27, 3287, r0);
  case 27:
    s.tab___12768 = (undefined);
    s.unnamed1658___U6 = (s.t___12759);
    s.unnamed1659___U7 = (0);
    s.lastBrkId = 3288;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3288]) return breakpoint(s, 28, 3288, r0);
  case 28:
  case 8:
    s.tmp_0 = r0 = s.unnamed1659___U7;
    r0 = pxsim_Array__length(s.unnamed1658___U6);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 9; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1658___U6, s.unnamed1659___U7);
    s.tab___12768 = (r0);
    s.lastBrkId = 3289;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3289]) return breakpoint(s, 29, 3289, r0);
  case 29:
    s.tmp_2 = r0 = globals.tabSize___4856;
    s.tmp_5 = r0 = s.tOff___12766;
    r0 = pxsim_String_.length(s.tab___12768);
    s.tmp_6 = r0;
    r0 = (s.tmp_5 + s.tmp_6);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 % globals.tabSize___4856);
    s.tmp_3 = r0;
    r0 = (s.tmp_2 - s.tmp_3);
    s.padding___12770 = (r0);
    s.lastBrkId = 3290;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3290]) return breakpoint(s, 30, 3290, r0);
  case 30:
    s.tmp_0 = helpers_imagePrint__P1785_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_0.arg1 = s.tab___12768;
    s.tmp_2 = r0 = s.tOff___12766;
    s.tmp_4 = if_charWidth_1_mk(s);
    s.tmp_4.arg0 = globals.consoleFont___4862;
    if (!s.tmp_4.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_4.arg0, "charWidth");
    } else {
      s.tmp_4.fn = s.tmp_4.arg0.vtable.iface["charWidth"];
      if (s.tmp_4.fn == null) { s.retval = s.tmp_4.arg0.fields["charWidth"]; }
      else if (!s.tmp_4.fn.isGetter) { s.retval = bind(s.tmp_4); }
     else { s.callLocIdx = 1448; s.pc = 32; return s.tmp_4; }
    }
  case 32:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_2 * s.tmp_3);
    s.tmp_1 = r0;
    r0 = (4 + s.tmp_1);
    s.tmp_0.arg2 = r0;
    s.tmp_5 = r0 = s.top___12740;
    r0 = (s.i___12746 * s.height___12735);
    s.tmp_6 = r0;
    r0 = (s.tmp_5 + s.tmp_6);
    s.tmp_0.arg3 = r0;
    s.tmp_0.arg4 = globals.consoleColor___4853;
    s.tmp_0.arg5 = globals.consoleFont___4862;
    s.tmp_0.arg6 = undefined;
    s.callLocIdx = 1449; s.pc = 31; return s.tmp_0;
  case 31:
    r0 = s.retval;
    s.lastBrkId = 3291;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3291]) return breakpoint(s, 33, 3291, r0);
  case 33:
    s.tmp_0 = r0 = s.tOff___12766;
    r0 = pxsim_String_.length(s.tab___12768);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + s.padding___12770);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 + s.tmp_1);
    s.tOff___12766 = (r0);
    r0 = (s.unnamed1659___U7 + 1);
    s.unnamed1659___U7 = (r0);
    { step = 8; continue; }
  case 9:
    s.unnamed1658___U6 = (undefined);
    { step = 11; continue; }
  case 10:
    s.lastBrkId = 3292;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3292]) return breakpoint(s, 34, 3292, r0);
  case 34:
    s.tmp_0 = helpers_imagePrint__P1785_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    r0 = pxsim_Array__getAt(globals.consoleStrings___4854, s.i___12746);
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = 4;
    s.tmp_1 = r0 = s.top___12740;
    r0 = (s.i___12746 * s.height___12735);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 + s.tmp_2);
    s.tmp_0.arg3 = r0;
    s.tmp_0.arg4 = globals.consoleColor___4853;
    s.tmp_0.arg5 = globals.consoleFont___4862;
    s.tmp_0.arg6 = undefined;
    s.callLocIdx = 1450; s.pc = 35; return s.tmp_0;
  case 35:
    r0 = s.retval;
  case 11:
    s.lastBrkId = 3293;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3293]) return breakpoint(s, 36, 3293, r0);
  case 36:
    r0 = (s.i___12746 + 1);
    s.i___12746 = (r0);
    { step = 7; continue; }
  case 12:
  case 13:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_consoleOverlay_draw__P2732.info = {"start":1364,"length":859,"line":44,"column":4,"endLine":61,"endColumn":5,"fileName":"pxt_modules/game/console.ts","functionName":"draw","argumentNames":[]}

function game_consoleOverlay_draw__P2732_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_consoleOverlay_draw__P2732, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  height___12735: undefined,
  top___12740: undefined,
  i___12746: undefined,
  t___12759: undefined,
  tOff___12766: undefined,
  tab___12768: undefined,
  unnamed1658___U6: undefined,
  unnamed1659___U7: undefined,
  padding___12770: undefined,
} }





function scene_systemMenu_isVisible__P2713(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 3235;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3235]) return breakpoint(s, 1, 3235, r0);
  case 1:
    r0 = pxsim_numops_toBoolDecr(globals.instance___4808);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_0);
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_isVisible__P2713.info = {"start":13170,"length":62,"line":395,"column":4,"endLine":397,"endColumn":5,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"isVisible","argumentNames":[]}

function scene_systemMenu_isVisible__P2713_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_isVisible__P2713, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
} }





function helpers_imagePrint__P1785(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.x0___10490 = undefined;
    s.cp___10492 = undefined;
    s.mult___10493 = undefined;
    s.dataW___10498 = undefined;
    s.dataH___10504 = undefined;
    s.byteHeight___10510 = undefined;
    s.charSize___10516 = undefined;
    s.dataSize___10520 = undefined;
    s.fontdata___10524 = undefined;
    s.lastchar___10527 = undefined;
    s.imgBuf___10534 = undefined;
    s.xOffset___10558 = undefined;
    s.yOffset___10559 = undefined;
    s.ch___10574 = undefined;
    s.l___10593 = undefined;
    s.r___10594 = undefined;
    s.off___10596 = undefined;
    s.guess___10597 = undefined;
    s.m___10616 = undefined;
    s.v___10625 = undefined;
    s.i___10681 = undefined;
    s.j___10686 = undefined;
    s.mask___10687 = undefined;
    s.c___10688 = undefined;
    s.n___10705 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.arg5 = (s.lambdaArgs[5]);
      s.arg6 = (s.lambdaArgs[6]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 849;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[849]) return breakpoint(s, 39, 849, r0);
  case 39:
    r0 = (s.arg2 | 0);
    s.arg2 = (r0);
    s.lastBrkId = 850;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[850]) return breakpoint(s, 40, 850, r0);
  case 40:
    r0 = (s.arg3 | 0);
    s.arg3 = (r0);
    s.lastBrkId = 851;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[851]) return breakpoint(s, 41, 851, r0);
  case 41:
    r0 = pxsim_numops_toBoolDecr(s.arg5);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 852;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[852]) return breakpoint(s, 42, 852, r0);
  case 42:
    s.tmp_2 = image_getFontForText__P1772_mk(s);
    s.tmp_2.arg0 = s.arg1;
    s.callLocIdx = 144; s.pc = 43; return s.tmp_2;
  case 43:
    r0 = s.retval;
    s.arg5 = (r0);
  case 1:
  case 2:
    s.lastBrkId = 853;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[853]) return breakpoint(s, 44, 853, r0);
  case 44:
    r0 = pxsim_numops_toBoolDecr(s.arg4);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 854;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[854]) return breakpoint(s, 45, 854, r0);
  case 45:
    s.arg4 = (1);
  case 3:
  case 4:
    s.lastBrkId = 855;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[855]) return breakpoint(s, 46, 855, r0);
  case 46:
    s.x0___10490 = (s.arg2);
    s.lastBrkId = 856;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[856]) return breakpoint(s, 47, 856, r0);
  case 47:
    s.cp___10492 = (0);
    s.lastBrkId = 857;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[857]) return breakpoint(s, 48, 857, r0);
  case 48:
    s.tmp_1 = if_multiplier_1_mk(s);
    s.tmp_1.arg0 = s.arg5;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "multiplier");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["multiplier"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["multiplier"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 145; s.pc = 49; return s.tmp_1; }
    }
  case 49:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.tmp_2 = if_multiplier_1_mk(s);
    s.tmp_2.arg0 = s.arg5;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "multiplier");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["multiplier"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["multiplier"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 146; s.pc = 50; return s.tmp_2; }
    }
  case 50:
    r0 = s.retval;
    { step = 6; continue; }
  case 5:
    r0 = 1;
  case 6:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    s.mult___10493 = (s.tmp_3);
    s.lastBrkId = 858;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[858]) return breakpoint(s, 51, 858, r0);
  case 51:
    s.tmp_1 = if_charWidth_1_mk(s);
    s.tmp_1.arg0 = s.arg5;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "charWidth");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["charWidth"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["charWidth"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 147; s.pc = 52; return s.tmp_1; }
    }
  case 52:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim.Math_.idiv(s.tmp_0, s.mult___10493);
    s.dataW___10498 = (r0);
    s.lastBrkId = 859;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[859]) return breakpoint(s, 53, 859, r0);
  case 53:
    s.tmp_1 = if_charHeight_1_mk(s);
    s.tmp_1.arg0 = s.arg5;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "charHeight");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["charHeight"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["charHeight"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 148; s.pc = 54; return s.tmp_1; }
    }
  case 54:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim.Math_.idiv(s.tmp_0, s.mult___10493);
    s.dataH___10504 = (r0);
    s.lastBrkId = 860;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[860]) return breakpoint(s, 55, 860, r0);
  case 55:
    r0 = (s.dataH___10504 + 7);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 >> 3);
    s.byteHeight___10510 = (r0);
    s.lastBrkId = 861;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[861]) return breakpoint(s, 56, 861, r0);
  case 56:
    r0 = (s.byteHeight___10510 * s.dataW___10498);
    s.charSize___10516 = (r0);
    s.lastBrkId = 862;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[862]) return breakpoint(s, 57, 862, r0);
  case 57:
    r0 = (2 + s.charSize___10516);
    s.dataSize___10520 = (r0);
    s.lastBrkId = 863;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[863]) return breakpoint(s, 58, 863, r0);
  case 58:
    s.tmp_0 = if_data_1_mk(s);
    s.tmp_0.arg0 = s.arg5;
    if (!s.tmp_0.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_0.arg0, "data");
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["data"];
      if (s.tmp_0.fn == null) { s.retval = s.tmp_0.arg0.fields["data"]; }
      else if (!s.tmp_0.fn.isGetter) { s.retval = bind(s.tmp_0); }
     else { s.callLocIdx = 149; s.pc = 59; return s.tmp_0; }
    }
  case 59:
    r0 = s.retval;
    s.fontdata___10524 = (r0);
    s.lastBrkId = 864;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[864]) return breakpoint(s, 60, 864, r0);
  case 60:
    r0 = pxsim.BufferMethods.length(s.fontdata___10524);
    s.tmp_1 = r0;
    r0 = pxsim.Math_.idiv(s.tmp_1, s.dataSize___10520);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 - 1);
    s.lastchar___10527 = (r0);
    s.lastBrkId = 865;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[865]) return breakpoint(s, 61, 865, r0);
  case 61:
    r0 = (s.mult___10493 == 1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 866;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[866]) return breakpoint(s, 62, 866, r0);
  case 62:
    r0 = (8 + s.charSize___10516);
    s.tmp_1 = r0;
    r0 = pxsim.control.createBuffer(s.tmp_1);
    s.imgBuf___10534 = (r0);
    s.lastBrkId = 867;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[867]) return breakpoint(s, 63, 867, r0);
  case 63:
    r0 = pxsim.BufferMethods.setByte(s.imgBuf___10534, 0, 135);
    s.lastBrkId = 868;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[868]) return breakpoint(s, 64, 868, r0);
  case 64:
    r0 = pxsim.BufferMethods.setByte(s.imgBuf___10534, 1, 1);
    s.lastBrkId = 869;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[869]) return breakpoint(s, 65, 869, r0);
  case 65:
    r0 = pxsim.BufferMethods.setByte(s.imgBuf___10534, 2, s.dataW___10498);
    s.lastBrkId = 870;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[870]) return breakpoint(s, 66, 870, r0);
  case 66:
    r0 = pxsim.BufferMethods.setByte(s.imgBuf___10534, 4, s.dataH___10504);
  case 7:
  case 8:
    s.lastBrkId = 871;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[871]) return breakpoint(s, 67, 871, r0);
  case 67:
  case 9:
    s.lastBrkId = 872;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[872]) return breakpoint(s, 68, 872, r0);
  case 68:
    s.tmp_1 = r0 = s.cp___10492;
    r0 = pxsim_String_.length(s.arg1);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 38; continue; }
    s.lastBrkId = 873;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[873]) return breakpoint(s, 69, 873, r0);
  case 69:
    s.xOffset___10558 = (0);
    s.lastBrkId = 874;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[874]) return breakpoint(s, 70, 874, r0);
  case 70:
    s.yOffset___10559 = (0);
    s.lastBrkId = 875;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[875]) return breakpoint(s, 71, 875, r0);
  case 71:
    s.tmp_0 = r0 = s.arg6;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 10; continue; }
    r0 = s.tmp_0;
    { step = 11; continue; }
  case 10:
    s.tmp_1 = r0 = s.cp___10492;
    r0 = pxsim_Array__length(s.arg6);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
  case 11:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 12; continue; }
    s.lastBrkId = 876;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[876]) return breakpoint(s, 72, 876, r0);
  case 72:
    s.tmp_4 = if_xOffset_1_mk(s);
    r0 = pxsim_Array__getAt(s.arg6, s.cp___10492);
    s.tmp_4.arg0 = r0;
    if (!s.tmp_4.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_4.arg0, "xOffset");
    } else {
      s.tmp_4.fn = s.tmp_4.arg0.vtable.iface["xOffset"];
      if (s.tmp_4.fn == null) { s.retval = s.tmp_4.arg0.fields["xOffset"]; }
      else if (!s.tmp_4.fn.isGetter) { s.retval = bind(s.tmp_4); }
     else { s.callLocIdx = 150; s.pc = 73; return s.tmp_4; }
    }
  case 73:
    r0 = s.retval;
    s.xOffset___10558 = (r0);
    s.lastBrkId = 877;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[877]) return breakpoint(s, 74, 877, r0);
  case 74:
    s.tmp_0 = if_yOffset_1_mk(s);
    r0 = pxsim_Array__getAt(s.arg6, s.cp___10492);
    s.tmp_0.arg0 = r0;
    if (!s.tmp_0.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_0.arg0, "yOffset");
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["yOffset"];
      if (s.tmp_0.fn == null) { s.retval = s.tmp_0.arg0.fields["yOffset"]; }
      else if (!s.tmp_0.fn.isGetter) { s.retval = bind(s.tmp_0); }
     else { s.callLocIdx = 151; s.pc = 75; return s.tmp_0; }
    }
  case 75:
    r0 = s.retval;
    s.yOffset___10559 = (r0);
  case 12:
  case 13:
    s.lastBrkId = 878;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[878]) return breakpoint(s, 76, 878, r0);
  case 76:
    s.tmp_0 = r0 = s.cp___10492;
    r0 = (s.tmp_0 + 1);
    s.cp___10492 = (r0);
    r0 = pxsim_String_.charCodeAt(s.arg1, s.tmp_0);
    s.ch___10574 = (r0);
    s.lastBrkId = 879;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[879]) return breakpoint(s, 77, 879, r0);
  case 77:
    r0 = (s.ch___10574 == 10);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 14; continue; }
    s.lastBrkId = 880;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[880]) return breakpoint(s, 78, 880, r0);
  case 78:
    s.tmp_1 = r0 = s.arg3;
    s.tmp_4 = if_charHeight_1_mk(s);
    s.tmp_4.arg0 = s.arg5;
    if (!s.tmp_4.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_4.arg0, "charHeight");
    } else {
      s.tmp_4.fn = s.tmp_4.arg0.vtable.iface["charHeight"];
      if (s.tmp_4.fn == null) { s.retval = s.tmp_4.arg0.fields["charHeight"]; }
      else if (!s.tmp_4.fn.isGetter) { s.retval = bind(s.tmp_4); }
     else { s.callLocIdx = 152; s.pc = 79; return s.tmp_4; }
    }
  case 79:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_3 + 2);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 + s.tmp_2);
    s.arg3 = (r0);
    s.lastBrkId = 881;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[881]) return breakpoint(s, 80, 881, r0);
  case 80:
    s.arg2 = (s.x0___10490);
  case 14:
  case 15:
    s.lastBrkId = 882;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[882]) return breakpoint(s, 81, 882, r0);
  case 81:
    r0 = (s.ch___10574 < 32);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 16; continue; }
    s.lastBrkId = 883;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[883]) return breakpoint(s, 82, 883, r0);
  case 82:
    { step = 9; continue; }
  case 16:
  case 17:
    s.lastBrkId = 884;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[884]) return breakpoint(s, 83, 884, r0);
  case 83:
    s.l___10593 = (0);
    s.lastBrkId = 885;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[885]) return breakpoint(s, 84, 885, r0);
  case 84:
    s.r___10594 = (s.lastchar___10527);
    s.lastBrkId = 886;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[886]) return breakpoint(s, 85, 886, r0);
  case 85:
    s.off___10596 = (0);
    s.lastBrkId = 887;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[887]) return breakpoint(s, 86, 887, r0);
  case 86:
    r0 = (s.ch___10574 - 32);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 * s.dataSize___10520);
    s.guess___10597 = (r0);
    s.lastBrkId = 888;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[888]) return breakpoint(s, 87, 888, r0);
  case 87:
    r0 = pxsim.BufferMethods.getNumber(s.fontdata___10524, 4, s.guess___10597);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 == s.ch___10574);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 18; continue; }
    s.lastBrkId = 889;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[889]) return breakpoint(s, 88, 889, r0);
  case 88:
    s.off___10596 = (s.guess___10597);
    { step = 25; continue; }
  case 18:
    s.lastBrkId = 890;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[890]) return breakpoint(s, 89, 890, r0);
  case 89:
  case 19:
    s.lastBrkId = 891;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[891]) return breakpoint(s, 90, 891, r0);
  case 90:
    r0 = (s.l___10593 <= s.r___10594);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 24; continue; }
    s.lastBrkId = 892;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[892]) return breakpoint(s, 91, 892, r0);
  case 91:
    s.tmp_1 = r0 = s.l___10593;
    r0 = (s.r___10594 - s.l___10593);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 >> 1);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 + s.tmp_2);
    s.m___10616 = (r0);
    s.lastBrkId = 893;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[893]) return breakpoint(s, 92, 893, r0);
  case 92:
    s.tmp_0 = r0 = s.fontdata___10524;
    r0 = (s.m___10616 * s.dataSize___10520);
    s.tmp_1 = r0;
    r0 = pxsim.BufferMethods.getNumber(s.tmp_0, 4, s.tmp_1);
    s.v___10625 = (r0);
    s.lastBrkId = 894;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[894]) return breakpoint(s, 93, 894, r0);
  case 93:
    r0 = (s.v___10625 == s.ch___10574);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 20; continue; }
    s.lastBrkId = 895;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[895]) return breakpoint(s, 94, 895, r0);
  case 94:
    r0 = (s.m___10616 * s.dataSize___10520);
    s.off___10596 = (r0);
    s.lastBrkId = 896;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[896]) return breakpoint(s, 95, 896, r0);
  case 95:
    { step = 24; continue; }
  case 20:
  case 21:
    s.lastBrkId = 897;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[897]) return breakpoint(s, 96, 897, r0);
  case 96:
    r0 = (s.v___10625 < s.ch___10574);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 22; continue; }
    s.lastBrkId = 898;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[898]) return breakpoint(s, 97, 898, r0);
  case 97:
    r0 = (s.m___10616 + 1);
    s.l___10593 = (r0);
    { step = 23; continue; }
  case 22:
    s.lastBrkId = 899;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[899]) return breakpoint(s, 98, 899, r0);
  case 98:
    r0 = (s.m___10616 - 1);
    s.r___10594 = (r0);
  case 23:
    { step = 19; continue; }
  case 24:
  case 25:
    s.lastBrkId = 900;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[900]) return breakpoint(s, 99, 900, r0);
  case 99:
    r0 = (s.mult___10493 == 1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 26; continue; }
    s.lastBrkId = 901;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[901]) return breakpoint(s, 100, 901, r0);
  case 100:
    s.tmp_1 = r0 = s.imgBuf___10534;
    s.tmp_3 = r0 = s.fontdata___10524;
    r0 = (s.off___10596 + 2);
    s.tmp_4 = r0;
    r0 = pxsim.BufferMethods.slice(s.tmp_3, s.tmp_4, s.charSize___10516);
    s.tmp_2 = r0;
    r0 = pxsim.BufferMethods.write(s.tmp_1, 8, s.tmp_2);
    s.lastBrkId = 902;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[902]) return breakpoint(s, 101, 902, r0);
  case 101:
    s.tmp_0 = helpers_imageDrawIcon__P1752_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.imgBuf___10534;
    r0 = (s.arg2 + s.xOffset___10558);
    s.tmp_0.arg2 = r0;
    r0 = (s.arg3 + s.yOffset___10559);
    s.tmp_0.arg3 = r0;
    s.tmp_0.arg4 = s.arg4;
    s.callLocIdx = 153; s.pc = 102; return s.tmp_0;
  case 102:
    r0 = s.retval;
    s.lastBrkId = 903;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[903]) return breakpoint(s, 103, 903, r0);
  case 103:
    s.tmp_0 = r0 = s.arg2;
    s.tmp_2 = if_charWidth_1_mk(s);
    s.tmp_2.arg0 = s.arg5;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "charWidth");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["charWidth"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["charWidth"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 154; s.pc = 104; return s.tmp_2; }
    }
  case 104:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0 + s.tmp_1);
    s.arg2 = (r0);
    { step = 37; continue; }
  case 26:
    s.lastBrkId = 904;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[904]) return breakpoint(s, 105, 904, r0);
  case 105:
    r0 = (s.off___10596 + 2);
    s.off___10596 = (r0);
    s.lastBrkId = 905;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[905]) return breakpoint(s, 106, 905, r0);
  case 106:
    s.i___10681 = (0);
    s.lastBrkId = 906;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[906]) return breakpoint(s, 107, 906, r0);
  case 107:
  case 27:
    s.lastBrkId = 907;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[907]) return breakpoint(s, 108, 907, r0);
  case 108:
    r0 = (s.i___10681 < s.dataW___10498);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 36; continue; }
    s.lastBrkId = 908;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[908]) return breakpoint(s, 109, 908, r0);
  case 109:
    s.j___10686 = (0);
    s.lastBrkId = 909;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[909]) return breakpoint(s, 110, 909, r0);
  case 110:
    s.mask___10687 = (1);
    s.lastBrkId = 910;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[910]) return breakpoint(s, 111, 910, r0);
  case 111:
    s.tmp_0 = r0 = s.off___10596;
    r0 = (s.tmp_0 + 1);
    s.off___10596 = (r0);
    r0 = pxsim.BufferMethods.getByte(s.fontdata___10524, s.tmp_0);
    s.c___10688 = (r0);
    s.lastBrkId = 911;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[911]) return breakpoint(s, 112, 911, r0);
  case 112:
  case 28:
    s.lastBrkId = 912;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[912]) return breakpoint(s, 113, 912, r0);
  case 113:
    r0 = (s.j___10686 < s.dataH___10504);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 35; continue; }
    s.lastBrkId = 913;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[913]) return breakpoint(s, 114, 913, r0);
  case 114:
    r0 = (s.mask___10687 == 256);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 29; continue; }
    s.lastBrkId = 914;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[914]) return breakpoint(s, 115, 914, r0);
  case 115:
    s.tmp_2 = r0 = s.off___10596;
    r0 = (s.tmp_2 + 1);
    s.off___10596 = (r0);
    r0 = pxsim.BufferMethods.getByte(s.fontdata___10524, s.tmp_2);
    s.c___10688 = (r0);
    s.lastBrkId = 915;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[915]) return breakpoint(s, 116, 915, r0);
  case 116:
    s.mask___10687 = (1);
  case 29:
  case 30:
    s.lastBrkId = 916;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[916]) return breakpoint(s, 117, 916, r0);
  case 117:
    s.n___10705 = (0);
    s.lastBrkId = 917;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[917]) return breakpoint(s, 118, 917, r0);
  case 118:
  case 31:
    s.lastBrkId = 918;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[918]) return breakpoint(s, 119, 918, r0);
  case 119:
    r0 = (s.c___10688 & s.mask___10687);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 32; continue; }
    s.lastBrkId = 919;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[919]) return breakpoint(s, 120, 919, r0);
  case 120:
    r0 = (s.n___10705 + 1);
    s.n___10705 = (r0);
    s.lastBrkId = 920;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[920]) return breakpoint(s, 121, 920, r0);
  case 121:
    r0 = (s.mask___10687 << 1);
    s.mask___10687 = (r0);
    { step = 31; continue; }
  case 32:
    s.lastBrkId = 921;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[921]) return breakpoint(s, 122, 921, r0);
  case 122:
    r0 = pxsim_numops_toBoolDecr(s.n___10705);
    if (!r0) { step = 33; continue; }
    s.lastBrkId = 922;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[922]) return breakpoint(s, 123, 922, r0);
  case 123:
    s.tmp_0 = helpers_imageFillRect__P1753_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_1 = r0 = s.arg2;
    r0 = (s.xOffset___10558 * s.mult___10493);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 + s.tmp_2);
    s.tmp_0.arg1 = r0;
    s.tmp_3 = r0 = s.arg3;
    r0 = (s.j___10686 + s.yOffset___10559);
    s.tmp_5 = r0;
    r0 = (s.tmp_5 * s.mult___10493);
    s.tmp_4 = r0;
    r0 = (s.tmp_3 + s.tmp_4);
    s.tmp_0.arg2 = r0;
    s.tmp_0.arg3 = s.mult___10493;
    r0 = (s.mult___10493 * s.n___10705);
    s.tmp_0.arg4 = r0;
    s.tmp_0.arg5 = s.arg4;
    s.callLocIdx = 155; s.pc = 124; return s.tmp_0;
  case 124:
    r0 = s.retval;
    s.lastBrkId = 923;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[923]) return breakpoint(s, 125, 923, r0);
  case 125:
    r0 = (s.j___10686 + s.n___10705);
    s.j___10686 = (r0);
    { step = 34; continue; }
  case 33:
    s.lastBrkId = 924;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[924]) return breakpoint(s, 126, 924, r0);
  case 126:
    r0 = (s.mask___10687 << 1);
    s.mask___10687 = (r0);
    s.lastBrkId = 925;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[925]) return breakpoint(s, 127, 925, r0);
  case 127:
    r0 = (s.j___10686 + 1);
    s.j___10686 = (r0);
  case 34:
    { step = 28; continue; }
  case 35:
    s.lastBrkId = 926;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[926]) return breakpoint(s, 128, 926, r0);
  case 128:
    r0 = (s.arg2 + s.mult___10493);
    s.arg2 = (r0);
    s.lastBrkId = 927;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[927]) return breakpoint(s, 129, 927, r0);
  case 129:
    r0 = (s.i___10681 + 1);
    s.i___10681 = (r0);
    { step = 27; continue; }
  case 36:
  case 37:
    { step = 9; continue; }
  case 38:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
helpers_imagePrint__P1785.info = {"start":15326,"length":3300,"line":213,"column":4,"endLine":306,"endColumn":5,"fileName":"pxt_modules/screen/text.ts","functionName":"imagePrint","argumentNames":["img","text","x","y","color","font","offsets"]}

function helpers_imagePrint__P1785_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_imagePrint__P1785, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  x0___10490: undefined,
  cp___10492: undefined,
  mult___10493: undefined,
  dataW___10498: undefined,
  dataH___10504: undefined,
  byteHeight___10510: undefined,
  charSize___10516: undefined,
  dataSize___10520: undefined,
  fontdata___10524: undefined,
  lastchar___10527: undefined,
  imgBuf___10534: undefined,
  xOffset___10558: undefined,
  yOffset___10559: undefined,
  ch___10574: undefined,
  l___10593: undefined,
  r___10594: undefined,
  off___10596: undefined,
  guess___10597: undefined,
  m___10616: undefined,
  v___10625: undefined,
  i___10681: undefined,
  j___10686: undefined,
  mask___10687: undefined,
  c___10688: undefined,
  n___10705: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
  arg5: undefined,
  arg6: undefined,
} }





function image_getFontForText__P1772(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.i___10782 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 831;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[831]) return breakpoint(s, 6, 831, r0);
  case 6:
    s.i___10782 = (0);
    s.lastBrkId = 832;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[832]) return breakpoint(s, 7, 832, r0);
  case 7:
  case 1:
    s.lastBrkId = 833;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[833]) return breakpoint(s, 8, 833, r0);
  case 8:
    s.tmp_1 = r0 = s.i___10782;
    r0 = pxsim_String_.length(s.arg0);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 834;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[834]) return breakpoint(s, 9, 834, r0);
  case 9:
    r0 = pxsim_String_.charCodeAt(s.arg0, s.i___10782);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 > 8192);
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 835;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[835]) return breakpoint(s, 10, 835, r0);
  case 10:
    r0 = globals.font12___1771;
    { step = 5; continue; }
  case 2:
  case 3:
    s.lastBrkId = 836;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[836]) return breakpoint(s, 11, 836, r0);
  case 11:
    r0 = (s.i___10782 + 1);
    s.i___10782 = (r0);
    { step = 1; continue; }
  case 4:
    s.lastBrkId = 837;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[837]) return breakpoint(s, 12, 837, r0);
  case 12:
    r0 = globals.font8___1770;
  case 5:
    return leave(s, r0)
  default: oops()
} } }
image_getFontForText__P1772.info = {"start":11713,"length":259,"line":136,"column":4,"endLine":143,"endColumn":5,"fileName":"pxt_modules/screen/text.ts","functionName":"getFontForText","argumentNames":["text"]}

function image_getFontForText__P1772_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: image_getFontForText__P1772, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  i___10782: undefined,
  arg0: undefined,
} }





function helpers_imageFillRect__P1753(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.arg5 = (s.lambdaArgs[5]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 815;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[815]) return breakpoint(s, 1, 815, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = helpers_pack__P4286_mk(s);
    s.tmp_2.arg0 = s.arg1;
    s.tmp_2.arg1 = s.arg2;
    s.callLocIdx = 126; s.pc = 2; return s.tmp_2;
  case 2:
    r0 = s.retval;
    s.tmp_1 = r0;
    s.tmp_4 = helpers_pack__P4286_mk(s);
    s.tmp_4.arg0 = s.arg3;
    s.tmp_4.arg1 = s.arg4;
    s.callLocIdx = 127; s.pc = 3; return s.tmp_4;
  case 3:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = pxsim_ImageMethods._fillRect(s.tmp_0, s.tmp_1, s.tmp_3, s.arg5);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
helpers_imageFillRect__P1753.info = {"start":4742,"length":159,"line":157,"column":4,"endLine":159,"endColumn":5,"fileName":"pxt_modules/screen/image.ts","functionName":"imageFillRect","argumentNames":["img","x","y","w","h","c"]}

function helpers_imageFillRect__P1753_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_imageFillRect__P1753, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
  arg5: undefined,
} }





function helpers_imageDrawIcon__P1752(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 814;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[814]) return breakpoint(s, 1, 814, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_1 = r0 = s.arg1;
    s.tmp_3 = helpers_pack__P4286_mk(s);
    s.tmp_3.arg0 = s.arg2;
    s.tmp_3.arg1 = s.arg3;
    s.callLocIdx = 125; s.pc = 2; return s.tmp_3;
  case 2:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_ImageMethods._drawIcon(s.tmp_0, s.tmp_1, s.tmp_2, s.arg4);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
helpers_imageDrawIcon__P1752.info = {"start":4592,"length":145,"line":154,"column":4,"endLine":156,"endColumn":5,"fileName":"pxt_modules/screen/image.ts","functionName":"imageDrawIcon","argumentNames":["img","icon","x","y","c"]}

function helpers_imageDrawIcon__P1752_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_imageDrawIcon__P1752, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
} }





function helpers_stringSplit__P122(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.A___12824 = undefined;
    s.lim___12826 = undefined;
    s.s___12842 = undefined;
    s.p___12845 = undefined;
    s.R___12846 = undefined;
    s.z___12860 = undefined;
    s.T___12873 = undefined;
    s.q___12874 = undefined;
    s.e___12880 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 186;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[186]) return breakpoint(s, 22, 186, r0);
  case 22:
    r0 = pxsim_Array__mk();
    s.A___12824 = (r0);
    s.lastBrkId = 187;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[187]) return breakpoint(s, 23, 187, r0);
  case 23:
    s.lim___12826 = (0);
    s.lastBrkId = 188;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[188]) return breakpoint(s, 24, 188, r0);
  case 24:
    r0 = (s.arg2 === undefined);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 189;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[189]) return breakpoint(s, 25, 189, r0);
  case 25:
    r0 = (536870912 - 1);
    s.lim___12826 = (r0);
    { step = 4; continue; }
  case 1:
    s.lastBrkId = 190;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[190]) return breakpoint(s, 26, 190, r0);
  case 26:
    r0 = (s.arg2 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 191;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[191]) return breakpoint(s, 27, 191, r0);
  case 27:
    s.lim___12826 = (0);
    { step = 3; continue; }
  case 2:
    s.lastBrkId = 192;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[192]) return breakpoint(s, 28, 192, r0);
  case 28:
    r0 = (s.arg2 | 0);
    s.lim___12826 = (r0);
  case 3:
  case 4:
    s.lastBrkId = 193;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[193]) return breakpoint(s, 29, 193, r0);
  case 29:
    r0 = pxsim_String_.length(s.arg0);
    s.s___12842 = (r0);
    s.lastBrkId = 194;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[194]) return breakpoint(s, 30, 194, r0);
  case 30:
    s.p___12845 = (0);
    s.lastBrkId = 195;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[195]) return breakpoint(s, 31, 195, r0);
  case 31:
    s.R___12846 = (s.arg1);
    s.lastBrkId = 196;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[196]) return breakpoint(s, 32, 196, r0);
  case 32:
    r0 = (s.lim___12826 == 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 197;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[197]) return breakpoint(s, 33, 197, r0);
  case 33:
    r0 = s.A___12824;
    { step = 21; continue; }
  case 5:
  case 6:
    s.lastBrkId = 198;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[198]) return breakpoint(s, 34, 198, r0);
  case 34:
    r0 = (s.arg1 === undefined);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 199;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[199]) return breakpoint(s, 35, 199, r0);
  case 35:
    r0 = pxsim_Array_.setAt(s.A___12824, 0, s.arg0);
    s.lastBrkId = 200;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[200]) return breakpoint(s, 36, 200, r0);
  case 36:
    r0 = s.A___12824;
    { step = 21; continue; }
  case 7:
  case 8:
    s.lastBrkId = 201;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[201]) return breakpoint(s, 37, 201, r0);
  case 37:
    r0 = (s.s___12842 == 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 11; continue; }
    s.lastBrkId = 202;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[202]) return breakpoint(s, 38, 202, r0);
  case 38:
    s.tmp_1 = helpers_splitMatch__P4130_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.tmp_1.arg1 = 0;
    s.tmp_1.arg2 = s.R___12846;
    s.callLocIdx = 13; s.pc = 39; return s.tmp_1;
  case 39:
    r0 = s.retval;
    s.z___12860 = (r0);
    s.lastBrkId = 203;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[203]) return breakpoint(s, 40, 203, r0);
  case 40:
    r0 = (s.z___12860 > -1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 204;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[204]) return breakpoint(s, 41, 204, r0);
  case 41:
    r0 = s.A___12824;
    { step = 21; continue; }
  case 9:
  case 10:
    s.lastBrkId = 205;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[205]) return breakpoint(s, 42, 205, r0);
  case 42:
    r0 = pxsim_Array_.setAt(s.A___12824, 0, s.arg0);
    s.lastBrkId = 206;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[206]) return breakpoint(s, 43, 206, r0);
  case 43:
    r0 = s.A___12824;
    { step = 21; continue; }
  case 11:
  case 12:
    s.lastBrkId = 207;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[207]) return breakpoint(s, 44, 207, r0);
  case 44:
    s.q___12874 = (s.p___12845);
    s.lastBrkId = 208;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[208]) return breakpoint(s, 45, 208, r0);
  case 45:
  case 13:
    s.lastBrkId = 209;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[209]) return breakpoint(s, 46, 209, r0);
  case 46:
    r0 = (s.q___12874 != s.s___12842);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 20; continue; }
    s.lastBrkId = 210;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[210]) return breakpoint(s, 47, 210, r0);
  case 47:
    s.tmp_1 = helpers_splitMatch__P4130_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.tmp_1.arg1 = s.q___12874;
    s.tmp_1.arg2 = s.R___12846;
    s.callLocIdx = 14; s.pc = 48; return s.tmp_1;
  case 48:
    r0 = s.retval;
    s.e___12880 = (r0);
    s.lastBrkId = 211;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[211]) return breakpoint(s, 49, 211, r0);
  case 49:
    r0 = (s.e___12880 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 14; continue; }
    s.lastBrkId = 212;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[212]) return breakpoint(s, 50, 212, r0);
  case 50:
    r0 = (s.q___12874 + 1);
    s.q___12874 = (r0);
    { step = 19; continue; }
  case 14:
    s.lastBrkId = 213;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[213]) return breakpoint(s, 51, 213, r0);
  case 51:
    r0 = (s.e___12880 == s.p___12845);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 15; continue; }
    s.lastBrkId = 214;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[214]) return breakpoint(s, 52, 214, r0);
  case 52:
    r0 = (s.q___12874 + 1);
    s.q___12874 = (r0);
    { step = 18; continue; }
  case 15:
    s.lastBrkId = 215;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[215]) return breakpoint(s, 53, 215, r0);
  case 53:
    s.tmp_0 = helpers_stringSlice__P119_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.p___12845;
    s.tmp_0.arg2 = s.q___12874;
    s.callLocIdx = 15; s.pc = 54; return s.tmp_0;
  case 54:
    r0 = s.retval;
    s.T___12873 = (r0);
    s.lastBrkId = 216;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[216]) return breakpoint(s, 55, 216, r0);
  case 55:
    r0 = pxsim_Array__push(s.A___12824, s.T___12873);
    s.lastBrkId = 217;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[217]) return breakpoint(s, 56, 217, r0);
  case 56:
    r0 = pxsim_Array__length(s.A___12824);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 == s.lim___12826);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 16; continue; }
    s.lastBrkId = 218;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[218]) return breakpoint(s, 57, 218, r0);
  case 57:
    r0 = s.A___12824;
    { step = 21; continue; }
  case 16:
  case 17:
    s.lastBrkId = 219;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[219]) return breakpoint(s, 58, 219, r0);
  case 58:
    s.p___12845 = (s.e___12880);
    s.lastBrkId = 220;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[220]) return breakpoint(s, 59, 220, r0);
  case 59:
    s.q___12874 = (s.p___12845);
  case 18:
  case 19:
    { step = 13; continue; }
  case 20:
    s.lastBrkId = 221;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[221]) return breakpoint(s, 60, 221, r0);
  case 60:
    s.tmp_0 = helpers_stringSlice__P119_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.p___12845;
    s.tmp_0.arg2 = s.q___12874;
    s.callLocIdx = 16; s.pc = 61; return s.tmp_0;
  case 61:
    r0 = s.retval;
    s.T___12873 = (r0);
    s.lastBrkId = 222;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[222]) return breakpoint(s, 62, 222, r0);
  case 62:
    r0 = pxsim_Array__push(s.A___12824, s.T___12873);
    s.lastBrkId = 223;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[223]) return breakpoint(s, 63, 223, r0);
  case 63:
    r0 = s.A___12824;
  case 21:
    return leave(s, r0)
  default: oops()
} } }
helpers_stringSplit__P122.info = {"start":12919,"length":1319,"line":434,"column":4,"endLine":478,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"stringSplit","argumentNames":["S","separator","limit"]}

function helpers_stringSplit__P122_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_stringSplit__P122, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  A___12824: undefined,
  lim___12826: undefined,
  s___12842: undefined,
  p___12845: undefined,
  R___12846: undefined,
  z___12860: undefined,
  T___12873: undefined,
  q___12874: undefined,
  e___12880: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function helpers_splitMatch__P4130(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.r___12960 = undefined;
    s.s___12963 = undefined;
    s.i___12973 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 224;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[224]) return breakpoint(s, 8, 224, r0);
  case 8:
    r0 = pxsim_String_.length(s.arg2);
    s.r___12960 = (r0);
    s.lastBrkId = 225;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[225]) return breakpoint(s, 9, 225, r0);
  case 9:
    r0 = pxsim_String_.length(s.arg0);
    s.s___12963 = (r0);
    s.lastBrkId = 226;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[226]) return breakpoint(s, 10, 226, r0);
  case 10:
    r0 = (s.arg1 + s.r___12960);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > s.s___12963);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 227;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[227]) return breakpoint(s, 11, 227, r0);
  case 11:
    r0 = -1;
    { step = 7; continue; }
  case 1:
  case 2:
    s.lastBrkId = 228;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[228]) return breakpoint(s, 12, 228, r0);
  case 12:
    s.i___12973 = (0);
    s.lastBrkId = 229;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[229]) return breakpoint(s, 13, 229, r0);
  case 13:
  case 3:
    s.lastBrkId = 230;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[230]) return breakpoint(s, 14, 230, r0);
  case 14:
    r0 = (s.i___12973 < s.r___12960);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 6; continue; }
    s.lastBrkId = 231;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[231]) return breakpoint(s, 15, 231, r0);
  case 15:
    s.tmp_3 = r0 = s.arg0;
    r0 = (s.arg1 + s.i___12973);
    s.tmp_4 = r0;
    r0 = pxsim_String_.charAt(s.tmp_3, s.tmp_4);
    s.tmp_2 = r0;
    r0 = pxsim_String_.charAt(s.arg2, s.i___12973);
    s.tmp_5 = r0;
    r0 = (s.tmp_2 != s.tmp_5);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 232;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[232]) return breakpoint(s, 16, 232, r0);
  case 16:
    r0 = -1;
    { step = 7; continue; }
  case 4:
  case 5:
    s.lastBrkId = 233;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[233]) return breakpoint(s, 17, 233, r0);
  case 17:
    r0 = (s.i___12973 + 1);
    s.i___12973 = (r0);
    { step = 3; continue; }
  case 6:
    s.lastBrkId = 234;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[234]) return breakpoint(s, 18, 234, r0);
  case 18:
    r0 = (s.arg1 + s.r___12960);
  case 7:
    return leave(s, r0)
  default: oops()
} } }
helpers_splitMatch__P4130.info = {"start":14244,"length":289,"line":480,"column":4,"endLine":489,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"splitMatch","argumentNames":["S","q","R"]}

function helpers_splitMatch__P4130_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_splitMatch__P4130, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  r___12960: undefined,
  s___12963: undefined,
  i___12973: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function helpers_stringSlice__P119(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.len___12925 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 164;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[164]) return breakpoint(s, 9, 164, r0);
  case 9:
    r0 = pxsim_String_.length(s.arg0);
    s.len___12925 = (r0);
    s.lastBrkId = 165;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[165]) return breakpoint(s, 10, 165, r0);
  case 10:
    r0 = (s.arg1 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 166;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[166]) return breakpoint(s, 11, 166, r0);
  case 11:
    s.tmp_1 = Math_max__P130_mk(s);
    r0 = (s.len___12925 + s.arg1);
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = 0;
    s.callLocIdx = 10; s.pc = 12; return s.tmp_1;
  case 12:
    r0 = s.retval;
    s.arg1 = (r0);
  case 1:
  case 2:
    s.lastBrkId = 167;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[167]) return breakpoint(s, 13, 167, r0);
  case 13:
    r0 = (s.arg2 === undefined);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 168;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[168]) return breakpoint(s, 14, 168, r0);
  case 14:
    s.arg2 = (s.len___12925);
    { step = 6; continue; }
  case 3:
    s.lastBrkId = 169;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[169]) return breakpoint(s, 15, 169, r0);
  case 15:
    r0 = (s.arg2 === null);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 170;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[170]) return breakpoint(s, 16, 170, r0);
  case 16:
    s.arg2 = (0);
  case 4:
  case 5:
  case 6:
    s.lastBrkId = 171;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[171]) return breakpoint(s, 17, 171, r0);
  case 17:
    r0 = (s.arg2 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 172;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[172]) return breakpoint(s, 18, 172, r0);
  case 18:
    r0 = (s.len___12925 + s.arg2);
    s.arg2 = (r0);
  case 7:
  case 8:
    s.lastBrkId = 173;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[173]) return breakpoint(s, 19, 173, r0);
  case 19:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_1 = r0 = s.arg1;
    r0 = (s.arg2 - s.arg1);
    s.tmp_2 = r0;
    r0 = pxsim_String_.substr(s.tmp_0, s.tmp_1, s.tmp_2);
    return leave(s, r0)
  default: oops()
} } }
helpers_stringSlice__P119.info = {"start":11496,"length":440,"line":384,"column":4,"endLine":402,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"stringSlice","argumentNames":["s","start","end"]}

function helpers_stringSlice__P119_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_stringSlice__P119, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  len___12925: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function scene_Scene_render__P2523(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.s___13057 = undefined;
    s.unnamed1656___U1 = undefined;
    s.unnamed1657___U2 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_Scene__C2496_VT)) failedCast(r0);
    s.lastBrkId = 2324;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2324]) return breakpoint(s, 12, 2324, r0);
  case 12:
    r0 = s.arg0.fields["flags"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 & 4);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2325;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2325]) return breakpoint(s, 13, 2325, r0);
  case 13:
    { step = 11; continue; }
  case 1:
  case 2:
    s.lastBrkId = 2326;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2326]) return breakpoint(s, 14, 2326, r0);
  case 14:
    s.tmp_2 = r0 = s.arg0;
    r0 = s.tmp_2.fields["flags"];
    s.tmp_4 = r0;
    r0 = (s.tmp_4 | 4);
    s.tmp_3 = r0;
    r0 = (s.tmp_2).fields["flags"] = (s.tmp_3);
    s.lastBrkId = 2327;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2327]) return breakpoint(s, 15, 2327, r0);
  case 15:
    s.lastBrkId = 2328;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2328]) return breakpoint(s, 16, 2328, r0);
  case 16:
    r0 = s.arg0.fields["flags"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 & 2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 3; continue; }
    r0 = s.tmp_0;
    { step = 4; continue; }
  case 3:
    r0 = s.arg0.fields["previousScene"];
  case 4:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 2329;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2329]) return breakpoint(s, 17, 2329, r0);
  case 17:
    s.tmp_3 = scene_Scene_render__P2523_mk(s);
    r0 = s.arg0.fields["previousScene"];
    s.tmp_3.arg0 = r0;
    s.callLocIdx = 941; s.pc = 18; return s.tmp_3;
  case 18:
    r0 = s.retval;
    { step = 6; continue; }
  case 5:
    s.lastBrkId = 2330;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2330]) return breakpoint(s, 19, 2330, r0);
  case 19:
    s.tmp_0 = scene_Background_draw__P2357_mk(s);
    r0 = s.arg0.fields["background"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 942; s.pc = 20; return s.tmp_0;
  case 20:
    r0 = s.retval;
  case 6:
    s.lastBrkId = 2331;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2331]) return breakpoint(s, 21, 2331, r0);
  case 21:
    s.lastBrkId = 2332;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2332]) return breakpoint(s, 22, 2332, r0);
  case 22:
    r0 = s.arg0.fields["flags"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 & 1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 2333;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2333]) return breakpoint(s, 23, 2333, r0);
  case 23:
    s.tmp_2 = helpers_arraySort__P105_mk(s);
    r0 = s.arg0.fields["allSprites"];
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = scene_Scene_render_inline__P13034;
    s.callLocIdx = 947; s.pc = 24; return s.tmp_2;
  case 24:
    r0 = s.retval;
    s.lastBrkId = 2335;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2335]) return breakpoint(s, 25, 2335, r0);
  case 25:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["flags"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 & -2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["flags"] = (s.tmp_1);
  case 7:
  case 8:
    s.lastBrkId = 2336;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2336]) return breakpoint(s, 26, 2336, r0);
  case 26:
    s.lastBrkId = 2337;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2337]) return breakpoint(s, 27, 2337, r0);
  case 27:
    s.s___13057 = (undefined);
    r0 = s.arg0.fields["allSprites"];
    s.unnamed1656___U1 = (r0);
    s.unnamed1657___U2 = (0);
    s.lastBrkId = 2338;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2338]) return breakpoint(s, 28, 2338, r0);
  case 28:
  case 9:
    s.tmp_0 = r0 = s.unnamed1657___U2;
    r0 = pxsim_Array__length(s.unnamed1656___U1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 10; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1656___U1, s.unnamed1657___U2);
    s.s___13057 = (r0);
    s.lastBrkId = 2339;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2339]) return breakpoint(s, 29, 2339, r0);
  case 29:
    s.tmp_2 = if___draw_2_mk(s);
    s.tmp_2.arg0 = s.s___13057;
    r0 = s.arg0.fields["camera"];
    s.tmp_2.arg1 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      setupLambda(s.tmp_2, pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "__draw"), 2);
      s.callLocIdx = 948; s.pc = 30; return s.tmp_2;
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["__draw"];
      if (s.tmp_2.fn == null) { setupLambda(s.tmp_2, s.tmp_2.arg0.fields["__draw"], 2); s.callLocIdx = 948; s.pc = 30; return s.tmp_2; }
      else if (s.tmp_2.fn.isGetter) { s.tmp_2.stage2Call = true; s.callLocIdx = 948; s.pc = 30; return s.tmp_2;; }
     else { s.callLocIdx = 948; s.pc = 30; return s.tmp_2; }
    }
  case 30:
    r0 = s.retval;
    r0 = (s.unnamed1657___U2 + 1);
    s.unnamed1657___U2 = (r0);
    { step = 9; continue; }
  case 10:
    s.unnamed1656___U1 = (undefined);
    s.lastBrkId = 2340;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2340]) return breakpoint(s, 31, 2340, r0);
  case 31:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["flags"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 & -5);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["flags"] = (s.tmp_1);
  case 11:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_Scene_render__P2523.info = {"start":7844,"length":917,"line":221,"column":8,"endLine":245,"endColumn":9,"fileName":"pxt_modules/game/scene.ts","functionName":"render","argumentNames":["this"]}

function scene_Scene_render__P2523_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Scene_render__P2523, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  s___13057: undefined,
  unnamed1656___U1: undefined,
  unnamed1657___U2: undefined,
  arg0: undefined,
} }





function scene_Scene_render_inline__P13034(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 2334;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2334]) return breakpoint(s, 3, 2334, r0);
  case 3:
    s.tmp_2 = if_z_1_mk(s);
    s.tmp_2.arg0 = s.arg0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "z");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["z"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["z"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 943; s.pc = 4; return s.tmp_2; }
    }
  case 4:
    r0 = s.retval;
    s.tmp_1 = r0;
    s.tmp_4 = if_z_1_mk(s);
    s.tmp_4.arg0 = s.arg1;
    if (!s.tmp_4.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_4.arg0, "z");
    } else {
      s.tmp_4.fn = s.tmp_4.arg0.vtable.iface["z"];
      if (s.tmp_4.fn == null) { s.retval = s.tmp_4.arg0.fields["z"]; }
      else if (!s.tmp_4.fn.isGetter) { s.retval = bind(s.tmp_4); }
     else { s.callLocIdx = 944; s.pc = 5; return s.tmp_4; }
    }
  case 5:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_1 - s.tmp_3);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    s.tmp_6 = if_id_1_mk(s);
    s.tmp_6.arg0 = s.arg0;
    if (!s.tmp_6.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_6.arg0, "id");
    } else {
      s.tmp_6.fn = s.tmp_6.arg0.vtable.iface["id"];
      if (s.tmp_6.fn == null) { s.retval = s.tmp_6.arg0.fields["id"]; }
      else if (!s.tmp_6.fn.isGetter) { s.retval = bind(s.tmp_6); }
     else { s.callLocIdx = 945; s.pc = 6; return s.tmp_6; }
    }
  case 6:
    r0 = s.retval;
    s.tmp_5 = r0;
    s.tmp_8 = if_id_1_mk(s);
    s.tmp_8.arg0 = s.arg1;
    if (!s.tmp_8.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_8.arg0, "id");
    } else {
      s.tmp_8.fn = s.tmp_8.arg0.vtable.iface["id"];
      if (s.tmp_8.fn == null) { s.retval = s.tmp_8.arg0.fields["id"]; }
      else if (!s.tmp_8.fn.isGetter) { s.retval = bind(s.tmp_8); }
     else { s.callLocIdx = 946; s.pc = 7; return s.tmp_8; }
    }
  case 7:
    r0 = s.retval;
    s.tmp_7 = r0;
    r0 = (s.tmp_5 - s.tmp_7);
  case 2:
    // jmp value (already in r0)
    s.tmp_9 = r0;
    r0 = s.tmp_9;
    return leave(s, r0)
  default: oops()
} } }
scene_Scene_render_inline__P13034.info = {"start":8422,"length":52,"line":235,"column":37,"endLine":235,"endColumn":89,"fileName":"pxt_modules/game/scene.ts","functionName":"inline","argumentNames":["a","b"]}

function scene_Scene_render_inline__P13034_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Scene_render_inline__P13034, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function scene_Background_draw__P2357(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_Background__C2348_VT)) failedCast(r0);
    s.lastBrkId = 2024;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2024]) return breakpoint(s, 5, 2024, r0);
  case 5:
    r0 = s.arg0.fields["color"];
    s.tmp_0 = r0;
    r0 = pxsim_ImageMethods.fill(globals.screen___1827, s.tmp_0);
    s.lastBrkId = 2025;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2025]) return breakpoint(s, 6, 2025, r0);
  case 6:
    r0 = s.arg0.fields["_image"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2026;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2026]) return breakpoint(s, 7, 2026, r0);
  case 7:
    r0 = s.arg0.fields["_image"];
    s.tmp_1 = r0;
    r0 = pxsim_ImageMethods.drawTransparentImage(globals.screen___1827, s.tmp_1, 0, 0);
  case 1:
  case 2:
    s.lastBrkId = 2027;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2027]) return breakpoint(s, 8, 2027, r0);
  case 8:
    r0 = s.arg0.fields["_layers"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2028;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2028]) return breakpoint(s, 9, 2028, r0);
  case 9:
    r0 = pxsim_pxtcore_mkAction(1, scene_Background_draw_inline__P13089);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_1, 0, s.arg0);
    s.tmp_2 = helpers_arrayForEach__P109_mk(s);
    r0 = s.arg0.fields["_layers"];
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = s.tmp_1;
    s.callLocIdx = 818; s.pc = 10; return s.tmp_2;
  case 10:
    r0 = s.retval;
  case 3:
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_Background_draw__P2357.info = {"start":1166,"length":545,"line":48,"column":8,"endLine":60,"endColumn":9,"fileName":"pxt_modules/game/background.ts","functionName":"draw","argumentNames":["this"]}

function scene_Background_draw__P2357_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Background_draw__P2357, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function scene_Background_draw_inline__P13089(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.ox___13091 = undefined;
    s.oy___13102 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 2029;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2029]) return breakpoint(s, 1, 2029, r0);
  case 1:
    r0 = s.caps[0].fields["camera"];
    r0 = r0.fields["drawOffsetX"];
    s.tmp_1 = r0;
    r0 = s.arg0.fields["distance"];
    s.tmp_3 = r0;
    r0 = (1 + s.tmp_3);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 / s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim.Math_.round(s.tmp_0);
    s.ox___13091 = (r0);
    s.lastBrkId = 2030;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2030]) return breakpoint(s, 2, 2030, r0);
  case 2:
    r0 = s.caps[0].fields["camera"];
    r0 = r0.fields["drawOffsetY"];
    s.tmp_1 = r0;
    r0 = s.arg0.fields["distance"];
    s.tmp_3 = r0;
    r0 = (1 + s.tmp_3);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 / s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim.Math_.round(s.tmp_0);
    s.oy___13102 = (r0);
    s.lastBrkId = 2031;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2031]) return breakpoint(s, 3, 2031, r0);
  case 3:
    s.tmp_0 = scene_BackgroundLayer_draw__P2366_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.ox___13091;
    s.tmp_0.arg2 = s.oy___13102;
    s.callLocIdx = 817; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_Background_draw_inline__P13089.info = {"start":1373,"length":312,"line":53,"column":37,"endLine":58,"endColumn":17,"fileName":"pxt_modules/game/background.ts","functionName":"inline","argumentNames":["layer"]}

function scene_Background_draw_inline__P13089_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Background_draw_inline__P13089, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  ox___13091: undefined,
  oy___13102: undefined,
  arg0: undefined,
} }





function scene_BackgroundLayer_draw__P2366(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.w___13120 = undefined;
    s.h___13123 = undefined;
    s.pw___13126 = undefined;
    s.ph___13130 = undefined;
    s.rx___13139 = undefined;
    s.ry___13142 = undefined;
    s.y___13211 = undefined;
    s.py___13212 = undefined;
    s.dh___13221 = undefined;
    s.x___13229 = undefined;
    s.rxl___13230 = undefined;
    s.px___13236 = undefined;
    s.dw___13240 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_BackgroundLayer__C2358_VT)) failedCast(r0);
    s.lastBrkId = 2050;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2050]) return breakpoint(s, 24, 2050, r0);
  case 24:
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.w___13120 = (r0);
    s.lastBrkId = 2051;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2051]) return breakpoint(s, 25, 2051, r0);
  case 25:
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.h___13123 = (r0);
    s.lastBrkId = 2052;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2052]) return breakpoint(s, 26, 2052, r0);
  case 26:
    r0 = s.arg0.fields["img"];
    s.tmp_0 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_0);
    s.pw___13126 = (r0);
    s.lastBrkId = 2053;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2053]) return breakpoint(s, 27, 2053, r0);
  case 27:
    r0 = s.arg0.fields["img"];
    s.tmp_0 = r0;
    r0 = pxsim_ImageMethods.height(s.tmp_0);
    s.ph___13130 = (r0);
    s.lastBrkId = 2054;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2054]) return breakpoint(s, 28, 2054, r0);
  case 28:
    r0 = pxsim_numops_toBoolDecr(s.pw___13126);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = pxsim_numops_toBoolDecr(s.ph___13130);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
  case 2:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2055;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2055]) return breakpoint(s, 29, 2055, r0);
  case 29:
    { step = 23; continue; }
  case 3:
  case 4:
    s.lastBrkId = 2056;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2056]) return breakpoint(s, 30, 2056, r0);
  case 30:
    r0 = (0 - s.arg1);
    s.rx___13139 = (r0);
    s.lastBrkId = 2057;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2057]) return breakpoint(s, 31, 2057, r0);
  case 31:
    r0 = (0 - s.arg2);
    s.ry___13142 = (r0);
    s.lastBrkId = 2058;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2058]) return breakpoint(s, 32, 2058, r0);
  case 32:
    r0 = s.arg0.fields["alignX"];
    s.tmp_0 = r0;
    r0 = pxsim_pxtcore.switch_eq(2, s.tmp_0);
    if (r0) { step = 5; continue; }
    r0 = pxsim_pxtcore.switch_eq(5, s.tmp_0);
    if (r0) { step = 6; continue; }
    r0 = s.tmp_0;
    { step = 7; continue; }
  case 5:
    s.lastBrkId = 2059;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2059]) return breakpoint(s, 33, 2059, r0);
  case 33:
    s.tmp_1 = r0 = s.rx___13139;
    r0 = (s.w___13120 + s.pw___13126);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 - s.tmp_2);
    s.rx___13139 = (r0);
    s.lastBrkId = 2060;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2060]) return breakpoint(s, 34, 2060, r0);
  case 34:
    { step = 7; continue; }
  case 6:
    s.lastBrkId = 2061;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2061]) return breakpoint(s, 35, 2061, r0);
  case 35:
    s.tmp_0 = r0 = s.rx___13139;
    r0 = (s.w___13120 + s.pw___13126);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 >> 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 - s.tmp_1);
    s.rx___13139 = (r0);
    s.lastBrkId = 2062;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2062]) return breakpoint(s, 36, 2062, r0);
  case 36:
  case 7:
    s.lastBrkId = 2063;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2063]) return breakpoint(s, 37, 2063, r0);
  case 37:
    r0 = s.arg0.fields["alignY"];
    s.tmp_0 = r0;
    r0 = pxsim_pxtcore.switch_eq(4, s.tmp_0);
    if (r0) { step = 8; continue; }
    r0 = pxsim_pxtcore.switch_eq(5, s.tmp_0);
    if (r0) { step = 9; continue; }
    r0 = s.tmp_0;
    { step = 10; continue; }
  case 8:
    s.lastBrkId = 2064;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2064]) return breakpoint(s, 38, 2064, r0);
  case 38:
    s.tmp_1 = r0 = s.ry___13142;
    r0 = (s.h___13123 + s.ph___13130);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 - s.tmp_2);
    s.ry___13142 = (r0);
    s.lastBrkId = 2065;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2065]) return breakpoint(s, 39, 2065, r0);
  case 39:
    { step = 10; continue; }
  case 9:
    s.lastBrkId = 2066;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2066]) return breakpoint(s, 40, 2066, r0);
  case 40:
    s.tmp_0 = r0 = s.ry___13142;
    r0 = (s.h___13123 + s.ph___13130);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 >> 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 - s.tmp_1);
    s.ry___13142 = (r0);
    s.lastBrkId = 2067;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2067]) return breakpoint(s, 41, 2067, r0);
  case 41:
  case 10:
    s.lastBrkId = 2068;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2068]) return breakpoint(s, 42, 2068, r0);
  case 42:
    r0 = (s.rx___13139 % s.w___13120);
    s.rx___13139 = (r0);
    s.lastBrkId = 2069;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2069]) return breakpoint(s, 43, 2069, r0);
  case 43:
    r0 = (s.rx___13139 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 11; continue; }
    s.lastBrkId = 2070;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2070]) return breakpoint(s, 44, 2070, r0);
  case 44:
    r0 = (s.rx___13139 + s.w___13120);
    s.rx___13139 = (r0);
  case 11:
  case 12:
    s.lastBrkId = 2071;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2071]) return breakpoint(s, 45, 2071, r0);
  case 45:
    r0 = (s.ry___13142 % s.h___13123);
    s.ry___13142 = (r0);
    s.lastBrkId = 2072;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2072]) return breakpoint(s, 46, 2072, r0);
  case 46:
    r0 = (s.ry___13142 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 13; continue; }
    s.lastBrkId = 2073;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2073]) return breakpoint(s, 47, 2073, r0);
  case 47:
    r0 = (s.ry___13142 + s.h___13123);
    s.ry___13142 = (r0);
  case 13:
  case 14:
    s.lastBrkId = 2074;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2074]) return breakpoint(s, 48, 2074, r0);
  case 48:
    r0 = pxsim.Math_.floor(s.rx___13139);
    s.rx___13139 = (r0);
    s.lastBrkId = 2075;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2075]) return breakpoint(s, 49, 2075, r0);
  case 49:
    r0 = pxsim.Math_.floor(s.ry___13142);
    s.ry___13142 = (r0);
    s.lastBrkId = 2076;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2076]) return breakpoint(s, 50, 2076, r0);
  case 50:
    s.y___13211 = (0);
    s.lastBrkId = 2077;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2077]) return breakpoint(s, 51, 2077, r0);
  case 51:
    s.py___13212 = (0);
    s.lastBrkId = 2078;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2078]) return breakpoint(s, 52, 2078, r0);
  case 52:
  case 15:
    s.lastBrkId = 2079;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2079]) return breakpoint(s, 53, 2079, r0);
  case 53:
    r0 = (s.y___13211 < s.h___13123);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 22; continue; }
    s.lastBrkId = 2080;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2080]) return breakpoint(s, 54, 2080, r0);
  case 54:
    r0 = (s.y___13211 % s.ph___13130);
    s.py___13212 = (r0);
    s.lastBrkId = 2081;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2081]) return breakpoint(s, 55, 2081, r0);
  case 55:
    s.tmp_0 = Math_min__P131_mk(s);
    r0 = (s.ph___13130 - s.py___13212);
    s.tmp_0.arg0 = r0;
    r0 = (s.h___13123 - s.ry___13142);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 820; s.pc = 56; return s.tmp_0;
  case 56:
    r0 = s.retval;
    s.dh___13221 = (r0);
    s.lastBrkId = 2082;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2082]) return breakpoint(s, 57, 2082, r0);
  case 57:
    s.x___13229 = (0);
    s.lastBrkId = 2083;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2083]) return breakpoint(s, 58, 2083, r0);
  case 58:
    s.rxl___13230 = (s.rx___13139);
    s.lastBrkId = 2084;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2084]) return breakpoint(s, 59, 2084, r0);
  case 59:
  case 16:
    s.lastBrkId = 2085;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2085]) return breakpoint(s, 60, 2085, r0);
  case 60:
    r0 = (s.x___13229 < s.w___13120);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 19; continue; }
    s.lastBrkId = 2086;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2086]) return breakpoint(s, 61, 2086, r0);
  case 61:
    r0 = (s.x___13229 % s.pw___13126);
    s.px___13236 = (r0);
    s.lastBrkId = 2087;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2087]) return breakpoint(s, 62, 2087, r0);
  case 62:
    s.tmp_0 = Math_min__P131_mk(s);
    r0 = (s.pw___13126 - s.px___13236);
    s.tmp_0.arg0 = r0;
    r0 = (s.w___13120 - s.rxl___13230);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 821; s.pc = 63; return s.tmp_0;
  case 63:
    r0 = s.retval;
    s.dw___13240 = (r0);
    s.lastBrkId = 2088;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2088]) return breakpoint(s, 64, 2088, r0);
  case 64:
    r0 = s.arg0.fields["img"];
    s.tmp_0 = r0;
    r0 = pxsim_ImageMethods.drawImage(globals.screen___1827, s.tmp_0, s.rxl___13230, s.ry___13142);
    s.lastBrkId = 2089;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2089]) return breakpoint(s, 65, 2089, r0);
  case 65:
    r0 = (s.rxl___13230 + s.dw___13240);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 % s.w___13120);
    s.rxl___13230 = (r0);
    s.lastBrkId = 2090;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2090]) return breakpoint(s, 66, 2090, r0);
  case 66:
    r0 = s.arg0.fields["repeatX"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 17; continue; }
    r0 = s.dw___13240;
    { step = 18; continue; }
  case 17:
    r0 = s.w___13120;
  case 18:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = (s.x___13229 + s.tmp_1);
    s.x___13229 = (r0);
    { step = 16; continue; }
  case 19:
    s.lastBrkId = 2091;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2091]) return breakpoint(s, 67, 2091, r0);
  case 67:
    r0 = (s.ry___13142 + s.dh___13221);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 % s.h___13123);
    s.ry___13142 = (r0);
    s.lastBrkId = 2092;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2092]) return breakpoint(s, 68, 2092, r0);
  case 68:
    r0 = s.arg0.fields["repeatY"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 20; continue; }
    r0 = s.dh___13221;
    { step = 21; continue; }
  case 20:
    r0 = s.h___13123;
  case 21:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = (s.y___13211 + s.tmp_1);
    s.y___13211 = (r0);
    { step = 15; continue; }
  case 22:
  case 23:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_BackgroundLayer_draw__P2366.info = {"start":3063,"length":1537,"line":99,"column":8,"endLine":144,"endColumn":9,"fileName":"pxt_modules/game/background.ts","functionName":"draw","argumentNames":["this","offsetX","offsetY"]}

function scene_BackgroundLayer_draw__P2366_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_BackgroundLayer_draw__P2366, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  w___13120: undefined,
  h___13123: undefined,
  pw___13126: undefined,
  ph___13130: undefined,
  rx___13139: undefined,
  ry___13142: undefined,
  y___13211: undefined,
  py___13212: undefined,
  dh___13221: undefined,
  x___13229: undefined,
  rxl___13230: undefined,
  px___13236: undefined,
  dw___13240: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function scene_Camera_update__P2453(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.elapsed___13321 = undefined;
    s.percentComplete___13335 = undefined;
    s.damp___13342 = undefined;
    s.f___13351 = undefined;
    s.x___13357 = undefined;
    s.y___13364 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_Camera__C2437_VT)) failedCast(r0);
    s.lastBrkId = 2229;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2229]) return breakpoint(s, 9, 2229, r0);
  case 9:
    r0 = s.arg0.fields["sprite"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2230;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2230]) return breakpoint(s, 10, 2230, r0);
  case 10:
    s.tmp_1 = scene_Camera_offsetX__P2443_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.tmp_3 = Sprite_x__P2101_mk(s);
    r0 = s.arg0.fields["sprite"];
    s.tmp_3.arg0 = r0;
    s.callLocIdx = 902; s.pc = 12; return s.tmp_3;
  case 12:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_5 = r0;
    r0 = (s.tmp_5 >> 1);
    s.tmp_4 = r0;
    r0 = (s.tmp_2 - s.tmp_4);
    s.tmp_1.arg1 = r0;
    s.callLocIdx = 903; s.pc = 11; return s.tmp_1;
  case 11:
    r0 = s.retval;
    s.lastBrkId = 2231;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2231]) return breakpoint(s, 13, 2231, r0);
  case 13:
    s.tmp_0 = scene_Camera_offsetY__P2445_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_2 = Sprite_y__P2103_mk(s);
    r0 = s.arg0.fields["sprite"];
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 904; s.pc = 15; return s.tmp_2;
  case 15:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 >> 1);
    s.tmp_3 = r0;
    r0 = (s.tmp_1 - s.tmp_3);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 905; s.pc = 14; return s.tmp_0;
  case 14:
    r0 = s.retval;
  case 1:
  case 2:
    s.lastBrkId = 2232;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2232]) return breakpoint(s, 16, 2232, r0);
  case 16:
    s.tmp_0 = scene_Camera_offsetX__P2443_mk(s);
    s.tmp_1 = r0 = s.arg0;
    s.tmp_0.arg0 = r0;
    s.tmp_3 = scene_Camera_offsetX__P2442_mk(s);
    s.tmp_3.arg0 = s.tmp_1;
    s.callLocIdx = 906; s.pc = 18; return s.tmp_3;
  case 18:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_2 | 0);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 907; s.pc = 17; return s.tmp_0;
  case 17:
    r0 = s.retval;
    s.lastBrkId = 2233;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2233]) return breakpoint(s, 19, 2233, r0);
  case 19:
    s.tmp_0 = scene_Camera_offsetY__P2445_mk(s);
    s.tmp_1 = r0 = s.arg0;
    s.tmp_0.arg0 = r0;
    s.tmp_3 = scene_Camera_offsetY__P2444_mk(s);
    s.tmp_3.arg0 = s.tmp_1;
    s.callLocIdx = 908; s.pc = 21; return s.tmp_3;
  case 21:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_2 | 0);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 909; s.pc = 20; return s.tmp_0;
  case 20:
    r0 = s.retval;
    s.lastBrkId = 2234;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2234]) return breakpoint(s, 22, 2234, r0);
  case 22:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = scene_Camera_offsetX__P2442_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 910; s.pc = 23; return s.tmp_2;
  case 23:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["drawOffsetX"] = (s.tmp_1);
    s.lastBrkId = 2235;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2235]) return breakpoint(s, 24, 2235, r0);
  case 24:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = scene_Camera_offsetY__P2444_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 911; s.pc = 25; return s.tmp_2;
  case 25:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["drawOffsetY"] = (s.tmp_1);
    s.lastBrkId = 2236;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2236]) return breakpoint(s, 26, 2236, r0);
  case 26:
    r0 = s.arg0.fields["shakeStartTime"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 !== undefined);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 2237;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2237]) return breakpoint(s, 27, 2237, r0);
  case 27:
    r0 = pxsim.control.millis();
    s.tmp_2 = r0;
    r0 = s.arg0.fields["shakeStartTime"];
    s.tmp_3 = r0;
    r0 = (s.tmp_2 - s.tmp_3);
    s.elapsed___13321 = (r0);
    s.lastBrkId = 2238;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2238]) return breakpoint(s, 28, 2238, r0);
  case 28:
    r0 = s.arg0.fields["shakeDuration"];
    s.tmp_1 = r0;
    r0 = (s.elapsed___13321 >= s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2239;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2239]) return breakpoint(s, 29, 2239, r0);
  case 29:
    r0 = (s.arg0).fields["shakeStartTime"] = (undefined);
    { step = 6; continue; }
  case 3:
    s.lastBrkId = 2240;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2240]) return breakpoint(s, 30, 2240, r0);
  case 30:
    r0 = s.arg0.fields["shakeDuration"];
    s.tmp_0 = r0;
    r0 = (s.elapsed___13321 / s.tmp_0);
    s.percentComplete___13335 = (r0);
    s.lastBrkId = 2241;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2241]) return breakpoint(s, 31, 2241, r0);
  case 31:
    s.damp___13342 = (1);
    s.lastBrkId = 2242;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2242]) return breakpoint(s, 32, 2242, r0);
  case 32:
    r0 = (s.percentComplete___13335 >= 0.75);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 2243;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2243]) return breakpoint(s, 33, 2243, r0);
  case 33:
    s.tmp_1 = Math_max__P130_mk(s);
    s.tmp_1.arg0 = 0;
    r0 = (1 - s.percentComplete___13335);
    s.tmp_1.arg1 = r0;
    s.callLocIdx = 912; s.pc = 34; return s.tmp_1;
  case 34:
    r0 = s.retval;
    s.damp___13342 = (r0);
  case 4:
  case 5:
    s.lastBrkId = 2244;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2244]) return breakpoint(s, 35, 2244, r0);
  case 35:
    r0 = s.arg0.fields["shakeAmplitude"];
    s.tmp_0 = r0;
    r0 = (s.tmp_0 * s.damp___13342);
    s.f___13351 = (r0);
    s.lastBrkId = 2245;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2245]) return breakpoint(s, 36, 2245, r0);
  case 36:
    r0 = pxsim.Math_.random();
    s.tmp_1 = r0;
    r0 = (s.tmp_1 * s.f___13351);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 >> 0);
    s.x___13357 = (r0);
    s.lastBrkId = 2246;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2246]) return breakpoint(s, 37, 2246, r0);
  case 37:
    r0 = pxsim.Math_.random();
    s.tmp_1 = r0;
    r0 = (s.tmp_1 * s.f___13351);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 >> 0);
    s.y___13364 = (r0);
    s.lastBrkId = 2247;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2247]) return breakpoint(s, 38, 2247, r0);
  case 38:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["drawOffsetX"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + s.x___13357);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["drawOffsetX"] = (s.tmp_1);
    s.lastBrkId = 2248;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2248]) return breakpoint(s, 39, 2248, r0);
  case 39:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["drawOffsetY"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + s.y___13364);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["drawOffsetY"] = (s.tmp_1);
  case 6:
  case 7:
  case 8:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_Camera_update__P2453.info = {"start":2297,"length":1397,"line":77,"column":8,"endLine":112,"endColumn":9,"fileName":"pxt_modules/game/camera.ts","functionName":"update","argumentNames":["this"]}

function scene_Camera_update__P2453_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Camera_update__P2453, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  elapsed___13321: undefined,
  percentComplete___13335: undefined,
  damp___13342: undefined,
  f___13351: undefined,
  x___13357: undefined,
  y___13364: undefined,
  arg0: undefined,
} }





function scene_Camera_offsetY__P2445(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.scene___13399 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_Camera__C2437_VT)) failedCast(r0);
    s.lastBrkId = 2221;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2221]) return breakpoint(s, 5, 2221, r0);
  case 5:
    s.tmp_0 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 899; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    s.scene___13399 = (r0);
    s.lastBrkId = 2222;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2222]) return breakpoint(s, 7, 2222, r0);
  case 7:
    r0 = s.scene___13399.fields["tileMap"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    s.tmp_1 = tiles_TileMap_enabled__P2411_mk(s);
    r0 = s.scene___13399.fields["tileMap"];
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 900; s.pc = 8; return s.tmp_1;
  case 8:
    r0 = s.retval;
  case 2:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2223;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2223]) return breakpoint(s, 9, 2223, r0);
  case 9:
    s.tmp_3 = r0 = s.arg0;
    s.tmp_5 = tiles_TileMap_offsetY__P2406_mk(s);
    r0 = s.scene___13399.fields["tileMap"];
    s.tmp_5.arg0 = r0;
    s.tmp_5.arg1 = s.arg1;
    s.callLocIdx = 901; s.pc = 10; return s.tmp_5;
  case 10:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = (s.tmp_3).fields["_offsetY"] = (s.tmp_4);
    { step = 4; continue; }
  case 3:
    s.lastBrkId = 2224;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2224]) return breakpoint(s, 11, 2224, r0);
  case 11:
    r0 = (s.arg0).fields["_offsetY"] = (s.arg1);
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_Camera_offsetY__P2445.info = {"start":1034,"length":267,"line":37,"column":8,"endLine":44,"endColumn":9,"fileName":"pxt_modules/game/camera.ts","functionName":"offsetY","argumentNames":["this","v"]}

function scene_Camera_offsetY__P2445_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Camera_offsetY__P2445, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  scene___13399: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function tiles_TileMap_enabled__P2411(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMap__C2400_VT)) failedCast(r0);
    s.lastBrkId = 2143;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2143]) return breakpoint(s, 1, 2143, r0);
  case 1:
    r0 = s.arg0.fields["_map"];
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_0);
    return leaveAccessor(s, r0)
  default: oops()
} } }
tiles_TileMap_enabled__P2411.info = {"start":7163,"length":66,"line":262,"column":8,"endLine":264,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"enabled","argumentNames":["this"]}
tiles_TileMap_enabled__P2411.isGetter = true;

function tiles_TileMap_enabled__P2411_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMap_enabled__P2411, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
} }





function tiles_TileMap_offsetY__P2406(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMap__C2400_VT)) failedCast(r0);
    s.lastBrkId = 2139;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2139]) return breakpoint(s, 1, 2139, r0);
  case 1:
    s.tmp_0 = Math_clamp__P127_mk(s);
    s.tmp_0.arg0 = 0;
    s.tmp_1 = Math_max__P130_mk(s);
    s.tmp_3 = tiles_TileMap_areaHeight__P2408_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.callLocIdx = 838; s.pc = 4; return s.tmp_3;
  case 4:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_4 = r0;
    r0 = (s.tmp_2 - s.tmp_4);
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = 0;
    s.callLocIdx = 839; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = s.arg1;
    s.callLocIdx = 840; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leave(s, r0)
  default: oops()
} } }
tiles_TileMap_offsetY__P2406.info = {"start":6616,"length":123,"line":240,"column":8,"endLine":242,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"offsetY","argumentNames":["this","value"]}

function tiles_TileMap_offsetY__P2406_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMap_offsetY__P2406, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function tiles_TileMap_areaHeight__P2408(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMap__C2400_VT)) failedCast(r0);
    s.lastBrkId = 2141;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2141]) return breakpoint(s, 3, 2141, r0);
  case 3:
    r0 = s.arg0.fields["_map"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.tmp_2 = tiles_TileMapData_height__P2390_mk(s);
    r0 = s.arg0.fields["_map"];
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 843; s.pc = 4; return s.tmp_2;
  case 4:
    r0 = s.retval;
    s.tmp_1 = r0;
    s.tmp_4 = tiles_TileMap_scale__P2403_mk(s);
    s.tmp_4.arg0 = s.arg0;
    s.callLocIdx = 844; s.pc = 5; return s.tmp_4;
  case 5:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_1 << s.tmp_3);
    { step = 2; continue; }
  case 1:
    r0 = 0;
  case 2:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    r0 = s.tmp_5;
    return leave(s, r0)
  default: oops()
} } }
tiles_TileMap_areaHeight__P2408.info = {"start":6850,"length":93,"line":248,"column":8,"endLine":250,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"areaHeight","argumentNames":["this"]}

function tiles_TileMap_areaHeight__P2408_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMap_areaHeight__P2408, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  arg0: undefined,
} }





function tiles_TileMap_scale__P2403(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMap__C2400_VT)) failedCast(r0);
    s.lastBrkId = 2133;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2133]) return breakpoint(s, 1, 2133, r0);
  case 1:
    r0 = s.arg0.fields["_scale"];
    return leaveAccessor(s, r0)
  default: oops()
} } }
tiles_TileMap_scale__P2403.info = {"start":6181,"length":55,"line":221,"column":8,"endLine":223,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"scale","argumentNames":["this"]}
tiles_TileMap_scale__P2403.isGetter = true;

function tiles_TileMap_scale__P2403_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMap_scale__P2403, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function tiles_TileMapData_height__P2390(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMapData__C2387_VT)) failedCast(r0);
    s.lastBrkId = 2110;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2110]) return breakpoint(s, 1, 2110, r0);
  case 1:
    r0 = s.arg0.fields["_height"];
    return leaveAccessor(s, r0)
  default: oops()
} } }
tiles_TileMapData_height__P2390.info = {"start":3734,"length":65,"line":139,"column":8,"endLine":141,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"height","argumentNames":["this"]}
tiles_TileMapData_height__P2390.isGetter = true;

function tiles_TileMapData_height__P2390_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMapData_height__P2390, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function scene_Camera_offsetY__P2444(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_Camera__C2437_VT)) failedCast(r0);
    s.lastBrkId = 2220;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2220]) return breakpoint(s, 1, 2220, r0);
  case 1:
    r0 = s.arg0.fields["_offsetY"];
    return leaveAccessor(s, r0)
  default: oops()
} } }
scene_Camera_offsetY__P2444.info = {"start":966,"length":59,"line":34,"column":8,"endLine":36,"endColumn":9,"fileName":"pxt_modules/game/camera.ts","functionName":"offsetY","argumentNames":["this"]}
scene_Camera_offsetY__P2444.isGetter = true;

function scene_Camera_offsetY__P2444_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Camera_offsetY__P2444, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function scene_Camera_offsetX__P2443(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.scene___13466 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_Camera__C2437_VT)) failedCast(r0);
    s.lastBrkId = 2216;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2216]) return breakpoint(s, 5, 2216, r0);
  case 5:
    s.tmp_0 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 896; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    s.scene___13466 = (r0);
    s.lastBrkId = 2217;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2217]) return breakpoint(s, 7, 2217, r0);
  case 7:
    r0 = s.scene___13466.fields["tileMap"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    s.tmp_1 = tiles_TileMap_enabled__P2411_mk(s);
    r0 = s.scene___13466.fields["tileMap"];
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 897; s.pc = 8; return s.tmp_1;
  case 8:
    r0 = s.retval;
  case 2:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2218;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2218]) return breakpoint(s, 9, 2218, r0);
  case 9:
    s.tmp_3 = r0 = s.arg0;
    s.tmp_5 = tiles_TileMap_offsetX__P2405_mk(s);
    r0 = s.scene___13466.fields["tileMap"];
    s.tmp_5.arg0 = r0;
    s.tmp_5.arg1 = s.arg1;
    s.callLocIdx = 898; s.pc = 10; return s.tmp_5;
  case 10:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = (s.tmp_3).fields["_offsetX"] = (s.tmp_4);
    { step = 4; continue; }
  case 3:
    s.lastBrkId = 2219;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2219]) return breakpoint(s, 11, 2219, r0);
  case 11:
    r0 = (s.arg0).fields["_offsetX"] = (s.arg1);
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_Camera_offsetX__P2443.info = {"start":690,"length":267,"line":26,"column":8,"endLine":33,"endColumn":9,"fileName":"pxt_modules/game/camera.ts","functionName":"offsetX","argumentNames":["this","v"]}

function scene_Camera_offsetX__P2443_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Camera_offsetX__P2443, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  scene___13466: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function tiles_TileMap_offsetX__P2405(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMap__C2400_VT)) failedCast(r0);
    s.lastBrkId = 2138;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2138]) return breakpoint(s, 1, 2138, r0);
  case 1:
    s.tmp_0 = Math_clamp__P127_mk(s);
    s.tmp_0.arg0 = 0;
    s.tmp_1 = Math_max__P130_mk(s);
    s.tmp_3 = tiles_TileMap_areaWidth__P2407_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.callLocIdx = 835; s.pc = 4; return s.tmp_3;
  case 4:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_4 = r0;
    r0 = (s.tmp_2 - s.tmp_4);
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = 0;
    s.callLocIdx = 836; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = s.arg1;
    s.callLocIdx = 837; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leave(s, r0)
  default: oops()
} } }
tiles_TileMap_offsetX__P2405.info = {"start":6485,"length":121,"line":236,"column":8,"endLine":238,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"offsetX","argumentNames":["this","value"]}

function tiles_TileMap_offsetX__P2405_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMap_offsetX__P2405, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function tiles_TileMap_areaWidth__P2407(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMap__C2400_VT)) failedCast(r0);
    s.lastBrkId = 2140;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2140]) return breakpoint(s, 3, 2140, r0);
  case 3:
    r0 = s.arg0.fields["_map"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.tmp_2 = tiles_TileMapData_width__P2389_mk(s);
    r0 = s.arg0.fields["_map"];
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 841; s.pc = 4; return s.tmp_2;
  case 4:
    r0 = s.retval;
    s.tmp_1 = r0;
    s.tmp_4 = tiles_TileMap_scale__P2403_mk(s);
    s.tmp_4.arg0 = s.arg0;
    s.callLocIdx = 842; s.pc = 5; return s.tmp_4;
  case 5:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_1 << s.tmp_3);
    { step = 2; continue; }
  case 1:
    r0 = 0;
  case 2:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    r0 = s.tmp_5;
    return leave(s, r0)
  default: oops()
} } }
tiles_TileMap_areaWidth__P2407.info = {"start":6749,"length":91,"line":244,"column":8,"endLine":246,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"areaWidth","argumentNames":["this"]}

function tiles_TileMap_areaWidth__P2407_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMap_areaWidth__P2407, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  arg0: undefined,
} }





function tiles_TileMapData_width__P2389(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMapData__C2387_VT)) failedCast(r0);
    s.lastBrkId = 2109;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2109]) return breakpoint(s, 1, 2109, r0);
  case 1:
    r0 = s.arg0.fields["_width"];
    return leaveAccessor(s, r0)
  default: oops()
} } }
tiles_TileMapData_width__P2389.info = {"start":3661,"length":63,"line":135,"column":8,"endLine":137,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"width","argumentNames":["this"]}
tiles_TileMapData_width__P2389.isGetter = true;

function tiles_TileMapData_width__P2389_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMapData_width__P2389, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function scene_Camera_offsetX__P2442(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_Camera__C2437_VT)) failedCast(r0);
    s.lastBrkId = 2215;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2215]) return breakpoint(s, 1, 2215, r0);
  case 1:
    r0 = s.arg0.fields["_offsetX"];
    return leaveAccessor(s, r0)
  default: oops()
} } }
scene_Camera_offsetX__P2442.info = {"start":622,"length":59,"line":23,"column":8,"endLine":25,"endColumn":9,"fileName":"pxt_modules/game/camera.ts","functionName":"offsetX","argumentNames":["this"]}
scene_Camera_offsetX__P2442.isGetter = true;

function scene_Camera_offsetX__P2442_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Camera_offsetX__P2442, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function Sprite_y__P2103(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1194;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1194]) return breakpoint(s, 1, 1194, r0);
  case 1:
    s.tmp_1 = Fx_toFloat__P171_mk(s);
    r0 = s.arg0.fields["_y"];
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 278; s.pc = 2; return s.tmp_1;
  case 2:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = s.arg0.fields["_image"];
    s.tmp_4 = r0;
    r0 = pxsim_ImageMethods.height(s.tmp_4);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 / 2);
    s.tmp_2 = r0;
    r0 = (s.tmp_0 + s.tmp_2);
    return leaveAccessor(s, r0)
  default: oops()
} } }
Sprite_y__P2103.info = {"start":2132,"length":85,"line":87,"column":4,"endLine":89,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"y","argumentNames":["this"]}
Sprite_y__P2103.isGetter = true;

function Sprite_y__P2103_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_y__P2103, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }





function Fx_toFloat__P171(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 282;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[282]) return breakpoint(s, 1, 282, r0);
  case 1:
    r0 = (s.arg0 / 256);
    return leave(s, r0)
  default: oops()
} } }
Fx_toFloat__P171.info = {"start":2235,"length":81,"line":71,"column":4,"endLine":73,"endColumn":5,"fileName":"pxt_modules/base/fixed.ts","functionName":"toFloat","argumentNames":["v"]}

function Fx_toFloat__P171_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Fx_toFloat__P171, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function Sprite_x__P2101(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1192;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1192]) return breakpoint(s, 1, 1192, r0);
  case 1:
    s.tmp_1 = Fx_toFloat__P171_mk(s);
    r0 = s.arg0.fields["_x"];
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 276; s.pc = 2; return s.tmp_1;
  case 2:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = s.arg0.fields["_image"];
    s.tmp_4 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_4);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 / 2);
    s.tmp_2 = r0;
    r0 = (s.tmp_0 + s.tmp_2);
    return leaveAccessor(s, r0)
  default: oops()
} } }
Sprite_x__P2101.info = {"start":1784,"length":84,"line":76,"column":4,"endLine":78,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"x","argumentNames":["this"]}
Sprite_x__P2101.isGetter = true;

function Sprite_x__P2101_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_x__P2101, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }





function PhysicsEngine_move__P2244(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, PhysicsEngine__C2238_VT)) failedCast(r0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
PhysicsEngine_move__P2244.info = {"start":351,"length":20,"line":18,"column":4,"endLine":18,"endColumn":24,"fileName":"pxt_modules/game/physics.ts","functionName":"move","argumentNames":["this","dt"]}

function PhysicsEngine_move__P2244_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: PhysicsEngine_move__P2244, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
} }





function PhysicsEngine_draw__P2243(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, PhysicsEngine__C2238_VT)) failedCast(r0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
PhysicsEngine_draw__P2243.info = {"start":279,"length":10,"line":15,"column":4,"endLine":15,"endColumn":14,"fileName":"pxt_modules/game/physics.ts","functionName":"draw","argumentNames":["this"]}

function PhysicsEngine_draw__P2243_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: PhysicsEngine_draw__P2243, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function controller___update__P1953(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.dtms___13826 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 1086;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1086]) return breakpoint(s, 1, 1086, r0);
  case 1:
    r0 = (s.arg0 * 1000);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 | 0);
    s.dtms___13826 = (r0);
    s.lastBrkId = 1087;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1087]) return breakpoint(s, 2, 1087, r0);
  case 2:
    r0 = pxsim_pxtcore_mkAction(1, controller___update_inline__P13833);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.dtms___13826);
    s.tmp_1 = helpers_arrayForEach__P109_mk(s);
    s.tmp_2 = controller_players__P1921_mk(s);
    s.callLocIdx = 231; s.pc = 4; return s.tmp_2;
  case 4:
    r0 = s.retval;
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = s.tmp_0;
    s.callLocIdx = 233; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller___update__P1953.info = {"start":11751,"length":137,"line":361,"column":4,"endLine":364,"endColumn":5,"fileName":"pxt_modules/game/controller.ts","functionName":"__update","argumentNames":["dt"]}

function controller___update__P1953_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller___update__P1953, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  dtms___13826: undefined,
  arg0: undefined,
} }





function controller___update_inline__P13833(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = controller_Controller___update__P1951_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.caps[0];
    s.callLocIdx = 232; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller___update_inline__P13833.info = {"start":11853,"length":27,"line":363,"column":26,"endLine":363,"endColumn":53,"fileName":"pxt_modules/game/controller.ts","functionName":"inline","argumentNames":["ctrl"]}

function controller___update_inline__P13833_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller___update_inline__P13833, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function controller_Controller___update__P1951(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, controller_Controller__C1926_VT)) failedCast(r0);
    r0 = pxsim_pxtrt.mklocRef();
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.arg1);
    s.arg1 = (s.tmp_0);
    s.lastBrkId = 1084;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1084]) return breakpoint(s, 1, 1084, r0);
  case 1:
    s.tmp_1 = r0 = s.arg1;
    r0 = pxsim_pxtrt_ldlocRef(s.arg1);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 | 0);
    s.tmp_2 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_1, s.tmp_2);
    s.lastBrkId = 1085;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1085]) return breakpoint(s, 2, 1085, r0);
  case 2:
    r0 = pxsim_pxtcore_mkAction(1, controller_Controller___update_inline__P13846);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg1);
    s.tmp_1 = helpers_arrayForEach__P109_mk(s);
    r0 = s.arg0.fields["buttons"];
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = s.tmp_0;
    s.callLocIdx = 230; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller_Controller___update__P1951.info = {"start":11229,"length":124,"line":343,"column":8,"endLine":346,"endColumn":9,"fileName":"pxt_modules/game/controller.ts","functionName":"__update","argumentNames":["this","dtms"]}

function controller_Controller___update__P1951_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Controller___update__P1951, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function controller_Controller___update_inline__P13846(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = controller_Button___update__P1983_mk(s);
    s.tmp_0.arg0 = s.arg0;
    r0 = pxsim_pxtrt_ldlocRef(s.caps[0]);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 229; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller_Controller___update_inline__P13846.info = {"start":11316,"length":25,"line":345,"column":33,"endLine":345,"endColumn":58,"fileName":"pxt_modules/game/controller.ts","functionName":"inline","argumentNames":["btn"]}

function controller_Controller___update_inline__P13846_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Controller___update_inline__P13846, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function controller_Button___update__P1983(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.delay___13862 = undefined;
    s.interval___13871 = undefined;
    s.count___13884 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, controller_Button__C1971_VT)) failedCast(r0);
    s.lastBrkId = 1134;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1134]) return breakpoint(s, 12, 1134, r0);
  case 12:
    r0 = s.arg0.fields["_pressed"];
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1135;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1135]) return breakpoint(s, 13, 1135, r0);
  case 13:
    { step = 11; continue; }
  case 1:
  case 2:
    s.lastBrkId = 1136;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1136]) return breakpoint(s, 14, 1136, r0);
  case 14:
    s.tmp_3 = r0 = s.arg0;
    r0 = s.tmp_3.fields["_pressedElasped"];
    s.tmp_5 = r0;
    r0 = (s.tmp_5 + s.arg1);
    s.tmp_4 = r0;
    r0 = (s.tmp_3).fields["_pressedElasped"] = (s.tmp_4);
    s.lastBrkId = 1137;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1137]) return breakpoint(s, 15, 1137, r0);
  case 15:
    r0 = s.arg0.fields["repeatDelay"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 === undefined);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    r0 = globals.defaultRepeatDelay___4379;
    { step = 4; continue; }
  case 3:
    r0 = s.arg0.fields["repeatDelay"];
  case 4:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    s.delay___13862 = (s.tmp_2);
    s.lastBrkId = 1138;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1138]) return breakpoint(s, 16, 1138, r0);
  case 16:
    r0 = s.arg0.fields["repeatInterval"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 === undefined);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    r0 = globals.defaultRepeatInterval___4381;
    { step = 6; continue; }
  case 5:
    r0 = s.arg0.fields["repeatInterval"];
  case 6:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    s.interval___13871 = (s.tmp_2);
    s.lastBrkId = 1139;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1139]) return breakpoint(s, 17, 1139, r0);
  case 17:
    r0 = s.arg0.fields["_pressedElasped"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 < s.delay___13862);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 1140;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1140]) return breakpoint(s, 18, 1140, r0);
  case 18:
    { step = 11; continue; }
  case 7:
  case 8:
    s.lastBrkId = 1141;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1141]) return breakpoint(s, 19, 1141, r0);
  case 19:
    r0 = s.arg0.fields["_pressedElasped"];
    s.tmp_5 = r0;
    r0 = (s.tmp_5 - s.delay___13862);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 - s.interval___13871);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 / s.interval___13871);
    s.tmp_2 = r0;
    r0 = pxsim.Math_.floor(s.tmp_2);
    s.count___13884 = (r0);
    s.lastBrkId = 1142;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1142]) return breakpoint(s, 20, 1142, r0);
  case 20:
    r0 = s.arg0.fields["_repeatCount"];
    s.tmp_1 = r0;
    r0 = (s.count___13884 != s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 1143;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1143]) return breakpoint(s, 21, 1143, r0);
  case 21:
    s.tmp_2 = controller_Button_raiseButtonRepeat__P4370_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 244; s.pc = 22; return s.tmp_2;
  case 22:
    r0 = s.retval;
    s.lastBrkId = 1144;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1144]) return breakpoint(s, 23, 1144, r0);
  case 23:
    r0 = (s.arg0).fields["_repeatCount"] = (s.count___13884);
  case 9:
  case 10:
  case 11:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller_Button___update__P1983.info = {"start":4995,"length":704,"line":156,"column":8,"endLine":173,"endColumn":9,"fileName":"pxt_modules/game/controllerbutton.ts","functionName":"__update","argumentNames":["this","dtms"]}

function controller_Button___update__P1983_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Button___update__P1983, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  delay___13862: undefined,
  interval___13871: undefined,
  count___13884: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function controller_Button_raiseButtonRepeat__P4370(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, controller_Button__C1971_VT)) failedCast(r0);
    s.lastBrkId = 1116;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1116]) return breakpoint(s, 3, 1116, r0);
  case 3:
    r0 = pxsim_numops_toBoolDecr(globals._userEventsEnabled___4377);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1117;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1117]) return breakpoint(s, 4, 1117, r0);
  case 4:
    r0 = s.arg0.fields["id"];
    s.tmp_0 = r0;
    r0 = pxsim.control.raiseEvent(2054, s.tmp_0);
    { step = 2; continue; }
  case 1:
    s.lastBrkId = 1118;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1118]) return breakpoint(s, 5, 1118, r0);
  case 5:
    r0 = s.arg0.fields["id"];
    s.tmp_0 = r0;
    r0 = pxsim.control.raiseEvent(2055, s.tmp_0);
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller_Button_raiseButtonRepeat__P4370.info = {"start":2765,"length":211,"line":91,"column":8,"endLine":96,"endColumn":9,"fileName":"pxt_modules/game/controllerbutton.ts","functionName":"raiseButtonRepeat","argumentNames":["this"]}

function controller_Button_raiseButtonRepeat__P4370_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Button_raiseButtonRepeat__P4370, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function controller_players__P1921(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 1008;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1008]) return breakpoint(s, 1, 1008, r0);
  case 1:
    s.tmp_0 = controller__player1__P1920_mk(s);
    s.callLocIdx = 190; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 1009;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1009]) return breakpoint(s, 3, 1009, r0);
  case 3:
    s.tmp_0 = helpers_arrayFilter__P110_mk(s);
    s.tmp_0.arg0 = globals._players___4363;
    s.tmp_0.arg1 = controller_players_inline__P13721;
    s.callLocIdx = 191; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    return leave(s, r0)
  default: oops()
} } }
controller_players__P1921.info = {"start":748,"length":144,"line":29,"column":4,"endLine":32,"endColumn":5,"fileName":"pxt_modules/game/controller.ts","functionName":"players","argumentNames":[]}

function controller_players__P1921_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_players__P1921, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
} }





function controller_players_inline__P13721(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = pxsim_numops_toBoolDecr(s.arg0);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_0);
    return leave(s, r0)
  default: oops()
} } }
controller_players_inline__P13721.info = {"start":870,"length":14,"line":31,"column":31,"endLine":31,"endColumn":45,"fileName":"pxt_modules/game/controller.ts","functionName":"inline","argumentNames":["ctrl"]}

function controller_players_inline__P13721_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_players_inline__P13721, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function controller__player1__P1920(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 1005;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1005]) return breakpoint(s, 5, 1005, r0);
  case 5:
    r0 = pxsim_numops_toBoolDecr(globals._players___4363);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = pxsim_Array__getAt(globals._players___4363, 0);
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
  case 2:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1006;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1006]) return breakpoint(s, 6, 1006, r0);
  case 6:
    r0 = pxsim_pxtcore_mkClassInstance(controller_Controller__C1926_VT);
    s.tmp_5 = r0;
    r0 = pxsim_Array__mk();
    s.tmp_6 = r0;
    r0 = pxsim_Array__push(s.tmp_6, globals.left___1907);
    r0 = pxsim_Array__push(s.tmp_6, globals.up___1908);
    r0 = pxsim_Array__push(s.tmp_6, globals.right___1909);
    r0 = pxsim_Array__push(s.tmp_6, globals.down___1910);
    r0 = pxsim_Array__push(s.tmp_6, globals.A___1905);
    r0 = pxsim_Array__push(s.tmp_6, globals.B___1906);
    r0 = pxsim_Array__push(s.tmp_6, globals.menu___1911);
    s.tmp_7 = controller_Controller_constructor__P1930_mk(s);
    s.tmp_7.arg0 = s.tmp_5;
    s.tmp_7.arg1 = 1;
    s.tmp_7.arg2 = s.tmp_6;
    s.callLocIdx = 189; s.pc = 7; return s.tmp_7;
  case 7:
    r0 = s.retval;
  case 3:
  case 4:
    s.lastBrkId = 1007;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1007]) return breakpoint(s, 8, 1007, r0);
  case 8:
    r0 = pxsim_Array__getAt(globals._players___4363, 0);
    return leave(s, r0)
  default: oops()
} } }
controller__player1__P1920.info = {"start":484,"length":258,"line":23,"column":4,"endLine":27,"endColumn":5,"fileName":"pxt_modules/game/controller.ts","functionName":"_player1","argumentNames":[]}

function controller__player1__P1920_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller__player1__P1920, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
} }





function controller_Controller_constructor__P1930(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.leftId___13768 = undefined;
    s.i___13776 = undefined;
    s.i___13794 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, controller_Controller__C1926_VT)) failedCast(r0);
    s.lastBrkId = 1012;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1012]) return breakpoint(s, 7, 1012, r0);
  case 7:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim.control.allocateNotifyEvent();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_id"] = (s.tmp_1);
    s.lastBrkId = 1013;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1013]) return breakpoint(s, 8, 1013, r0);
  case 8:
    r0 = (s.arg0).fields["_connected"] = (false);
    s.lastBrkId = 1014;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1014]) return breakpoint(s, 9, 1014, r0);
  case 9:
    r0 = (s.arg0).fields["playerIndex"] = (s.arg1);
    s.lastBrkId = 1015;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1015]) return breakpoint(s, 10, 1015, r0);
  case 10:
    r0 = (s.arg0).fields["analog"] = (false);
    s.lastBrkId = 1016;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1016]) return breakpoint(s, 11, 1016, r0);
  case 11:
    r0 = pxsim_numops_toBoolDecr(s.arg2);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1017;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1017]) return breakpoint(s, 12, 1017, r0);
  case 12:
    r0 = (s.arg0).fields["buttons"] = (s.arg2);
    { step = 4; continue; }
  case 1:
    s.lastBrkId = 1018;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1018]) return breakpoint(s, 13, 1018, r0);
  case 13:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["buttons"] = (s.tmp_1);
    s.lastBrkId = 1019;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1019]) return breakpoint(s, 14, 1019, r0);
  case 14:
    r0 = s.arg0.fields["playerIndex"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 * 7);
    s.tmp_0 = r0;
    r0 = (1 + s.tmp_0);
    s.leftId___13768 = (r0);
    s.lastBrkId = 1020;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1020]) return breakpoint(s, 15, 1020, r0);
  case 15:
    s.i___13776 = (0);
    s.lastBrkId = 1021;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1021]) return breakpoint(s, 16, 1021, r0);
  case 16:
  case 2:
    s.lastBrkId = 1022;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1022]) return breakpoint(s, 17, 1022, r0);
  case 17:
    r0 = (s.i___13776 < 7);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1023;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1023]) return breakpoint(s, 18, 1023, r0);
  case 18:
    r0 = pxsim_pxtcore_mkClassInstance(controller_Button__C1971_VT);
    s.tmp_1 = r0;
    s.tmp_2 = controller_Button_constructor__P1977_mk(s);
    s.tmp_2.arg0 = s.tmp_1;
    r0 = (s.leftId___13768 + s.i___13776);
    s.tmp_2.arg1 = r0;
    s.tmp_2.arg2 = -1;
    s.callLocIdx = 195; s.pc = 19; return s.tmp_2;
  case 19:
    r0 = s.retval;
    r0 = s.arg0.fields["buttons"];
    s.tmp_3 = r0;
    r0 = pxsim_Array__push(s.tmp_3, s.tmp_1);
    s.lastBrkId = 1024;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1024]) return breakpoint(s, 20, 1024, r0);
  case 20:
    r0 = (s.i___13776 + 1);
    s.i___13776 = (r0);
    { step = 2; continue; }
  case 3:
  case 4:
    s.lastBrkId = 1025;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1025]) return breakpoint(s, 21, 1025, r0);
  case 21:
    s.i___13794 = (0);
    s.lastBrkId = 1026;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1026]) return breakpoint(s, 22, 1026, r0);
  case 22:
  case 5:
    s.lastBrkId = 1027;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1027]) return breakpoint(s, 23, 1027, r0);
  case 23:
    s.tmp_1 = r0 = s.i___13794;
    r0 = s.arg0.fields["buttons"];
    s.tmp_3 = r0;
    r0 = pxsim_Array__length(s.tmp_3);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 6; continue; }
    s.lastBrkId = 1028;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1028]) return breakpoint(s, 24, 1028, r0);
  case 24:
    r0 = s.arg0.fields["buttons"];
    s.tmp_5 = r0;
    r0 = pxsim_Array__getAt(s.tmp_5, s.i___13794);
    s.tmp_4 = r0;
    r0 = (s.tmp_4).fields["_owner"] = (s.arg0);
    s.lastBrkId = 1029;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1029]) return breakpoint(s, 25, 1029, r0);
  case 25:
    r0 = (s.i___13794 + 1);
    s.i___13794 = (r0);
    { step = 5; continue; }
  case 6:
    s.lastBrkId = 1030;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1030]) return breakpoint(s, 26, 1030, r0);
  case 26:
    s.tmp_0 = controller_addController__P4364_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 196; s.pc = 27; return s.tmp_0;
  case 27:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller_Controller_constructor__P1930.info = {"start":1555,"length":696,"line":58,"column":8,"endLine":75,"endColumn":9,"fileName":"pxt_modules/game/controller.ts","functionName":"inline","argumentNames":["this","playerIndex","buttons"]}

function controller_Controller_constructor__P1930_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Controller_constructor__P1930, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  leftId___13768: undefined,
  i___13776: undefined,
  i___13794: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function controller_addController__P4364(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 1002;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1002]) return breakpoint(s, 3, 1002, r0);
  case 3:
    r0 = pxsim_numops_toBoolDecr(globals._players___4363);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1003;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1003]) return breakpoint(s, 4, 1003, r0);
  case 4:
    r0 = pxsim_Array__mk();
    globals._players___4363 = (r0);
  case 1:
  case 2:
    s.lastBrkId = 1004;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1004]) return breakpoint(s, 5, 1004, r0);
  case 5:
    s.tmp_0 = r0 = globals._players___4363;
    r0 = s.arg0.fields["playerIndex"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - 1);
    s.tmp_1 = r0;
    r0 = pxsim_Array_.setAt(s.tmp_0, s.tmp_1, s.arg0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller_addController__P4364.info = {"start":321,"length":157,"line":16,"column":4,"endLine":21,"endColumn":5,"fileName":"pxt_modules/game/controller.ts","functionName":"addController","argumentNames":["ctrl"]}

function controller_addController__P4364_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_addController__P4364, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function helpers_arrayFilter__P110(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.res___11410 = undefined;
    s.len___11412 = undefined;
    s.i___11415 = undefined;
    s.v___11420 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 116;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[116]) return breakpoint(s, 5, 116, r0);
  case 5:
    r0 = pxsim_Array__mk();
    s.res___11410 = (r0);
    s.lastBrkId = 117;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[117]) return breakpoint(s, 6, 117, r0);
  case 6:
    r0 = pxsim_Array__length(s.arg0);
    s.len___11412 = (r0);
    s.lastBrkId = 118;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[118]) return breakpoint(s, 7, 118, r0);
  case 7:
    s.i___11415 = (0);
    s.lastBrkId = 119;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[119]) return breakpoint(s, 8, 119, r0);
  case 8:
  case 1:
    s.lastBrkId = 120;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[120]) return breakpoint(s, 9, 120, r0);
  case 9:
    r0 = (s.i___11415 < s.len___11412);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 121;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[121]) return breakpoint(s, 10, 121, r0);
  case 10:
    r0 = pxsim_Array__getAt(s.arg0, s.i___11415);
    s.v___11420 = (r0);
    s.lastBrkId = 122;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[122]) return breakpoint(s, 11, 122, r0);
  case 11:
    s.tmp_1 = lambda_3_mk(s);
    s.tmp_1.argL = s.arg1;
    s.tmp_1.arg0 = s.v___11420;
    s.tmp_1.arg1 = s.i___11415;
    setupLambda(s.tmp_1, s.tmp_1.argL);
    s.callLocIdx = 7; s.pc = 12; return s.tmp_1;
  case 12:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 123;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[123]) return breakpoint(s, 13, 123, r0);
  case 13:
    r0 = pxsim_Array__push(s.res___11410, s.v___11420);
  case 2:
  case 3:
    s.lastBrkId = 124;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[124]) return breakpoint(s, 14, 124, r0);
  case 14:
    r0 = (s.i___11415 + 1);
    s.i___11415 = (r0);
    { step = 1; continue; }
  case 4:
    s.lastBrkId = 125;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[125]) return breakpoint(s, 15, 125, r0);
  case 15:
    r0 = s.res___11410;
    return leave(s, r0)
  default: oops()
} } }
helpers_arrayFilter__P110.info = {"start":7695,"length":317,"line":261,"column":4,"endLine":269,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"arrayFilter","argumentNames":["arr","callbackfn"]}

function helpers_arrayFilter__P110_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_arrayFilter__P110, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  res___11410: undefined,
  len___11412: undefined,
  i___11415: undefined,
  v___11420: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function controller__moveSprites__P1925(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 1010;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1010]) return breakpoint(s, 1, 1010, r0);
  case 1:
    s.lastBrkId = 1011;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1011]) return breakpoint(s, 2, 1011, r0);
  case 2:
    s.tmp_0 = helpers_arrayForEach__P109_mk(s);
    s.tmp_1 = controller_players__P1921_mk(s);
    s.callLocIdx = 192; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = controller__moveSprites_inline__P13516;
    s.callLocIdx = 194; s.pc = 3; return s.tmp_0;
  case 3:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller__moveSprites__P1925.info = {"start":1108,"length":180,"line":43,"column":4,"endLine":47,"endColumn":5,"fileName":"pxt_modules/game/controller.ts","functionName":"_moveSprites","argumentNames":[]}

function controller__moveSprites__P1925_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller__moveSprites__P1925, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
} }





function controller__moveSprites_inline__P13516(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = controller_Controller___preUpdate__P1950_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 193; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller__moveSprites_inline__P13516.info = {"start":1254,"length":26,"line":46,"column":26,"endLine":46,"endColumn":52,"fileName":"pxt_modules/game/controller.ts","functionName":"inline","argumentNames":["ctrl"]}

function controller__moveSprites_inline__P13516_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller__moveSprites_inline__P13516, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function controller_Controller___preUpdate__P1950(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.deadSprites___13523 = undefined;
    s.svx___13524 = undefined;
    s.svy___13525 = undefined;
    s.svxInCricle___13560 = undefined;
    s.svyInCircle___13562 = undefined;
    s.sq___13564 = undefined;
    s.scale___13579 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, controller_Controller__C1926_VT)) failedCast(r0);
    s.lastBrkId = 1043;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1043]) return breakpoint(s, 18, 1043, r0);
  case 18:
    s.tmp_3 = controller_Controller__controlledSprites__P1931_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.callLocIdx = 204; s.pc = 19; return s.tmp_3;
  case 19:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1044;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1044]) return breakpoint(s, 20, 1044, r0);
  case 20:
    { step = 17; continue; }
  case 1:
  case 2:
    r0 = pxsim_pxtrt.mklocRef();
    s.deadSprites___13523 = (r0);
    s.lastBrkId = 1045;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1045]) return breakpoint(s, 21, 1045, r0);
  case 21:
    r0 = pxsim_pxtrt_stlocRef(s.deadSprites___13523, false);
    r0 = pxsim_pxtrt.mklocRef();
    s.svx___13524 = (r0);
    s.lastBrkId = 1046;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1046]) return breakpoint(s, 22, 1046, r0);
  case 22:
    r0 = pxsim_pxtrt_stlocRef(s.svx___13524, 0);
    r0 = pxsim_pxtrt.mklocRef();
    s.svy___13525 = (r0);
    s.lastBrkId = 1047;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1047]) return breakpoint(s, 23, 1047, r0);
  case 23:
    r0 = pxsim_pxtrt_stlocRef(s.svy___13525, 0);
    s.lastBrkId = 1048;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1048]) return breakpoint(s, 24, 1048, r0);
  case 24:
    r0 = s.arg0.fields["analog"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1049;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1049]) return breakpoint(s, 25, 1049, r0);
  case 25:
    s.tmp_1 = r0 = s.svx___13524;
    s.tmp_5 = controller_Button_pressureLevel__P1981_mk(s);
    s.tmp_6 = controller_Controller_right__P1936_mk(s);
    s.tmp_6.arg0 = s.arg0;
    s.callLocIdx = 205; s.pc = 27; return s.tmp_6;
  case 27:
    r0 = s.retval;
    s.tmp_5.arg0 = r0;
    s.callLocIdx = 206; s.pc = 26; return s.tmp_5;
  case 26:
    r0 = s.retval;
    s.tmp_4 = r0;
    s.tmp_8 = controller_Button_pressureLevel__P1981_mk(s);
    s.tmp_9 = controller_Controller_left__P1935_mk(s);
    s.tmp_9.arg0 = s.arg0;
    s.callLocIdx = 207; s.pc = 29; return s.tmp_9;
  case 29:
    r0 = s.retval;
    s.tmp_8.arg0 = r0;
    s.callLocIdx = 208; s.pc = 28; return s.tmp_8;
  case 28:
    r0 = s.retval;
    s.tmp_7 = r0;
    r0 = (s.tmp_4 - s.tmp_7);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 >> 1);
    s.tmp_2 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_1, s.tmp_2);
    s.lastBrkId = 1050;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1050]) return breakpoint(s, 30, 1050, r0);
  case 30:
    s.tmp_0 = r0 = s.svy___13525;
    s.tmp_4 = controller_Button_pressureLevel__P1981_mk(s);
    s.tmp_5 = controller_Controller_down__P1938_mk(s);
    s.tmp_5.arg0 = s.arg0;
    s.callLocIdx = 209; s.pc = 32; return s.tmp_5;
  case 32:
    r0 = s.retval;
    s.tmp_4.arg0 = r0;
    s.callLocIdx = 210; s.pc = 31; return s.tmp_4;
  case 31:
    r0 = s.retval;
    s.tmp_3 = r0;
    s.tmp_7 = controller_Button_pressureLevel__P1981_mk(s);
    s.tmp_8 = controller_Controller_up__P1937_mk(s);
    s.tmp_8.arg0 = s.arg0;
    s.callLocIdx = 211; s.pc = 34; return s.tmp_8;
  case 34:
    r0 = s.retval;
    s.tmp_7.arg0 = r0;
    s.callLocIdx = 212; s.pc = 33; return s.tmp_7;
  case 33:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = (s.tmp_3 - s.tmp_6);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 >> 1);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.tmp_1);
    { step = 12; continue; }
  case 3:
    s.lastBrkId = 1051;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1051]) return breakpoint(s, 35, 1051, r0);
  case 35:
    s.tmp_1 = controller_Button__C1971_v0_1_mk(s);
    s.tmp_2 = controller_Controller_right__P1936_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 213; s.pc = 37; return s.tmp_2;
  case 37:
    r0 = s.retval;
    s.tmp_1.arg0 = r0;
    if (!checkSubtype(s.tmp_1.arg0, controller_Button__C1971_VT)) failedCast(s.tmp_1.arg0);
    s.tmp_1.fn = s.tmp_1.arg0.vtable.methods.isPressed;
    s.pc = 36; return s.tmp_1;
  case 36:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    r0 = 256;
    { step = 5; continue; }
  case 4:
    r0 = 0;
  case 5:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    s.tmp_5 = controller_Button__C1971_v0_1_mk(s);
    s.tmp_6 = controller_Controller_left__P1935_mk(s);
    s.tmp_6.arg0 = s.arg0;
    s.callLocIdx = 214; s.pc = 39; return s.tmp_6;
  case 39:
    r0 = s.retval;
    s.tmp_5.arg0 = r0;
    if (!checkSubtype(s.tmp_5.arg0, controller_Button__C1971_VT)) failedCast(s.tmp_5.arg0);
    s.tmp_5.fn = s.tmp_5.arg0.vtable.methods.isPressed;
    s.pc = 38; return s.tmp_5;
  case 38:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    if (!r0) { step = 6; continue; }
    r0 = 256;
    { step = 7; continue; }
  case 6:
    r0 = 0;
  case 7:
    // jmp value (already in r0)
    s.tmp_7 = r0;
    s.tmp_8 = r0 = s.svx___13524;
    r0 = (s.tmp_3 - s.tmp_7);
    s.tmp_9 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_8, s.tmp_9);
    s.lastBrkId = 1052;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1052]) return breakpoint(s, 40, 1052, r0);
  case 40:
    s.tmp_1 = controller_Button__C1971_v0_1_mk(s);
    s.tmp_2 = controller_Controller_down__P1938_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 215; s.pc = 42; return s.tmp_2;
  case 42:
    r0 = s.retval;
    s.tmp_1.arg0 = r0;
    if (!checkSubtype(s.tmp_1.arg0, controller_Button__C1971_VT)) failedCast(s.tmp_1.arg0);
    s.tmp_1.fn = s.tmp_1.arg0.vtable.methods.isPressed;
    s.pc = 41; return s.tmp_1;
  case 41:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 8; continue; }
    r0 = 256;
    { step = 9; continue; }
  case 8:
    r0 = 0;
  case 9:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    s.tmp_5 = controller_Button__C1971_v0_1_mk(s);
    s.tmp_6 = controller_Controller_up__P1937_mk(s);
    s.tmp_6.arg0 = s.arg0;
    s.callLocIdx = 216; s.pc = 44; return s.tmp_6;
  case 44:
    r0 = s.retval;
    s.tmp_5.arg0 = r0;
    if (!checkSubtype(s.tmp_5.arg0, controller_Button__C1971_VT)) failedCast(s.tmp_5.arg0);
    s.tmp_5.fn = s.tmp_5.arg0.vtable.methods.isPressed;
    s.pc = 43; return s.tmp_5;
  case 43:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    if (!r0) { step = 10; continue; }
    r0 = 256;
    { step = 11; continue; }
  case 10:
    r0 = 0;
  case 11:
    // jmp value (already in r0)
    s.tmp_7 = r0;
    s.tmp_8 = r0 = s.svy___13525;
    r0 = (s.tmp_3 - s.tmp_7);
    s.tmp_9 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_8, s.tmp_9);
  case 12:
    r0 = pxsim_pxtrt.mklocRef();
    s.svxInCricle___13560 = (r0);
    s.lastBrkId = 1053;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1053]) return breakpoint(s, 45, 1053, r0);
  case 45:
    s.tmp_0 = r0 = s.svxInCricle___13560;
    r0 = pxsim_pxtrt_ldlocRef(s.svx___13524);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.tmp_1);
    r0 = pxsim_pxtrt.mklocRef();
    s.svyInCircle___13562 = (r0);
    s.lastBrkId = 1054;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1054]) return breakpoint(s, 46, 1054, r0);
  case 46:
    s.tmp_0 = r0 = s.svyInCircle___13562;
    r0 = pxsim_pxtrt_ldlocRef(s.svy___13525);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.tmp_1);
    s.lastBrkId = 1055;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1055]) return breakpoint(s, 47, 1055, r0);
  case 47:
    r0 = pxsim_pxtrt_ldlocRef(s.svx___13524);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_ldlocRef(s.svx___13524);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 * s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_ldlocRef(s.svy___13525);
    s.tmp_4 = r0;
    r0 = pxsim_pxtrt_ldlocRef(s.svy___13525);
    s.tmp_5 = r0;
    r0 = (s.tmp_4 * s.tmp_5);
    s.tmp_3 = r0;
    r0 = (s.tmp_0 + s.tmp_3);
    s.sq___13564 = (r0);
    s.lastBrkId = 1056;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1056]) return breakpoint(s, 48, 1056, r0);
  case 48:
    r0 = (s.sq___13564 > 65536);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 13; continue; }
    s.lastBrkId = 1057;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1057]) return breakpoint(s, 49, 1057, r0);
  case 49:
    r0 = (65536 / s.sq___13564);
    s.tmp_1 = r0;
    r0 = pxsim.Math_.sqrt(s.tmp_1);
    s.scale___13579 = (r0);
    s.lastBrkId = 1058;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1058]) return breakpoint(s, 50, 1058, r0);
  case 50:
    s.tmp_0 = r0 = s.svxInCricle___13560;
    s.tmp_3 = r0 = s.scale___13579;
    r0 = pxsim_pxtrt_ldlocRef(s.svx___13524);
    s.tmp_4 = r0;
    r0 = (s.tmp_3 * s.tmp_4);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 | 0);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.tmp_1);
    s.lastBrkId = 1059;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1059]) return breakpoint(s, 51, 1059, r0);
  case 51:
    s.tmp_0 = r0 = s.svyInCircle___13562;
    s.tmp_3 = r0 = s.scale___13579;
    r0 = pxsim_pxtrt_ldlocRef(s.svy___13525);
    s.tmp_4 = r0;
    r0 = (s.tmp_3 * s.tmp_4);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 | 0);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.tmp_1);
  case 13:
  case 14:
    s.lastBrkId = 1060;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1060]) return breakpoint(s, 52, 1060, r0);
  case 52:
    r0 = pxsim_pxtcore_mkAction(5, controller_Controller___preUpdate_inline__P13597);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.deadSprites___13523);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 1, s.svx___13524);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 2, s.svy___13525);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 3, s.svxInCricle___13560);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 4, s.svyInCircle___13562);
    s.tmp_1 = helpers_arrayForEach__P109_mk(s);
    s.tmp_2 = controller_Controller__controlledSprites__P1931_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 217; s.pc = 54; return s.tmp_2;
  case 54:
    r0 = s.retval;
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = s.tmp_0;
    s.callLocIdx = 225; s.pc = 53; return s.tmp_1;
  case 53:
    r0 = s.retval;
    s.lastBrkId = 1082;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1082]) return breakpoint(s, 55, 1082, r0);
  case 55:
    r0 = pxsim_pxtrt_ldlocRef(s.deadSprites___13523);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 15; continue; }
    s.lastBrkId = 1083;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1083]) return breakpoint(s, 56, 1083, r0);
  case 56:
    s.tmp_1 = controller_Controller__controlledSprites__P1932_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.tmp_2 = helpers_arrayFilter__P110_mk(s);
    s.tmp_3 = controller_Controller__controlledSprites__P1931_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.callLocIdx = 226; s.pc = 59; return s.tmp_3;
  case 59:
    r0 = s.retval;
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = controller_Controller___preUpdate_inline__P13654;
    s.callLocIdx = 227; s.pc = 58; return s.tmp_2;
  case 58:
    r0 = s.retval;
    s.tmp_1.arg1 = r0;
    s.callLocIdx = 228; s.pc = 57; return s.tmp_1;
  case 57:
    r0 = s.retval;
  case 15:
  case 16:
  case 17:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller_Controller___preUpdate__P1950.info = {"start":8684,"length":2535,"line":277,"column":8,"endLine":341,"endColumn":9,"fileName":"pxt_modules/game/controller.ts","functionName":"__preUpdate","argumentNames":["this"]}

function controller_Controller___preUpdate__P1950_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Controller___preUpdate__P1950, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  deadSprites___13523: undefined,
  svx___13524: undefined,
  svy___13525: undefined,
  svxInCricle___13560: undefined,
  svyInCircle___13562: undefined,
  sq___13564: undefined,
  scale___13579: undefined,
  arg0: undefined,
} }





function controller_Controller___preUpdate_inline__P13597(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.s___13600 = undefined;
    s.vx___13601 = undefined;
    s.vy___13602 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 1061;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1061]) return breakpoint(s, 22, 1061, r0);
  case 22:
    s.tmp_0 = if_s_1_mk(s);
    s.tmp_1 = r0 = s.arg0;
    s.tmp_0.arg0 = r0;
    if (!s.tmp_0.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_0.arg0, "s");
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["s"];
      if (s.tmp_0.fn == null) { s.retval = s.tmp_0.arg0.fields["s"]; }
      else if (!s.tmp_0.fn.isGetter) { s.retval = bind(s.tmp_0); }
     else { s.callLocIdx = 218; s.pc = 23; return s.tmp_0; }
    }
  case 23:
    r0 = s.retval;
    s.s___13600 = (r0);
    s.lastBrkId = 1062;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1062]) return breakpoint(s, 24, 1062, r0);
  case 24:
    s.tmp_2 = if_vx_1_mk(s);
    s.tmp_2.arg0 = s.tmp_1;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "vx");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["vx"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["vx"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 219; s.pc = 25; return s.tmp_2; }
    }
  case 25:
    r0 = s.retval;
    s.vx___13601 = (r0);
    s.lastBrkId = 1063;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1063]) return breakpoint(s, 26, 1063, r0);
  case 26:
    s.tmp_3 = if_vy_1_mk(s);
    s.tmp_3.arg0 = s.tmp_1;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "vy");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["vy"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["vy"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 220; s.pc = 27; return s.tmp_3; }
    }
  case 27:
    r0 = s.retval;
    s.vy___13602 = (r0);
    s.lastBrkId = 1064;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1064]) return breakpoint(s, 28, 1064, r0);
  case 28:
    r0 = s.s___13600.fields["flags"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 & 2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1065;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1065]) return breakpoint(s, 29, 1065, r0);
  case 29:
    r0 = pxsim_pxtrt_stlocRef(s.caps[0], true);
    s.lastBrkId = 1066;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1066]) return breakpoint(s, 30, 1066, r0);
  case 30:
    { step = 21; continue; }
  case 1:
  case 2:
    s.lastBrkId = 1067;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1067]) return breakpoint(s, 31, 1067, r0);
  case 31:
    r0 = s.arg0.fields["_inputLastFrame"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 1068;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1068]) return breakpoint(s, 32, 1068, r0);
  case 32:
    r0 = pxsim_numops_toBoolDecr(s.vx___13601);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1069;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1069]) return breakpoint(s, 33, 1069, r0);
  case 33:
    r0 = (s.s___13600).fields["_vx"] = (0);
  case 3:
  case 4:
    s.lastBrkId = 1070;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1070]) return breakpoint(s, 34, 1070, r0);
  case 34:
    r0 = pxsim_numops_toBoolDecr(s.vy___13602);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 1071;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1071]) return breakpoint(s, 35, 1071, r0);
  case 35:
    r0 = (s.s___13600).fields["_vy"] = (0);
  case 5:
  case 6:
  case 7:
  case 8:
    s.lastBrkId = 1072;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1072]) return breakpoint(s, 36, 1072, r0);
  case 36:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 9; continue; }
    r0 = s.tmp_0;
    { step = 10; continue; }
  case 9:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[2]);
  case 10:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 19; continue; }
    s.lastBrkId = 1073;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1073]) return breakpoint(s, 37, 1073, r0);
  case 37:
    s.tmp_2 = r0 = s.vx___13601;
    r0 = pxsim_numops_toBool(s.tmp_2);
    if (r0) { step = 11; continue; }
    r0 = s.tmp_2;
    { step = 12; continue; }
  case 11:
    r0 = s.vy___13602;
  case 12:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 13; continue; }
    s.lastBrkId = 1074;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1074]) return breakpoint(s, 38, 1074, r0);
  case 38:
    s.tmp_4 = r0 = s.s___13600;
    s.tmp_6 = Fx_imul__P161_mk(s);
    r0 = pxsim_pxtrt_ldlocRef(s.caps[3]);
    s.tmp_6.arg0 = r0;
    s.tmp_6.arg1 = s.vx___13601;
    s.callLocIdx = 221; s.pc = 39; return s.tmp_6;
  case 39:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = (s.tmp_4).fields["_vx"] = (s.tmp_5);
    s.lastBrkId = 1075;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1075]) return breakpoint(s, 40, 1075, r0);
  case 40:
    s.tmp_0 = r0 = s.s___13600;
    s.tmp_2 = Fx_imul__P161_mk(s);
    r0 = pxsim_pxtrt_ldlocRef(s.caps[4]);
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = s.vy___13602;
    s.callLocIdx = 222; s.pc = 41; return s.tmp_2;
  case 41:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_vy"] = (s.tmp_1);
    { step = 18; continue; }
  case 13:
    s.lastBrkId = 1076;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1076]) return breakpoint(s, 42, 1076, r0);
  case 42:
    r0 = pxsim_numops_toBoolDecr(s.vx___13601);
    if (!r0) { step = 14; continue; }
    s.lastBrkId = 1077;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1077]) return breakpoint(s, 43, 1077, r0);
  case 43:
    s.tmp_0 = r0 = s.s___13600;
    s.tmp_2 = Fx_imul__P161_mk(s);
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = s.vx___13601;
    s.callLocIdx = 223; s.pc = 44; return s.tmp_2;
  case 44:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_vx"] = (s.tmp_1);
    { step = 17; continue; }
  case 14:
    s.lastBrkId = 1078;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1078]) return breakpoint(s, 45, 1078, r0);
  case 45:
    r0 = pxsim_numops_toBoolDecr(s.vy___13602);
    if (!r0) { step = 15; continue; }
    s.lastBrkId = 1079;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1079]) return breakpoint(s, 46, 1079, r0);
  case 46:
    s.tmp_0 = r0 = s.s___13600;
    s.tmp_2 = Fx_imul__P161_mk(s);
    r0 = pxsim_pxtrt_ldlocRef(s.caps[2]);
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = s.vy___13602;
    s.callLocIdx = 224; s.pc = 47; return s.tmp_2;
  case 47:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_vy"] = (s.tmp_1);
  case 15:
  case 16:
  case 17:
  case 18:
    s.lastBrkId = 1080;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1080]) return breakpoint(s, 48, 1080, r0);
  case 48:
    r0 = (s.arg0).fields["_inputLastFrame"] = (true);
    { step = 20; continue; }
  case 19:
    s.lastBrkId = 1081;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1081]) return breakpoint(s, 49, 1081, r0);
  case 49:
    r0 = (s.arg0).fields["_inputLastFrame"] = (false);
  case 20:
  case 21:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller_Controller___preUpdate_inline__P13597.info = {"start":9867,"length":1171,"line":308,"column":44,"endLine":336,"endColumn":13,"fileName":"pxt_modules/game/controller.ts","functionName":"inline","argumentNames":["controlledSprite"]}

function controller_Controller___preUpdate_inline__P13597_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Controller___preUpdate_inline__P13597, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  s___13600: undefined,
  vx___13601: undefined,
  vy___13602: undefined,
  arg0: undefined,
} }





function controller_Controller___preUpdate_inline__P13654(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0.fields["s"];
    r0 = r0.fields["flags"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 & 2);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_0);
    return leave(s, r0)
  default: oops()
} } }
controller_Controller___preUpdate_inline__P13654.info = {"start":11165,"length":42,"line":340,"column":28,"endLine":340,"endColumn":70,"fileName":"pxt_modules/game/controller.ts","functionName":"inline","argumentNames":["s"]}

function controller_Controller___preUpdate_inline__P13654_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Controller___preUpdate_inline__P13654, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function controller_Button_pressureLevel__P1981(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, controller_Button__C1971_VT)) failedCast(r0);
    s.lastBrkId = 1121;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1121]) return breakpoint(s, 6, 1121, r0);
  case 6:
    r0 = pxsim.control.deviceDalVersion();
    s.tmp_1 = r0;
    r0 = (s.tmp_1 == "sim");
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1122;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1122]) return breakpoint(s, 7, 1122, r0);
  case 7:
    s.tmp_3 = controller_Button__C1971_v0_1_mk(s);
    s.tmp_3.arg0 = s.arg0;
    if (!checkSubtype(s.tmp_3.arg0, controller_Button__C1971_VT)) failedCast(s.tmp_3.arg0);
    s.tmp_3.fn = s.tmp_3.arg0.vtable.methods.isPressed;
    s.pc = 8; return s.tmp_3;
  case 8:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 1; continue; }
    r0 = 512;
    { step = 2; continue; }
  case 1:
    r0 = 0;
  case 2:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    r0 = s.tmp_4;
    { step = 5; continue; }
    { step = 4; continue; }
  case 3:
    s.lastBrkId = 1123;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1123]) return breakpoint(s, 9, 1123, r0);
  case 9:
    r0 = s.arg0.fields["id"];
    s.tmp_5 = r0;
    r0 = pxsim_pxtcore.pressureLevelByButtonId(s.tmp_5, -1);
    { step = 5; continue; }
  case 4:
    r0 = undefined;
  case 5:
    return leave(s, r0)
  default: oops()
} } }
controller_Button_pressureLevel__P1981.info = {"start":4157,"length":311,"line":131,"column":8,"endLine":138,"endColumn":9,"fileName":"pxt_modules/game/controllerbutton.ts","functionName":"pressureLevel","argumentNames":["this"]}

function controller_Button_pressureLevel__P1981_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Button_pressureLevel__P1981, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  arg0: undefined,
} }





function controller_Button_isPressed__P1980(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, controller_Button__C1971_VT)) failedCast(r0);
    s.lastBrkId = 1120;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1120]) return breakpoint(s, 1, 1120, r0);
  case 1:
    r0 = s.arg0.fields["_pressed"];
    return leave(s, r0)
  default: oops()
} } }
controller_Button_isPressed__P1980.info = {"start":4007,"length":57,"line":124,"column":8,"endLine":126,"endColumn":9,"fileName":"pxt_modules/game/controllerbutton.ts","functionName":"isPressed","argumentNames":["this"]}

function controller_Button_isPressed__P1980_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Button_isPressed__P1980, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function controller_Controller_down__P1938(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, controller_Controller__C1926_VT)) failedCast(r0);
    s.lastBrkId = 1037;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1037]) return breakpoint(s, 1, 1037, r0);
  case 1:
    s.tmp_0 = controller_Controller_button__P4365_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 4;
    s.callLocIdx = 202; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leaveAccessor(s, r0)
  default: oops()
} } }
controller_Controller_down__P1938.info = {"start":3234,"length":77,"line":121,"column":8,"endLine":123,"endColumn":9,"fileName":"pxt_modules/game/controller.ts","functionName":"down","argumentNames":["this"]}
controller_Controller_down__P1938.isGetter = true;

function controller_Controller_down__P1938_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Controller_down__P1938, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function controller_Controller_button__P4365(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, controller_Controller__C1926_VT)) failedCast(r0);
    s.lastBrkId = 1038;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1038]) return breakpoint(s, 1, 1038, r0);
  case 1:
    r0 = s.arg0.fields["buttons"];
    s.tmp_0 = r0;
    r0 = (s.arg1 - 1);
    s.tmp_1 = r0;
    r0 = pxsim_Array__getAt(s.tmp_0, s.tmp_1);
    return leave(s, r0)
  default: oops()
} } }
controller_Controller_button__P4365.info = {"start":5274,"length":105,"line":184,"column":8,"endLine":186,"endColumn":9,"fileName":"pxt_modules/game/controller.ts","functionName":"button","argumentNames":["this","button"]}

function controller_Controller_button__P4365_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Controller_button__P4365, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function controller_Controller_up__P1937(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, controller_Controller__C1926_VT)) failedCast(r0);
    s.lastBrkId = 1036;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1036]) return breakpoint(s, 1, 1036, r0);
  case 1:
    s.tmp_0 = controller_Controller_button__P4365_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 2;
    s.callLocIdx = 201; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leaveAccessor(s, r0)
  default: oops()
} } }
controller_Controller_up__P1937.info = {"start":3082,"length":73,"line":113,"column":8,"endLine":115,"endColumn":9,"fileName":"pxt_modules/game/controller.ts","functionName":"up","argumentNames":["this"]}
controller_Controller_up__P1937.isGetter = true;

function controller_Controller_up__P1937_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Controller_up__P1937, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function controller_Controller_right__P1936(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, controller_Controller__C1926_VT)) failedCast(r0);
    s.lastBrkId = 1035;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1035]) return breakpoint(s, 1, 1035, r0);
  case 1:
    s.tmp_0 = controller_Controller_button__P4365_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 3;
    s.callLocIdx = 200; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leaveAccessor(s, r0)
  default: oops()
} } }
controller_Controller_right__P1936.info = {"start":2926,"length":79,"line":105,"column":8,"endLine":107,"endColumn":9,"fileName":"pxt_modules/game/controller.ts","functionName":"right","argumentNames":["this"]}
controller_Controller_right__P1936.isGetter = true;

function controller_Controller_right__P1936_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Controller_right__P1936, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function controller_Controller_left__P1935(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, controller_Controller__C1926_VT)) failedCast(r0);
    s.lastBrkId = 1034;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1034]) return breakpoint(s, 1, 1034, r0);
  case 1:
    s.tmp_0 = controller_Controller_button__P4365_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 1;
    s.callLocIdx = 199; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leaveAccessor(s, r0)
  default: oops()
} } }
controller_Controller_left__P1935.info = {"start":2769,"length":77,"line":97,"column":8,"endLine":99,"endColumn":9,"fileName":"pxt_modules/game/controller.ts","functionName":"left","argumentNames":["this"]}
controller_Controller_left__P1935.isGetter = true;

function controller_Controller_left__P1935_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Controller_left__P1935, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function controller_Controller__controlledSprites__P1932(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, controller_Controller__C1926_VT)) failedCast(r0);
    s.lastBrkId = 1032;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1032]) return breakpoint(s, 1, 1032, r0);
  case 1:
    s.tmp_1 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 198; s.pc = 2; return s.tmp_1;
  case 2:
    r0 = s.retval;
    r0 = r0.fields["controlledSprites"];
    s.tmp_0 = r0;
    r0 = s.arg0.fields["playerIndex"];
    s.tmp_2 = r0;
    r0 = pxsim_Array_.setAt(s.tmp_0, s.tmp_2, s.arg1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller_Controller__controlledSprites__P1932.info = {"start":2403,"length":134,"line":81,"column":8,"endLine":83,"endColumn":9,"fileName":"pxt_modules/game/controller.ts","functionName":"_controlledSprites","argumentNames":["this","cps"]}

function controller_Controller__controlledSprites__P1932_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Controller__controlledSprites__P1932, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function controller_Controller__controlledSprites__P1931(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, controller_Controller__C1926_VT)) failedCast(r0);
    s.lastBrkId = 1031;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1031]) return breakpoint(s, 1, 1031, r0);
  case 1:
    s.tmp_1 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 197; s.pc = 2; return s.tmp_1;
  case 2:
    r0 = s.retval;
    r0 = r0.fields["controlledSprites"];
    s.tmp_0 = r0;
    r0 = s.arg0.fields["playerIndex"];
    s.tmp_2 = r0;
    r0 = pxsim_Array__getAt(s.tmp_0, s.tmp_2);
    return leaveAccessor(s, r0)
  default: oops()
} } }
controller_Controller__controlledSprites__P1931.info = {"start":2261,"length":132,"line":77,"column":8,"endLine":79,"endColumn":9,"fileName":"pxt_modules/game/controller.ts","functionName":"_controlledSprites","argumentNames":["this"]}
controller_Controller__controlledSprites__P1931.isGetter = true;

function controller_Controller__controlledSprites__P1931_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Controller__controlledSprites__P1931, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function Fx_imul__P161(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 267;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[267]) return breakpoint(s, 1, 267, r0);
  case 1:
    r0 = pxsim.Math_.imul(s.arg0, s.arg1);
    return leave(s, r0)
  default: oops()
} } }
Fx_imul__P161.info = {"start":1010,"length":130,"line":32,"column":4,"endLine":34,"endColumn":5,"fileName":"pxt_modules/base/fixed.ts","functionName":"imul","argumentNames":["a","b"]}

function Fx_imul__P161_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Fx_imul__P161, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
} }





function power_checkDeepSleep__P1729(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.p___12690 = undefined;
    s.to___12693 = undefined;
    s.lastBrkId = 802;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[802]) return breakpoint(s, 11, 802, r0);
  case 11:
    s.tmp_0 = power_init__P4276_mk(s);
    s.callLocIdx = 122; s.pc = 12; return s.tmp_0;
  case 12:
    r0 = s.retval;
    s.lastBrkId = 803;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[803]) return breakpoint(s, 13, 803, r0);
  case 13:
    s.tmp_0 = r0 = globals._poked___4274;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = 0;
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    s.p___12690 = (s.tmp_1);
    s.lastBrkId = 804;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[804]) return breakpoint(s, 14, 804, r0);
  case 14:
    s.tmp_0 = r0 = globals._timeout___4275;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 3; continue; }
    r0 = s.tmp_0;
    { step = 4; continue; }
  case 3:
    r0 = 0;
  case 4:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    s.to___12693 = (s.tmp_1);
    s.lastBrkId = 805;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[805]) return breakpoint(s, 15, 805, r0);
  case 15:
    r0 = (s.to___12693 > 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 5; continue; }
    r0 = s.tmp_0;
    { step = 6; continue; }
  case 5:
    r0 = pxsim.control.millis();
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - s.p___12690);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > s.to___12693);
  case 6:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBool(s.tmp_3);
    if (r0) { step = 7; continue; }
    r0 = s.tmp_3;
    { step = 8; continue; }
  case 7:
    r0 = pxsim.control.isUSBInitialized();
    s.tmp_5 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_5);
    s.tmp_4 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_4);
  case 8:
    // jmp value (already in r0)
    s.tmp_6 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_6);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 806;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[806]) return breakpoint(s, 16, 806, r0);
  case 16:
    r0 = pxsim_pxtcore.deepSleep();
  case 9:
  case 10:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
power_checkDeepSleep__P1729.info = {"start":1087,"length":298,"line":36,"column":4,"endLine":46,"endColumn":5,"fileName":"pxt_modules/power/power.ts","functionName":"checkDeepSleep","argumentNames":[]}

function power_checkDeepSleep__P1729_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: power_checkDeepSleep__P1729, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  p___12690: undefined,
  to___12693: undefined,
} }





function power_init__P4276(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 807;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[807]) return breakpoint(s, 8, 807, r0);
  case 8:
    r0 = (globals._timeout___4275 !== undefined);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 808;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[808]) return breakpoint(s, 9, 808, r0);
  case 9:
    { step = 7; continue; }
  case 1:
  case 2:
    s.lastBrkId = 809;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[809]) return breakpoint(s, 10, 809, r0);
  case 10:
    r0 = pxsim_pxtcore.getConfig(212, -1);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 * 1000);
    globals._timeout___4275 = (r0);
    s.lastBrkId = 810;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[810]) return breakpoint(s, 11, 810, r0);
  case 11:
    r0 = (globals._timeout___4275 > 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 3; continue; }
    r0 = s.tmp_0;
    { step = 4; continue; }
  case 3:
    r0 = (globals._timeout___4275 < 300000);
  case 4:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 811;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[811]) return breakpoint(s, 12, 811, r0);
  case 12:
    globals._timeout___4275 = (300000);
  case 5:
  case 6:
  case 7:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
power_init__P4276.info = {"start":1610,"length":376,"line":57,"column":4,"endLine":66,"endColumn":5,"fileName":"pxt_modules/power/power.ts","functionName":"init","argumentNames":[]}

function power_init__P4276_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: power_init__P4276, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
} }





function power_poke__P1728(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 800;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[800]) return breakpoint(s, 1, 800, r0);
  case 1:
    s.tmp_0 = power_init__P4276_mk(s);
    s.callLocIdx = 121; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 801;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[801]) return breakpoint(s, 3, 801, r0);
  case 3:
    r0 = pxsim.control.millis();
    globals._poked___4274 = (r0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
power_poke__P1728.info = {"start":795,"length":81,"line":26,"column":4,"endLine":29,"endColumn":5,"fileName":"pxt_modules/power/power.ts","functionName":"poke","argumentNames":[]}

function power_poke__P1728_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: power_poke__P1728, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
} }





function control_EventContext_deltaTime__P398(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, control_EventContext__C393_VT)) failedCast(r0);
    s.lastBrkId = 433;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[433]) return breakpoint(s, 1, 433, r0);
  case 1:
    r0 = s.arg0.fields["deltaTimeMillis"];
    s.tmp_0 = r0;
    r0 = (s.tmp_0 / 1000);
    return leaveAccessor(s, r0)
  default: oops()
} } }
control_EventContext_deltaTime__P398.info = {"start":2097,"length":75,"line":70,"column":8,"endLine":72,"endColumn":9,"fileName":"pxt_modules/base/eventcontext.ts","functionName":"deltaTime","argumentNames":["this"]}
control_EventContext_deltaTime__P398.isGetter = true;

function control_EventContext_deltaTime__P398_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control_EventContext_deltaTime__P398, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function scene_Scene_constructor__P2517(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_Scene__C2496_VT)) failedCast(r0);
    r0 = (s.arg0).fields["previousScene"] = (s.arg2);
    s.lastBrkId = 2255;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2255]) return breakpoint(s, 1, 2255, r0);
  case 1:
    r0 = (s.arg0).fields["eventContext"] = (s.arg1);
    s.lastBrkId = 2256;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2256]) return breakpoint(s, 2, 2256, r0);
  case 2:
    r0 = (s.arg0).fields["flags"] = (0);
    s.lastBrkId = 2257;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2257]) return breakpoint(s, 3, 2257, r0);
  case 3:
    r0 = pxsim_pxtcore_mkClassInstance(ArcadePhysicsEngine__C2254_VT);
    s.tmp_0 = r0;
    s.tmp_1 = ArcadePhysicsEngine_constructor__P2255_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = 500;
    s.tmp_1.arg2 = 2;
    s.tmp_1.arg3 = 4;
    s.callLocIdx = 917; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
    r0 = (s.arg0).fields["physicsEngine"] = (s.tmp_0);
    s.lastBrkId = 2258;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2258]) return breakpoint(s, 5, 2258, r0);
  case 5:
    r0 = pxsim_pxtcore_mkClassInstance(scene_Camera__C2437_VT);
    s.tmp_0 = r0;
    s.tmp_1 = scene_Camera_constructor__P2441_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.callLocIdx = 918; s.pc = 6; return s.tmp_1;
  case 6:
    r0 = s.retval;
    r0 = (s.arg0).fields["camera"] = (s.tmp_0);
    s.lastBrkId = 2259;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2259]) return breakpoint(s, 7, 2259, r0);
  case 7:
    r0 = pxsim_pxtcore_mkClassInstance(scene_Background__C2348_VT);
    s.tmp_0 = r0;
    s.tmp_1 = scene_Background_constructor__P2352_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    r0 = s.arg0.fields["camera"];
    s.tmp_1.arg1 = r0;
    s.callLocIdx = 919; s.pc = 8; return s.tmp_1;
  case 8:
    r0 = s.retval;
    r0 = (s.arg0).fields["background"] = (s.tmp_0);
    s.lastBrkId = 2260;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2260]) return breakpoint(s, 9, 2260, r0);
  case 9:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["destroyedHandlers"] = (s.tmp_1);
    s.lastBrkId = 2261;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2261]) return breakpoint(s, 10, 2261, r0);
  case 10:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["createdHandlers"] = (s.tmp_1);
    s.lastBrkId = 2262;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2262]) return breakpoint(s, 11, 2262, r0);
  case 11:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["overlapHandlers"] = (s.tmp_1);
    s.lastBrkId = 2263;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2263]) return breakpoint(s, 12, 2263, r0);
  case 12:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_pxtrt.mkMap();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["overlapMap"] = (s.tmp_1);
    s.lastBrkId = 2264;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2264]) return breakpoint(s, 13, 2264, r0);
  case 13:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["tileOverlapHandlers"] = (s.tmp_1);
    s.lastBrkId = 2265;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2265]) return breakpoint(s, 14, 2265, r0);
  case 14:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["collisionHandlers"] = (s.tmp_1);
    s.lastBrkId = 2266;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2266]) return breakpoint(s, 15, 2266, r0);
  case 15:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["wallCollisionHandlers"] = (s.tmp_1);
    s.lastBrkId = 2267;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2267]) return breakpoint(s, 16, 2267, r0);
  case 16:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["gameForeverHandlers"] = (s.tmp_1);
    s.lastBrkId = 2268;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2268]) return breakpoint(s, 17, 2268, r0);
  case 17:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_pxtrt.mkMap();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["spritesByKind"] = (s.tmp_1);
    s.lastBrkId = 2269;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2269]) return breakpoint(s, 18, 2269, r0);
  case 18:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["controlledSprites"] = (s.tmp_1);
    s.lastBrkId = 2270;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2270]) return breakpoint(s, 19, 2270, r0);
  case 19:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_pxtrt.mkMap();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_data"] = (s.tmp_1);
    s.lastBrkId = 2271;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2271]) return breakpoint(s, 20, 2271, r0);
  case 20:
    r0 = (s.arg0).fields["_millis"] = (0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_Scene_constructor__P2517.info = {"start":3365,"length":793,"line":102,"column":8,"endLine":120,"endColumn":9,"fileName":"pxt_modules/game/scene.ts","functionName":"inline","argumentNames":["this","eventContext","previousScene"]}

function scene_Scene_constructor__P2517_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Scene_constructor__P2517, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function scene_Camera_constructor__P2441(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_Camera__C2437_VT)) failedCast(r0);
    s.lastBrkId = 2211;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2211]) return breakpoint(s, 1, 2211, r0);
  case 1:
    r0 = (s.arg0).fields["_offsetX"] = (0);
    s.lastBrkId = 2212;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2212]) return breakpoint(s, 2, 2212, r0);
  case 2:
    r0 = (s.arg0).fields["_offsetY"] = (0);
    s.lastBrkId = 2213;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2213]) return breakpoint(s, 3, 2213, r0);
  case 3:
    r0 = (s.arg0).fields["drawOffsetX"] = (0);
    s.lastBrkId = 2214;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2214]) return breakpoint(s, 4, 2214, r0);
  case 4:
    r0 = (s.arg0).fields["drawOffsetY"] = (0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_Camera_constructor__P2441.info = {"start":456,"length":156,"line":15,"column":8,"endLine":21,"endColumn":9,"fileName":"pxt_modules/game/camera.ts","functionName":"inline","argumentNames":["this"]}

function scene_Camera_constructor__P2441_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Camera_constructor__P2441, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function scene_Background_constructor__P2352(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_Background__C2348_VT)) failedCast(r0);
    s.lastBrkId = 2016;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2016]) return breakpoint(s, 1, 2016, r0);
  case 1:
    r0 = (s.arg0).fields["color"] = (0);
    s.lastBrkId = 2017;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2017]) return breakpoint(s, 2, 2017, r0);
  case 2:
    r0 = (s.arg0).fields["camera"] = (s.arg1);
    s.lastBrkId = 2018;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2018]) return breakpoint(s, 3, 2018, r0);
  case 3:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_layers"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_Background_constructor__P2352.info = {"start":367,"length":132,"line":20,"column":8,"endLine":24,"endColumn":9,"fileName":"pxt_modules/game/background.ts","functionName":"inline","argumentNames":["this","camera"]}

function scene_Background_constructor__P2352_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Background_constructor__P2352, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function ArcadePhysicsEngine_constructor__P2255(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, ArcadePhysicsEngine__C2254_VT)) failedCast(r0);
    s.lastBrkId = 1490;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1490]) return breakpoint(s, 1, 1490, r0);
  case 1:
    s.tmp_0 = PhysicsEngine_constructor__P2239_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 496; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 1491;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1491]) return breakpoint(s, 3, 1491, r0);
  case 3:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["sprites"] = (s.tmp_1);
    s.lastBrkId = 1492;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1492]) return breakpoint(s, 4, 1492, r0);
  case 4:
    r0 = pxsim_pxtcore_mkClassInstance(sprites_SpriteMap__C2173_VT);
    s.tmp_0 = r0;
    s.tmp_1 = sprites_SpriteMap_constructor__P2174_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.callLocIdx = 497; s.pc = 5; return s.tmp_1;
  case 5:
    r0 = s.retval;
    r0 = (s.arg0).fields["map"] = (s.tmp_0);
    s.lastBrkId = 1493;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1493]) return breakpoint(s, 6, 1493, r0);
  case 6:
    s.tmp_0 = ArcadePhysicsEngine_maxSpeed__P2257_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.callLocIdx = 498; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    s.lastBrkId = 1494;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1494]) return breakpoint(s, 8, 1494, r0);
  case 8:
    s.tmp_0 = ArcadePhysicsEngine_maxStep__P2261_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg3;
    s.callLocIdx = 499; s.pc = 9; return s.tmp_0;
  case 9:
    r0 = s.retval;
    s.lastBrkId = 1495;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1495]) return breakpoint(s, 10, 1495, r0);
  case 10:
    s.tmp_0 = ArcadePhysicsEngine_minStep__P2259_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg2;
    s.callLocIdx = 500; s.pc = 11; return s.tmp_0;
  case 11:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
ArcadePhysicsEngine_constructor__P2255.info = {"start":1601,"length":277,"line":58,"column":4,"endLine":65,"endColumn":5,"fileName":"pxt_modules/game/physics.ts","functionName":"inline","argumentNames":["this","maxVelocity","minSingleStep","maxSingleStep"]}

function ArcadePhysicsEngine_constructor__P2255_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ArcadePhysicsEngine_constructor__P2255, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function ArcadePhysicsEngine_maxStep__P2261(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, ArcadePhysicsEngine__C2254_VT)) failedCast(r0);
    s.lastBrkId = 1502;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1502]) return breakpoint(s, 1, 1502, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Fx8__P149_mk(s);
    s.tmp_2.arg0 = s.arg1;
    s.callLocIdx = 507; s.pc = 2; return s.tmp_2;
  case 2:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["maxSingleStep"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
ArcadePhysicsEngine_maxStep__P2261.info = {"start":2329,"length":67,"line":88,"column":4,"endLine":90,"endColumn":5,"fileName":"pxt_modules/game/physics.ts","functionName":"maxStep","argumentNames":["this","v"]}

function ArcadePhysicsEngine_maxStep__P2261_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ArcadePhysicsEngine_maxStep__P2261, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function ArcadePhysicsEngine_maxStep__P2260(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, ArcadePhysicsEngine__C2254_VT)) failedCast(r0);
    s.lastBrkId = 1501;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1501]) return breakpoint(s, 1, 1501, r0);
  case 1:
    s.tmp_0 = Fx_toInt__P170_mk(s);
    r0 = s.arg0.fields["maxSingleStep"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 506; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leaveAccessor(s, r0)
  default: oops()
} } }
ArcadePhysicsEngine_maxStep__P2260.info = {"start":2249,"length":74,"line":84,"column":4,"endLine":86,"endColumn":5,"fileName":"pxt_modules/game/physics.ts","functionName":"maxStep","argumentNames":["this"]}
ArcadePhysicsEngine_maxStep__P2260.isGetter = true;

function ArcadePhysicsEngine_maxStep__P2260_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ArcadePhysicsEngine_maxStep__P2260, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function Fx_toInt__P170(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 281;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[281]) return breakpoint(s, 1, 281, r0);
  case 1:
    r0 = (s.arg0 + 128);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 >> 8);
    return leave(s, r0)
  default: oops()
} } }
Fx_toInt__P170.info = {"start":2144,"length":86,"line":68,"column":4,"endLine":70,"endColumn":5,"fileName":"pxt_modules/base/fixed.ts","functionName":"toInt","argumentNames":["v"]}

function Fx_toInt__P170_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Fx_toInt__P170, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function ArcadePhysicsEngine_minStep__P2259(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, ArcadePhysicsEngine__C2254_VT)) failedCast(r0);
    s.lastBrkId = 1500;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1500]) return breakpoint(s, 1, 1500, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Fx8__P149_mk(s);
    s.tmp_2.arg0 = s.arg1;
    s.callLocIdx = 505; s.pc = 2; return s.tmp_2;
  case 2:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["minSingleStep"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
ArcadePhysicsEngine_minStep__P2259.info = {"start":2176,"length":67,"line":80,"column":4,"endLine":82,"endColumn":5,"fileName":"pxt_modules/game/physics.ts","functionName":"minStep","argumentNames":["this","v"]}

function ArcadePhysicsEngine_minStep__P2259_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ArcadePhysicsEngine_minStep__P2259, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function ArcadePhysicsEngine_minStep__P2258(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, ArcadePhysicsEngine__C2254_VT)) failedCast(r0);
    s.lastBrkId = 1499;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1499]) return breakpoint(s, 1, 1499, r0);
  case 1:
    s.tmp_0 = Fx_toInt__P170_mk(s);
    r0 = s.arg0.fields["minSingleStep"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 504; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leaveAccessor(s, r0)
  default: oops()
} } }
ArcadePhysicsEngine_minStep__P2258.info = {"start":2096,"length":74,"line":76,"column":4,"endLine":78,"endColumn":5,"fileName":"pxt_modules/game/physics.ts","functionName":"minStep","argumentNames":["this"]}
ArcadePhysicsEngine_minStep__P2258.isGetter = true;

function ArcadePhysicsEngine_minStep__P2258_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ArcadePhysicsEngine_minStep__P2258, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function ArcadePhysicsEngine_maxSpeed__P2257(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, ArcadePhysicsEngine__C2254_VT)) failedCast(r0);
    s.lastBrkId = 1497;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1497]) return breakpoint(s, 1, 1497, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Fx8__P149_mk(s);
    s.tmp_2.arg0 = s.arg1;
    s.callLocIdx = 502; s.pc = 2; return s.tmp_2;
  case 2:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["maxVelocity"] = (s.tmp_1);
    s.lastBrkId = 1498;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1498]) return breakpoint(s, 3, 1498, r0);
  case 3:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Fx_neg__P155_mk(s);
    r0 = s.arg0.fields["maxVelocity"];
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 503; s.pc = 4; return s.tmp_2;
  case 4:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["maxNegativeVelocity"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
ArcadePhysicsEngine_maxSpeed__P2257.info = {"start":1963,"length":127,"line":71,"column":4,"endLine":74,"endColumn":5,"fileName":"pxt_modules/game/physics.ts","functionName":"maxSpeed","argumentNames":["this","v"]}

function ArcadePhysicsEngine_maxSpeed__P2257_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ArcadePhysicsEngine_maxSpeed__P2257, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Fx_neg__P155(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 261;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[261]) return breakpoint(s, 1, 261, r0);
  case 1:
    r0 = (0 - s.arg0);
    return leave(s, r0)
  default: oops()
} } }
Fx_neg__P155.info = {"start":311,"length":88,"line":14,"column":4,"endLine":16,"endColumn":5,"fileName":"pxt_modules/base/fixed.ts","functionName":"neg","argumentNames":["a"]}

function Fx_neg__P155_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Fx_neg__P155, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function ArcadePhysicsEngine_maxSpeed__P2256(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, ArcadePhysicsEngine__C2254_VT)) failedCast(r0);
    s.lastBrkId = 1496;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1496]) return breakpoint(s, 1, 1496, r0);
  case 1:
    s.tmp_0 = Fx_toInt__P170_mk(s);
    r0 = s.arg0.fields["maxVelocity"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 501; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leaveAccessor(s, r0)
  default: oops()
} } }
ArcadePhysicsEngine_maxSpeed__P2256.info = {"start":1884,"length":73,"line":67,"column":4,"endLine":69,"endColumn":5,"fileName":"pxt_modules/game/physics.ts","functionName":"maxSpeed","argumentNames":["this"]}
ArcadePhysicsEngine_maxSpeed__P2256.isGetter = true;

function ArcadePhysicsEngine_maxSpeed__P2256_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ArcadePhysicsEngine_maxSpeed__P2256, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function PhysicsEngine_constructor__P2239(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, PhysicsEngine__C2238_VT)) failedCast(r0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
PhysicsEngine_constructor__P2239.info = {"start":26,"length":21,"line":1,"column":4,"endLine":2,"endColumn":5,"fileName":"pxt_modules/game/physics.ts","functionName":"inline","argumentNames":["this"]}

function PhysicsEngine_constructor__P2239_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: PhysicsEngine_constructor__P2239, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function sprites_SpriteMap_constructor__P2174(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_SpriteMap__C2173_VT)) failedCast(r0);
    s.lastBrkId = 1386;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1386]) return breakpoint(s, 1, 1386, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["buckets"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
sprites_SpriteMap_constructor__P2174.info = {"start":237,"length":56,"line":8,"column":8,"endLine":10,"endColumn":9,"fileName":"pxt_modules/game/spritemap.ts","functionName":"inline","argumentNames":["this"]}

function sprites_SpriteMap_constructor__P2174_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_SpriteMap_constructor__P2174, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function control_pushEventContext__P407(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.ctx___13925 = undefined;
    s.n___13931 = undefined;
    s.lastBrkId = 506;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[506]) return breakpoint(s, 5, 506, r0);
  case 5:
    r0 = pxsim_numops_toBoolDecr(globals.eventContexts___4207);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 507;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[507]) return breakpoint(s, 6, 507, r0);
  case 6:
    r0 = pxsim_Array__mk();
    globals.eventContexts___4207 = (r0);
  case 1:
  case 2:
    s.lastBrkId = 508;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[508]) return breakpoint(s, 7, 508, r0);
  case 7:
    s.tmp_0 = control_eventContext__P406_mk(s);
    s.callLocIdx = 60; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
    s.ctx___13925 = (r0);
    s.lastBrkId = 509;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[509]) return breakpoint(s, 9, 509, r0);
  case 9:
    r0 = pxsim_numops_toBoolDecr(s.ctx___13925);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 510;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[510]) return breakpoint(s, 10, 510, r0);
  case 10:
    s.tmp_0 = control_EventContext_unregister__P400_mk(s);
    s.tmp_0.arg0 = s.ctx___13925;
    s.callLocIdx = 61; s.pc = 11; return s.tmp_0;
  case 11:
    r0 = s.retval;
  case 3:
  case 4:
    s.lastBrkId = 511;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[511]) return breakpoint(s, 12, 511, r0);
  case 12:
    r0 = pxsim_pxtcore_mkClassInstance(control_EventContext__C393_VT);
    s.tmp_0 = r0;
    s.tmp_1 = control_EventContext_constructor__P397_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.callLocIdx = 62; s.pc = 13; return s.tmp_1;
  case 13:
    r0 = s.retval;
    s.n___13931 = (s.tmp_0);
    s.lastBrkId = 512;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[512]) return breakpoint(s, 14, 512, r0);
  case 14:
    r0 = pxsim_Array__push(globals.eventContexts___4207, s.n___13931);
    s.lastBrkId = 513;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[513]) return breakpoint(s, 15, 513, r0);
  case 15:
    r0 = s.n___13931;
    return leave(s, r0)
  default: oops()
} } }
control_pushEventContext__P407.info = {"start":7123,"length":340,"line":216,"column":4,"endLine":227,"endColumn":5,"fileName":"pxt_modules/base/eventcontext.ts","functionName":"pushEventContext","argumentNames":[]}

function control_pushEventContext__P407_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control_pushEventContext__P407, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  ctx___13925: undefined,
  n___13931: undefined,
} }





function control_EventContext_unregister__P400(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.h___11274 = undefined;
    s.unnamed1632___U1 = undefined;
    s.unnamed1633___U2 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, control_EventContext__C393_VT)) failedCast(r0);
    s.lastBrkId = 477;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[477]) return breakpoint(s, 3, 477, r0);
  case 3:
    s.h___11274 = (undefined);
    r0 = s.arg0.fields["handlers"];
    s.unnamed1632___U1 = (r0);
    s.unnamed1633___U2 = (0);
    s.lastBrkId = 478;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[478]) return breakpoint(s, 4, 478, r0);
  case 4:
  case 1:
    s.tmp_0 = r0 = s.unnamed1633___U2;
    r0 = pxsim_Array__length(s.unnamed1632___U1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 2; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1632___U1, s.unnamed1633___U2);
    s.h___11274 = (r0);
    s.lastBrkId = 479;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[479]) return breakpoint(s, 5, 479, r0);
  case 5:
    s.tmp_2 = control_EventHandler_unregister__P4201_mk(s);
    s.tmp_2.arg0 = s.h___11274;
    s.callLocIdx = 56; s.pc = 6; return s.tmp_2;
  case 6:
    r0 = s.retval;
    r0 = (s.unnamed1633___U2 + 1);
    s.unnamed1633___U2 = (r0);
    { step = 1; continue; }
  case 2:
    s.unnamed1632___U1 = (undefined);
    s.lastBrkId = 480;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[480]) return breakpoint(s, 7, 480, r0);
  case 7:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["frameWorker"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["frameWorker"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
control_EventContext_unregister__P400.info = {"start":4534,"length":131,"line":137,"column":8,"endLine":141,"endColumn":9,"fileName":"pxt_modules/base/eventcontext.ts","functionName":"unregister","argumentNames":["this"]}

function control_EventContext_unregister__P400_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control_EventContext_unregister__P400, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  h___11274: undefined,
  unnamed1632___U1: undefined,
  unnamed1633___U2: undefined,
  arg0: undefined,
} }





function control_EventHandler_unregister__P4201(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, control_EventHandler__C4199_VT)) failedCast(r0);
    s.lastBrkId = 424;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[424]) return breakpoint(s, 1, 424, r0);
  case 1:
    r0 = s.arg0.fields["src"];
    s.tmp_0 = r0;
    r0 = s.arg0.fields["value"];
    s.tmp_1 = r0;
    r0 = s.arg0.fields["flags"];
    s.tmp_2 = r0;
    r0 = pxsim.control.internalOnEvent(s.tmp_0, s.tmp_1, control_doNothing__P4203, s.tmp_2);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
control_EventHandler_unregister__P4201.info = {"start":1136,"length":106,"line":36,"column":8,"endLine":38,"endColumn":9,"fileName":"pxt_modules/base/eventcontext.ts","functionName":"unregister","argumentNames":["this"]}

function control_EventHandler_unregister__P4201_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control_EventHandler_unregister__P4201, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function control_doNothing__P4203(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
control_doNothing__P4203.info = {"start":1254,"length":24,"line":41,"column":4,"endLine":41,"endColumn":28,"fileName":"pxt_modules/base/eventcontext.ts","functionName":"doNothing","argumentNames":[]}

function control_doNothing__P4203_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control_doNothing__P4203, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
} }





function control_EventContext_constructor__P397(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, control_EventContext__C393_VT)) failedCast(r0);
    s.lastBrkId = 425;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[425]) return breakpoint(s, 3, 425, r0);
  case 3:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["handlers"] = (s.tmp_1);
    s.lastBrkId = 426;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[426]) return breakpoint(s, 4, 426, r0);
  case 4:
    r0 = (s.arg0).fields["framesInSample"] = (0);
    s.lastBrkId = 427;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[427]) return breakpoint(s, 5, 427, r0);
  case 5:
    r0 = (s.arg0).fields["timeInSample"] = (0);
    s.lastBrkId = 428;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[428]) return breakpoint(s, 6, 428, r0);
  case 6:
    r0 = (s.arg0).fields["deltaTimeMillis"] = (0);
    s.lastBrkId = 429;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[429]) return breakpoint(s, 7, 429, r0);
  case 7:
    r0 = (s.arg0).fields["frameWorker"] = (0);
    s.lastBrkId = 430;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[430]) return breakpoint(s, 8, 430, r0);
  case 8:
    r0 = (s.arg0).fields["idleCallbacks"] = (undefined);
    s.lastBrkId = 431;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[431]) return breakpoint(s, 9, 431, r0);
  case 9:
    r0 = pxsim_numops_toBoolDecr(globals.control_EventContext_lastStats___395);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 432;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[432]) return breakpoint(s, 10, 432, r0);
  case 10:
    r0 = pxsim_String_.mkEmpty();
    globals.control_EventContext_lastStats___395 = (r0);
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
control_EventContext_constructor__P397.info = {"start":1740,"length":347,"line":58,"column":8,"endLine":68,"endColumn":9,"fileName":"pxt_modules/base/eventcontext.ts","functionName":"inline","argumentNames":["this"]}

function control_EventContext_constructor__P397_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control_EventContext_constructor__P397, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function game_popScene__P2614(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.oldScene___11207 = undefined;
    s.lastBrkId = 2696;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2696]) return breakpoint(s, 11, 2696, r0);
  case 11:
    s.tmp_0 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 1094; s.pc = 12; return s.tmp_0;
  case 12:
    r0 = s.retval;
    s.oldScene___11207 = (r0);
    s.lastBrkId = 2697;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2697]) return breakpoint(s, 13, 2697, r0);
  case 13:
    s.tmp_0 = r0 = globals._sceneStack___4557;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = pxsim_Array__length(globals._sceneStack___4557);
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2698;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2698]) return breakpoint(s, 14, 2698, r0);
  case 14:
    r0 = pxsim_Array_.pop(globals._sceneStack___4557);
    globals._scene___4556 = (r0);
    s.lastBrkId = 2699;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2699]) return breakpoint(s, 15, 2699, r0);
  case 15:
    s.tmp_0 = control_popEventContext__P408_mk(s);
    s.callLocIdx = 1095; s.pc = 16; return s.tmp_0;
  case 16:
    r0 = s.retval;
    { step = 6; continue; }
  case 3:
    s.lastBrkId = 2700;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2700]) return breakpoint(s, 17, 2700, r0);
  case 17:
    r0 = pxsim_numops_toBoolDecr(globals._scene___4556);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 2701;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2701]) return breakpoint(s, 18, 2701, r0);
  case 18:
    s.tmp_0 = control_popEventContext__P408_mk(s);
    s.callLocIdx = 1096; s.pc = 19; return s.tmp_0;
  case 19:
    r0 = s.retval;
    s.lastBrkId = 2702;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2702]) return breakpoint(s, 20, 2702, r0);
  case 20:
    globals._scene___4556 = (undefined);
  case 4:
  case 5:
  case 6:
    s.lastBrkId = 2703;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2703]) return breakpoint(s, 21, 2703, r0);
  case 21:
    r0 = pxsim_numops_toBoolDecr(globals._scene___4556);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 2704;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2704]) return breakpoint(s, 22, 2704, r0);
  case 22:
    s.tmp_0 = particles_enableAll__P2788_mk(s);
    s.callLocIdx = 1097; s.pc = 23; return s.tmp_0;
  case 23:
    r0 = s.retval;
  case 7:
  case 8:
    s.lastBrkId = 2705;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2705]) return breakpoint(s, 24, 2705, r0);
  case 24:
    r0 = pxsim_numops_toBoolDecr(globals._scenePopHandlers___4559);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 2706;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2706]) return breakpoint(s, 25, 2706, r0);
  case 25:
    r0 = pxsim_pxtcore_mkAction(1, game_popScene_inline__P11228);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.oldScene___11207);
    s.tmp_1 = helpers_arrayForEach__P109_mk(s);
    s.tmp_1.arg0 = globals._scenePopHandlers___4559;
    s.tmp_1.arg1 = s.tmp_0;
    s.callLocIdx = 1099; s.pc = 26; return s.tmp_1;
  case 26:
    r0 = s.retval;
  case 9:
  case 10:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_popScene__P2614.info = {"start":2033,"length":548,"line":75,"column":4,"endLine":93,"endColumn":5,"fileName":"pxt_modules/game/game.ts","functionName":"popScene","argumentNames":[]}

function game_popScene__P2614_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_popScene__P2614, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  oldScene___11207: undefined,
} }





function game_popScene_inline__P11228(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = lambda_2_mk(s);
    s.tmp_0.argL = s.arg0;
    s.tmp_0.arg0 = s.caps[0];
    setupLambda(s.tmp_0, s.tmp_0.argL);
    s.callLocIdx = 1098; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_popScene_inline__P11228.info = {"start":2545,"length":18,"line":91,"column":38,"endLine":91,"endColumn":56,"fileName":"pxt_modules/game/game.ts","functionName":"inline","argumentNames":["cb"]}

function game_popScene_inline__P11228_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_popScene_inline__P11228, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function particles_enableAll__P2788(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.sources___11232 = undefined;
    s.lastBrkId = 3432;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3432]) return breakpoint(s, 3, 3432, r0);
  case 3:
    s.tmp_0 = particles_particleSources__P4905_mk(s);
    s.callLocIdx = 1511; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.sources___11232 = (r0);
    s.lastBrkId = 3433;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3433]) return breakpoint(s, 5, 3433, r0);
  case 5:
    r0 = pxsim_numops_toBoolDecr(s.sources___11232);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3434;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3434]) return breakpoint(s, 6, 3434, r0);
  case 6:
    s.tmp_0 = helpers_arrayForEach__P109_mk(s);
    s.tmp_0.arg0 = s.sources___11232;
    s.tmp_0.arg1 = particles_enableAll_inline__P11238;
    s.callLocIdx = 1513; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    s.lastBrkId = 3435;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3435]) return breakpoint(s, 8, 3435, r0);
  case 8:
    s.tmp_0 = particles_pruneParticles__P4901_mk(s);
    s.callLocIdx = 1514; s.pc = 9; return s.tmp_0;
  case 9:
    r0 = s.retval;
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_enableAll__P2788.info = {"start":12649,"length":193,"line":413,"column":4,"endLine":419,"endColumn":5,"fileName":"pxt_modules/game/particles.ts","functionName":"enableAll","argumentNames":[]}

function particles_enableAll__P2788_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_enableAll__P2788, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  sources___11232: undefined,
} }





function particles_enableAll_inline__P11238(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = particles_ParticleSource_enabled__P2769_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = true;
    s.callLocIdx = 1512; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = true;
    return leave(s, r0)
  default: oops()
} } }
particles_enableAll_inline__P11238.info = {"start":12773,"length":21,"line":416,"column":28,"endLine":416,"endColumn":49,"fileName":"pxt_modules/game/particles.ts","functionName":"inline","argumentNames":["s"]}

function particles_enableAll_inline__P11238_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_enableAll_inline__P11238, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function control_popEventContext__P408(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.ctx___11245 = undefined;
    s.context___11253 = undefined;
    s.lastBrkId = 514;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[514]) return breakpoint(s, 8, 514, r0);
  case 8:
    r0 = pxsim_numops_toBoolDecr(globals.eventContexts___4207);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 515;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[515]) return breakpoint(s, 9, 515, r0);
  case 9:
    { step = 7; continue; }
  case 1:
  case 2:
    s.lastBrkId = 516;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[516]) return breakpoint(s, 10, 516, r0);
  case 10:
    r0 = pxsim_Array_.pop(globals.eventContexts___4207);
    s.ctx___11245 = (r0);
    s.lastBrkId = 517;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[517]) return breakpoint(s, 11, 517, r0);
  case 11:
    r0 = pxsim_numops_toBoolDecr(s.ctx___11245);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 518;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[518]) return breakpoint(s, 12, 518, r0);
  case 12:
    { step = 7; continue; }
  case 3:
  case 4:
    s.lastBrkId = 519;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[519]) return breakpoint(s, 13, 519, r0);
  case 13:
    s.tmp_2 = control_EventContext_unregister__P400_mk(s);
    s.tmp_2.arg0 = s.ctx___11245;
    s.callLocIdx = 63; s.pc = 14; return s.tmp_2;
  case 14:
    r0 = s.retval;
    s.lastBrkId = 520;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[520]) return breakpoint(s, 15, 520, r0);
  case 15:
    s.tmp_0 = r0 = globals.eventContexts___4207;
    r0 = pxsim_Array__length(globals.eventContexts___4207);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - 1);
    s.tmp_1 = r0;
    r0 = pxsim_Array__getAt(s.tmp_0, s.tmp_1);
    s.context___11253 = (r0);
    s.lastBrkId = 521;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[521]) return breakpoint(s, 16, 521, r0);
  case 16:
    r0 = pxsim_numops_toBoolDecr(s.context___11253);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 522;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[522]) return breakpoint(s, 17, 522, r0);
  case 17:
    s.tmp_0 = control_EventContext_register__P399_mk(s);
    s.tmp_0.arg0 = s.context___11253;
    s.callLocIdx = 64; s.pc = 18; return s.tmp_0;
  case 18:
    r0 = s.retval;
    { step = 6; continue; }
  case 5:
    s.lastBrkId = 523;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[523]) return breakpoint(s, 19, 523, r0);
  case 19:
    globals.eventContexts___4207 = (undefined);
  case 6:
  case 7:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
control_popEventContext__P408.info = {"start":7568,"length":413,"line":232,"column":4,"endLine":246,"endColumn":5,"fileName":"pxt_modules/base/eventcontext.ts","functionName":"popEventContext","argumentNames":[]}

function control_popEventContext__P408_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control_popEventContext__P408, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  ctx___11245: undefined,
  context___11253: undefined,
} }





function control_EventContext_register__P399(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.h___11266 = undefined;
    s.unnamed1630___U1 = undefined;
    s.unnamed1631___U2 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, control_EventContext__C393_VT)) failedCast(r0);
    s.lastBrkId = 473;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[473]) return breakpoint(s, 3, 473, r0);
  case 3:
    s.h___11266 = (undefined);
    r0 = s.arg0.fields["handlers"];
    s.unnamed1630___U1 = (r0);
    s.unnamed1631___U2 = (0);
    s.lastBrkId = 474;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[474]) return breakpoint(s, 4, 474, r0);
  case 4:
  case 1:
    s.tmp_0 = r0 = s.unnamed1631___U2;
    r0 = pxsim_Array__length(s.unnamed1630___U1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 2; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1630___U1, s.unnamed1631___U2);
    s.h___11266 = (r0);
    s.lastBrkId = 475;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[475]) return breakpoint(s, 5, 475, r0);
  case 5:
    s.tmp_2 = control_EventHandler_register__P4200_mk(s);
    s.tmp_2.arg0 = s.h___11266;
    s.callLocIdx = 54; s.pc = 6; return s.tmp_2;
  case 6:
    r0 = s.retval;
    r0 = (s.unnamed1631___U2 + 1);
    s.unnamed1631___U2 = (r0);
    { step = 1; continue; }
  case 2:
    s.unnamed1630___U1 = (undefined);
    s.lastBrkId = 476;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[476]) return breakpoint(s, 7, 476, r0);
  case 7:
    s.tmp_0 = control_EventContext_registerFrameCallbacks__P4205_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 55; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
control_EventContext_register__P399.info = {"start":4386,"length":138,"line":131,"column":8,"endLine":135,"endColumn":9,"fileName":"pxt_modules/base/eventcontext.ts","functionName":"register","argumentNames":["this"]}

function control_EventContext_register__P399_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control_EventContext_register__P399, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  h___11266: undefined,
  unnamed1630___U1: undefined,
  unnamed1631___U2: undefined,
  arg0: undefined,
} }





function game_pushScene__P2613(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.oldScene___11164 = undefined;
    s.lastBrkId = 2687;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2687]) return breakpoint(s, 5, 2687, r0);
  case 5:
    s.tmp_0 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 1088; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    s.oldScene___11164 = (r0);
    s.lastBrkId = 2688;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2688]) return breakpoint(s, 7, 2688, r0);
  case 7:
    s.tmp_0 = particles_clearAll__P2786_mk(s);
    s.callLocIdx = 1089; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
    s.lastBrkId = 2689;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2689]) return breakpoint(s, 9, 2689, r0);
  case 9:
    s.tmp_0 = particles_disableAll__P2787_mk(s);
    s.callLocIdx = 1090; s.pc = 10; return s.tmp_0;
  case 10:
    r0 = s.retval;
    s.lastBrkId = 2690;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2690]) return breakpoint(s, 11, 2690, r0);
  case 11:
    r0 = pxsim_numops_toBoolDecr(globals._sceneStack___4557);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2691;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2691]) return breakpoint(s, 12, 2691, r0);
  case 12:
    r0 = pxsim_Array__mk();
    globals._sceneStack___4557 = (r0);
  case 1:
  case 2:
    s.lastBrkId = 2692;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2692]) return breakpoint(s, 13, 2692, r0);
  case 13:
    r0 = pxsim_Array__push(globals._sceneStack___4557, globals._scene___4556);
    s.lastBrkId = 2693;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2693]) return breakpoint(s, 14, 2693, r0);
  case 14:
    s.tmp_0 = game_init__P4564_mk(s);
    s.tmp_0.arg0 = true;
    s.callLocIdx = 1091; s.pc = 15; return s.tmp_0;
  case 15:
    r0 = s.retval;
    s.lastBrkId = 2694;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2694]) return breakpoint(s, 16, 2694, r0);
  case 16:
    r0 = pxsim_numops_toBoolDecr(globals._scenePushHandlers___4558);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2695;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2695]) return breakpoint(s, 17, 2695, r0);
  case 17:
    r0 = pxsim_pxtcore_mkAction(1, game_pushScene_inline__P11181);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.oldScene___11164);
    s.tmp_1 = helpers_arrayForEach__P109_mk(s);
    s.tmp_1.arg0 = globals._scenePushHandlers___4558;
    s.tmp_1.arg1 = s.tmp_0;
    s.callLocIdx = 1093; s.pc = 18; return s.tmp_1;
  case 18:
    r0 = s.retval;
  case 3:
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_pushScene__P2613.info = {"start":1660,"length":367,"line":62,"column":4,"endLine":73,"endColumn":5,"fileName":"pxt_modules/game/game.ts","functionName":"pushScene","argumentNames":[]}

function game_pushScene__P2613_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_pushScene__P2613, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  oldScene___11164: undefined,
} }





function game_pushScene_inline__P11181(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = lambda_2_mk(s);
    s.tmp_0.argL = s.arg0;
    s.tmp_0.arg0 = s.caps[0];
    setupLambda(s.tmp_0, s.tmp_0.argL);
    s.callLocIdx = 1092; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_pushScene_inline__P11181.info = {"start":1991,"length":18,"line":71,"column":39,"endLine":71,"endColumn":57,"fileName":"pxt_modules/game/game.ts","functionName":"inline","argumentNames":["cb"]}

function game_pushScene_inline__P11181_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_pushScene_inline__P11181, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function particles_disableAll__P2787(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.sources___11185 = undefined;
    s.lastBrkId = 3428;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3428]) return breakpoint(s, 3, 3428, r0);
  case 3:
    s.tmp_0 = particles_particleSources__P4905_mk(s);
    s.callLocIdx = 1507; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.sources___11185 = (r0);
    s.lastBrkId = 3429;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3429]) return breakpoint(s, 5, 3429, r0);
  case 5:
    r0 = pxsim_numops_toBoolDecr(s.sources___11185);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3430;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3430]) return breakpoint(s, 6, 3430, r0);
  case 6:
    s.tmp_0 = helpers_arrayForEach__P109_mk(s);
    s.tmp_0.arg0 = s.sources___11185;
    s.tmp_0.arg1 = particles_disableAll_inline__P11191;
    s.callLocIdx = 1509; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    s.lastBrkId = 3431;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3431]) return breakpoint(s, 8, 3431, r0);
  case 8:
    s.tmp_0 = particles_pruneParticles__P4901_mk(s);
    s.callLocIdx = 1510; s.pc = 9; return s.tmp_0;
  case 9:
    r0 = s.retval;
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_disableAll__P2787.info = {"start":12370,"length":195,"line":402,"column":4,"endLine":408,"endColumn":5,"fileName":"pxt_modules/game/particles.ts","functionName":"disableAll","argumentNames":[]}

function particles_disableAll__P2787_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_disableAll__P2787, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  sources___11185: undefined,
} }





function particles_disableAll_inline__P11191(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = particles_ParticleSource_enabled__P2769_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = false;
    s.callLocIdx = 1508; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = false;
    return leave(s, r0)
  default: oops()
} } }
particles_disableAll_inline__P11191.info = {"start":12495,"length":22,"line":405,"column":28,"endLine":405,"endColumn":50,"fileName":"pxt_modules/game/particles.ts","functionName":"inline","argumentNames":["s"]}

function particles_disableAll_inline__P11191_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_disableAll_inline__P11191, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function particles_clearAll__P2786(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.sources___11196 = undefined;
    s.lastBrkId = 3424;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3424]) return breakpoint(s, 3, 3424, r0);
  case 3:
    s.tmp_0 = particles_particleSources__P4905_mk(s);
    s.callLocIdx = 1503; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.sources___11196 = (r0);
    s.lastBrkId = 3425;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3425]) return breakpoint(s, 5, 3425, r0);
  case 5:
    r0 = pxsim_numops_toBoolDecr(s.sources___11196);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3426;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3426]) return breakpoint(s, 6, 3426, r0);
  case 6:
    s.tmp_0 = helpers_arrayForEach__P109_mk(s);
    s.tmp_0.arg0 = s.sources___11196;
    s.tmp_0.arg1 = particles_clearAll_inline__P11202;
    s.callLocIdx = 1505; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    s.lastBrkId = 3427;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3427]) return breakpoint(s, 8, 3427, r0);
  case 8:
    s.tmp_0 = particles_pruneParticles__P4901_mk(s);
    s.callLocIdx = 1506; s.pc = 9; return s.tmp_0;
  case 9:
    r0 = s.retval;
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_clearAll__P2786.info = {"start":12098,"length":185,"line":391,"column":4,"endLine":397,"endColumn":5,"fileName":"pxt_modules/game/particles.ts","functionName":"clearAll","argumentNames":[]}

function particles_clearAll__P2786_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_clearAll__P2786, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  sources___11196: undefined,
} }





function particles_clearAll_inline__P11202(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = particles_ParticleSource_clear__P2771_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1504; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_clearAll_inline__P11202.info = {"start":12221,"length":14,"line":394,"column":28,"endLine":394,"endColumn":42,"fileName":"pxt_modules/game/particles.ts","functionName":"inline","argumentNames":["s"]}

function particles_clearAll_inline__P11202_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_clearAll_inline__P11202, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function game_waitAnyButton__P2611(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 2671;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2671]) return breakpoint(s, 3, 2671, r0);
  case 3:
    r0 = pxsim_numops_toBoolDecr(globals.__waitAnyButton___4560);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2672;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2672]) return breakpoint(s, 4, 2672, r0);
  case 4:
    s.tmp_0 = lambda_1_mk(s);
    s.tmp_0.argL = globals.__waitAnyButton___4560;
    setupLambda(s.tmp_0, s.tmp_0.argL);
    s.callLocIdx = 1082; s.pc = 5; return s.tmp_0;
  case 5:
    r0 = s.retval;
    { step = 2; continue; }
  case 1:
    s.lastBrkId = 2673;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2673]) return breakpoint(s, 6, 2673, r0);
  case 6:
    s.tmp_0 = pause__P411_mk(s);
    s.tmp_0.arg0 = 3000;
    s.callLocIdx = 1083; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_waitAnyButton__P2611.info = {"start":967,"length":111,"line":35,"column":4,"endLine":38,"endColumn":5,"fileName":"pxt_modules/game/game.ts","functionName":"waitAnyButton","argumentNames":[]}

function game_waitAnyButton__P2611_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_waitAnyButton__P2611, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
} }





function game_GameOverDialog_update__P2596(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_GameOverDialog__C2593_VT)) failedCast(r0);
    s.lastBrkId = 2512;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2512]) return breakpoint(s, 3, 2512, r0);
  case 3:
    s.tmp_0 = game_BaseDialog_clearInterior__P4531_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1029; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.lastBrkId = 2513;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2513]) return breakpoint(s, 5, 2513, r0);
  case 5:
    s.tmp_0 = game_GameOverDialog__C2593_v2_1_mk(s);
    s.tmp_0.arg0 = s.arg0;
    if (!checkSubtype(s.tmp_0.arg0, game_GameOverDialog__C2593_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.drawTextCore;
    s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    s.lastBrkId = 2514;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2514]) return breakpoint(s, 7, 2514, r0);
  case 7:
    r0 = s.arg0.fields["cursorOn"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2515;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2515]) return breakpoint(s, 8, 2515, r0);
  case 8:
    s.tmp_1 = game_BaseDialog_drawCursorRow__P2570_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.callLocIdx = 1030; s.pc = 9; return s.tmp_1;
  case 9:
    r0 = s.retval;
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_GameOverDialog_update__P2596.info = {"start":11515,"length":173,"line":352,"column":8,"endLine":359,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"update","argumentNames":["this"]}

function game_GameOverDialog_update__P2596_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_GameOverDialog_update__P2596, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function game_BaseDialog_clearInterior__P4531(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.d___10811 = undefined;
    s.s___10818 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_BaseDialog__C2554_VT)) failedCast(r0);
    s.lastBrkId = 2397;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2397]) return breakpoint(s, 8, 2397, r0);
  case 8:
    r0 = s.arg0.fields["unit"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 == 1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2398;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2398]) return breakpoint(s, 9, 2398, r0);
  case 9:
    s.tmp_2 = game_BaseDialog_fastFill__P4530_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.tmp_2.arg1 = 4;
    s.tmp_2.arg2 = 1;
    s.tmp_2.arg3 = 1;
    r0 = s.arg0.fields["columns"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 - 2);
    s.tmp_2.arg4 = r0;
    r0 = s.arg0.fields["rows"];
    s.tmp_4 = r0;
    r0 = (s.tmp_4 - 2);
    s.tmp_2.arg5 = r0;
    s.callLocIdx = 979; s.pc = 10; return s.tmp_2;
  case 10:
    r0 = s.retval;
    { step = 7; continue; }
  case 1:
  case 2:
    s.lastBrkId = 2399;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2399]) return breakpoint(s, 11, 2399, r0);
  case 11:
    s.d___10811 = (1);
    s.lastBrkId = 2400;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2400]) return breakpoint(s, 12, 2400, r0);
  case 12:
  case 3:
    s.lastBrkId = 2401;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2401]) return breakpoint(s, 13, 2401, r0);
  case 13:
    s.tmp_1 = r0 = s.d___10811;
    r0 = s.arg0.fields["columns"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 - 1);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 6; continue; }
    s.lastBrkId = 2402;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2402]) return breakpoint(s, 14, 2402, r0);
  case 14:
    s.s___10818 = (1);
    s.lastBrkId = 2403;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2403]) return breakpoint(s, 15, 2403, r0);
  case 15:
  case 4:
    s.lastBrkId = 2404;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2404]) return breakpoint(s, 16, 2404, r0);
  case 16:
    s.tmp_1 = r0 = s.s___10818;
    r0 = s.arg0.fields["rows"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 - 1);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 2405;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2405]) return breakpoint(s, 17, 2405, r0);
  case 17:
    s.tmp_4 = game_BaseDialog_drawPartial__P4532_mk(s);
    s.tmp_4.arg0 = s.arg0;
    s.tmp_4.arg1 = 4;
    s.tmp_4.arg2 = s.d___10811;
    s.tmp_4.arg3 = s.s___10818;
    s.callLocIdx = 980; s.pc = 18; return s.tmp_4;
  case 18:
    r0 = s.retval;
    s.lastBrkId = 2406;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2406]) return breakpoint(s, 19, 2406, r0);
  case 19:
    r0 = (s.s___10818 + 1);
    s.s___10818 = (r0);
    { step = 4; continue; }
  case 5:
    s.lastBrkId = 2407;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2407]) return breakpoint(s, 20, 2407, r0);
  case 20:
    r0 = (s.d___10811 + 1);
    s.d___10811 = (r0);
    { step = 3; continue; }
  case 6:
  case 7:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_BaseDialog_clearInterior__P4531.info = {"start":3942,"length":342,"line":133,"column":8,"endLine":142,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"clearInterior","argumentNames":["this"]}

function game_BaseDialog_clearInterior__P4531_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_BaseDialog_clearInterior__P4531, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  d___10811: undefined,
  s___10818: undefined,
  arg0: undefined,
} }





function game_BaseDialog_drawPartial__P4532(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.x0___10836 = undefined;
    s.y0___10844 = undefined;
    s.xf___10852 = undefined;
    s.yf___10859 = undefined;
    s.e___10866 = undefined;
    s.t___10872 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_BaseDialog__C2554_VT)) failedCast(r0);
    s.lastBrkId = 2408;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2408]) return breakpoint(s, 5, 2408, r0);
  case 5:
    r0 = s.arg0.fields["innerLeft"];
    s.tmp_0 = r0;
    r0 = s.arg0.fields["unit"];
    s.tmp_2 = r0;
    r0 = (s.arg2 * s.tmp_2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 + s.tmp_1);
    s.x0___10836 = (r0);
    s.lastBrkId = 2409;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2409]) return breakpoint(s, 6, 2409, r0);
  case 6:
    r0 = s.arg0.fields["innerTop"];
    s.tmp_0 = r0;
    r0 = s.arg0.fields["unit"];
    s.tmp_2 = r0;
    r0 = (s.arg3 * s.tmp_2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 + s.tmp_1);
    s.y0___10844 = (r0);
    s.lastBrkId = 2410;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2410]) return breakpoint(s, 7, 2410, r0);
  case 7:
    r0 = (s.arg1 % 3);
    s.tmp_0 = r0;
    r0 = s.arg0.fields["unit"];
    s.tmp_1 = r0;
    r0 = (s.tmp_0 * s.tmp_1);
    s.xf___10852 = (r0);
    s.lastBrkId = 2411;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2411]) return breakpoint(s, 8, 2411, r0);
  case 8:
    r0 = pxsim.Math_.idiv(s.arg1, 3);
    s.tmp_0 = r0;
    r0 = s.arg0.fields["unit"];
    s.tmp_1 = r0;
    r0 = (s.tmp_0 * s.tmp_1);
    s.yf___10859 = (r0);
    s.lastBrkId = 2412;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2412]) return breakpoint(s, 9, 2412, r0);
  case 9:
    s.e___10866 = (0);
    s.lastBrkId = 2413;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2413]) return breakpoint(s, 10, 2413, r0);
  case 10:
  case 1:
    s.lastBrkId = 2414;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2414]) return breakpoint(s, 11, 2414, r0);
  case 11:
    r0 = s.arg0.fields["unit"];
    s.tmp_1 = r0;
    r0 = (s.e___10866 < s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 2415;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2415]) return breakpoint(s, 12, 2415, r0);
  case 12:
    s.t___10872 = (0);
    s.lastBrkId = 2416;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2416]) return breakpoint(s, 13, 2416, r0);
  case 13:
  case 2:
    s.lastBrkId = 2417;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2417]) return breakpoint(s, 14, 2417, r0);
  case 14:
    r0 = s.arg0.fields["unit"];
    s.tmp_1 = r0;
    r0 = (s.t___10872 < s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2418;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2418]) return breakpoint(s, 15, 2418, r0);
  case 15:
    r0 = s.arg0.fields["image"];
    s.tmp_2 = r0;
    r0 = (s.x0___10836 + s.e___10866);
    s.tmp_3 = r0;
    r0 = (s.y0___10844 + s.t___10872);
    s.tmp_4 = r0;
    r0 = s.arg0.fields["frame"];
    s.tmp_6 = r0;
    r0 = (s.xf___10852 + s.e___10866);
    s.tmp_7 = r0;
    r0 = (s.yf___10859 + s.t___10872);
    s.tmp_8 = r0;
    r0 = pxsim_ImageMethods.getPixel(s.tmp_6, s.tmp_7, s.tmp_8);
    s.tmp_5 = r0;
    r0 = pxsim_ImageMethods.setPixel(s.tmp_2, s.tmp_3, s.tmp_4, s.tmp_5);
    s.lastBrkId = 2419;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2419]) return breakpoint(s, 16, 2419, r0);
  case 16:
    r0 = (s.t___10872 + 1);
    s.t___10872 = (r0);
    { step = 2; continue; }
  case 3:
    s.lastBrkId = 2420;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2420]) return breakpoint(s, 17, 2420, r0);
  case 17:
    r0 = (s.e___10866 + 1);
    s.e___10866 = (r0);
    { step = 1; continue; }
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_BaseDialog_drawPartial__P4532.info = {"start":4294,"length":604,"line":144,"column":8,"endLine":159,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"drawPartial","argumentNames":["this","index","colTo","rowTo"]}

function game_BaseDialog_drawPartial__P4532_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_BaseDialog_drawPartial__P4532, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  x0___10836: undefined,
  y0___10844: undefined,
  xf___10852: undefined,
  yf___10859: undefined,
  e___10866: undefined,
  t___10872: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function game_BaseDialog_fastFill__P4530(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.color___10908 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.arg5 = (s.lambdaArgs[5]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_BaseDialog__C2554_VT)) failedCast(r0);
    s.lastBrkId = 2395;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2395]) return breakpoint(s, 1, 2395, r0);
  case 1:
    r0 = s.arg0.fields["frame"];
    s.tmp_0 = r0;
    r0 = (s.arg1 % 3);
    s.tmp_1 = r0;
    r0 = pxsim.Math_.idiv(s.arg1, 3);
    s.tmp_2 = r0;
    r0 = pxsim_ImageMethods.getPixel(s.tmp_0, s.tmp_1, s.tmp_2);
    s.color___10908 = (r0);
    s.lastBrkId = 2396;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2396]) return breakpoint(s, 2, 2396, r0);
  case 2:
    s.tmp_0 = helpers_imageFillRect__P1753_mk(s);
    r0 = s.arg0.fields["image"];
    s.tmp_0.arg0 = r0;
    r0 = s.arg0.fields["innerLeft"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 + s.arg2);
    s.tmp_0.arg1 = r0;
    r0 = s.arg0.fields["innerTop"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + s.arg3);
    s.tmp_0.arg2 = r0;
    s.tmp_0.arg3 = s.arg4;
    s.tmp_0.arg4 = s.arg5;
    s.tmp_0.arg5 = s.color___10908;
    s.callLocIdx = 978; s.pc = 3; return s.tmp_0;
  case 3:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_BaseDialog_fastFill__P4530.info = {"start":3683,"length":249,"line":128,"column":8,"endLine":131,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"fastFill","argumentNames":["this","index","x","y","w","h"]}

function game_BaseDialog_fastFill__P4530_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_BaseDialog_fastFill__P4530, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  color___10908: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
  arg5: undefined,
} }





function game_GameOverDialog_drawTextCore__P2597(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.scoreColor___10400 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_GameOverDialog__C2593_VT)) failedCast(r0);
    s.lastBrkId = 2516;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2516]) return breakpoint(s, 11, 2516, r0);
  case 11:
    r0 = s.arg0.fields["win"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = "YOU WIN!";
    { step = 2; continue; }
  case 1:
    r0 = "GAME OVER!";
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_ImageMethods.isMono(globals.screen___1827);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 3; continue; }
    r0 = 1;
    { step = 4; continue; }
  case 3:
    r0 = 5;
  case 4:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    s.tmp_4 = helpers_imagePrintCenter__P1784_mk(s);
    r0 = s.arg0.fields["image"];
    s.tmp_4.arg0 = r0;
    s.tmp_4.arg1 = s.tmp_1;
    s.tmp_4.arg2 = 8;
    s.tmp_4.arg3 = s.tmp_3;
    s.tmp_4.arg4 = globals.font8___1770;
    s.callLocIdx = 1031; s.pc = 12; return s.tmp_4;
  case 12:
    r0 = s.retval;
    s.lastBrkId = 2517;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2517]) return breakpoint(s, 13, 2517, r0);
  case 13:
    r0 = s.arg0.fields["score"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 !== undefined);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 2518;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2518]) return breakpoint(s, 14, 2518, r0);
  case 14:
    r0 = pxsim_ImageMethods.isMono(globals.screen___1827);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 5; continue; }
    r0 = 1;
    { step = 6; continue; }
  case 5:
    r0 = 2;
  case 6:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    s.scoreColor___10400 = (s.tmp_3);
    s.lastBrkId = 2519;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2519]) return breakpoint(s, 15, 2519, r0);
  case 15:
    s.tmp_0 = helpers_imagePrintCenter__P1784_mk(s);
    r0 = s.arg0.fields["image"];
    s.tmp_0.arg0 = r0;
    r0 = s.arg0.fields["score"];
    s.tmp_2 = r0;
    if ((s.tmp_2) && (s.tmp_2).vtable) {
    setupResume(s, 17);
    pxsim_String__stringConv(s.tmp_2);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_2) + ""; }
  case 17:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_String__concat("Score:", s.tmp_1);
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = 23;
    s.tmp_0.arg3 = s.scoreColor___10400;
    s.tmp_0.arg4 = globals.font8___1770;
    s.callLocIdx = 1032; s.pc = 16; return s.tmp_0;
  case 16:
    r0 = s.retval;
    s.lastBrkId = 2520;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2520]) return breakpoint(s, 18, 2520, r0);
  case 18:
    r0 = s.arg0.fields["isNewHighScore"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 2521;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2521]) return breakpoint(s, 19, 2521, r0);
  case 19:
    s.tmp_1 = helpers_imagePrintCenter__P1784_mk(s);
    r0 = s.arg0.fields["image"];
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = "New High Score!";
    s.tmp_1.arg2 = 34;
    s.tmp_1.arg3 = s.scoreColor___10400;
    s.tmp_1.arg4 = globals.font5___1775;
    s.callLocIdx = 1033; s.pc = 20; return s.tmp_1;
  case 20:
    r0 = s.retval;
    { step = 8; continue; }
  case 7:
    s.lastBrkId = 2522;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2522]) return breakpoint(s, 21, 2522, r0);
  case 21:
    s.tmp_0 = helpers_imagePrintCenter__P1784_mk(s);
    r0 = s.arg0.fields["image"];
    s.tmp_0.arg0 = r0;
    r0 = s.arg0.fields["highScore"];
    s.tmp_2 = r0;
    if ((s.tmp_2) && (s.tmp_2).vtable) {
    setupResume(s, 23);
    pxsim_String__stringConv(s.tmp_2);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_2) + ""; }
  case 23:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_String__concat("HI", s.tmp_1);
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = 34;
    s.tmp_0.arg3 = s.scoreColor___10400;
    s.tmp_0.arg4 = globals.font8___1770;
    s.callLocIdx = 1034; s.pc = 22; return s.tmp_0;
  case 22:
    r0 = s.retval;
  case 8:
  case 9:
  case 10:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_GameOverDialog_drawTextCore__P2597.info = {"start":11698,"length":1200,"line":361,"column":8,"endLine":398,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"drawTextCore","argumentNames":["this"]}

function game_GameOverDialog_drawTextCore__P2597_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_GameOverDialog_drawTextCore__P2597, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  scoreColor___10400: undefined,
  arg0: undefined,
} }





function helpers_imagePrintCenter__P1784(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.w___10448 = undefined;
    s.x___10454 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 844;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[844]) return breakpoint(s, 3, 844, r0);
  case 3:
    r0 = pxsim_numops_toBoolDecr(s.arg4);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 845;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[845]) return breakpoint(s, 4, 845, r0);
  case 4:
    s.tmp_2 = image_getFontForText__P1772_mk(s);
    s.tmp_2.arg0 = s.arg1;
    s.callLocIdx = 141; s.pc = 5; return s.tmp_2;
  case 5:
    r0 = s.retval;
    s.arg4 = (r0);
  case 1:
  case 2:
    s.lastBrkId = 846;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[846]) return breakpoint(s, 6, 846, r0);
  case 6:
    r0 = pxsim_String_.length(s.arg1);
    s.tmp_0 = r0;
    s.tmp_2 = if_charWidth_1_mk(s);
    s.tmp_2.arg0 = s.arg4;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "charWidth");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["charWidth"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["charWidth"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 142; s.pc = 7; return s.tmp_2; }
    }
  case 7:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0 * s.tmp_1);
    s.w___10448 = (r0);
    s.lastBrkId = 847;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[847]) return breakpoint(s, 8, 847, r0);
  case 8:
    r0 = pxsim_ImageMethods.width(s.arg0);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - s.w___10448);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 / 2);
    s.x___10454 = (r0);
    s.lastBrkId = 848;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[848]) return breakpoint(s, 9, 848, r0);
  case 9:
    s.tmp_0 = helpers_imagePrint__P1785_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.tmp_0.arg2 = s.x___10454;
    s.tmp_0.arg3 = s.arg2;
    s.tmp_0.arg4 = s.arg3;
    s.tmp_0.arg5 = s.arg4;
    s.tmp_0.arg6 = undefined;
    s.callLocIdx = 143; s.pc = 10; return s.tmp_0;
  case 10:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
helpers_imagePrintCenter__P1784.info = {"start":15025,"length":295,"line":206,"column":4,"endLine":211,"endColumn":5,"fileName":"pxt_modules/screen/text.ts","functionName":"imagePrintCenter","argumentNames":["img","text","y","color","font"]}

function helpers_imagePrintCenter__P1784_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_imagePrintCenter__P1784, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  w___10448: undefined,
  x___10454: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
} }





function game_BaseDialog_drawCursorRow__P2570(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.offset___10295 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_BaseDialog__C2554_VT)) failedCast(r0);
    s.lastBrkId = 2361;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2361]) return breakpoint(s, 3, 2361, r0);
  case 3:
    s.offset___10295 = (0);
    s.lastBrkId = 2362;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2362]) return breakpoint(s, 4, 2362, r0);
  case 4:
    r0 = s.arg0.fields["cursorCount"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > 20);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2363;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2363]) return breakpoint(s, 5, 2363, r0);
  case 5:
    s.offset___10295 = (1);
  case 1:
  case 2:
    s.lastBrkId = 2364;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2364]) return breakpoint(s, 6, 2364, r0);
  case 6:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.arg0.fields["cursorCount"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 + 1);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 % 40);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["cursorCount"] = (s.tmp_1);
    s.lastBrkId = 2365;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2365]) return breakpoint(s, 7, 2365, r0);
  case 7:
    r0 = s.arg0.fields["image"];
    s.tmp_0 = r0;
    r0 = s.arg0.fields["cursor"];
    s.tmp_1 = r0;
    r0 = s.arg0.fields["innerLeft"];
    s.tmp_6 = r0;
    s.tmp_8 = game_BaseDialog_textAreaWidth__P4535_mk(s);
    s.tmp_8.arg0 = s.arg0;
    s.callLocIdx = 959; s.pc = 8; return s.tmp_8;
  case 8:
    r0 = s.retval;
    s.tmp_7 = r0;
    r0 = (s.tmp_6 + s.tmp_7);
    s.tmp_5 = r0;
    r0 = s.arg0.fields["unit"];
    s.tmp_9 = r0;
    r0 = (s.tmp_5 + s.tmp_9);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 + s.offset___10295);
    s.tmp_3 = r0;
    r0 = s.arg0.fields["cursor"];
    s.tmp_11 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_11);
    s.tmp_10 = r0;
    r0 = (s.tmp_3 - s.tmp_10);
    s.tmp_2 = r0;
    r0 = s.arg0.fields["innerTop"];
    s.tmp_16 = r0;
    r0 = s.arg0.fields["unit"];
    s.tmp_17 = r0;
    r0 = (s.tmp_16 + s.tmp_17);
    s.tmp_15 = r0;
    s.tmp_19 = game_BaseDialog_textAreaHeight__P4536_mk(s);
    s.tmp_19.arg0 = s.arg0;
    s.callLocIdx = 960; s.pc = 9; return s.tmp_19;
  case 9:
    r0 = s.retval;
    s.tmp_18 = r0;
    r0 = (s.tmp_15 + s.tmp_18);
    s.tmp_14 = r0;
    r0 = (s.tmp_14 + 1);
    s.tmp_13 = r0;
    s.tmp_21 = game_BaseDialog_cursorRowHeight__P4533_mk(s);
    s.tmp_21.arg0 = s.arg0;
    s.callLocIdx = 961; s.pc = 10; return s.tmp_21;
  case 10:
    r0 = s.retval;
    s.tmp_20 = r0;
    r0 = (s.tmp_13 - s.tmp_20);
    s.tmp_12 = r0;
    r0 = pxsim_ImageMethods.drawTransparentImage(s.tmp_0, s.tmp_1, s.tmp_2, s.tmp_12);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_BaseDialog_drawCursorRow__P2570.info = {"start":1863,"length":479,"line":75,"column":8,"endLine":88,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"drawCursorRow","argumentNames":["this"]}

function game_BaseDialog_drawCursorRow__P2570_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_BaseDialog_drawCursorRow__P2570, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  tmp_12: undefined,
  tmp_13: undefined,
  tmp_14: undefined,
  tmp_15: undefined,
  tmp_16: undefined,
  tmp_17: undefined,
  tmp_18: undefined,
  tmp_19: undefined,
  tmp_20: undefined,
  tmp_21: undefined,
  offset___10295: undefined,
  arg0: undefined,
} }





function game_BaseDialog_textAreaHeight__P4536(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_BaseDialog__C2554_VT)) failedCast(r0);
    s.lastBrkId = 2424;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2424]) return breakpoint(s, 1, 2424, r0);
  case 1:
    r0 = s.arg0.fields["image"];
    s.tmp_2 = r0;
    r0 = pxsim_ImageMethods.height(s.tmp_2);
    s.tmp_1 = r0;
    r0 = s.arg0.fields["innerTop"];
    s.tmp_5 = r0;
    s.tmp_7 = Math_min__P131_mk(s);
    r0 = s.arg0.fields["unit"];
    s.tmp_7.arg0 = r0;
    s.tmp_7.arg1 = 12;
    s.callLocIdx = 983; s.pc = 2; return s.tmp_7;
  case 2:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = (s.tmp_5 + s.tmp_6);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 << 1);
    s.tmp_3 = r0;
    r0 = (s.tmp_1 - s.tmp_3);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 - 1);
    return leave(s, r0)
  default: oops()
} } }
game_BaseDialog_textAreaHeight__P4536.info = {"start":5240,"length":143,"line":173,"column":8,"endLine":175,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"textAreaHeight","argumentNames":["this"]}

function game_BaseDialog_textAreaHeight__P4536_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_BaseDialog_textAreaHeight__P4536, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  arg0: undefined,
} }





function game_BaseDialog_textAreaWidth__P4535(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_BaseDialog__C2554_VT)) failedCast(r0);
    s.lastBrkId = 2423;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2423]) return breakpoint(s, 1, 2423, r0);
  case 1:
    r0 = s.arg0.fields["image"];
    s.tmp_2 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_2);
    s.tmp_1 = r0;
    r0 = s.arg0.fields["innerLeft"];
    s.tmp_5 = r0;
    s.tmp_7 = Math_min__P131_mk(s);
    r0 = s.arg0.fields["unit"];
    s.tmp_7.arg0 = r0;
    s.tmp_7.arg1 = 12;
    s.callLocIdx = 982; s.pc = 2; return s.tmp_7;
  case 2:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = (s.tmp_5 + s.tmp_6);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 << 1);
    s.tmp_3 = r0;
    r0 = (s.tmp_1 - s.tmp_3);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 - 2);
    return leave(s, r0)
  default: oops()
} } }
game_BaseDialog_textAreaWidth__P4535.info = {"start":5088,"length":142,"line":169,"column":8,"endLine":171,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"textAreaWidth","argumentNames":["this"]}

function game_BaseDialog_textAreaWidth__P4535_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_BaseDialog_textAreaWidth__P4535, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  arg0: undefined,
} }





function game_BaseDialog_cursorRowHeight__P4533(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_BaseDialog__C2554_VT)) failedCast(r0);
    s.lastBrkId = 2421;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2421]) return breakpoint(s, 1, 2421, r0);
  case 1:
    r0 = s.arg0.fields["cursor"];
    s.tmp_1 = r0;
    r0 = pxsim_ImageMethods.height(s.tmp_1);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 + 1);
    return leave(s, r0)
  default: oops()
} } }
game_BaseDialog_cursorRowHeight__P4533.info = {"start":4908,"length":82,"line":161,"column":8,"endLine":163,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"cursorRowHeight","argumentNames":["this"]}

function game_BaseDialog_cursorRowHeight__P4533_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_BaseDialog_cursorRowHeight__P4533, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function game_GameOverDialog_displayCursor__P2595(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_GameOverDialog__C2593_VT)) failedCast(r0);
    s.lastBrkId = 2511;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2511]) return breakpoint(s, 1, 2511, r0);
  case 1:
    r0 = (s.arg0).fields["cursorOn"] = (true);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_GameOverDialog_displayCursor__P2595.info = {"start":11444,"length":61,"line":348,"column":8,"endLine":350,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"displayCursor","argumentNames":["this"]}

function game_GameOverDialog_displayCursor__P2595_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_GameOverDialog_displayCursor__P2595, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function game_GameOverDialog_constructor__P2594(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_GameOverDialog__C2593_VT)) failedCast(r0);
    r0 = (s.arg0).fields["win"] = (s.arg1);
    r0 = (s.arg0).fields["score"] = (s.arg2);
    r0 = (s.arg0).fields["highScore"] = (s.arg3);
    s.lastBrkId = 2508;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2508]) return breakpoint(s, 1, 2508, r0);
  case 1:
    s.tmp_0 = game_BaseDialog_constructor__P2566_mk(s);
    s.tmp_0.arg0 = s.arg0;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = 46;
    s.tmp_1 = game_defaultSplashFrame__P4543_mk(s);
    s.callLocIdx = 1027; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    s.tmp_0.arg3 = r0;
    s.tmp_0.arg4 = undefined;
    s.tmp_0.arg5 = undefined;
    s.callLocIdx = 1028; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 2509;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2509]) return breakpoint(s, 4, 2509, r0);
  case 4:
    r0 = (s.arg0).fields["cursorOn"] = (false);
    s.lastBrkId = 2510;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2510]) return breakpoint(s, 5, 2510, r0);
  case 5:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.arg0.fields["score"];
    s.tmp_2 = r0;
    r0 = s.arg0.fields["highScore"];
    s.tmp_3 = r0;
    r0 = (s.tmp_2 > s.tmp_3);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["isNewHighScore"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_GameOverDialog_constructor__P2594.info = {"start":11128,"length":306,"line":338,"column":8,"endLine":346,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"inline","argumentNames":["this","win","score","highScore"]}

function game_GameOverDialog_constructor__P2594_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_GameOverDialog_constructor__P2594, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function game_defaultSplashFrame__P4543(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 2588;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2588]) return breakpoint(s, 3, 2588, r0);
  case 3:
    r0 = pxsim_ImageMethods.isMono(globals.screen___1827);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = pxsim.image.ofBuffer(_hex10969);
    { step = 2; continue; }
  case 1:
    r0 = pxsim.image.ofBuffer(_hex10971);
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = s.tmp_1;
    return leave(s, r0)
  default: oops()
} } }
game_defaultSplashFrame__P4543.info = {"start":17077,"length":220,"line":533,"column":4,"endLine":546,"endColumn":5,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"defaultSplashFrame","argumentNames":[]}

function game_defaultSplashFrame__P4543_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_defaultSplashFrame__P4543, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
} }

const _hex10969 = pxsim.BufferMethods.createBufferFromHex("8704030003000000010100000101000001010000")
const _hex10971 = pxsim.BufferMethods.createBufferFromHex("8704030003000000f1010000f1010000f1010000")




function game_BaseDialog_constructor__P2566(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.arg5 = (s.lambdaArgs[5]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_BaseDialog__C2554_VT)) failedCast(r0);
    s.lastBrkId = 2345;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2345]) return breakpoint(s, 13, 2345, r0);
  case 13:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim.image.create(s.arg1, s.arg2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["image"] = (s.tmp_1);
    s.lastBrkId = 2346;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2346]) return breakpoint(s, 14, 2346, r0);
  case 14:
    s.tmp_0 = r0 = s.arg3;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = globals.dialogFrame___4524;
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBool(s.tmp_1);
    if (!r0) { step = 3; continue; }
    r0 = s.tmp_1;
    { step = 4; continue; }
  case 3:
    s.tmp_3 = game_defaultFrame__P4542_mk(s);
    s.callLocIdx = 953; s.pc = 15; return s.tmp_3;
  case 15:
    r0 = s.retval;
    s.tmp_2 = r0;
    globals.dialogFrame___4524 = (r0);
    r0 = s.tmp_2;
  case 4:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    r0 = (s.arg0).fields["frame"] = (s.tmp_4);
    s.lastBrkId = 2347;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2347]) return breakpoint(s, 16, 2347, r0);
  case 16:
    s.tmp_0 = r0 = s.arg4;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 5; continue; }
    r0 = s.tmp_0;
    { step = 6; continue; }
  case 5:
    r0 = globals.font8___1770;
  case 6:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = (s.arg0).fields["font"] = (s.tmp_1);
    s.lastBrkId = 2348;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2348]) return breakpoint(s, 17, 2348, r0);
  case 17:
    s.tmp_0 = r0 = s.arg5;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 7; continue; }
    r0 = s.tmp_0;
    { step = 8; continue; }
  case 7:
    r0 = globals.dialogCursor___4525;
  case 8:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBool(s.tmp_1);
    if (!r0) { step = 9; continue; }
    r0 = s.tmp_1;
    { step = 10; continue; }
  case 9:
    s.tmp_3 = game_defaultCursorImage__P4544_mk(s);
    s.callLocIdx = 954; s.pc = 18; return s.tmp_3;
  case 18:
    r0 = s.retval;
    s.tmp_2 = r0;
    globals.dialogCursor___4525 = (r0);
    r0 = s.tmp_2;
  case 10:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    r0 = (s.arg0).fields["cursor"] = (s.tmp_4);
    s.lastBrkId = 2349;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2349]) return breakpoint(s, 19, 2349, r0);
  case 19:
    r0 = (globals.dialogTextColor___4526 == undefined);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 11; continue; }
    globals.dialogTextColor___4526 = (15);
    r0 = 15;
    { step = 12; continue; }
  case 11:
    r0 = globals.dialogTextColor___4526;
  case 12:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = (s.arg0).fields["textColor"] = (s.tmp_1);
    s.lastBrkId = 2350;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2350]) return breakpoint(s, 20, 2350, r0);
  case 20:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.arg0.fields["frame"];
    s.tmp_4 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_4);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 / 3);
    s.tmp_2 = r0;
    r0 = pxsim.Math_.floor(s.tmp_2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["unit"] = (s.tmp_1);
    s.lastBrkId = 2351;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2351]) return breakpoint(s, 21, 2351, r0);
  case 21:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.arg0.fields["unit"];
    s.tmp_3 = r0;
    r0 = (s.arg1 / s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim.Math_.floor(s.tmp_2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["columns"] = (s.tmp_1);
    s.lastBrkId = 2352;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2352]) return breakpoint(s, 22, 2352, r0);
  case 22:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.arg0.fields["unit"];
    s.tmp_3 = r0;
    r0 = (s.arg2 / s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim.Math_.floor(s.tmp_2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["rows"] = (s.tmp_1);
    s.lastBrkId = 2353;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2353]) return breakpoint(s, 23, 2353, r0);
  case 23:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_3 = r0 = s.arg1;
    r0 = s.arg0.fields["columns"];
    s.tmp_5 = r0;
    r0 = s.arg0.fields["unit"];
    s.tmp_6 = r0;
    r0 = (s.tmp_5 * s.tmp_6);
    s.tmp_4 = r0;
    r0 = (s.tmp_3 - s.tmp_4);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 >> 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["innerLeft"] = (s.tmp_1);
    s.lastBrkId = 2354;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2354]) return breakpoint(s, 24, 2354, r0);
  case 24:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_3 = r0 = s.arg2;
    r0 = s.arg0.fields["rows"];
    s.tmp_5 = r0;
    r0 = s.arg0.fields["unit"];
    s.tmp_6 = r0;
    r0 = (s.tmp_5 * s.tmp_6);
    s.tmp_4 = r0;
    r0 = (s.tmp_3 - s.tmp_4);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 >> 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["innerTop"] = (s.tmp_1);
    s.lastBrkId = 2355;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2355]) return breakpoint(s, 25, 2355, r0);
  case 25:
    r0 = (s.arg0).fields["cursorCount"] = (0);
    s.lastBrkId = 2356;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2356]) return breakpoint(s, 26, 2356, r0);
  case 26:
    s.tmp_0 = game_BaseDialog_drawBorder__P4529_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 955; s.pc = 27; return s.tmp_0;
  case 27:
    r0 = s.retval;
    s.lastBrkId = 2357;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2357]) return breakpoint(s, 28, 2357, r0);
  case 28:
    s.tmp_0 = game_BaseDialog_clearInterior__P4531_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 956; s.pc = 29; return s.tmp_0;
  case 29:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_BaseDialog_constructor__P2566.info = {"start":665,"length":895,"line":37,"column":8,"endLine":59,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"inline","argumentNames":["this","width","height","frame","font","cursor"]}

function game_BaseDialog_constructor__P2566_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_BaseDialog_constructor__P2566, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
  arg5: undefined,
} }





function game_defaultCursorImage__P4544(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 2589;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2589]) return breakpoint(s, 3, 2589, r0);
  case 3:
    r0 = pxsim_ImageMethods.isMono(globals.screen___1827);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = pxsim.image.ofBuffer(_hex11155);
    { step = 2; continue; }
  case 1:
    r0 = pxsim.image.ofBuffer(_hex11157);
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = s.tmp_1;
    return leave(s, r0)
  default: oops()
} } }
game_defaultCursorImage__P4544.info = {"start":17303,"length":690,"line":548,"column":4,"endLine":574,"endColumn":5,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"defaultCursorImage","argumentNames":[]}

function game_defaultCursorImage__P4544_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_defaultCursorImage__P4544, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
} }

const _hex11155 = pxsim.BufferMethods.createBufferFromHex("87040a000800000011111101010000010111010111100001011101010100000101000001100010000001010000100000")
const _hex11157 = pxsim.BufferMethods.createBufferFromHex("87040b000b00000000606686080000006076776686000000607777676608000076171111670800007671177766080000767117776608000076711777660800007617111167080000607777676608000060767766860000000060668608000000")




function game_defaultFrame__P4542(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 2587;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2587]) return breakpoint(s, 3, 2587, r0);
  case 3:
    r0 = pxsim_ImageMethods.isMono(globals.screen___1827);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = pxsim.image.ofBuffer(_hex11161);
    { step = 2; continue; }
  case 1:
    r0 = pxsim.image.ofBuffer(_hex11163);
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = s.tmp_1;
    return leave(s, r0)
  default: oops()
} } }
game_defaultFrame__P4542.info = {"start":16515,"length":556,"line":509,"column":4,"endLine":531,"endColumn":5,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"defaultFrame","argumentNames":[]}

function game_defaultFrame__P4542_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_defaultFrame__P4542, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
} }

const _hex11161 = pxsim.BufferMethods.createBufferFromHex("8704030003000000110100000101000011010000")
const _hex11163 = pxsim.BufferMethods.createBufferFromHex("87040c000c0000000000000000000000b0bbbbbbbb0b0000b0bbbbbbbbcb0000b0db1111bdcb0000b01b1111b1cb0000b01b1111b1cb0000b01b1111b1cb0000b01b1111b1cb0000b0db1111bdcb0000b0bbbbbbbbcb0000b0bbbbbbbbcb000000cccccccccc0000")




function game_BaseDialog_drawBorder__P4529(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.y___11086 = undefined;
    s.c___11102 = undefined;
    s.r___11136 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_BaseDialog__C2554_VT)) failedCast(r0);
    s.lastBrkId = 2366;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2366]) return breakpoint(s, 12, 2366, r0);
  case 12:
    r0 = s.arg0.fields["unit"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 == 1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2367;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2367]) return breakpoint(s, 13, 2367, r0);
  case 13:
    s.tmp_2 = game_BaseDialog_fastFill__P4530_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.tmp_2.arg1 = 0;
    s.tmp_2.arg2 = 0;
    s.tmp_2.arg3 = 0;
    s.tmp_2.arg4 = 1;
    s.tmp_2.arg5 = 1;
    s.callLocIdx = 962; s.pc = 14; return s.tmp_2;
  case 14:
    r0 = s.retval;
    s.lastBrkId = 2368;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2368]) return breakpoint(s, 15, 2368, r0);
  case 15:
    s.tmp_0 = game_BaseDialog_fastFill__P4530_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 1;
    s.tmp_0.arg2 = 1;
    s.tmp_0.arg3 = 0;
    r0 = s.arg0.fields["columns"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - 2);
    s.tmp_0.arg4 = r0;
    s.tmp_0.arg5 = 1;
    s.callLocIdx = 963; s.pc = 16; return s.tmp_0;
  case 16:
    r0 = s.retval;
    s.lastBrkId = 2369;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2369]) return breakpoint(s, 17, 2369, r0);
  case 17:
    s.tmp_0 = game_BaseDialog_fastFill__P4530_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 2;
    r0 = s.arg0.fields["columns"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - 1);
    s.tmp_0.arg2 = r0;
    s.tmp_0.arg3 = 0;
    s.tmp_0.arg4 = 1;
    s.tmp_0.arg5 = 1;
    s.callLocIdx = 964; s.pc = 18; return s.tmp_0;
  case 18:
    r0 = s.retval;
    s.lastBrkId = 2370;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2370]) return breakpoint(s, 19, 2370, r0);
  case 19:
    s.tmp_0 = game_BaseDialog_fastFill__P4530_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 3;
    s.tmp_0.arg2 = 0;
    s.tmp_0.arg3 = 1;
    s.tmp_0.arg4 = 1;
    r0 = s.arg0.fields["rows"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - 2);
    s.tmp_0.arg5 = r0;
    s.callLocIdx = 965; s.pc = 20; return s.tmp_0;
  case 20:
    r0 = s.retval;
    s.lastBrkId = 2371;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2371]) return breakpoint(s, 21, 2371, r0);
  case 21:
    s.tmp_0 = game_BaseDialog_fastFill__P4530_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 5;
    r0 = s.arg0.fields["columns"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - 1);
    s.tmp_0.arg2 = r0;
    s.tmp_0.arg3 = 1;
    s.tmp_0.arg4 = 1;
    r0 = s.arg0.fields["rows"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - 2);
    s.tmp_0.arg5 = r0;
    s.callLocIdx = 966; s.pc = 22; return s.tmp_0;
  case 22:
    r0 = s.retval;
    s.lastBrkId = 2372;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2372]) return breakpoint(s, 23, 2372, r0);
  case 23:
    r0 = s.arg0.fields["rows"];
    s.tmp_0 = r0;
    r0 = (s.tmp_0 - 1);
    s.y___11086 = (r0);
    s.lastBrkId = 2373;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2373]) return breakpoint(s, 24, 2373, r0);
  case 24:
    s.tmp_0 = game_BaseDialog_fastFill__P4530_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 6;
    s.tmp_0.arg2 = 0;
    s.tmp_0.arg3 = s.y___11086;
    s.tmp_0.arg4 = 1;
    s.tmp_0.arg5 = 1;
    s.callLocIdx = 967; s.pc = 25; return s.tmp_0;
  case 25:
    r0 = s.retval;
    s.lastBrkId = 2374;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2374]) return breakpoint(s, 26, 2374, r0);
  case 26:
    s.tmp_0 = game_BaseDialog_fastFill__P4530_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 7;
    s.tmp_0.arg2 = 1;
    s.tmp_0.arg3 = s.y___11086;
    r0 = s.arg0.fields["columns"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - 2);
    s.tmp_0.arg4 = r0;
    s.tmp_0.arg5 = 1;
    s.callLocIdx = 968; s.pc = 27; return s.tmp_0;
  case 27:
    r0 = s.retval;
    s.lastBrkId = 2375;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2375]) return breakpoint(s, 28, 2375, r0);
  case 28:
    s.tmp_0 = game_BaseDialog_fastFill__P4530_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 8;
    r0 = s.arg0.fields["columns"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - 1);
    s.tmp_0.arg2 = r0;
    s.tmp_0.arg3 = s.y___11086;
    s.tmp_0.arg4 = 1;
    s.tmp_0.arg5 = 1;
    s.callLocIdx = 969; s.pc = 29; return s.tmp_0;
  case 29:
    r0 = s.retval;
    s.lastBrkId = 2376;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2376]) return breakpoint(s, 30, 2376, r0);
  case 30:
    { step = 11; continue; }
  case 1:
  case 2:
    s.lastBrkId = 2377;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2377]) return breakpoint(s, 31, 2377, r0);
  case 31:
    s.c___11102 = (0);
    s.lastBrkId = 2378;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2378]) return breakpoint(s, 32, 2378, r0);
  case 32:
  case 3:
    s.lastBrkId = 2379;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2379]) return breakpoint(s, 33, 2379, r0);
  case 33:
    r0 = s.arg0.fields["columns"];
    s.tmp_1 = r0;
    r0 = (s.c___11102 < s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 8; continue; }
    s.lastBrkId = 2380;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2380]) return breakpoint(s, 34, 2380, r0);
  case 34:
    r0 = (s.c___11102 == 0);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 2381;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2381]) return breakpoint(s, 35, 2381, r0);
  case 35:
    s.tmp_3 = game_BaseDialog_drawPartial__P4532_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.tmp_3.arg1 = 0;
    s.tmp_3.arg2 = 0;
    s.tmp_3.arg3 = 0;
    s.callLocIdx = 970; s.pc = 36; return s.tmp_3;
  case 36:
    r0 = s.retval;
    s.lastBrkId = 2382;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2382]) return breakpoint(s, 37, 2382, r0);
  case 37:
    s.tmp_0 = game_BaseDialog_drawPartial__P4532_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 6;
    s.tmp_0.arg2 = 0;
    r0 = s.arg0.fields["rows"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - 1);
    s.tmp_0.arg3 = r0;
    s.callLocIdx = 971; s.pc = 38; return s.tmp_0;
  case 38:
    r0 = s.retval;
    { step = 7; continue; }
  case 4:
    s.lastBrkId = 2383;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2383]) return breakpoint(s, 39, 2383, r0);
  case 39:
    s.tmp_1 = r0 = s.c___11102;
    r0 = s.arg0.fields["columns"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 - 1);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 === s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 2384;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2384]) return breakpoint(s, 40, 2384, r0);
  case 40:
    s.tmp_4 = game_BaseDialog_drawPartial__P4532_mk(s);
    s.tmp_4.arg0 = s.arg0;
    s.tmp_4.arg1 = 2;
    s.tmp_4.arg2 = s.c___11102;
    s.tmp_4.arg3 = 0;
    s.callLocIdx = 972; s.pc = 41; return s.tmp_4;
  case 41:
    r0 = s.retval;
    s.lastBrkId = 2385;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2385]) return breakpoint(s, 42, 2385, r0);
  case 42:
    s.tmp_0 = game_BaseDialog_drawPartial__P4532_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 8;
    s.tmp_0.arg2 = s.c___11102;
    r0 = s.arg0.fields["rows"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - 1);
    s.tmp_0.arg3 = r0;
    s.callLocIdx = 973; s.pc = 43; return s.tmp_0;
  case 43:
    r0 = s.retval;
    { step = 6; continue; }
  case 5:
    s.lastBrkId = 2386;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2386]) return breakpoint(s, 44, 2386, r0);
  case 44:
    s.tmp_0 = game_BaseDialog_drawPartial__P4532_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 1;
    s.tmp_0.arg2 = s.c___11102;
    s.tmp_0.arg3 = 0;
    s.callLocIdx = 974; s.pc = 45; return s.tmp_0;
  case 45:
    r0 = s.retval;
    s.lastBrkId = 2387;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2387]) return breakpoint(s, 46, 2387, r0);
  case 46:
    s.tmp_0 = game_BaseDialog_drawPartial__P4532_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 7;
    s.tmp_0.arg2 = s.c___11102;
    r0 = s.arg0.fields["rows"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - 1);
    s.tmp_0.arg3 = r0;
    s.callLocIdx = 975; s.pc = 47; return s.tmp_0;
  case 47:
    r0 = s.retval;
  case 6:
  case 7:
    s.lastBrkId = 2388;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2388]) return breakpoint(s, 48, 2388, r0);
  case 48:
    r0 = (s.c___11102 + 1);
    s.c___11102 = (r0);
    { step = 3; continue; }
  case 8:
    s.lastBrkId = 2389;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2389]) return breakpoint(s, 49, 2389, r0);
  case 49:
    s.r___11136 = (1);
    s.lastBrkId = 2390;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2390]) return breakpoint(s, 50, 2390, r0);
  case 50:
  case 9:
    s.lastBrkId = 2391;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2391]) return breakpoint(s, 51, 2391, r0);
  case 51:
    s.tmp_1 = r0 = s.r___11136;
    r0 = s.arg0.fields["rows"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 - 1);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 10; continue; }
    s.lastBrkId = 2392;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2392]) return breakpoint(s, 52, 2392, r0);
  case 52:
    s.tmp_4 = game_BaseDialog_drawPartial__P4532_mk(s);
    s.tmp_4.arg0 = s.arg0;
    s.tmp_4.arg1 = 3;
    s.tmp_4.arg2 = 0;
    s.tmp_4.arg3 = s.r___11136;
    s.callLocIdx = 976; s.pc = 53; return s.tmp_4;
  case 53:
    r0 = s.retval;
    s.lastBrkId = 2393;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2393]) return breakpoint(s, 54, 2393, r0);
  case 54:
    s.tmp_0 = game_BaseDialog_drawPartial__P4532_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 5;
    r0 = s.arg0.fields["columns"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - 1);
    s.tmp_0.arg2 = r0;
    s.tmp_0.arg3 = s.r___11136;
    s.callLocIdx = 977; s.pc = 55; return s.tmp_0;
  case 55:
    r0 = s.retval;
    s.lastBrkId = 2394;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2394]) return breakpoint(s, 56, 2394, r0);
  case 56:
    r0 = (s.r___11136 + 1);
    s.r___11136 = (r0);
    { step = 9; continue; }
  case 10:
  case 11:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_BaseDialog_drawBorder__P4529.info = {"start":2352,"length":1321,"line":90,"column":8,"endLine":126,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"drawBorder","argumentNames":["this"]}

function game_BaseDialog_drawBorder__P4529_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_BaseDialog_drawBorder__P4529, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  y___11086: undefined,
  c___11102: undefined,
  r___11136: undefined,
  arg0: undefined,
} }





function scene_setBackgroundImage__P2536(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.scene___14252 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 2341;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2341]) return breakpoint(s, 1, 2341, r0);
  case 1:
    s.tmp_0 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 949; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.scene___14252 = (r0);
    s.lastBrkId = 2342;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2342]) return breakpoint(s, 3, 2342, r0);
  case 3:
    s.tmp_0 = scene_Background_image__P2355_mk(s);
    r0 = s.scene___14252.fields["background"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = s.arg0;
    s.callLocIdx = 950; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_setBackgroundImage__P2536.info = {"start":1938,"length":135,"line":78,"column":4,"endLine":81,"endColumn":5,"fileName":"pxt_modules/game/scenes.ts","functionName":"setBackgroundImage","argumentNames":["img"]}

function scene_setBackgroundImage__P2536_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_setBackgroundImage__P2536, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  scene___14252: undefined,
  arg0: undefined,
} }





function scene_Background_image__P2355(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_Background__C2348_VT)) failedCast(r0);
    s.lastBrkId = 2022;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2022]) return breakpoint(s, 1, 2022, r0);
  case 1:
    r0 = (s.arg0).fields["_image"] = (s.arg1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_Background_image__P2355.info = {"start":1003,"length":68,"line":40,"column":8,"endLine":42,"endColumn":9,"fileName":"pxt_modules/game/background.ts","functionName":"image","argumentNames":["this","image"]}

function scene_Background_image__P2355_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Background_image__P2355, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
} }





function scene_Background_image__P2354(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_Background__C2348_VT)) failedCast(r0);
    s.lastBrkId = 2019;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2019]) return breakpoint(s, 3, 2019, r0);
  case 3:
    r0 = s.arg0.fields["_image"];
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2020;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2020]) return breakpoint(s, 4, 2020, r0);
  case 4:
    s.tmp_3 = r0 = s.arg0;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_5 = r0;
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_6 = r0;
    r0 = pxsim.image.create(s.tmp_5, s.tmp_6);
    s.tmp_4 = r0;
    r0 = (s.tmp_3).fields["_image"] = (s.tmp_4);
  case 1:
  case 2:
    s.lastBrkId = 2021;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2021]) return breakpoint(s, 5, 2021, r0);
  case 5:
    r0 = s.arg0.fields["_image"];
    return leaveAccessor(s, r0)
  default: oops()
} } }
scene_Background_image__P2354.info = {"start":811,"length":174,"line":33,"column":8,"endLine":38,"endColumn":9,"fileName":"pxt_modules/game/background.ts","functionName":"image","argumentNames":["this"]}
scene_Background_image__P2354.isGetter = true;

function scene_Background_image__P2354_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Background_image__P2354, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  arg0: undefined,
} }





function scene_Scene_destroy__P2522(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_Scene__C2496_VT)) failedCast(r0);
    s.lastBrkId = 2307;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2307]) return breakpoint(s, 1, 2307, r0);
  case 1:
    r0 = (s.arg0).fields["eventContext"] = (undefined);
    s.lastBrkId = 2308;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2308]) return breakpoint(s, 2, 2308, r0);
  case 2:
    r0 = (s.arg0).fields["background"] = (undefined);
    s.lastBrkId = 2309;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2309]) return breakpoint(s, 3, 2309, r0);
  case 3:
    r0 = (s.arg0).fields["tileMap"] = (undefined);
    s.lastBrkId = 2310;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2310]) return breakpoint(s, 4, 2310, r0);
  case 4:
    r0 = (s.arg0).fields["allSprites"] = (undefined);
    s.lastBrkId = 2311;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2311]) return breakpoint(s, 5, 2311, r0);
  case 5:
    r0 = (s.arg0).fields["spriteNextId"] = (undefined);
    s.lastBrkId = 2312;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2312]) return breakpoint(s, 6, 2312, r0);
  case 6:
    r0 = (s.arg0).fields["spritesByKind"] = (undefined);
    s.lastBrkId = 2313;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2313]) return breakpoint(s, 7, 2313, r0);
  case 7:
    r0 = (s.arg0).fields["physicsEngine"] = (undefined);
    s.lastBrkId = 2314;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2314]) return breakpoint(s, 8, 2314, r0);
  case 8:
    r0 = (s.arg0).fields["camera"] = (undefined);
    s.lastBrkId = 2315;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2315]) return breakpoint(s, 9, 2315, r0);
  case 9:
    r0 = (s.arg0).fields["flags"] = (undefined);
    s.lastBrkId = 2316;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2316]) return breakpoint(s, 10, 2316, r0);
  case 10:
    r0 = (s.arg0).fields["destroyedHandlers"] = (undefined);
    s.lastBrkId = 2317;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2317]) return breakpoint(s, 11, 2317, r0);
  case 11:
    r0 = (s.arg0).fields["createdHandlers"] = (undefined);
    s.lastBrkId = 2318;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2318]) return breakpoint(s, 12, 2318, r0);
  case 12:
    r0 = (s.arg0).fields["overlapHandlers"] = (undefined);
    s.lastBrkId = 2319;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2319]) return breakpoint(s, 13, 2319, r0);
  case 13:
    r0 = (s.arg0).fields["tileOverlapHandlers"] = (undefined);
    s.lastBrkId = 2320;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2320]) return breakpoint(s, 14, 2320, r0);
  case 14:
    r0 = (s.arg0).fields["collisionHandlers"] = (undefined);
    s.lastBrkId = 2321;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2321]) return breakpoint(s, 15, 2321, r0);
  case 15:
    r0 = (s.arg0).fields["wallCollisionHandlers"] = (undefined);
    s.lastBrkId = 2322;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2322]) return breakpoint(s, 16, 2322, r0);
  case 16:
    r0 = (s.arg0).fields["gameForeverHandlers"] = (undefined);
    s.lastBrkId = 2323;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2323]) return breakpoint(s, 17, 2323, r0);
  case 17:
    r0 = (s.arg0).fields["_data"] = (undefined);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_Scene_destroy__P2522.info = {"start":6997,"length":764,"line":198,"column":8,"endLine":216,"endColumn":9,"fileName":"pxt_modules/game/scene.ts","functionName":"destroy","argumentNames":["this"]}

function scene_Scene_destroy__P2522_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Scene_destroy__P2522, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function scene_createRenderable__P2460(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.renderable___10935 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 2252;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2252]) return breakpoint(s, 3, 2252, r0);
  case 3:
    r0 = pxsim_pxtcore_mkClassInstance(scene_Renderable__C2455_VT);
    s.tmp_0 = r0;
    s.tmp_1 = r0 = s.arg2;
    r0 = pxsim_numops_toBool(s.tmp_1);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_1;
    { step = 2; continue; }
  case 1:
    r0 = renderable_inline__P10941;
  case 2:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    s.tmp_3 = scene_Renderable_constructor__P2456_mk(s);
    s.tmp_3.arg0 = s.tmp_0;
    s.tmp_3.arg1 = s.arg1;
    s.tmp_3.arg2 = s.tmp_2;
    s.tmp_3.arg3 = s.arg0;
    s.callLocIdx = 916; s.pc = 4; return s.tmp_3;
  case 4:
    r0 = s.retval;
    s.renderable___10935 = (s.tmp_0);
    s.lastBrkId = 2253;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2253]) return breakpoint(s, 5, 2253, r0);
  case 5:
    r0 = s.renderable___10935;
    return leave(s, r0)
  default: oops()
} } }
scene_createRenderable__P2460.info = {"start":608,"length":339,"line":24,"column":4,"endLine":36,"endColumn":5,"fileName":"pxt_modules/game/renderable.ts","functionName":"createRenderable","argumentNames":["z","handler","shouldBeVisible"]}

function scene_createRenderable__P2460_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_createRenderable__P2460, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  renderable___10935: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function renderable_inline__P10941(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    r0 = true;
    return leave(s, r0)
  default: oops()
} } }
renderable_inline__P10941.info = {"start":875,"length":10,"line":31,"column":32,"endLine":31,"endColumn":42,"fileName":"pxt_modules/game/renderable.ts","functionName":"inline","argumentNames":[]}

function renderable_inline__P10941_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: renderable_inline__P10941, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
} }





function scene_Renderable_constructor__P2456(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_Renderable__C2455_VT)) failedCast(r0);
    r0 = (s.arg0).fields["handler"] = (s.arg1);
    r0 = (s.arg0).fields["shouldBeVisible"] = (s.arg2);
    s.lastBrkId = 2249;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2249]) return breakpoint(s, 1, 2249, r0);
  case 1:
    s.tmp_0 = sprites_BaseSprite_constructor__P1888_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg3;
    s.callLocIdx = 913; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_Renderable_constructor__P2456.info = {"start":83,"length":212,"line":2,"column":8,"endLine":8,"endColumn":9,"fileName":"pxt_modules/game/renderable.ts","functionName":"inline","argumentNames":["this","handler","shouldBeVisible","z"]}

function scene_Renderable_constructor__P2456_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Renderable_constructor__P2456, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function info_PlayerInfo_constructor__P2321(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, info_PlayerInfo__C2309_VT)) failedCast(r0);
    s.lastBrkId = 1874;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1874]) return breakpoint(s, 17, 1874, r0);
  case 17:
    r0 = (s.arg0).fields["_player"] = (s.arg1);
    s.lastBrkId = 1875;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1875]) return breakpoint(s, 18, 1875, r0);
  case 18:
    r0 = (s.arg0).fields["border"] = (1);
    s.lastBrkId = 1876;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1876]) return breakpoint(s, 19, 1876, r0);
  case 19:
    r0 = (s.arg0).fields["fc"] = (1);
    s.lastBrkId = 1877;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1877]) return breakpoint(s, 20, 1877, r0);
  case 20:
    r0 = (s.arg0).fields["visibility"] = (0);
    s.lastBrkId = 1878;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1878]) return breakpoint(s, 21, 1878, r0);
  case 21:
    r0 = (s.arg0).fields["showScore"] = (undefined);
    s.lastBrkId = 1879;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1879]) return breakpoint(s, 22, 1879, r0);
  case 22:
    r0 = (s.arg0).fields["showLife"] = (undefined);
    s.lastBrkId = 1880;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1880]) return breakpoint(s, 23, 1880, r0);
  case 23:
    r0 = (s.arg0).fields["showPlayer"] = (undefined);
    s.lastBrkId = 1881;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1881]) return breakpoint(s, 24, 1881, r0);
  case 24:
    r0 = (s.arg0).fields["left"] = (undefined);
    s.lastBrkId = 1882;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1882]) return breakpoint(s, 25, 1882, r0);
  case 25:
    r0 = (s.arg0).fields["up"] = (undefined);
    s.lastBrkId = 1883;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1883]) return breakpoint(s, 26, 1883, r0);
  case 26:
    r0 = s.arg0.fields["_player"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 === 1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1884;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1884]) return breakpoint(s, 27, 1884, r0);
  case 27:
    r0 = pxsim_ImageMethods.isMono(globals.screen___1827);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 1; continue; }
    r0 = 0;
    { step = 2; continue; }
  case 1:
    r0 = 2;
  case 2:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = (s.arg0).fields["bg"] = (s.tmp_3);
    s.lastBrkId = 1885;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1885]) return breakpoint(s, 28, 1885, r0);
  case 28:
    r0 = (s.arg0).fields["x"] = (0);
    s.lastBrkId = 1886;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1886]) return breakpoint(s, 29, 1886, r0);
  case 29:
    r0 = (s.arg0).fields["y"] = (0);
    { step = 14; continue; }
  case 3:
    s.lastBrkId = 1887;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1887]) return breakpoint(s, 30, 1887, r0);
  case 30:
    r0 = (s.arg1 === 2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 6; continue; }
    s.lastBrkId = 1888;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1888]) return breakpoint(s, 31, 1888, r0);
  case 31:
    r0 = pxsim_ImageMethods.isMono(globals.screen___1827);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 4; continue; }
    r0 = 0;
    { step = 5; continue; }
  case 4:
    r0 = 8;
  case 5:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = (s.arg0).fields["bg"] = (s.tmp_2);
    s.lastBrkId = 1889;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1889]) return breakpoint(s, 32, 1889, r0);
  case 32:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["x"] = (s.tmp_1);
    s.lastBrkId = 1890;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1890]) return breakpoint(s, 33, 1890, r0);
  case 33:
    r0 = (s.arg0).fields["y"] = (0);
    s.lastBrkId = 1891;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1891]) return breakpoint(s, 34, 1891, r0);
  case 34:
    r0 = (s.arg0).fields["left"] = (true);
    { step = 13; continue; }
  case 6:
    s.lastBrkId = 1892;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1892]) return breakpoint(s, 35, 1892, r0);
  case 35:
    r0 = (s.arg1 === 3);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 1893;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1893]) return breakpoint(s, 36, 1893, r0);
  case 36:
    r0 = pxsim_ImageMethods.isMono(globals.screen___1827);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 7; continue; }
    r0 = 0;
    { step = 8; continue; }
  case 7:
    r0 = 4;
  case 8:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = (s.arg0).fields["bg"] = (s.tmp_2);
    s.lastBrkId = 1894;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1894]) return breakpoint(s, 37, 1894, r0);
  case 37:
    r0 = (s.arg0).fields["x"] = (0);
    s.lastBrkId = 1895;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1895]) return breakpoint(s, 38, 1895, r0);
  case 38:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["y"] = (s.tmp_1);
    s.lastBrkId = 1896;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1896]) return breakpoint(s, 39, 1896, r0);
  case 39:
    r0 = (s.arg0).fields["up"] = (true);
    { step = 12; continue; }
  case 9:
    s.lastBrkId = 1897;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1897]) return breakpoint(s, 40, 1897, r0);
  case 40:
    r0 = pxsim_ImageMethods.isMono(globals.screen___1827);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 10; continue; }
    r0 = 0;
    { step = 11; continue; }
  case 10:
    r0 = 7;
  case 11:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = (s.arg0).fields["bg"] = (s.tmp_1);
    s.lastBrkId = 1898;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1898]) return breakpoint(s, 41, 1898, r0);
  case 41:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["x"] = (s.tmp_1);
    s.lastBrkId = 1899;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1899]) return breakpoint(s, 42, 1899, r0);
  case 42:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["y"] = (s.tmp_1);
    s.lastBrkId = 1900;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1900]) return breakpoint(s, 43, 1900, r0);
  case 43:
    r0 = (s.arg0).fields["left"] = (true);
    s.lastBrkId = 1901;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1901]) return breakpoint(s, 44, 1901, r0);
  case 44:
    r0 = (s.arg0).fields["up"] = (true);
  case 12:
  case 13:
  case 14:
    s.lastBrkId = 1902;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1902]) return breakpoint(s, 45, 1902, r0);
  case 45:
    r0 = pxsim_numops_toBoolDecr(globals.players___4438);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 15; continue; }
    s.lastBrkId = 1903;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1903]) return breakpoint(s, 46, 1903, r0);
  case 46:
    r0 = pxsim_Array__mk();
    globals.players___4438 = (r0);
  case 15:
  case 16:
    s.lastBrkId = 1904;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1904]) return breakpoint(s, 47, 1904, r0);
  case 47:
    s.tmp_0 = r0 = globals.players___4438;
    r0 = s.arg0.fields["_player"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - 1);
    s.tmp_1 = r0;
    r0 = pxsim_Array_.setAt(s.tmp_0, s.tmp_1, s.arg0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
info_PlayerInfo_constructor__P2321.info = {"start":15637,"length":1370,"line":519,"column":8,"endLine":556,"endColumn":9,"fileName":"pxt_modules/game/info.ts","functionName":"inline","argumentNames":["this","player"]}

function info_PlayerInfo_constructor__P2321_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_PlayerInfo_constructor__P2321, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function info_PlayerInfo_getState__P2322(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, info_PlayerInfo__C2309_VT)) failedCast(r0);
    s.lastBrkId = 1910;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1910]) return breakpoint(s, 1, 1910, r0);
  case 1:
    s.tmp_0 = info_PlayerInfo_init__P4489_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 777; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 1911;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1911]) return breakpoint(s, 3, 1911, r0);
  case 3:
    r0 = globals.infoState___4437.fields["playerStates"];
    s.tmp_0 = r0;
    r0 = s.arg0.fields["_player"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - 1);
    s.tmp_1 = r0;
    r0 = pxsim_Array__getAt(s.tmp_0, s.tmp_1);
    return leave(s, r0)
  default: oops()
} } }
info_PlayerInfo_getState__P2322.info = {"start":17279,"length":121,"line":566,"column":8,"endLine":569,"endColumn":9,"fileName":"pxt_modules/game/info.ts","functionName":"getState","argumentNames":["this"]}

function info_PlayerInfo_getState__P2322_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_PlayerInfo_getState__P2322, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function info_PlayerInfo_init__P4489(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, info_PlayerInfo__C2309_VT)) failedCast(r0);
    s.lastBrkId = 1905;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1905]) return breakpoint(s, 5, 1905, r0);
  case 5:
    s.tmp_0 = info_initHUD__P4483_mk(s);
    s.callLocIdx = 774; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    s.lastBrkId = 1906;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1906]) return breakpoint(s, 7, 1906, r0);
  case 7:
    r0 = s.arg0.fields["_player"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > 1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1907;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1907]) return breakpoint(s, 8, 1907, r0);
  case 8:
    s.tmp_2 = info_initMultiHUD__P4484_mk(s);
    s.callLocIdx = 775; s.pc = 9; return s.tmp_2;
  case 9:
    r0 = s.retval;
  case 1:
  case 2:
    s.lastBrkId = 1908;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1908]) return breakpoint(s, 10, 1908, r0);
  case 10:
    r0 = globals.infoState___4437.fields["playerStates"];
    s.tmp_3 = r0;
    r0 = s.arg0.fields["_player"];
    s.tmp_5 = r0;
    r0 = (s.tmp_5 - 1);
    s.tmp_4 = r0;
    r0 = pxsim_Array__getAt(s.tmp_3, s.tmp_4);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1909;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1909]) return breakpoint(s, 11, 1909, r0);
  case 11:
    r0 = pxsim_pxtcore_mkClassInstance(info_PlayerState__C2280_VT);
    s.tmp_6 = r0;
    s.tmp_7 = info_PlayerState_constructor__P2284_mk(s);
    s.tmp_7.arg0 = s.tmp_6;
    s.callLocIdx = 776; s.pc = 12; return s.tmp_7;
  case 12:
    r0 = s.retval;
    r0 = globals.infoState___4437.fields["playerStates"];
    s.tmp_8 = r0;
    r0 = s.arg0.fields["_player"];
    s.tmp_10 = r0;
    r0 = (s.tmp_10 - 1);
    s.tmp_9 = r0;
    r0 = pxsim_Array_.setAt(s.tmp_8, s.tmp_9, s.tmp_6);
  case 3:
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
info_PlayerInfo_init__P4489.info = {"start":17017,"length":252,"line":558,"column":8,"endLine":564,"endColumn":9,"fileName":"pxt_modules/game/info.ts","functionName":"init","argumentNames":["this"]}

function info_PlayerInfo_init__P4489_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_PlayerInfo_init__P4489, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  arg0: undefined,
} }





function info_initMultiHUD__P4484(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 1835;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1835]) return breakpoint(s, 6, 1835, r0);
  case 6:
    r0 = globals.infoState___4437.fields["visibilityFlag"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 & 16);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1836;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1836]) return breakpoint(s, 7, 1836, r0);
  case 7:
    { step = 5; continue; }
  case 1:
  case 2:
    s.lastBrkId = 1837;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1837]) return breakpoint(s, 8, 1837, r0);
  case 8:
    s.tmp_2 = r0 = globals.infoState___4437;
    r0 = s.tmp_2.fields["visibilityFlag"];
    s.tmp_4 = r0;
    r0 = (s.tmp_4 | 16);
    s.tmp_3 = r0;
    r0 = (s.tmp_2).fields["visibilityFlag"] = (s.tmp_3);
    s.lastBrkId = 1838;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1838]) return breakpoint(s, 9, 1838, r0);
  case 9:
    r0 = globals.infoState___4437.fields["visibilityFlag"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 & 32);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1839;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1839]) return breakpoint(s, 10, 1839, r0);
  case 10:
    s.tmp_4 = r0 = globals.infoState___4437;
    s.tmp_6 = info_defaultMultiplayerHeartImage__P4486_mk(s);
    s.callLocIdx = 752; s.pc = 11; return s.tmp_6;
  case 11:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = (s.tmp_4).fields["heartImage"] = (s.tmp_5);
  case 3:
  case 4:
    s.lastBrkId = 1840;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1840]) return breakpoint(s, 12, 1840, r0);
  case 12:
    s.tmp_0 = r0 = globals.infoState___4437;
    r0 = pxsim.image.ofBuffer(_hex11585);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["multiplierImage"] = (s.tmp_1);
  case 5:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
info_initMultiHUD__P4484.info = {"start":4757,"length":393,"line":151,"column":4,"endLine":162,"endColumn":5,"fileName":"pxt_modules/game/info.ts","functionName":"initMultiHUD","argumentNames":[]}

function info_initMultiHUD__P4484_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_initMultiHUD__P4484, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
} }

const _hex11585 = pxsim.BufferMethods.createBufferFromHex("8704030003000000010100001000000001010000")




function info_defaultMultiplayerHeartImage__P4486(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 1842;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1842]) return breakpoint(s, 3, 1842, r0);
  case 3:
    r0 = pxsim_ImageMethods.isMono(globals.screen___1827);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = pxsim.image.ofBuffer(_hex11589);
    { step = 2; continue; }
  case 1:
    r0 = pxsim.image.ofBuffer(_hex11591);
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = s.tmp_1;
    return leave(s, r0)
  default: oops()
} } }
info_defaultMultiplayerHeartImage__P4486.info = {"start":5754,"length":503,"line":187,"column":4,"endLine":204,"endColumn":5,"fileName":"pxt_modules/game/info.ts","functionName":"defaultMultiplayerHeartImage","argumentNames":[]}

function info_defaultMultiplayerHeartImage__P4486_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_defaultMultiplayerHeartImage__P4486, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
} }

const _hex11589 = pxsim.BufferMethods.createBufferFromHex("870407000500000000000000100100000110000010000100011000001001000000000000")
const _hex11591 = pxsim.BufferMethods.createBufferFromHex("870407000500000000000000100100002112000010240100411200001001000000000000")




function info_initHUD__P4483(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 1805;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1805]) return breakpoint(s, 4, 1805, r0);
  case 4:
    r0 = pxsim_numops_toBoolDecr(globals.infoState___4437);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1806;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1806]) return breakpoint(s, 5, 1806, r0);
  case 5:
    { step = 3; continue; }
  case 1:
  case 2:
    s.lastBrkId = 1807;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1807]) return breakpoint(s, 6, 1807, r0);
  case 6:
    r0 = pxsim_pxtcore_mkClassInstance(info_InfoState__C4434_VT);
    s.tmp_0 = r0;
    s.tmp_1 = info_InfoState_constructor__P4435_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.callLocIdx = 735; s.pc = 7; return s.tmp_1;
  case 7:
    r0 = s.retval;
    globals.infoState___4437 = (s.tmp_0);
    s.lastBrkId = 1808;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1808]) return breakpoint(s, 8, 1808, r0);
  case 8:
    s.tmp_0 = scene_createRenderable__P2460_mk(s);
    s.tmp_0.arg0 = 100;
    s.tmp_0.arg1 = info_initHUD_inline__P11599;
    s.tmp_0.arg2 = undefined;
    s.callLocIdx = 751; s.pc = 9; return s.tmp_0;
  case 9:
    r0 = s.retval;
  case 3:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
info_initHUD__P4483.info = {"start":2671,"length":2080,"line":99,"column":4,"endLine":149,"endColumn":5,"fileName":"pxt_modules/game/info.ts","functionName":"initHUD","argumentNames":[]}

function info_initHUD__P4483_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_initHUD__P4483, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
} }





function info_initHUD_inline__P11599(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.ps___11608 = undefined;
    s.p___11629 = undefined;
    s.scene___11663 = undefined;
    s.elapsed___11666 = undefined;
    s.t___11674 = undefined;
    s.lastBrkId = 1809;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1809]) return breakpoint(s, 24, 1809, r0);
  case 24:
    r0 = pxsim_numops_toBoolDecr(globals.infoState___4437);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1810;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1810]) return breakpoint(s, 25, 1810, r0);
  case 25:
    { step = 23; continue; }
  case 1:
  case 2:
    s.lastBrkId = 1811;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1811]) return breakpoint(s, 26, 1811, r0);
  case 26:
    s.lastBrkId = 1812;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1812]) return breakpoint(s, 27, 1812, r0);
  case 27:
    r0 = globals.infoState___4437.fields["visibilityFlag"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 & 16);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1813;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1813]) return breakpoint(s, 28, 1813, r0);
  case 28:
    s.tmp_2 = helpers_arrayFilter__P110_mk(s);
    s.tmp_2.arg0 = globals.players___4438;
    s.tmp_2.arg1 = ps_inline__P11610;
    s.callLocIdx = 736; s.pc = 29; return s.tmp_2;
  case 29:
    r0 = s.retval;
    s.ps___11608 = (r0);
    s.lastBrkId = 1814;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1814]) return breakpoint(s, 30, 1814, r0);
  case 30:
    s.tmp_0 = helpers_arrayForEach__P109_mk(s);
    s.tmp_0.arg0 = s.ps___11608;
    s.tmp_0.arg1 = info_initHUD_inline__P11619;
    s.callLocIdx = 738; s.pc = 31; return s.tmp_0;
  case 31:
    r0 = s.retval;
    s.lastBrkId = 1815;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1815]) return breakpoint(s, 32, 1815, r0);
  case 32:
    s.tmp_0 = helpers_arrayForEach__P109_mk(s);
    s.tmp_0.arg0 = s.ps___11608;
    s.tmp_0.arg1 = info_initHUD_inline__P11625;
    s.callLocIdx = 740; s.pc = 33; return s.tmp_0;
  case 33:
    r0 = s.retval;
    { step = 12; continue; }
  case 3:
    s.lastBrkId = 1816;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1816]) return breakpoint(s, 34, 1816, r0);
  case 34:
    s.p___11629 = (globals.player1___2340);
    s.lastBrkId = 1817;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1817]) return breakpoint(s, 35, 1817, r0);
  case 35:
    s.tmp_1 = info_PlayerInfo_hasScore__P2327_mk(s);
    s.tmp_1.arg0 = s.p___11629;
    s.callLocIdx = 741; s.pc = 36; return s.tmp_1;
  case 36:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 4; continue; }
    r0 = s.tmp_0;
    { step = 5; continue; }
  case 4:
    r0 = globals.infoState___4437.fields["visibilityFlag"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 & 2);
  case 5:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 6; continue; }
    s.lastBrkId = 1818;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1818]) return breakpoint(s, 37, 1818, r0);
  case 37:
    s.tmp_4 = info_PlayerInfo_drawScore__P2335_mk(s);
    s.tmp_4.arg0 = s.p___11629;
    s.callLocIdx = 742; s.pc = 38; return s.tmp_4;
  case 38:
    r0 = s.retval;
  case 6:
  case 7:
    s.lastBrkId = 1819;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1819]) return breakpoint(s, 39, 1819, r0);
  case 39:
    s.tmp_1 = info_PlayerInfo_hasLife__P2331_mk(s);
    s.tmp_1.arg0 = s.p___11629;
    s.callLocIdx = 743; s.pc = 40; return s.tmp_1;
  case 40:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 8; continue; }
    r0 = s.tmp_0;
    { step = 9; continue; }
  case 8:
    r0 = globals.infoState___4437.fields["visibilityFlag"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 & 4);
  case 9:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 10; continue; }
    s.lastBrkId = 1820;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1820]) return breakpoint(s, 41, 1820, r0);
  case 41:
    s.tmp_4 = info_PlayerInfo_drawLives__P2336_mk(s);
    s.tmp_4.arg0 = s.p___11629;
    s.callLocIdx = 744; s.pc = 42; return s.tmp_4;
  case 42:
    r0 = s.retval;
  case 10:
  case 11:
    s.lastBrkId = 1821;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1821]) return breakpoint(s, 43, 1821, r0);
  case 43:
    s.tmp_0 = info_PlayerInfo_raiseLifeZero__P2333_mk(s);
    s.tmp_0.arg0 = s.p___11629;
    s.tmp_0.arg1 = true;
    s.callLocIdx = 745; s.pc = 44; return s.tmp_0;
  case 44:
    r0 = s.retval;
  case 12:
    s.lastBrkId = 1822;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1822]) return breakpoint(s, 45, 1822, r0);
  case 45:
    r0 = globals.infoState___4437.fields["gameEnd"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 !== undefined);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 13; continue; }
    r0 = s.tmp_0;
    { step = 14; continue; }
  case 13:
    r0 = globals.infoState___4437.fields["visibilityFlag"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 & 1);
  case 14:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 21; continue; }
    s.lastBrkId = 1823;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1823]) return breakpoint(s, 46, 1823, r0);
  case 46:
    s.tmp_4 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 746; s.pc = 47; return s.tmp_4;
  case 47:
    r0 = s.retval;
    s.scene___11663 = (r0);
    s.lastBrkId = 1824;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1824]) return breakpoint(s, 48, 1824, r0);
  case 48:
    r0 = globals.infoState___4437.fields["gameEnd"];
    s.tmp_0 = r0;
    s.tmp_2 = scene_Scene_millis__P2520_mk(s);
    s.tmp_2.arg0 = s.scene___11663;
    s.callLocIdx = 747; s.pc = 49; return s.tmp_2;
  case 49:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0 - s.tmp_1);
    s.elapsed___11666 = (r0);
    s.lastBrkId = 1825;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1825]) return breakpoint(s, 50, 1825, r0);
  case 50:
    s.tmp_0 = info_drawTimer__P4488_mk(s);
    s.tmp_0.arg0 = s.elapsed___11666;
    s.callLocIdx = 748; s.pc = 51; return s.tmp_0;
  case 51:
    r0 = s.retval;
    s.lastBrkId = 1826;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1826]) return breakpoint(s, 52, 1826, r0);
  case 52:
    r0 = (s.elapsed___11666 / 1000);
    s.t___11674 = (r0);
    s.lastBrkId = 1827;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1827]) return breakpoint(s, 53, 1827, r0);
  case 53:
    r0 = (s.t___11674 <= 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 19; continue; }
    s.lastBrkId = 1828;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1828]) return breakpoint(s, 54, 1828, r0);
  case 54:
    s.t___11674 = (0);
    s.lastBrkId = 1829;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1829]) return breakpoint(s, 55, 1829, r0);
  case 55:
    r0 = globals.infoState___4437.fields["countdownExpired"];
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 17; continue; }
    s.lastBrkId = 1830;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1830]) return breakpoint(s, 56, 1830, r0);
  case 56:
    r0 = (globals.infoState___4437).fields["countdownExpired"] = (true);
    s.lastBrkId = 1831;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1831]) return breakpoint(s, 57, 1831, r0);
  case 57:
    r0 = (globals.infoState___4437).fields["gameEnd"] = (undefined);
    s.lastBrkId = 1832;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1832]) return breakpoint(s, 58, 1832, r0);
  case 58:
    r0 = globals.infoState___4437.fields["countdownEndHandler"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 15; continue; }
    s.lastBrkId = 1833;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1833]) return breakpoint(s, 59, 1833, r0);
  case 59:
    s.tmp_1 = if_countdownEndHandler_1_mk(s);
    s.tmp_1.arg0 = globals.infoState___4437;
    if (!s.tmp_1.arg0.vtable.iface) {
      setupLambda(s.tmp_1, pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "countdownEndHandler"), 1);
      s.callLocIdx = 749; s.pc = 60; return s.tmp_1;
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["countdownEndHandler"];
      if (s.tmp_1.fn == null) { setupLambda(s.tmp_1, s.tmp_1.arg0.fields["countdownEndHandler"], 1); s.callLocIdx = 749; s.pc = 60; return s.tmp_1; }
      else if (s.tmp_1.fn.isGetter) { s.tmp_1.stage2Call = true; s.callLocIdx = 749; s.pc = 60; return s.tmp_1;; }
     else { s.callLocIdx = 749; s.pc = 60; return s.tmp_1; }
    }
  case 60:
    r0 = s.retval;
    { step = 16; continue; }
  case 15:
    s.lastBrkId = 1834;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1834]) return breakpoint(s, 61, 1834, r0);
  case 61:
    s.tmp_0 = game_over__P2619_mk(s);
    s.tmp_0.arg0 = false;
    s.tmp_0.arg1 = undefined;
    s.callLocIdx = 750; s.pc = 62; return s.tmp_0;
  case 62:
    r0 = s.retval;
  case 16:
  case 17:
  case 18:
  case 19:
  case 20:
  case 21:
  case 22:
  case 23:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
info_initHUD_inline__P11599.info = {"start":2831,"length":1903,"line":106,"column":12,"endLine":147,"endColumn":13,"fileName":"pxt_modules/game/info.ts","functionName":"inline","argumentNames":[]}

function info_initHUD_inline__P11599_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_initHUD_inline__P11599, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  ps___11608: undefined,
  p___11629: undefined,
  scene___11663: undefined,
  elapsed___11666: undefined,
  t___11674: undefined,
} }





function ps_inline__P11610(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = pxsim_numops_toBoolDecr(s.arg0);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_0);
    return leave(s, r0)
  default: oops()
} } }
ps_inline__P11610.info = {"start":3079,"length":8,"line":111,"column":46,"endLine":111,"endColumn":54,"fileName":"pxt_modules/game/info.ts","functionName":"inline","argumentNames":["p"]}

function ps_inline__P11610_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ps_inline__P11610, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function info_initHUD_inline__P11619(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = info_PlayerInfo_drawPlayer__P2334_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 737; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
info_initHUD_inline__P11619.info = {"start":3163,"length":19,"line":113,"column":31,"endLine":113,"endColumn":50,"fileName":"pxt_modules/game/info.ts","functionName":"inline","argumentNames":["p"]}

function info_initHUD_inline__P11619_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_initHUD_inline__P11619, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function info_initHUD_inline__P11625(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = info_PlayerInfo_raiseLifeZero__P2333_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = false;
    s.callLocIdx = 739; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
info_initHUD_inline__P11625.info = {"start":3265,"length":27,"line":115,"column":31,"endLine":115,"endColumn":58,"fileName":"pxt_modules/game/info.ts","functionName":"inline","argumentNames":["p"]}

function info_initHUD_inline__P11625_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_initHUD_inline__P11625, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function info_drawTimer__P4488(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.font___11703 = undefined;
    s.smallFont___11705 = undefined;
    s.seconds___11707 = undefined;
    s.width___11711 = undefined;
    s.left___11716 = undefined;
    s.color1___11726 = undefined;
    s.color2___11730 = undefined;
    s.temp___11743 = undefined;
    s.remainder___11779 = undefined;
    s.decimalLeft___11798 = undefined;
    s.minutes___11816 = undefined;
    s.remainder___11820 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 1850;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1850]) return breakpoint(s, 11, 1850, r0);
  case 11:
    r0 = (s.arg0 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1851;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1851]) return breakpoint(s, 12, 1851, r0);
  case 12:
    s.arg0 = (0);
  case 1:
  case 2:
    s.lastBrkId = 1852;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1852]) return breakpoint(s, 13, 1852, r0);
  case 13:
    r0 = (s.arg0 | 0);
    s.arg0 = (r0);
    s.lastBrkId = 1853;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1853]) return breakpoint(s, 14, 1853, r0);
  case 14:
    s.font___11703 = (globals.font8___1770);
    s.lastBrkId = 1854;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1854]) return breakpoint(s, 15, 1854, r0);
  case 15:
    s.smallFont___11705 = (globals.font5___1775);
    s.lastBrkId = 1855;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1855]) return breakpoint(s, 16, 1855, r0);
  case 16:
    r0 = pxsim.Math_.idiv(s.arg0, 1000);
    s.seconds___11707 = (r0);
    s.lastBrkId = 1856;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1856]) return breakpoint(s, 17, 1856, r0);
  case 17:
    s.tmp_2 = if_charWidth_1_mk(s);
    s.tmp_2.arg0 = s.font___11703;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "charWidth");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["charWidth"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["charWidth"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 761; s.pc = 18; return s.tmp_2; }
    }
  case 18:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 * 5);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 - 2);
    s.width___11711 = (r0);
    s.lastBrkId = 1857;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1857]) return breakpoint(s, 19, 1857, r0);
  case 19:
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 >> 1);
    s.tmp_1 = r0;
    r0 = (s.width___11711 >> 1);
    s.tmp_3 = r0;
    r0 = (s.tmp_1 - s.tmp_3);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 + 1);
    s.left___11716 = (r0);
    s.lastBrkId = 1858;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1858]) return breakpoint(s, 20, 1858, r0);
  case 20:
    r0 = globals.infoState___4437.fields["fontColor"];
    s.color1___11726 = (r0);
    s.lastBrkId = 1859;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1859]) return breakpoint(s, 21, 1859, r0);
  case 21:
    r0 = globals.infoState___4437.fields["bgColor"];
    s.color2___11730 = (r0);
    s.lastBrkId = 1860;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1860]) return breakpoint(s, 22, 1860, r0);
  case 22:
    r0 = (s.seconds___11707 < 10);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 3; continue; }
    r0 = s.tmp_0;
    { step = 4; continue; }
  case 3:
    r0 = (s.seconds___11707 & 1);
  case 4:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBool(s.tmp_1);
    if (r0) { step = 5; continue; }
    r0 = s.tmp_1;
    { step = 6; continue; }
  case 5:
    r0 = pxsim_ImageMethods.isMono(globals.screen___1827);
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
  case 6:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 1861;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1861]) return breakpoint(s, 23, 1861, r0);
  case 23:
    s.temp___11743 = (s.color1___11726);
    s.lastBrkId = 1862;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1862]) return breakpoint(s, 24, 1862, r0);
  case 24:
    s.color1___11726 = (s.color2___11730);
    s.lastBrkId = 1863;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1863]) return breakpoint(s, 25, 1863, r0);
  case 25:
    s.color2___11730 = (s.temp___11743);
  case 7:
  case 8:
    s.lastBrkId = 1864;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1864]) return breakpoint(s, 26, 1864, r0);
  case 26:
    s.tmp_0 = helpers_imageFillRect__P1753_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    r0 = (s.left___11716 - 3);
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = 0;
    r0 = (s.width___11711 + 6);
    s.tmp_0.arg3 = r0;
    s.tmp_2 = if_charHeight_1_mk(s);
    s.tmp_2.arg0 = s.font___11703;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "charHeight");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["charHeight"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["charHeight"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 762; s.pc = 28; return s.tmp_2; }
    }
  case 28:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 + 3);
    s.tmp_0.arg4 = r0;
    r0 = globals.infoState___4437.fields["borderColor"];
    s.tmp_0.arg5 = r0;
    s.callLocIdx = 763; s.pc = 27; return s.tmp_0;
  case 27:
    r0 = s.retval;
    s.lastBrkId = 1865;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1865]) return breakpoint(s, 29, 1865, r0);
  case 29:
    s.tmp_0 = helpers_imageFillRect__P1753_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    r0 = (s.left___11716 - 2);
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = 0;
    r0 = (s.width___11711 + 4);
    s.tmp_0.arg3 = r0;
    s.tmp_2 = if_charHeight_1_mk(s);
    s.tmp_2.arg0 = s.font___11703;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "charHeight");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["charHeight"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["charHeight"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 764; s.pc = 31; return s.tmp_2; }
    }
  case 31:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 + 2);
    s.tmp_0.arg4 = r0;
    s.tmp_0.arg5 = s.color2___11730;
    s.callLocIdx = 765; s.pc = 30; return s.tmp_0;
  case 30:
    r0 = s.retval;
    s.lastBrkId = 1866;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1866]) return breakpoint(s, 32, 1866, r0);
  case 32:
    r0 = (s.seconds___11707 < 60);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 1867;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1867]) return breakpoint(s, 33, 1867, r0);
  case 33:
    r0 = (s.arg0 % 1000);
    s.tmp_1 = r0;
    r0 = pxsim.Math_.idiv(s.tmp_1, 10);
    s.remainder___11779 = (r0);
    s.lastBrkId = 1868;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1868]) return breakpoint(s, 34, 1868, r0);
  case 34:
    s.tmp_0 = helpers_imagePrint__P1785_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_3 = info_formatDecimal__P4490_mk(s);
    s.tmp_3.arg0 = s.seconds___11707;
    s.callLocIdx = 766; s.pc = 36; return s.tmp_3;
  case 36:
    r0 = s.retval;
    s.tmp_2 = r0;
    if ((s.tmp_2) && (s.tmp_2).vtable) {
    setupResume(s, 37);
    pxsim_String__stringConv(s.tmp_2);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_2) + ""; }
  case 37:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_String__concat(s.tmp_1, ".");
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = s.left___11716;
    s.tmp_0.arg3 = 1;
    s.tmp_0.arg4 = s.color1___11726;
    s.tmp_0.arg5 = s.font___11703;
    s.tmp_0.arg6 = undefined;
    s.callLocIdx = 767; s.pc = 35; return s.tmp_0;
  case 35:
    r0 = s.retval;
    s.lastBrkId = 1869;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1869]) return breakpoint(s, 38, 1869, r0);
  case 38:
    s.tmp_0 = r0 = s.left___11716;
    s.tmp_3 = if_charWidth_1_mk(s);
    s.tmp_3.arg0 = s.font___11703;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "charWidth");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["charWidth"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["charWidth"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 768; s.pc = 39; return s.tmp_3; }
    }
  case 39:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (3 * s.tmp_2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 + s.tmp_1);
    s.decimalLeft___11798 = (r0);
    s.lastBrkId = 1870;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1870]) return breakpoint(s, 40, 1870, r0);
  case 40:
    s.tmp_0 = helpers_imagePrint__P1785_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_1 = info_formatDecimal__P4490_mk(s);
    s.tmp_1.arg0 = s.remainder___11779;
    s.callLocIdx = 769; s.pc = 42; return s.tmp_1;
  case 42:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = s.decimalLeft___11798;
    s.tmp_0.arg3 = 3;
    s.tmp_0.arg4 = s.color1___11726;
    s.tmp_0.arg5 = s.smallFont___11705;
    s.tmp_0.arg6 = undefined;
    s.callLocIdx = 770; s.pc = 41; return s.tmp_0;
  case 41:
    r0 = s.retval;
    { step = 10; continue; }
  case 9:
    s.lastBrkId = 1871;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1871]) return breakpoint(s, 43, 1871, r0);
  case 43:
    r0 = pxsim.Math_.idiv(s.seconds___11707, 60);
    s.minutes___11816 = (r0);
    s.lastBrkId = 1872;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1872]) return breakpoint(s, 44, 1872, r0);
  case 44:
    r0 = (s.seconds___11707 % 60);
    s.remainder___11820 = (r0);
    s.lastBrkId = 1873;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1873]) return breakpoint(s, 45, 1873, r0);
  case 45:
    s.tmp_0 = helpers_imagePrint__P1785_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_5 = info_formatDecimal__P4490_mk(s);
    s.tmp_5.arg0 = s.minutes___11816;
    s.callLocIdx = 771; s.pc = 47; return s.tmp_5;
  case 47:
    r0 = s.retval;
    s.tmp_4 = r0;
    if ((s.tmp_4) && (s.tmp_4).vtable) {
    setupResume(s, 48);
    pxsim_String__stringConv(s.tmp_4);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_4) + ""; }
  case 48:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = pxsim_String__concat(s.tmp_3, ":");
    s.tmp_2 = r0;
    if ((s.tmp_2) && (s.tmp_2).vtable) {
    setupResume(s, 49);
    pxsim_String__stringConv(s.tmp_2);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_2) + ""; }
  case 49:
    r0 = s.retval;
    s.tmp_1 = r0;
    s.tmp_8 = info_formatDecimal__P4490_mk(s);
    s.tmp_8.arg0 = s.remainder___11820;
    s.callLocIdx = 772; s.pc = 50; return s.tmp_8;
  case 50:
    r0 = s.retval;
    s.tmp_7 = r0;
    if ((s.tmp_7) && (s.tmp_7).vtable) {
    setupResume(s, 51);
    pxsim_String__stringConv(s.tmp_7);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_7) + ""; }
  case 51:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = pxsim_String__concat(s.tmp_1, s.tmp_6);
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = s.left___11716;
    s.tmp_0.arg3 = 1;
    s.tmp_0.arg4 = s.color1___11726;
    s.tmp_0.arg5 = s.font___11703;
    s.tmp_0.arg6 = undefined;
    s.callLocIdx = 773; s.pc = 46; return s.tmp_0;
  case 46:
    r0 = s.retval;
  case 10:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
info_drawTimer__P4488.info = {"start":13679,"length":1328,"line":466,"column":4,"endLine":501,"endColumn":5,"fileName":"pxt_modules/game/info.ts","functionName":"drawTimer","argumentNames":["millis"]}

function info_drawTimer__P4488_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_drawTimer__P4488, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  font___11703: undefined,
  smallFont___11705: undefined,
  seconds___11707: undefined,
  width___11711: undefined,
  left___11716: undefined,
  color1___11726: undefined,
  color2___11730: undefined,
  temp___11743: undefined,
  remainder___11779: undefined,
  decimalLeft___11798: undefined,
  minutes___11816: undefined,
  remainder___11820: undefined,
  arg0: undefined,
} }





function info_formatDecimal__P4490(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 2011;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2011]) return breakpoint(s, 4, 2011, r0);
  case 4:
    r0 = (s.arg0 | 0);
    s.arg0 = (r0);
    s.lastBrkId = 2012;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2012]) return breakpoint(s, 5, 2012, r0);
  case 5:
    r0 = (s.arg0 < 10);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2013;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2013]) return breakpoint(s, 6, 2013, r0);
  case 6:
    if ((s.arg0) && (s.arg0).vtable) {
    setupResume(s, 7);
    pxsim_String__stringConv(s.arg0);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.arg0) + ""; }
  case 7:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_String__concat("0", s.tmp_1);
    { step = 3; continue; }
  case 1:
  case 2:
    s.lastBrkId = 2014;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2014]) return breakpoint(s, 8, 2014, r0);
  case 8:
    r0 = pxsim_numops.toString(s.arg0);
  case 3:
    return leave(s, r0)
  default: oops()
} } }
info_formatDecimal__P4490.info = {"start":28812,"length":156,"line":924,"column":4,"endLine":930,"endColumn":5,"fileName":"pxt_modules/game/info.ts","functionName":"formatDecimal","argumentNames":["val"]}

function info_formatDecimal__P4490_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_formatDecimal__P4490, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function info_InfoState_constructor__P4435(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, info_InfoState__C4434_VT)) failedCast(r0);
    s.lastBrkId = 1779;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1779]) return breakpoint(s, 7, 1779, r0);
  case 7:
    r0 = (s.arg0).fields["visibilityFlag"] = (8);
    s.lastBrkId = 1780;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1780]) return breakpoint(s, 8, 1780, r0);
  case 8:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["playerStates"] = (s.tmp_1);
    s.lastBrkId = 1781;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1781]) return breakpoint(s, 9, 1781, r0);
  case 9:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = info_defaultHeartImage__P4485_mk(s);
    s.callLocIdx = 729; s.pc = 10; return s.tmp_2;
  case 10:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["heartImage"] = (s.tmp_1);
    s.lastBrkId = 1782;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1782]) return breakpoint(s, 11, 1782, r0);
  case 11:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim.image.ofBuffer(_hex12465);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["multiplierImage"] = (s.tmp_1);
    s.lastBrkId = 1783;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1783]) return breakpoint(s, 12, 1783, r0);
  case 12:
    r0 = pxsim_ImageMethods.isMono(globals.screen___1827);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = 0;
    { step = 2; continue; }
  case 1:
    r0 = 1;
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = (s.arg0).fields["bgColor"] = (s.tmp_1);
    s.lastBrkId = 1784;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1784]) return breakpoint(s, 13, 1784, r0);
  case 13:
    r0 = pxsim_ImageMethods.isMono(globals.screen___1827);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    r0 = 1;
    { step = 4; continue; }
  case 3:
    r0 = 3;
  case 4:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = (s.arg0).fields["borderColor"] = (s.tmp_1);
    s.lastBrkId = 1785;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1785]) return breakpoint(s, 14, 1785, r0);
  case 14:
    r0 = pxsim_ImageMethods.isMono(globals.screen___1827);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    r0 = 1;
    { step = 6; continue; }
  case 5:
    r0 = 3;
  case 6:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = (s.arg0).fields["fontColor"] = (s.tmp_1);
    s.lastBrkId = 1786;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1786]) return breakpoint(s, 15, 1786, r0);
  case 15:
    r0 = (s.arg0).fields["countdownExpired"] = (undefined);
    s.lastBrkId = 1787;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1787]) return breakpoint(s, 16, 1787, r0);
  case 16:
    r0 = (s.arg0).fields["countdownEndHandler"] = (undefined);
    s.lastBrkId = 1788;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1788]) return breakpoint(s, 17, 1788, r0);
  case 17:
    r0 = (s.arg0).fields["gameEnd"] = (undefined);
    s.lastBrkId = 1789;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1789]) return breakpoint(s, 18, 1789, r0);
  case 18:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["playerStates"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
info_InfoState_constructor__P4435.info = {"start":1121,"length":674,"line":45,"column":8,"endLine":63,"endColumn":9,"fileName":"pxt_modules/game/info.ts","functionName":"inline","argumentNames":["this"]}

function info_InfoState_constructor__P4435_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_InfoState_constructor__P4435, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }

const _hex12465 = pxsim.BufferMethods.createBufferFromHex("87040500050000000100010010100000000100001010000001000100")




function info_defaultHeartImage__P4485(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 1841;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1841]) return breakpoint(s, 3, 1841, r0);
  case 3:
    r0 = pxsim_ImageMethods.isMono(globals.screen___1827);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = pxsim.image.ofBuffer(_hex12493);
    { step = 2; continue; }
  case 1:
    r0 = pxsim.image.ofBuffer(_hex12495);
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = s.tmp_1;
    return leave(s, r0)
  default: oops()
} } }
info_defaultHeartImage__P4485.info = {"start":5156,"length":592,"line":164,"column":4,"endLine":185,"endColumn":5,"fileName":"pxt_modules/game/info.ts","functionName":"defaultHeartImage","argumentNames":[]}

function info_defaultHeartImage__P4485_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_defaultHeartImage__P4485, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
} }

const _hex12493 = pxsim.BufferMethods.createBufferFromHex("87040800070000001011000001000100010010001000000101001000010001001011000000000000")
const _hex12495 = pxsim.BufferMethods.createBufferFromHex("8704080007000000c0cc00002c220c002222c2002222220c20222202222422004222020020220000")




function info_PlayerInfo_drawLives__P2336(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.state___11857 = undefined;
    s.font___11863 = undefined;
    s.i___11906 = undefined;
    s.num___11928 = undefined;
    s.textWidth___11935 = undefined;
    s.mult___11987 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, info_PlayerInfo__C2309_VT)) failedCast(r0);
    s.lastBrkId = 1990;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1990]) return breakpoint(s, 8, 1990, r0);
  case 8:
    s.tmp_0 = info_PlayerInfo_getState__P2322_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 808; s.pc = 9; return s.tmp_0;
  case 9:
    r0 = s.retval;
    s.state___11857 = (r0);
    s.lastBrkId = 1991;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1991]) return breakpoint(s, 10, 1991, r0);
  case 10:
    r0 = s.state___11857.fields["life"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1992;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1992]) return breakpoint(s, 11, 1992, r0);
  case 11:
    { step = 7; continue; }
  case 1:
  case 2:
    s.lastBrkId = 1993;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1993]) return breakpoint(s, 12, 1993, r0);
  case 12:
    s.font___11863 = (globals.font8___1770);
    s.lastBrkId = 1994;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1994]) return breakpoint(s, 13, 1994, r0);
  case 13:
    r0 = s.state___11857.fields["life"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 <= 4);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 1995;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1995]) return breakpoint(s, 14, 1995, r0);
  case 14:
    s.tmp_2 = helpers_imageFillRect__P1753_mk(s);
    s.tmp_2.arg0 = globals.screen___1827;
    s.tmp_2.arg1 = 0;
    s.tmp_2.arg2 = 0;
    r0 = s.state___11857.fields["life"];
    s.tmp_4 = r0;
    r0 = globals.infoState___4437.fields["heartImage"];
    s.tmp_7 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_7);
    s.tmp_6 = r0;
    r0 = (s.tmp_6 + 1);
    s.tmp_5 = r0;
    r0 = (s.tmp_4 * s.tmp_5);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 + 3);
    s.tmp_2.arg3 = r0;
    r0 = globals.infoState___4437.fields["heartImage"];
    s.tmp_9 = r0;
    r0 = pxsim_ImageMethods.height(s.tmp_9);
    s.tmp_8 = r0;
    r0 = (s.tmp_8 + 4);
    s.tmp_2.arg4 = r0;
    r0 = globals.infoState___4437.fields["borderColor"];
    s.tmp_2.arg5 = r0;
    s.callLocIdx = 809; s.pc = 15; return s.tmp_2;
  case 15:
    r0 = s.retval;
    s.lastBrkId = 1996;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1996]) return breakpoint(s, 16, 1996, r0);
  case 16:
    s.tmp_0 = helpers_imageFillRect__P1753_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_0.arg1 = 0;
    s.tmp_0.arg2 = 0;
    r0 = s.state___11857.fields["life"];
    s.tmp_2 = r0;
    r0 = globals.infoState___4437.fields["heartImage"];
    s.tmp_5 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_5);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 + 1);
    s.tmp_3 = r0;
    r0 = (s.tmp_2 * s.tmp_3);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 + 2);
    s.tmp_0.arg3 = r0;
    r0 = globals.infoState___4437.fields["heartImage"];
    s.tmp_7 = r0;
    r0 = pxsim_ImageMethods.height(s.tmp_7);
    s.tmp_6 = r0;
    r0 = (s.tmp_6 + 3);
    s.tmp_0.arg4 = r0;
    r0 = globals.infoState___4437.fields["bgColor"];
    s.tmp_0.arg5 = r0;
    s.callLocIdx = 810; s.pc = 17; return s.tmp_0;
  case 17:
    r0 = s.retval;
    s.lastBrkId = 1997;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1997]) return breakpoint(s, 18, 1997, r0);
  case 18:
    s.i___11906 = (0);
    s.lastBrkId = 1998;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1998]) return breakpoint(s, 19, 1998, r0);
  case 19:
  case 3:
    s.lastBrkId = 1999;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1999]) return breakpoint(s, 20, 1999, r0);
  case 20:
    r0 = s.state___11857.fields["life"];
    s.tmp_1 = r0;
    r0 = (s.i___11906 < s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 2000;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2000]) return breakpoint(s, 21, 2000, r0);
  case 21:
    s.tmp_2 = r0 = globals.screen___1827;
    r0 = globals.infoState___4437.fields["heartImage"];
    s.tmp_3 = r0;
    s.tmp_6 = r0 = s.i___11906;
    r0 = globals.infoState___4437.fields["heartImage"];
    s.tmp_9 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_9);
    s.tmp_8 = r0;
    r0 = (s.tmp_8 + 1);
    s.tmp_7 = r0;
    r0 = (s.tmp_6 * s.tmp_7);
    s.tmp_5 = r0;
    r0 = (1 + s.tmp_5);
    s.tmp_4 = r0;
    r0 = pxsim_ImageMethods.drawTransparentImage(s.tmp_2, s.tmp_3, s.tmp_4, 1);
    s.lastBrkId = 2001;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2001]) return breakpoint(s, 22, 2001, r0);
  case 22:
    r0 = (s.i___11906 + 1);
    s.i___11906 = (r0);
    { step = 3; continue; }
  case 4:
    { step = 6; continue; }
  case 5:
    s.lastBrkId = 2002;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2002]) return breakpoint(s, 23, 2002, r0);
  case 23:
    r0 = s.state___11857.fields["life"];
    s.tmp_1 = r0;
    if ((s.tmp_1) && (s.tmp_1).vtable) {
    setupResume(s, 24);
    pxsim_String__stringConv(s.tmp_1);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_1) + ""; }
  case 24:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_String_.mkEmpty();
    s.tmp_2 = r0;
    r0 = pxsim_String__concat(s.tmp_0, s.tmp_2);
    s.num___11928 = (r0);
    s.lastBrkId = 2003;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2003]) return breakpoint(s, 25, 2003, r0);
  case 25:
    r0 = pxsim_String_.length(s.num___11928);
    s.tmp_1 = r0;
    s.tmp_3 = if_charWidth_1_mk(s);
    s.tmp_3.arg0 = s.font___11863;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "charWidth");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["charWidth"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["charWidth"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 811; s.pc = 26; return s.tmp_3; }
    }
  case 26:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1 * s.tmp_2);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 - 1);
    s.textWidth___11935 = (r0);
    s.lastBrkId = 2004;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2004]) return breakpoint(s, 27, 2004, r0);
  case 27:
    s.tmp_0 = helpers_imageFillRect__P1753_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_0.arg1 = 0;
    s.tmp_0.arg2 = 0;
    r0 = globals.infoState___4437.fields["heartImage"];
    s.tmp_4 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_4);
    s.tmp_3 = r0;
    r0 = globals.infoState___4437.fields["multiplierImage"];
    s.tmp_6 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_6);
    s.tmp_5 = r0;
    r0 = (s.tmp_3 + s.tmp_5);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + s.textWidth___11935);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 + 5);
    s.tmp_0.arg3 = r0;
    r0 = globals.infoState___4437.fields["heartImage"];
    s.tmp_8 = r0;
    r0 = pxsim_ImageMethods.height(s.tmp_8);
    s.tmp_7 = r0;
    r0 = (s.tmp_7 + 4);
    s.tmp_0.arg4 = r0;
    r0 = globals.infoState___4437.fields["borderColor"];
    s.tmp_0.arg5 = r0;
    s.callLocIdx = 812; s.pc = 28; return s.tmp_0;
  case 28:
    r0 = s.retval;
    s.lastBrkId = 2005;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2005]) return breakpoint(s, 29, 2005, r0);
  case 29:
    s.tmp_0 = helpers_imageFillRect__P1753_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_0.arg1 = 0;
    s.tmp_0.arg2 = 0;
    r0 = globals.infoState___4437.fields["heartImage"];
    s.tmp_4 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_4);
    s.tmp_3 = r0;
    r0 = globals.infoState___4437.fields["multiplierImage"];
    s.tmp_6 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_6);
    s.tmp_5 = r0;
    r0 = (s.tmp_3 + s.tmp_5);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + s.textWidth___11935);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 + 4);
    s.tmp_0.arg3 = r0;
    r0 = globals.infoState___4437.fields["heartImage"];
    s.tmp_8 = r0;
    r0 = pxsim_ImageMethods.height(s.tmp_8);
    s.tmp_7 = r0;
    r0 = (s.tmp_7 + 3);
    s.tmp_0.arg4 = r0;
    r0 = globals.infoState___4437.fields["bgColor"];
    s.tmp_0.arg5 = r0;
    s.callLocIdx = 813; s.pc = 30; return s.tmp_0;
  case 30:
    r0 = s.retval;
    s.lastBrkId = 2006;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2006]) return breakpoint(s, 31, 2006, r0);
  case 31:
    r0 = globals.infoState___4437.fields["heartImage"];
    s.tmp_0 = r0;
    r0 = pxsim_ImageMethods.drawTransparentImage(globals.screen___1827, s.tmp_0, 1, 1);
    s.lastBrkId = 2007;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2007]) return breakpoint(s, 32, 2007, r0);
  case 32:
    r0 = globals.infoState___4437.fields["multiplierImage"];
    s.tmp_0 = r0;
    r0 = pxsim_ImageMethods.clone(s.tmp_0);
    s.mult___11987 = (r0);
    s.lastBrkId = 2008;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2008]) return breakpoint(s, 33, 2008, r0);
  case 33:
    r0 = globals.infoState___4437.fields["fontColor"];
    s.tmp_0 = r0;
    r0 = pxsim_ImageMethods.replace(s.mult___11987, 1, s.tmp_0);
    s.lastBrkId = 2009;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2009]) return breakpoint(s, 34, 2009, r0);
  case 34:
    s.tmp_0 = r0 = globals.screen___1827;
    s.tmp_1 = r0 = s.mult___11987;
    r0 = globals.infoState___4437.fields["heartImage"];
    s.tmp_4 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_4);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 + 2);
    s.tmp_2 = r0;
    s.tmp_8 = if_charHeight_1_mk(s);
    s.tmp_8.arg0 = s.font___11863;
    if (!s.tmp_8.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_8.arg0, "charHeight");
    } else {
      s.tmp_8.fn = s.tmp_8.arg0.vtable.iface["charHeight"];
      if (s.tmp_8.fn == null) { s.retval = s.tmp_8.arg0.fields["charHeight"]; }
      else if (!s.tmp_8.fn.isGetter) { s.retval = bind(s.tmp_8); }
     else { s.callLocIdx = 814; s.pc = 35; return s.tmp_8; }
    }
  case 35:
    r0 = s.retval;
    s.tmp_7 = r0;
    r0 = globals.infoState___4437.fields["multiplierImage"];
    s.tmp_10 = r0;
    r0 = pxsim_ImageMethods.height(s.tmp_10);
    s.tmp_9 = r0;
    r0 = (s.tmp_7 - s.tmp_9);
    s.tmp_6 = r0;
    r0 = (s.tmp_6 - 1);
    s.tmp_5 = r0;
    r0 = pxsim_ImageMethods.drawTransparentImage(s.tmp_0, s.tmp_1, s.tmp_2, s.tmp_5);
    s.lastBrkId = 2010;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2010]) return breakpoint(s, 36, 2010, r0);
  case 36:
    s.tmp_0 = helpers_imagePrint__P1785_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_0.arg1 = s.num___11928;
    r0 = globals.infoState___4437.fields["heartImage"];
    s.tmp_3 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_3);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + 3);
    s.tmp_1 = r0;
    r0 = globals.infoState___4437.fields["multiplierImage"];
    s.tmp_5 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_5);
    s.tmp_4 = r0;
    r0 = (s.tmp_1 + s.tmp_4);
    s.tmp_0.arg2 = r0;
    s.tmp_0.arg3 = 1;
    r0 = globals.infoState___4437.fields["fontColor"];
    s.tmp_0.arg4 = r0;
    s.tmp_0.arg5 = s.font___11863;
    s.tmp_0.arg6 = undefined;
    s.callLocIdx = 815; s.pc = 37; return s.tmp_0;
  case 37:
    r0 = s.retval;
  case 6:
  case 7:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
info_PlayerInfo_drawLives__P2336.info = {"start":26342,"length":2458,"line":855,"column":8,"endLine":921,"endColumn":9,"fileName":"pxt_modules/game/info.ts","functionName":"drawLives","argumentNames":["this"]}

function info_PlayerInfo_drawLives__P2336_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_PlayerInfo_drawLives__P2336, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  state___11857: undefined,
  font___11863: undefined,
  i___11906: undefined,
  num___11928: undefined,
  textWidth___11935: undefined,
  mult___11987: undefined,
  arg0: undefined,
} }





function info_PlayerInfo_drawScore__P2335(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.s___12043 = undefined;
    s.font___12047 = undefined;
    s.offsetY___12048 = undefined;
    s.num___12057 = undefined;
    s.width___12061 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, info_PlayerInfo__C2309_VT)) failedCast(r0);
    s.lastBrkId = 1979;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1979]) return breakpoint(s, 3, 1979, r0);
  case 3:
    s.tmp_1 = info_PlayerInfo_score__P2324_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.callLocIdx = 801; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = (s.tmp_0 | 0);
    s.s___12043 = (r0);
    s.lastBrkId = 1980;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1980]) return breakpoint(s, 5, 1980, r0);
  case 5:
    r0 = (s.s___12043 >= 1000000);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1981;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1981]) return breakpoint(s, 6, 1981, r0);
  case 6:
    s.offsetY___12048 = (2);
    s.lastBrkId = 1982;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1982]) return breakpoint(s, 7, 1982, r0);
  case 7:
    s.font___12047 = (globals.font5___1775);
    { step = 2; continue; }
  case 1:
    s.lastBrkId = 1983;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1983]) return breakpoint(s, 8, 1983, r0);
  case 8:
    s.offsetY___12048 = (1);
    s.lastBrkId = 1984;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1984]) return breakpoint(s, 9, 1984, r0);
  case 9:
    s.font___12047 = (globals.font8___1770);
  case 2:
    s.lastBrkId = 1985;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1985]) return breakpoint(s, 10, 1985, r0);
  case 10:
    r0 = pxsim_numops.toString(s.s___12043);
    s.num___12057 = (r0);
    s.lastBrkId = 1986;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1986]) return breakpoint(s, 11, 1986, r0);
  case 11:
    r0 = pxsim_String_.length(s.num___12057);
    s.tmp_0 = r0;
    s.tmp_2 = if_charWidth_1_mk(s);
    s.tmp_2.arg0 = s.font___12047;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "charWidth");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["charWidth"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["charWidth"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 802; s.pc = 12; return s.tmp_2; }
    }
  case 12:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0 * s.tmp_1);
    s.width___12061 = (r0);
    s.lastBrkId = 1987;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1987]) return breakpoint(s, 13, 1987, r0);
  case 13:
    s.tmp_0 = helpers_imageFillRect__P1753_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - s.width___12061);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - 2);
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = 0;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_0.arg3 = r0;
    s.tmp_4 = if_charHeight_1_mk(s);
    s.tmp_4.arg0 = globals.font8___1770;
    if (!s.tmp_4.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_4.arg0, "charHeight");
    } else {
      s.tmp_4.fn = s.tmp_4.arg0.vtable.iface["charHeight"];
      if (s.tmp_4.fn == null) { s.retval = s.tmp_4.arg0.fields["charHeight"]; }
      else if (!s.tmp_4.fn.isGetter) { s.retval = bind(s.tmp_4); }
     else { s.callLocIdx = 803; s.pc = 15; return s.tmp_4; }
    }
  case 15:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_3 + 3);
    s.tmp_0.arg4 = r0;
    r0 = globals.infoState___4437.fields["borderColor"];
    s.tmp_0.arg5 = r0;
    s.callLocIdx = 804; s.pc = 14; return s.tmp_0;
  case 14:
    r0 = s.retval;
    s.lastBrkId = 1988;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1988]) return breakpoint(s, 16, 1988, r0);
  case 16:
    s.tmp_0 = helpers_imageFillRect__P1753_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - s.width___12061);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - 1);
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = 0;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_0.arg3 = r0;
    s.tmp_4 = if_charHeight_1_mk(s);
    s.tmp_4.arg0 = globals.font8___1770;
    if (!s.tmp_4.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_4.arg0, "charHeight");
    } else {
      s.tmp_4.fn = s.tmp_4.arg0.vtable.iface["charHeight"];
      if (s.tmp_4.fn == null) { s.retval = s.tmp_4.arg0.fields["charHeight"]; }
      else if (!s.tmp_4.fn.isGetter) { s.retval = bind(s.tmp_4); }
     else { s.callLocIdx = 805; s.pc = 18; return s.tmp_4; }
    }
  case 18:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_3 + 2);
    s.tmp_0.arg4 = r0;
    r0 = globals.infoState___4437.fields["bgColor"];
    s.tmp_0.arg5 = r0;
    s.callLocIdx = 806; s.pc = 17; return s.tmp_0;
  case 17:
    r0 = s.retval;
    s.lastBrkId = 1989;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1989]) return breakpoint(s, 19, 1989, r0);
  case 19:
    s.tmp_0 = helpers_imagePrint__P1785_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_0.arg1 = s.num___12057;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - s.width___12061);
    s.tmp_0.arg2 = r0;
    s.tmp_0.arg3 = s.offsetY___12048;
    r0 = globals.infoState___4437.fields["fontColor"];
    s.tmp_0.arg4 = r0;
    s.tmp_0.arg5 = s.font___12047;
    s.tmp_0.arg6 = undefined;
    s.callLocIdx = 807; s.pc = 20; return s.tmp_0;
  case 20:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
info_PlayerInfo_drawScore__P2335.info = {"start":25284,"length":1048,"line":815,"column":8,"endLine":853,"endColumn":9,"fileName":"pxt_modules/game/info.ts","functionName":"drawScore","argumentNames":["this"]}

function info_PlayerInfo_drawScore__P2335_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_PlayerInfo_drawScore__P2335, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  s___12043: undefined,
  font___12047: undefined,
  offsetY___12048: undefined,
  num___12057: undefined,
  width___12061: undefined,
  arg0: undefined,
} }





function info_PlayerInfo_score__P2324(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.state___11389 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, info_PlayerInfo__C2309_VT)) failedCast(r0);
    s.lastBrkId = 1913;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1913]) return breakpoint(s, 7, 1913, r0);
  case 7:
    r0 = s.arg0.fields["showScore"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 === undefined);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1914;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1914]) return breakpoint(s, 8, 1914, r0);
  case 8:
    r0 = (s.arg0).fields["showScore"] = (true);
  case 1:
  case 2:
    s.lastBrkId = 1915;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1915]) return breakpoint(s, 9, 1915, r0);
  case 9:
    r0 = s.arg0.fields["showPlayer"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 === undefined);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1916;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1916]) return breakpoint(s, 10, 1916, r0);
  case 10:
    r0 = (s.arg0).fields["showPlayer"] = (true);
  case 3:
  case 4:
    s.lastBrkId = 1917;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1917]) return breakpoint(s, 11, 1917, r0);
  case 11:
    s.tmp_0 = info_PlayerInfo_getState__P2322_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 778; s.pc = 12; return s.tmp_0;
  case 12:
    r0 = s.retval;
    s.state___11389 = (r0);
    s.lastBrkId = 1918;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1918]) return breakpoint(s, 13, 1918, r0);
  case 13:
    r0 = s.state___11389.fields["score"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 == null);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 1919;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1919]) return breakpoint(s, 14, 1919, r0);
  case 14:
    r0 = (s.state___11389).fields["score"] = (0);
  case 5:
  case 6:
    s.lastBrkId = 1920;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1920]) return breakpoint(s, 15, 1920, r0);
  case 15:
    r0 = s.state___11389.fields["score"];
    return leave(s, r0)
  default: oops()
} } }
info_PlayerInfo_score__P2324.info = {"start":17683,"length":314,"line":582,"column":8,"endLine":591,"endColumn":9,"fileName":"pxt_modules/game/info.ts","functionName":"score","argumentNames":["this"]}

function info_PlayerInfo_score__P2324_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_PlayerInfo_score__P2324, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  state___11389: undefined,
  arg0: undefined,
} }





function info_PlayerInfo_drawPlayer__P2334(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.state___12133 = undefined;
    s.font___12136 = undefined;
    s.score___12138 = undefined;
    s.life___12139 = undefined;
    s.height___12140 = undefined;
    s.scoreWidth___12141 = undefined;
    s.lifeWidth___12142 = undefined;
    s.offsetY___12145 = undefined;
    s.showScore___12146 = undefined;
    s.showLife___12154 = undefined;
    s.width___12222 = undefined;
    s.x___12232 = undefined;
    s.y___12239 = undefined;
    s.bump___12272 = undefined;
    s.xLoc___12297 = undefined;
    s.mult___12308 = undefined;
    s.pNum___12370 = undefined;
    s.iconWidth___12377 = undefined;
    s.iconHeight___12385 = undefined;
    s.iconX___12393 = undefined;
    s.iconY___12405 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, info_PlayerInfo__C2309_VT)) failedCast(r0);
    s.lastBrkId = 1932;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1932]) return breakpoint(s, 43, 1932, r0);
  case 43:
    s.tmp_0 = info_PlayerInfo_getState__P2322_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 784; s.pc = 44; return s.tmp_0;
  case 44:
    r0 = s.retval;
    s.state___12133 = (r0);
    s.lastBrkId = 1933;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1933]) return breakpoint(s, 45, 1933, r0);
  case 45:
    s.font___12136 = (globals.font5___1775);
    s.lastBrkId = 1934;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1934]) return breakpoint(s, 46, 1934, r0);
  case 46:
    s.height___12140 = (4);
    s.lastBrkId = 1935;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1935]) return breakpoint(s, 47, 1935, r0);
  case 47:
    s.scoreWidth___12141 = (0);
    s.lastBrkId = 1936;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1936]) return breakpoint(s, 48, 1936, r0);
  case 48:
    s.lifeWidth___12142 = (0);
    s.lastBrkId = 1937;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1937]) return breakpoint(s, 49, 1937, r0);
  case 49:
    s.offsetY___12145 = (2);
    s.lastBrkId = 1938;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1938]) return breakpoint(s, 50, 1938, r0);
  case 50:
    r0 = s.arg0.fields["showScore"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = s.state___12133.fields["score"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 !== undefined);
  case 2:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    s.showScore___12146 = (s.tmp_2);
    s.lastBrkId = 1939;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1939]) return breakpoint(s, 51, 1939, r0);
  case 51:
    r0 = s.arg0.fields["showLife"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 3; continue; }
    r0 = s.tmp_0;
    { step = 4; continue; }
  case 3:
    r0 = s.state___12133.fields["life"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 !== undefined);
  case 4:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    s.showLife___12154 = (s.tmp_2);
    s.lastBrkId = 1940;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1940]) return breakpoint(s, 52, 1940, r0);
  case 52:
    r0 = pxsim_numops_toBoolDecr(s.showScore___12146);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 1941;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1941]) return breakpoint(s, 53, 1941, r0);
  case 53:
    r0 = pxsim_String_.mkEmpty();
    s.tmp_0 = r0;
    r0 = s.state___12133.fields["score"];
    s.tmp_2 = r0;
    if ((s.tmp_2) && (s.tmp_2).vtable) {
    setupResume(s, 54);
    pxsim_String__stringConv(s.tmp_2);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_2) + ""; }
  case 54:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_String__concat(s.tmp_0, s.tmp_1);
    s.score___12138 = (r0);
    s.lastBrkId = 1942;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1942]) return breakpoint(s, 55, 1942, r0);
  case 55:
    r0 = pxsim_String_.length(s.score___12138);
    s.tmp_1 = r0;
    s.tmp_3 = if_charWidth_1_mk(s);
    s.tmp_3.arg0 = s.font___12136;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "charWidth");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["charWidth"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["charWidth"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 785; s.pc = 56; return s.tmp_3; }
    }
  case 56:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1 * s.tmp_2);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 + 3);
    s.scoreWidth___12141 = (r0);
    s.lastBrkId = 1943;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1943]) return breakpoint(s, 57, 1943, r0);
  case 57:
    s.tmp_0 = r0 = s.height___12140;
    s.tmp_2 = if_charHeight_1_mk(s);
    s.tmp_2.arg0 = s.font___12136;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "charHeight");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["charHeight"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["charHeight"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 786; s.pc = 58; return s.tmp_2; }
    }
  case 58:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0 + s.tmp_1);
    s.height___12140 = (r0);
    s.lastBrkId = 1944;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1944]) return breakpoint(s, 59, 1944, r0);
  case 59:
    s.tmp_0 = r0 = s.offsetY___12145;
    s.tmp_3 = if_charHeight_1_mk(s);
    s.tmp_3.arg0 = s.font___12136;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "charHeight");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["charHeight"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["charHeight"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 787; s.pc = 60; return s.tmp_3; }
    }
  case 60:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 + s.tmp_1);
    s.offsetY___12145 = (r0);
  case 5:
  case 6:
    s.lastBrkId = 1945;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1945]) return breakpoint(s, 61, 1945, r0);
  case 61:
    r0 = pxsim_numops_toBoolDecr(s.showLife___12154);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 1946;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1946]) return breakpoint(s, 62, 1946, r0);
  case 62:
    r0 = s.state___12133.fields["life"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 7; continue; }
    r0 = s.tmp_0;
    { step = 8; continue; }
  case 7:
    r0 = 0;
  case 8:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_String_.mkEmpty();
    s.tmp_2 = r0;
    if ((s.tmp_1) && (s.tmp_1).vtable) {
    setupResume(s, 63);
    pxsim_String__stringConv(s.tmp_1);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_1) + ""; }
  case 63:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = pxsim_String__concat(s.tmp_2, s.tmp_3);
    s.life___12139 = (r0);
    s.lastBrkId = 1947;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1947]) return breakpoint(s, 64, 1947, r0);
  case 64:
    r0 = globals.infoState___4437.fields["heartImage"];
    s.tmp_3 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_3);
    s.tmp_2 = r0;
    r0 = globals.infoState___4437.fields["multiplierImage"];
    s.tmp_5 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_5);
    s.tmp_4 = r0;
    r0 = (s.tmp_2 + s.tmp_4);
    s.tmp_1 = r0;
    r0 = pxsim_String_.length(s.life___12139);
    s.tmp_7 = r0;
    s.tmp_9 = if_charWidth_1_mk(s);
    s.tmp_9.arg0 = s.font___12136;
    if (!s.tmp_9.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_9.arg0, "charWidth");
    } else {
      s.tmp_9.fn = s.tmp_9.arg0.vtable.iface["charWidth"];
      if (s.tmp_9.fn == null) { s.retval = s.tmp_9.arg0.fields["charWidth"]; }
      else if (!s.tmp_9.fn.isGetter) { s.retval = bind(s.tmp_9); }
     else { s.callLocIdx = 788; s.pc = 65; return s.tmp_9; }
    }
  case 65:
    r0 = s.retval;
    s.tmp_8 = r0;
    r0 = (s.tmp_7 * s.tmp_8);
    s.tmp_6 = r0;
    r0 = (s.tmp_1 + s.tmp_6);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 + 3);
    s.lifeWidth___12142 = (r0);
    s.lastBrkId = 1948;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1948]) return breakpoint(s, 66, 1948, r0);
  case 66:
    s.tmp_0 = r0 = s.height___12140;
    r0 = globals.infoState___4437.fields["heartImage"];
    s.tmp_2 = r0;
    r0 = pxsim_ImageMethods.height(s.tmp_2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 + s.tmp_1);
    s.height___12140 = (r0);
  case 9:
  case 10:
    s.lastBrkId = 1949;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1949]) return breakpoint(s, 67, 1949, r0);
  case 67:
    s.tmp_0 = Math_max__P130_mk(s);
    s.tmp_0.arg0 = s.scoreWidth___12141;
    s.tmp_0.arg1 = s.lifeWidth___12142;
    s.callLocIdx = 789; s.pc = 68; return s.tmp_0;
  case 68:
    r0 = s.retval;
    s.width___12222 = (r0);
    s.lastBrkId = 1950;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1950]) return breakpoint(s, 69, 1950, r0);
  case 69:
    s.tmp_0 = r0 = s.showScore___12146;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 11; continue; }
    r0 = s.tmp_0;
    { step = 12; continue; }
  case 11:
    r0 = s.showLife___12154;
  case 12:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 13; continue; }
    s.lastBrkId = 1951;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1951]) return breakpoint(s, 70, 1951, r0);
  case 70:
    r0 = (s.height___12140 + 1);
    s.height___12140 = (r0);
  case 13:
  case 14:
    s.lastBrkId = 1952;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1952]) return breakpoint(s, 71, 1952, r0);
  case 71:
    r0 = s.arg0.fields["left"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 15; continue; }
    r0 = s.width___12222;
    { step = 16; continue; }
  case 15:
    r0 = 0;
  case 16:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = s.arg0.fields["x"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - s.tmp_1);
    s.x___12232 = (r0);
    s.lastBrkId = 1953;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1953]) return breakpoint(s, 72, 1953, r0);
  case 72:
    r0 = s.arg0.fields["up"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 17; continue; }
    r0 = s.height___12140;
    { step = 18; continue; }
  case 17:
    r0 = 0;
  case 18:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = s.arg0.fields["y"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - s.tmp_1);
    s.y___12239 = (r0);
    s.lastBrkId = 1954;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1954]) return breakpoint(s, 73, 1954, r0);
  case 73:
    s.tmp_0 = r0 = s.showScore___12146;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 19; continue; }
    r0 = s.tmp_0;
    { step = 20; continue; }
  case 19:
    r0 = s.showLife___12154;
  case 20:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 21; continue; }
    s.lastBrkId = 1955;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1955]) return breakpoint(s, 74, 1955, r0);
  case 74:
    s.tmp_2 = helpers_imageFillRect__P1753_mk(s);
    s.tmp_2.arg0 = globals.screen___1827;
    s.tmp_2.arg1 = s.x___12232;
    s.tmp_2.arg2 = s.y___12239;
    s.tmp_2.arg3 = s.width___12222;
    s.tmp_2.arg4 = s.height___12140;
    r0 = s.arg0.fields["border"];
    s.tmp_2.arg5 = r0;
    s.callLocIdx = 790; s.pc = 75; return s.tmp_2;
  case 75:
    r0 = s.retval;
    s.lastBrkId = 1956;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1956]) return breakpoint(s, 76, 1956, r0);
  case 76:
    s.tmp_0 = helpers_imageFillRect__P1753_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    r0 = (s.x___12232 + 1);
    s.tmp_0.arg1 = r0;
    r0 = (s.y___12239 + 1);
    s.tmp_0.arg2 = r0;
    r0 = (s.width___12222 - 2);
    s.tmp_0.arg3 = r0;
    r0 = (s.height___12140 - 2);
    s.tmp_0.arg4 = r0;
    r0 = s.arg0.fields["bg"];
    s.tmp_0.arg5 = r0;
    s.callLocIdx = 791; s.pc = 77; return s.tmp_0;
  case 77:
    r0 = s.retval;
  case 21:
  case 22:
    s.lastBrkId = 1957;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1957]) return breakpoint(s, 78, 1957, r0);
  case 78:
    r0 = pxsim_numops_toBoolDecr(s.showScore___12146);
    if (!r0) { step = 25; continue; }
    s.lastBrkId = 1958;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1958]) return breakpoint(s, 79, 1958, r0);
  case 79:
    r0 = s.arg0.fields["left"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 23; continue; }
    r0 = (s.width___12222 - s.scoreWidth___12141);
    { step = 24; continue; }
  case 23:
    r0 = 0;
  case 24:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    s.bump___12272 = (s.tmp_1);
    s.lastBrkId = 1959;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1959]) return breakpoint(s, 80, 1959, r0);
  case 80:
    s.tmp_0 = helpers_imagePrint__P1785_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_0.arg1 = s.score___12138;
    r0 = (s.x___12232 + 1);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + s.bump___12272);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 + 1);
    s.tmp_0.arg2 = r0;
    r0 = (s.y___12239 + 2);
    s.tmp_0.arg3 = r0;
    r0 = s.arg0.fields["fc"];
    s.tmp_0.arg4 = r0;
    s.tmp_0.arg5 = s.font___12136;
    s.tmp_0.arg6 = undefined;
    s.callLocIdx = 792; s.pc = 81; return s.tmp_0;
  case 81:
    r0 = s.retval;
  case 25:
  case 26:
    s.lastBrkId = 1960;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1960]) return breakpoint(s, 82, 1960, r0);
  case 82:
    r0 = pxsim_numops_toBoolDecr(s.showLife___12154);
    if (!r0) { step = 29; continue; }
    s.lastBrkId = 1961;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1961]) return breakpoint(s, 83, 1961, r0);
  case 83:
    r0 = s.arg0.fields["left"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 27; continue; }
    r0 = (s.width___12222 - s.lifeWidth___12142);
    { step = 28; continue; }
  case 27:
    r0 = 0;
  case 28:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = (s.x___12232 + 1);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + s.tmp_1);
    s.xLoc___12297 = (r0);
    s.lastBrkId = 1962;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1962]) return breakpoint(s, 84, 1962, r0);
  case 84:
    r0 = globals.infoState___4437.fields["multiplierImage"];
    s.tmp_0 = r0;
    r0 = pxsim_ImageMethods.clone(s.tmp_0);
    s.mult___12308 = (r0);
    s.lastBrkId = 1963;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1963]) return breakpoint(s, 85, 1963, r0);
  case 85:
    r0 = s.arg0.fields["fc"];
    s.tmp_0 = r0;
    r0 = pxsim_ImageMethods.replace(s.mult___12308, 1, s.tmp_0);
    s.lastBrkId = 1964;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1964]) return breakpoint(s, 86, 1964, r0);
  case 86:
    s.tmp_0 = r0 = globals.screen___1827;
    r0 = globals.infoState___4437.fields["heartImage"];
    s.tmp_1 = r0;
    s.tmp_2 = r0 = s.xLoc___12297;
    r0 = (s.y___12239 + s.offsetY___12145);
    s.tmp_3 = r0;
    r0 = pxsim_ImageMethods.drawTransparentImage(s.tmp_0, s.tmp_1, s.tmp_2, s.tmp_3);
    s.lastBrkId = 1965;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1965]) return breakpoint(s, 87, 1965, r0);
  case 87:
    s.tmp_0 = r0 = globals.screen___1827;
    s.tmp_1 = r0 = s.mult___12308;
    s.tmp_3 = r0 = s.xLoc___12297;
    r0 = globals.infoState___4437.fields["heartImage"];
    s.tmp_5 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_5);
    s.tmp_4 = r0;
    r0 = (s.tmp_3 + s.tmp_4);
    s.tmp_2 = r0;
    r0 = (s.y___12239 + s.offsetY___12145);
    s.tmp_9 = r0;
    s.tmp_11 = if_charHeight_1_mk(s);
    s.tmp_11.arg0 = s.font___12136;
    if (!s.tmp_11.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_11.arg0, "charHeight");
    } else {
      s.tmp_11.fn = s.tmp_11.arg0.vtable.iface["charHeight"];
      if (s.tmp_11.fn == null) { s.retval = s.tmp_11.arg0.fields["charHeight"]; }
      else if (!s.tmp_11.fn.isGetter) { s.retval = bind(s.tmp_11); }
     else { s.callLocIdx = 793; s.pc = 88; return s.tmp_11; }
    }
  case 88:
    r0 = s.retval;
    s.tmp_10 = r0;
    r0 = (s.tmp_9 + s.tmp_10);
    s.tmp_8 = r0;
    r0 = globals.infoState___4437.fields["multiplierImage"];
    s.tmp_13 = r0;
    r0 = pxsim_ImageMethods.height(s.tmp_13);
    s.tmp_12 = r0;
    r0 = (s.tmp_8 - s.tmp_12);
    s.tmp_7 = r0;
    r0 = (s.tmp_7 - 1);
    s.tmp_6 = r0;
    r0 = pxsim_ImageMethods.drawTransparentImage(s.tmp_0, s.tmp_1, s.tmp_2, s.tmp_6);
    s.lastBrkId = 1966;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1966]) return breakpoint(s, 89, 1966, r0);
  case 89:
    s.tmp_0 = helpers_imagePrint__P1785_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_0.arg1 = s.life___12139;
    s.tmp_3 = r0 = s.xLoc___12297;
    r0 = globals.infoState___4437.fields["heartImage"];
    s.tmp_5 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_5);
    s.tmp_4 = r0;
    r0 = (s.tmp_3 + s.tmp_4);
    s.tmp_2 = r0;
    r0 = globals.infoState___4437.fields["multiplierImage"];
    s.tmp_7 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_7);
    s.tmp_6 = r0;
    r0 = (s.tmp_2 + s.tmp_6);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 + 1);
    s.tmp_0.arg2 = r0;
    r0 = (s.y___12239 + s.offsetY___12145);
    s.tmp_0.arg3 = r0;
    r0 = s.arg0.fields["fc"];
    s.tmp_0.arg4 = r0;
    s.tmp_0.arg5 = s.font___12136;
    s.tmp_0.arg6 = undefined;
    s.callLocIdx = 794; s.pc = 90; return s.tmp_0;
  case 90:
    r0 = s.retval;
  case 29:
  case 30:
    s.lastBrkId = 1967;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1967]) return breakpoint(s, 91, 1967, r0);
  case 91:
    r0 = s.arg0.fields["showPlayer"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 41; continue; }
    s.lastBrkId = 1968;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1968]) return breakpoint(s, 92, 1968, r0);
  case 92:
    r0 = pxsim_String_.mkEmpty();
    s.tmp_1 = r0;
    r0 = s.arg0.fields["_player"];
    s.tmp_3 = r0;
    if ((s.tmp_3) && (s.tmp_3).vtable) {
    setupResume(s, 93);
    pxsim_String__stringConv(s.tmp_3);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_3) + ""; }
  case 93:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_String__concat(s.tmp_1, s.tmp_2);
    s.pNum___12370 = (r0);
    s.lastBrkId = 1969;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1969]) return breakpoint(s, 94, 1969, r0);
  case 94:
    r0 = pxsim_String_.length(s.pNum___12370);
    s.tmp_1 = r0;
    s.tmp_3 = if_charWidth_1_mk(s);
    s.tmp_3.arg0 = s.font___12136;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "charWidth");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["charWidth"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["charWidth"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 795; s.pc = 95; return s.tmp_3; }
    }
  case 95:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1 * s.tmp_2);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 + 1);
    s.iconWidth___12377 = (r0);
    s.lastBrkId = 1970;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1970]) return breakpoint(s, 96, 1970, r0);
  case 96:
    s.tmp_0 = Math_max__P130_mk(s);
    s.tmp_0.arg0 = s.height___12140;
    s.tmp_2 = if_charHeight_1_mk(s);
    s.tmp_2.arg0 = s.font___12136;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "charHeight");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["charHeight"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["charHeight"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 796; s.pc = 98; return s.tmp_2; }
    }
  case 98:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 + 2);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 797; s.pc = 97; return s.tmp_0;
  case 97:
    r0 = s.retval;
    s.iconHeight___12385 = (r0);
    s.lastBrkId = 1971;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1971]) return breakpoint(s, 99, 1971, r0);
  case 99:
    r0 = s.arg0.fields["left"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 31; continue; }
    r0 = (s.x___12232 - s.iconWidth___12377);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 + 1);
    { step = 32; continue; }
  case 31:
    r0 = (s.x___12232 + s.width___12222);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - 1);
  case 32:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    s.iconX___12393 = (s.tmp_3);
    s.lastBrkId = 1972;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1972]) return breakpoint(s, 100, 1972, r0);
  case 100:
    s.iconY___12405 = (s.y___12239);
    s.lastBrkId = 1973;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1973]) return breakpoint(s, 101, 1973, r0);
  case 101:
    r0 = pxsim_numops_toBoolDecr(s.showScore___12146);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 33; continue; }
    r0 = s.tmp_0;
    { step = 34; continue; }
  case 33:
    r0 = pxsim_numops_toBoolDecr(s.showLife___12154);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
  case 34:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 39; continue; }
    s.lastBrkId = 1974;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1974]) return breakpoint(s, 102, 1974, r0);
  case 102:
    r0 = s.arg0.fields["left"];
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    if (!r0) { step = 35; continue; }
    r0 = -1;
    { step = 36; continue; }
  case 35:
    r0 = 1;
  case 36:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    r0 = (s.iconX___12393 + s.tmp_5);
    s.iconX___12393 = (r0);
    s.lastBrkId = 1975;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1975]) return breakpoint(s, 103, 1975, r0);
  case 103:
    r0 = s.arg0.fields["up"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 37; continue; }
    s.lastBrkId = 1976;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1976]) return breakpoint(s, 104, 1976, r0);
  case 104:
    r0 = (s.iconY___12405 - 3);
    s.iconY___12405 = (r0);
  case 37:
  case 38:
  case 39:
  case 40:
    s.lastBrkId = 1977;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1977]) return breakpoint(s, 105, 1977, r0);
  case 105:
    s.tmp_0 = helpers_imageFillRect__P1753_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_0.arg1 = s.iconX___12393;
    s.tmp_0.arg2 = s.iconY___12405;
    s.tmp_0.arg3 = s.iconWidth___12377;
    s.tmp_0.arg4 = s.iconHeight___12385;
    r0 = s.arg0.fields["border"];
    s.tmp_0.arg5 = r0;
    s.callLocIdx = 798; s.pc = 106; return s.tmp_0;
  case 106:
    r0 = s.retval;
    s.lastBrkId = 1978;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1978]) return breakpoint(s, 107, 1978, r0);
  case 107:
    s.tmp_0 = helpers_imagePrint__P1785_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_0.arg1 = s.pNum___12370;
    r0 = (s.iconX___12393 + 1);
    s.tmp_0.arg2 = r0;
    s.tmp_2 = r0 = s.iconY___12405;
    r0 = (s.iconHeight___12385 >> 1);
    s.tmp_3 = r0;
    r0 = (s.tmp_2 + s.tmp_3);
    s.tmp_1 = r0;
    s.tmp_6 = if_charHeight_1_mk(s);
    s.tmp_6.arg0 = s.font___12136;
    if (!s.tmp_6.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_6.arg0, "charHeight");
    } else {
      s.tmp_6.fn = s.tmp_6.arg0.vtable.iface["charHeight"];
      if (s.tmp_6.fn == null) { s.retval = s.tmp_6.arg0.fields["charHeight"]; }
      else if (!s.tmp_6.fn.isGetter) { s.retval = bind(s.tmp_6); }
     else { s.callLocIdx = 799; s.pc = 109; return s.tmp_6; }
    }
  case 109:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = (s.tmp_5 >> 1);
    s.tmp_4 = r0;
    r0 = (s.tmp_1 - s.tmp_4);
    s.tmp_0.arg3 = r0;
    r0 = s.arg0.fields["bg"];
    s.tmp_0.arg4 = r0;
    s.tmp_0.arg5 = s.font___12136;
    s.tmp_0.arg6 = undefined;
    s.callLocIdx = 800; s.pc = 108; return s.tmp_0;
  case 108:
    r0 = s.retval;
  case 41:
  case 42:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
info_PlayerInfo_drawPlayer__P2334.info = {"start":21639,"length":3635,"line":710,"column":8,"endLine":813,"endColumn":9,"fileName":"pxt_modules/game/info.ts","functionName":"drawPlayer","argumentNames":["this"]}

function info_PlayerInfo_drawPlayer__P2334_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_PlayerInfo_drawPlayer__P2334, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  tmp_12: undefined,
  tmp_13: undefined,
  state___12133: undefined,
  font___12136: undefined,
  score___12138: undefined,
  life___12139: undefined,
  height___12140: undefined,
  scoreWidth___12141: undefined,
  lifeWidth___12142: undefined,
  offsetY___12145: undefined,
  showScore___12146: undefined,
  showLife___12154: undefined,
  width___12222: undefined,
  x___12232: undefined,
  y___12239: undefined,
  bump___12272: undefined,
  xLoc___12297: undefined,
  mult___12308: undefined,
  pNum___12370: undefined,
  iconWidth___12377: undefined,
  iconHeight___12385: undefined,
  iconX___12393: undefined,
  iconY___12405: undefined,
  arg0: undefined,
} }





function info_PlayerInfo_raiseLifeZero__P2333(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.state___12111 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, info_PlayerInfo__C2309_VT)) failedCast(r0);
    s.lastBrkId = 1925;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1925]) return breakpoint(s, 9, 1925, r0);
  case 9:
    s.tmp_0 = info_PlayerInfo_getState__P2322_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 781; s.pc = 10; return s.tmp_0;
  case 10:
    r0 = s.retval;
    s.state___12111 = (r0);
    s.lastBrkId = 1926;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1926]) return breakpoint(s, 11, 1926, r0);
  case 11:
    r0 = s.state___12111.fields["life"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 !== null);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = s.state___12111.fields["life"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 <= 0);
  case 2:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 1927;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1927]) return breakpoint(s, 12, 1927, r0);
  case 12:
    r0 = (s.state___12111).fields["life"] = (null);
    s.lastBrkId = 1928;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1928]) return breakpoint(s, 13, 1928, r0);
  case 13:
    r0 = s.state___12111.fields["lifeZeroHandler"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1929;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1929]) return breakpoint(s, 14, 1929, r0);
  case 14:
    s.tmp_1 = if_lifeZeroHandler_1_mk(s);
    s.tmp_1.arg0 = s.state___12111;
    if (!s.tmp_1.arg0.vtable.iface) {
      setupLambda(s.tmp_1, pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "lifeZeroHandler"), 1);
      s.callLocIdx = 782; s.pc = 15; return s.tmp_1;
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["lifeZeroHandler"];
      if (s.tmp_1.fn == null) { setupLambda(s.tmp_1, s.tmp_1.arg0.fields["lifeZeroHandler"], 1); s.callLocIdx = 782; s.pc = 15; return s.tmp_1; }
      else if (s.tmp_1.fn.isGetter) { s.tmp_1.stage2Call = true; s.callLocIdx = 782; s.pc = 15; return s.tmp_1;; }
     else { s.callLocIdx = 782; s.pc = 15; return s.tmp_1; }
    }
  case 15:
    r0 = s.retval;
    { step = 6; continue; }
  case 3:
    s.lastBrkId = 1930;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1930]) return breakpoint(s, 16, 1930, r0);
  case 16:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 1931;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1931]) return breakpoint(s, 17, 1931, r0);
  case 17:
    s.tmp_0 = game_over__P2619_mk(s);
    s.tmp_0.arg0 = false;
    s.tmp_0.arg1 = undefined;
    s.callLocIdx = 783; s.pc = 18; return s.tmp_0;
  case 18:
    r0 = s.retval;
  case 4:
  case 5:
  case 6:
  case 7:
  case 8:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
info_PlayerInfo_raiseLifeZero__P2333.info = {"start":21255,"length":374,"line":698,"column":8,"endLine":708,"endColumn":9,"fileName":"pxt_modules/game/info.ts","functionName":"raiseLifeZero","argumentNames":["this","gameOver"]}

function info_PlayerInfo_raiseLifeZero__P2333_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_PlayerInfo_raiseLifeZero__P2333, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  state___12111: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function info_PlayerInfo_hasLife__P2331(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.state___12030 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, info_PlayerInfo__C2309_VT)) failedCast(r0);
    s.lastBrkId = 1923;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1923]) return breakpoint(s, 3, 1923, r0);
  case 3:
    s.tmp_0 = info_PlayerInfo_getState__P2322_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 780; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.state___12030 = (r0);
    s.lastBrkId = 1924;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1924]) return breakpoint(s, 5, 1924, r0);
  case 5:
    r0 = s.state___12030.fields["life"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 !== undefined);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = s.state___12030.fields["life"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 !== null);
  case 2:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = s.tmp_3;
    return leave(s, r0)
  default: oops()
} } }
info_PlayerInfo_hasLife__P2331.info = {"start":20732,"length":141,"line":681,"column":8,"endLine":684,"endColumn":9,"fileName":"pxt_modules/game/info.ts","functionName":"hasLife","argumentNames":["this"]}

function info_PlayerInfo_hasLife__P2331_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_PlayerInfo_hasLife__P2331, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  state___12030: undefined,
  arg0: undefined,
} }





function info_PlayerInfo_hasScore__P2327(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.state___11401 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, info_PlayerInfo__C2309_VT)) failedCast(r0);
    s.lastBrkId = 1921;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1921]) return breakpoint(s, 1, 1921, r0);
  case 1:
    s.tmp_0 = info_PlayerInfo_getState__P2322_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 779; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.state___11401 = (r0);
    s.lastBrkId = 1922;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1922]) return breakpoint(s, 3, 1922, r0);
  case 3:
    r0 = s.state___11401.fields["score"];
    s.tmp_0 = r0;
    r0 = (s.tmp_0 !== undefined);
    return leave(s, r0)
  default: oops()
} } }
info_PlayerInfo_hasScore__P2327.info = {"start":18908,"length":111,"line":622,"column":8,"endLine":625,"endColumn":9,"fileName":"pxt_modules/game/info.ts","functionName":"hasScore","argumentNames":["this"]}

function info_PlayerInfo_hasScore__P2327_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_PlayerInfo_hasScore__P2327, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  state___11401: undefined,
  arg0: undefined,
} }





function info_PlayerState_constructor__P2284(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, info_PlayerState__C2280_VT)) failedCast(r0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
info_PlayerState_constructor__P2284.info = {"start":684,"length":17,"line":29,"column":8,"endLine":29,"endColumn":25,"fileName":"pxt_modules/game/info.ts","functionName":"inline","argumentNames":["this"]}

function info_PlayerState_constructor__P2284_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_PlayerState_constructor__P2284, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function info_highScore__P2288(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 1849;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1849]) return breakpoint(s, 3, 1849, r0);
  case 3:
    s.tmp_1 = settings_readNumber__P1861_mk(s);
    s.tmp_1.arg0 = "high-score";
    s.callLocIdx = 760; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = 0;
  case 2:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = s.tmp_2;
    return leave(s, r0)
  default: oops()
} } }
info_highScore__P2288.info = {"start":7162,"length":98,"line":242,"column":4,"endLine":244,"endColumn":5,"fileName":"pxt_modules/game/info.ts","functionName":"highScore","argumentNames":[]}

function info_highScore__P2288_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_highScore__P2288, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
} }





function settings_readNumber__P1861(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.buf___17795 = undefined;
    s.nums___17802 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 974;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[974]) return breakpoint(s, 8, 974, r0);
  case 8:
    s.tmp_0 = settings_readBuffer__P1858_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 174; s.pc = 9; return s.tmp_0;
  case 9:
    r0 = s.retval;
    s.buf___17795 = (r0);
    s.lastBrkId = 975;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[975]) return breakpoint(s, 10, 975, r0);
  case 10:
    r0 = pxsim_numops_toBoolDecr(s.buf___17795);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 976;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[976]) return breakpoint(s, 11, 976, r0);
  case 11:
    r0 = undefined;
    { step = 7; continue; }
    { step = 6; continue; }
  case 1:
    s.lastBrkId = 977;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[977]) return breakpoint(s, 12, 977, r0);
  case 12:
    s.tmp_2 = msgpack_unpackNumberArray__P181_mk(s);
    s.tmp_2.arg0 = s.buf___17795;
    s.tmp_2.arg1 = 0;
    s.callLocIdx = 175; s.pc = 13; return s.tmp_2;
  case 13:
    r0 = s.retval;
    s.nums___17802 = (r0);
    s.lastBrkId = 978;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[978]) return breakpoint(s, 14, 978, r0);
  case 14:
    s.tmp_0 = r0 = s.nums___17802;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 2; continue; }
    r0 = s.tmp_0;
    { step = 3; continue; }
  case 2:
    r0 = pxsim_Array__length(s.nums___17802);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 >= 1);
  case 3:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 979;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[979]) return breakpoint(s, 15, 979, r0);
  case 15:
    r0 = pxsim_Array__getAt(s.nums___17802, 0);
    { step = 7; continue; }
  case 4:
  case 5:
    s.lastBrkId = 980;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[980]) return breakpoint(s, 16, 980, r0);
  case 16:
    r0 = undefined;
    { step = 7; continue; }
  case 6:
    r0 = undefined;
  case 7:
    return leave(s, r0)
  default: oops()
} } }
settings_readNumber__P1861.info = {"start":3283,"length":313,"line":131,"column":4,"endLine":141,"endColumn":5,"fileName":"pxt_modules/settings/settings.ts","functionName":"readNumber","argumentNames":["key"]}

function settings_readNumber__P1861_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: settings_readNumber__P1861, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  buf___17795: undefined,
  nums___17802: undefined,
  arg0: undefined,
} }





function settings_readBuffer__P1858(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 969;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[969]) return breakpoint(s, 1, 969, r0);
  case 1:
    r0 = pxsim.settings._get(s.arg0);
    return leave(s, r0)
  default: oops()
} } }
settings_readBuffer__P1858.info = {"start":2694,"length":72,"line":103,"column":4,"endLine":105,"endColumn":5,"fileName":"pxt_modules/settings/settings.ts","functionName":"readBuffer","argumentNames":["key"]}

function settings_readBuffer__P1858_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: settings_readBuffer__P1858, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function msgpack_unpackNumberArray__P181(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.res___17733 = undefined;
    s.fmt___17740 = undefined;
    s.v___17749 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 315;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[315]) return breakpoint(s, 12, 315, r0);
  case 12:
    r0 = pxsim_Array__mk();
    s.res___17733 = (r0);
    s.lastBrkId = 316;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[316]) return breakpoint(s, 13, 316, r0);
  case 13:
  case 1:
    s.lastBrkId = 317;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[317]) return breakpoint(s, 14, 317, r0);
  case 14:
    s.tmp_1 = r0 = s.arg1;
    r0 = pxsim.BufferMethods.length(s.arg0);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 10; continue; }
    s.lastBrkId = 318;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[318]) return breakpoint(s, 15, 318, r0);
  case 15:
    s.tmp_3 = r0 = s.arg1;
    r0 = (s.tmp_3 + 1);
    s.arg1 = (r0);
    s.tmp_4 = msgpack_tagFormat__P4143_mk(s);
    r0 = pxsim.BufferMethods.getByte(s.arg0, s.tmp_3);
    s.tmp_4.arg0 = r0;
    s.callLocIdx = 25; s.pc = 16; return s.tmp_4;
  case 16:
    r0 = s.retval;
    s.fmt___17740 = (r0);
    s.lastBrkId = 319;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[319]) return breakpoint(s, 17, 319, r0);
  case 17:
    r0 = (s.fmt___17740 === null);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 6; continue; }
    s.lastBrkId = 320;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[320]) return breakpoint(s, 18, 320, r0);
  case 18:
    s.tmp_1 = r0 = s.arg0;
    r0 = (s.arg1 - 1);
    s.tmp_2 = r0;
    r0 = pxsim.BufferMethods.getNumber(s.tmp_1, 6, s.tmp_2);
    s.v___17749 = (r0);
    s.lastBrkId = 321;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[321]) return breakpoint(s, 19, 321, r0);
  case 19:
    r0 = (-31 <= s.v___17749);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 2; continue; }
    r0 = s.tmp_0;
    { step = 3; continue; }
  case 2:
    r0 = (s.v___17749 <= 127);
  case 3:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 322;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[322]) return breakpoint(s, 20, 322, r0);
  case 20:
    r0 = pxsim_Array__push(s.res___17733, s.v___17749);
    { step = 5; continue; }
  case 4:
    s.lastBrkId = 323;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[323]) return breakpoint(s, 21, 323, r0);
  case 21:
    r0 = null;
    { step = 11; continue; }
  case 5:
    { step = 7; continue; }
  case 6:
    s.lastBrkId = 324;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[324]) return breakpoint(s, 22, 324, r0);
  case 22:
    s.tmp_0 = r0 = s.res___17733;
    r0 = pxsim.BufferMethods.getNumber(s.arg0, s.fmt___17740, s.arg1);
    s.tmp_1 = r0;
    r0 = pxsim_Array__push(s.tmp_0, s.tmp_1);
    s.lastBrkId = 325;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[325]) return breakpoint(s, 23, 325, r0);
  case 23:
    s.tmp_0 = r0 = s.arg1;
    s.tmp_2 = pins_sizeOf__P173_mk(s);
    s.tmp_2.arg0 = s.fmt___17740;
    s.callLocIdx = 26; s.pc = 24; return s.tmp_2;
  case 24:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0 + s.tmp_1);
    s.arg1 = (r0);
  case 7:
    s.lastBrkId = 326;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[326]) return breakpoint(s, 25, 326, r0);
  case 25:
  case 8:
    s.lastBrkId = 327;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[327]) return breakpoint(s, 26, 327, r0);
  case 26:
    r0 = pxsim.BufferMethods.getByte(s.arg0, s.arg1);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 === 193);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 328;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[328]) return breakpoint(s, 27, 328, r0);
  case 27:
    r0 = (s.arg1 + 1);
    s.arg1 = (r0);
    { step = 8; continue; }
  case 9:
    { step = 1; continue; }
  case 10:
    s.lastBrkId = 329;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[329]) return breakpoint(s, 28, 329, r0);
  case 28:
    r0 = s.res___17733;
  case 11:
    return leave(s, r0)
  default: oops()
} } }
msgpack_unpackNumberArray__P181.info = {"start":2650,"length":669,"line":91,"column":4,"endLine":111,"endColumn":5,"fileName":"pxt_modules/base/buffer.ts","functionName":"unpackNumberArray","argumentNames":["buf","offset"]}

function msgpack_unpackNumberArray__P181_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: msgpack_unpackNumberArray__P181, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  res___17733: undefined,
  fmt___17740: undefined,
  v___17749: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function info_saveHighScore__P2285(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.hs___11346 = undefined;
    s.curr___11363 = undefined;
    s.lastBrkId = 1843;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1843]) return breakpoint(s, 7, 1843, r0);
  case 7:
    r0 = pxsim_numops_toBoolDecr(globals.players___4438);
    if (!r0) { step = 5; continue; }
    r0 = pxsim_pxtrt.mklocRef();
    s.hs___11346 = (r0);
    s.lastBrkId = 1844;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1844]) return breakpoint(s, 8, 1844, r0);
  case 8:
    r0 = pxsim_pxtrt_stlocRef(s.hs___11346, 0);
    s.lastBrkId = 1845;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1845]) return breakpoint(s, 9, 1845, r0);
  case 9:
    r0 = pxsim_pxtcore_mkAction(1, info_saveHighScore_inline__P11356);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.hs___11346);
    s.tmp_1 = helpers_arrayForEach__P109_mk(s);
    s.tmp_2 = helpers_arrayFilter__P110_mk(s);
    s.tmp_2.arg0 = globals.players___4438;
    s.tmp_2.arg1 = forEach_inline__P11350;
    s.callLocIdx = 754; s.pc = 11; return s.tmp_2;
  case 11:
    r0 = s.retval;
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = s.tmp_0;
    s.callLocIdx = 757; s.pc = 10; return s.tmp_1;
  case 10:
    r0 = s.retval;
    s.lastBrkId = 1846;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1846]) return breakpoint(s, 12, 1846, r0);
  case 12:
    s.tmp_0 = settings_readNumber__P1861_mk(s);
    s.tmp_0.arg0 = "high-score";
    s.callLocIdx = 758; s.pc = 13; return s.tmp_0;
  case 13:
    r0 = s.retval;
    s.curr___11363 = (r0);
    s.lastBrkId = 1847;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1847]) return breakpoint(s, 14, 1847, r0);
  case 14:
    r0 = (s.curr___11363 == null);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = pxsim_pxtrt_ldlocRef(s.hs___11346);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > s.curr___11363);
  case 2:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1848;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1848]) return breakpoint(s, 15, 1848, r0);
  case 15:
    s.tmp_3 = settings_writeNumber__P1856_mk(s);
    s.tmp_3.arg0 = "high-score";
    r0 = pxsim_pxtrt_ldlocRef(s.hs___11346);
    s.tmp_3.arg1 = r0;
    s.callLocIdx = 759; s.pc = 16; return s.tmp_3;
  case 16:
    r0 = s.retval;
  case 3:
  case 4:
  case 5:
  case 6:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
info_saveHighScore__P2285.info = {"start":6263,"length":383,"line":206,"column":4,"endLine":216,"endColumn":5,"fileName":"pxt_modules/game/info.ts","functionName":"saveHighScore","argumentNames":[]}

function info_saveHighScore__P2285_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_saveHighScore__P2285, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  hs___11346: undefined,
  curr___11363: undefined,
} }





function forEach_inline__P11350(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    s.tmp_1 = info_PlayerInfo_hasScore__P2327_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.callLocIdx = 753; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
  case 2:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = s.tmp_2;
    return leave(s, r0)
  default: oops()
} } }
forEach_inline__P11350.info = {"start":6388,"length":22,"line":210,"column":24,"endLine":210,"endColumn":46,"fileName":"pxt_modules/game/info.ts","functionName":"inline","argumentNames":["p"]}

function forEach_inline__P11350_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: forEach_inline__P11350, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function info_saveHighScore_inline__P11356(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = r0 = s.caps[0];
    s.tmp_2 = Math_max__P130_mk(s);
    r0 = pxsim_pxtrt_ldlocRef(s.caps[0]);
    s.tmp_2.arg0 = r0;
    s.tmp_3 = info_PlayerInfo_score__P2324_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.callLocIdx = 755; s.pc = 2; return s.tmp_3;
  case 2:
    r0 = s.retval;
    s.tmp_2.arg1 = r0;
    s.callLocIdx = 756; s.pc = 1; return s.tmp_2;
  case 1:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.tmp_1);
    r0 = s.tmp_1;
    return leave(s, r0)
  default: oops()
} } }
info_saveHighScore_inline__P11356.info = {"start":6437,"length":33,"line":211,"column":25,"endLine":211,"endColumn":58,"fileName":"pxt_modules/game/info.ts","functionName":"inline","argumentNames":["p"]}

function info_saveHighScore_inline__P11356_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_saveHighScore_inline__P11356, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
} }





function music_Melody_play__P1617(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, music_Melody__C1610_VT)) failedCast(r0);
    s.lastBrkId = 582;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[582]) return breakpoint(s, 1, 582, r0);
  case 1:
    s.tmp_0 = music_Melody_playCore__P4248_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.tmp_0.arg2 = false;
    s.callLocIdx = 85; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
music_Melody_play__P1617.info = {"start":9239,"length":71,"line":285,"column":8,"endLine":287,"endColumn":9,"fileName":"pxt_modules/mixer/melody.ts","functionName":"play","argumentNames":["this","volume"]}

function music_Melody_play__P1617_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: music_Melody_play__P1617, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function music_Melody_playCore__P4248(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.p___16979 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, music_Melody__C1610_VT)) failedCast(r0);
    s.lastBrkId = 571;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[571]) return breakpoint(s, 1, 571, r0);
  case 1:
    s.tmp_0 = music_Melody_stop__P1615_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 80; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 572;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[572]) return breakpoint(s, 3, 572, r0);
  case 3:
    r0 = pxsim_pxtcore_mkClassInstance(music_MelodyPlayer__C1620_VT);
    s.tmp_0 = r0;
    s.tmp_1 = music_MelodyPlayer_constructor__P1623_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = s.arg0;
    s.callLocIdx = 81; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
    r0 = (s.arg0).fields["_player"] = (s.tmp_0);
    s.p___16979 = (s.tmp_0);
    s.lastBrkId = 573;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[573]) return breakpoint(s, 5, 573, r0);
  case 5:
    s.tmp_0 = music_Melody_registerMelody__P4246_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 82; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    s.lastBrkId = 574;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[574]) return breakpoint(s, 7, 574, r0);
  case 7:
    r0 = pxsim_pxtcore_mkAction(4, music_Melody_playCore_inline__P16988);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 1, s.p___16979);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 2, s.arg1);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 3, s.arg2);
    r0 = pxsim.control.runInParallel(s.tmp_0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
music_Melody_playCore__P4248.info = {"start":7682,"length":815,"line":242,"column":8,"endLine":261,"endColumn":9,"fileName":"pxt_modules/mixer/melody.ts","functionName":"playCore","argumentNames":["this","volume","loop"]}

function music_Melody_playCore__P4248_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: music_Melody_playCore__P4248, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  p___16979: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function music_Melody_playCore_inline__P16988(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 575;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[575]) return breakpoint(s, 7, 575, r0);
  case 7:
  case 1:
    s.lastBrkId = 576;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[576]) return breakpoint(s, 8, 576, r0);
  case 8:
    r0 = s.caps[0].fields["_player"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 == s.caps[1]);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 6; continue; }
    s.lastBrkId = 577;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[577]) return breakpoint(s, 9, 577, r0);
  case 9:
    s.tmp_2 = music_MelodyPlayer_play__P1625_mk(s);
    s.tmp_2.arg0 = s.caps[1];
    s.tmp_2.arg1 = s.caps[2];
    s.callLocIdx = 83; s.pc = 10; return s.tmp_2;
  case 10:
    r0 = s.retval;
    s.lastBrkId = 578;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[578]) return breakpoint(s, 11, 578, r0);
  case 11:
    r0 = pxsim_numops_toBoolDecr(s.caps[3]);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 579;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[579]) return breakpoint(s, 12, 579, r0);
  case 12:
    r0 = s.caps[0].fields["_player"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 == s.caps[1]);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 580;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[580]) return breakpoint(s, 13, 580, r0);
  case 13:
    s.tmp_4 = music_Melody_unregisterMelody__P4247_mk(s);
    s.tmp_4.arg0 = s.caps[0];
    s.callLocIdx = 84; s.pc = 14; return s.tmp_4;
  case 14:
    r0 = s.retval;
  case 2:
  case 3:
    s.lastBrkId = 581;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[581]) return breakpoint(s, 15, 581, r0);
  case 15:
    { step = 6; continue; }
  case 4:
  case 5:
    { step = 1; continue; }
  case 6:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
music_Melody_playCore_inline__P16988.info = {"start":7885,"length":601,"line":246,"column":34,"endLine":260,"endColumn":13,"fileName":"pxt_modules/mixer/melody.ts","functionName":"inline","argumentNames":[]}

function music_Melody_playCore_inline__P16988_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: music_Melody_playCore_inline__P16988, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
} }





function MainGame_getPuzzle__P82386(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, MainGame__C82383_VT)) failedCast(r0);
    r0 = s.arg0.fields["puzzleWord"];
    return leave(s, r0)
  default: oops()
} } }
MainGame_getPuzzle__P82386.info = {"start":2490,"length":65,"line":75,"column":4,"endLine":77,"endColumn":5,"fileName":"game.ts","functionName":"getPuzzle","argumentNames":["this"]}

function MainGame_getPuzzle__P82386_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: MainGame_getPuzzle__P82386, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function game_splash__P2603(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.dialog___14328 = undefined;
    s.s___14341 = undefined;
    s.pressed___14348 = undefined;
    s.done___14349 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 2590;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2590]) return breakpoint(s, 7, 2590, r0);
  case 7:
    s.tmp_0 = console_inspect__P380_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 20;
    s.callLocIdx = 1052; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
    s.arg0 = (r0);
    s.lastBrkId = 2591;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2591]) return breakpoint(s, 9, 2591, r0);
  case 9:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    if (!r0) { step = 1; continue; }
    s.tmp_0 = console_inspect__P380_mk(s);
    s.tmp_0.arg0 = s.arg1;
    s.tmp_0.arg1 = 20;
    s.callLocIdx = 1053; s.pc = 10; return s.tmp_0;
  case 10:
    r0 = s.retval;
    { step = 2; continue; }
  case 1:
    r0 = s.arg1;
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    s.arg1 = (s.tmp_1);
    s.lastBrkId = 2592;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2592]) return breakpoint(s, 11, 2592, r0);
  case 11:
    s.tmp_0 = controller__setUserEventsEnabled__P1986_mk(s);
    s.tmp_0.arg0 = false;
    s.callLocIdx = 1054; s.pc = 12; return s.tmp_0;
  case 12:
    r0 = s.retval;
    s.lastBrkId = 2593;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2593]) return breakpoint(s, 13, 2593, r0);
  case 13:
    s.tmp_0 = game_pushScene__P2613_mk(s);
    s.callLocIdx = 1055; s.pc = 14; return s.tmp_0;
  case 14:
    r0 = s.retval;
    s.lastBrkId = 2594;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2594]) return breakpoint(s, 15, 2594, r0);
  case 15:
    s.tmp_1 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 1056; s.pc = 16; return s.tmp_1;
  case 16:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = s.tmp_0.fields["flags"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 | 2);
    s.tmp_2 = r0;
    r0 = (s.tmp_0).fields["flags"] = (s.tmp_2);
    s.lastBrkId = 2595;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2595]) return breakpoint(s, 17, 2595, r0);
  case 17:
    r0 = pxsim_pxtcore_mkClassInstance(game_SplashDialog__C2582_VT);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    if (!r0) { step = 3; continue; }
    r0 = 42;
    { step = 4; continue; }
  case 3:
    r0 = 35;
  case 4:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    s.tmp_2 = game_SplashDialog_constructor__P2589_mk(s);
    s.tmp_2.arg0 = s.tmp_0;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_2.arg1 = r0;
    s.tmp_2.arg2 = s.tmp_1;
    s.callLocIdx = 1057; s.pc = 18; return s.tmp_2;
  case 18:
    r0 = s.retval;
    s.dialog___14328 = (s.tmp_0);
    s.lastBrkId = 2596;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2596]) return breakpoint(s, 19, 2596, r0);
  case 19:
    s.tmp_0 = game_SplashDialog__C2582_v1_2_mk(s);
    s.tmp_0.arg0 = s.dialog___14328;
    s.tmp_0.arg1 = s.arg0;
    if (!checkSubtype(s.tmp_0.arg0, game_SplashDialog__C2582_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.setText;
    s.pc = 20; return s.tmp_0;
  case 20:
    r0 = s.retval;
    s.lastBrkId = 2597;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2597]) return breakpoint(s, 21, 2597, r0);
  case 21:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 2598;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2598]) return breakpoint(s, 22, 2598, r0);
  case 22:
    s.tmp_0 = game_SplashDialog_setSubtext__P2591_mk(s);
    s.tmp_0.arg0 = s.dialog___14328;
    s.tmp_0.arg1 = s.arg1;
    s.callLocIdx = 1058; s.pc = 23; return s.tmp_0;
  case 23:
    r0 = s.retval;
  case 5:
  case 6:
    s.lastBrkId = 2599;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2599]) return breakpoint(s, 24, 2599, r0);
  case 24:
    s.tmp_0 = sprites_create__P2043_mk(s);
    r0 = s.dialog___14328.fields["image"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = -1;
    s.callLocIdx = 1059; s.pc = 25; return s.tmp_0;
  case 25:
    r0 = s.retval;
    s.s___14341 = (r0);
    r0 = pxsim_pxtrt.mklocRef();
    s.pressed___14348 = (r0);
    s.lastBrkId = 2600;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2600]) return breakpoint(s, 26, 2600, r0);
  case 26:
    r0 = pxsim_pxtrt_stlocRef(s.pressed___14348, true);
    r0 = pxsim_pxtrt.mklocRef();
    s.done___14349 = (r0);
    s.lastBrkId = 2601;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2601]) return breakpoint(s, 27, 2601, r0);
  case 27:
    r0 = pxsim_pxtrt_stlocRef(s.done___14349, false);
    s.lastBrkId = 2602;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2602]) return breakpoint(s, 28, 2602, r0);
  case 28:
    r0 = pxsim_pxtcore_mkAction(3, game_splash_inline__P14351);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.dialog___14328);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 1, s.pressed___14348);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 2, s.done___14349);
    s.tmp_1 = game_onUpdate__P2628_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.callLocIdx = 1062; s.pc = 29; return s.tmp_1;
  case 29:
    r0 = s.retval;
    s.lastBrkId = 2612;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2612]) return breakpoint(s, 30, 2612, r0);
  case 30:
    r0 = pxsim_pxtcore_mkAction(1, game_splash_inline__P14374);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.done___14349);
    s.tmp_1 = pauseUntil__P365_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = undefined;
    s.callLocIdx = 1063; s.pc = 31; return s.tmp_1;
  case 31:
    r0 = s.retval;
    s.lastBrkId = 2613;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2613]) return breakpoint(s, 32, 2613, r0);
  case 32:
    s.tmp_0 = controller__setUserEventsEnabled__P1986_mk(s);
    s.tmp_0.arg0 = true;
    s.callLocIdx = 1064; s.pc = 33; return s.tmp_0;
  case 33:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_splash__P2603.info = {"start":19791,"length":1082,"line":630,"column":4,"endLine":661,"endColumn":5,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"splash","argumentNames":["title","subtitle"]}

function game_splash__P2603_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_splash__P2603, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  dialog___14328: undefined,
  s___14341: undefined,
  pressed___14348: undefined,
  done___14349: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function game_splash_inline__P14351(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.currentState___14354 = undefined;
    s.lastBrkId = 2603;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2603]) return breakpoint(s, 9, 2603, r0);
  case 9:
    s.tmp_0 = game_BaseDialog__C2554_v0_1_mk(s);
    s.tmp_0.arg0 = s.caps[0];
    if (!checkSubtype(s.tmp_0.arg0, game_BaseDialog__C2554_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.update;
    s.pc = 10; return s.tmp_0;
  case 10:
    r0 = s.retval;
    s.lastBrkId = 2604;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2604]) return breakpoint(s, 11, 2604, r0);
  case 11:
    s.tmp_0 = controller_Button__C1971_v0_1_mk(s);
    s.tmp_0.arg0 = globals.A___1905;
    if (!checkSubtype(s.tmp_0.arg0, controller_Button__C1971_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.isPressed;
    s.pc = 12; return s.tmp_0;
  case 12:
    r0 = s.retval;
    s.currentState___14354 = (r0);
    s.lastBrkId = 2605;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2605]) return breakpoint(s, 13, 2605, r0);
  case 13:
    s.tmp_0 = r0 = s.currentState___14354;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
  case 2:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2606;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2606]) return breakpoint(s, 14, 2606, r0);
  case 14:
    r0 = pxsim_pxtrt_stlocRef(s.caps[1], true);
    s.lastBrkId = 2607;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2607]) return breakpoint(s, 15, 2607, r0);
  case 15:
    s.tmp_0 = scene_setBackgroundImage__P2536_mk(s);
    s.tmp_0.arg0 = null;
    s.callLocIdx = 1060; s.pc = 16; return s.tmp_0;
  case 16:
    r0 = s.retval;
    s.lastBrkId = 2608;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2608]) return breakpoint(s, 17, 2608, r0);
  case 17:
    s.tmp_0 = game_popScene__P2614_mk(s);
    s.callLocIdx = 1061; s.pc = 18; return s.tmp_0;
  case 18:
    r0 = s.retval;
    s.lastBrkId = 2609;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2609]) return breakpoint(s, 19, 2609, r0);
  case 19:
    r0 = pxsim_pxtrt_stlocRef(s.caps[2], true);
    { step = 8; continue; }
  case 3:
    s.lastBrkId = 2610;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2610]) return breakpoint(s, 20, 2610, r0);
  case 20:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 4; continue; }
    r0 = s.tmp_0;
    { step = 5; continue; }
  case 4:
    r0 = pxsim_numops_toBoolDecr(s.currentState___14354);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
  case 5:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 6; continue; }
    s.lastBrkId = 2611;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2611]) return breakpoint(s, 21, 2611, r0);
  case 21:
    r0 = pxsim_pxtrt_stlocRef(s.caps[1], false);
  case 6:
  case 7:
  case 8:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_splash_inline__P14351.info = {"start":20375,"length":410,"line":645,"column":22,"endLine":657,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"inline","argumentNames":[]}

function game_splash_inline__P14351_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_splash_inline__P14351, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  currentState___14354: undefined,
} }





function game_splash_inline__P14374(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    r0 = pxsim_pxtrt_ldlocRef(s.caps[0]);
    return leave(s, r0)
  default: oops()
} } }
game_splash_inline__P14374.info = {"start":20807,"length":10,"line":659,"column":19,"endLine":659,"endColumn":29,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"inline","argumentNames":[]}

function game_splash_inline__P14374_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_splash_inline__P14374, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
} }





function game_SplashDialog_setSubtext__P2591(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_SplashDialog__C2582_VT)) failedCast(r0);
    s.lastBrkId = 2483;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2483]) return breakpoint(s, 1, 2483, r0);
  case 1:
    r0 = (s.arg0).fields["subtext"] = (s.arg1);
    s.lastBrkId = 2484;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2484]) return breakpoint(s, 2, 2484, r0);
  case 2:
    s.tmp_0 = game_SplashDialog_updateFont__P4540_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1013; s.pc = 3; return s.tmp_0;
  case 3:
    r0 = s.retval;
    s.lastBrkId = 2485;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2485]) return breakpoint(s, 4, 2485, r0);
  case 4:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_String_.length(s.arg1);
    s.tmp_4 = r0;
    s.tmp_6 = if_charWidth_1_mk(s);
    r0 = s.arg0.fields["font"];
    s.tmp_6.arg0 = r0;
    if (!s.tmp_6.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_6.arg0, "charWidth");
    } else {
      s.tmp_6.fn = s.tmp_6.arg0.vtable.iface["charWidth"];
      if (s.tmp_6.fn == null) { s.retval = s.tmp_6.arg0.fields["charWidth"]; }
      else if (!s.tmp_6.fn.isGetter) { s.retval = bind(s.tmp_6); }
     else { s.callLocIdx = 1014; s.pc = 5; return s.tmp_6; }
    }
  case 5:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = (s.tmp_4 * s.tmp_5);
    s.tmp_3 = r0;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_7 = r0;
    r0 = (s.tmp_3 - s.tmp_7);
    s.tmp_2 = r0;
    r0 = s.arg0.fields["unit"];
    s.tmp_9 = r0;
    r0 = (s.tmp_9 << 1);
    s.tmp_8 = r0;
    r0 = (s.tmp_2 + s.tmp_8);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["maxSubOffset"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_SplashDialog_setSubtext__P2591.info = {"start":9147,"length":200,"line":287,"column":8,"endLine":291,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"setSubtext","argumentNames":["this","sub"]}

function game_SplashDialog_setSubtext__P2591_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_SplashDialog_setSubtext__P2591, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function game_SplashDialog_updateFont__P4540(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_SplashDialog__C2582_VT)) failedCast(r0);
    s.lastBrkId = 2477;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2477]) return breakpoint(s, 5, 2477, r0);
  case 5:
    r0 = s.arg0.fields["text"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = pxsim_String_.mkEmpty();
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = s.arg0.fields["subtext"];
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBool(s.tmp_2);
    if (!r0) { step = 3; continue; }
    r0 = s.tmp_2;
    { step = 4; continue; }
  case 3:
    r0 = pxsim_String_.mkEmpty();
  case 4:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    s.tmp_4 = game_BaseDialog_setFont__P4537_mk(s);
    s.tmp_4.arg0 = s.arg0;
    s.tmp_5 = image_getFontForText__P1772_mk(s);
    if ((s.tmp_1) && (s.tmp_1).vtable) {
    setupResume(s, 8);
    pxsim_String__stringConv(s.tmp_1);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_1) + ""; }
  case 8:
    r0 = s.retval;
    s.tmp_6 = r0;
    if ((s.tmp_3) && (s.tmp_3).vtable) {
    setupResume(s, 9);
    pxsim_String__stringConv(s.tmp_3);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_3) + ""; }
  case 9:
    r0 = s.retval;
    s.tmp_7 = r0;
    r0 = pxsim_String__concat(s.tmp_6, s.tmp_7);
    s.tmp_5.arg0 = r0;
    s.callLocIdx = 1009; s.pc = 7; return s.tmp_5;
  case 7:
    r0 = s.retval;
    s.tmp_4.arg1 = r0;
    s.callLocIdx = 1010; s.pc = 6; return s.tmp_4;
  case 6:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_SplashDialog_updateFont__P4540.info = {"start":8756,"length":122,"line":275,"column":8,"endLine":277,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"updateFont","argumentNames":["this"]}

function game_SplashDialog_updateFont__P4540_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_SplashDialog_updateFont__P4540, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  arg0: undefined,
} }





function game_BaseDialog_setFont__P4537(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_BaseDialog__C2554_VT)) failedCast(r0);
    s.lastBrkId = 2425;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2425]) return breakpoint(s, 1, 2425, r0);
  case 1:
    r0 = (s.arg0).fields["font"] = (s.arg1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_BaseDialog_setFont__P4537.info = {"start":5393,"length":77,"line":177,"column":8,"endLine":179,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"setFont","argumentNames":["this","font"]}

function game_BaseDialog_setFont__P4537_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_BaseDialog_setFont__P4537, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
} }





function game_SplashDialog_setText__P2590(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_SplashDialog__C2582_VT)) failedCast(r0);
    s.lastBrkId = 2478;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2478]) return breakpoint(s, 1, 2478, r0);
  case 1:
    r0 = (s.arg0).fields["text"] = (s.arg1);
    s.lastBrkId = 2479;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2479]) return breakpoint(s, 2, 2479, r0);
  case 2:
    s.tmp_0 = game_SplashDialog_updateFont__P4540_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1011; s.pc = 3; return s.tmp_0;
  case 3:
    r0 = s.retval;
    s.lastBrkId = 2480;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2480]) return breakpoint(s, 4, 2480, r0);
  case 4:
    r0 = (s.arg0).fields["offset"] = (0);
    s.lastBrkId = 2481;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2481]) return breakpoint(s, 5, 2481, r0);
  case 5:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_String_.length(s.arg1);
    s.tmp_4 = r0;
    s.tmp_6 = if_charWidth_1_mk(s);
    r0 = s.arg0.fields["font"];
    s.tmp_6.arg0 = r0;
    if (!s.tmp_6.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_6.arg0, "charWidth");
    } else {
      s.tmp_6.fn = s.tmp_6.arg0.vtable.iface["charWidth"];
      if (s.tmp_6.fn == null) { s.retval = s.tmp_6.arg0.fields["charWidth"]; }
      else if (!s.tmp_6.fn.isGetter) { s.retval = bind(s.tmp_6); }
     else { s.callLocIdx = 1012; s.pc = 6; return s.tmp_6; }
    }
  case 6:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = (s.tmp_4 * s.tmp_5);
    s.tmp_3 = r0;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_7 = r0;
    r0 = (s.tmp_3 - s.tmp_7);
    s.tmp_2 = r0;
    r0 = s.arg0.fields["unit"];
    s.tmp_9 = r0;
    r0 = (s.tmp_9 << 1);
    s.tmp_8 = r0;
    r0 = (s.tmp_2 + s.tmp_8);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["maxOffset"] = (s.tmp_1);
    s.lastBrkId = 2482;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2482]) return breakpoint(s, 7, 2482, r0);
  case 7:
    r0 = (s.arg0).fields["timer"] = (2);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_SplashDialog_setText__P2590.info = {"start":8888,"length":249,"line":279,"column":8,"endLine":285,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"setText","argumentNames":["this","text"]}

function game_SplashDialog_setText__P2590_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_SplashDialog_setText__P2590, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function game_SplashDialog_constructor__P2589(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_SplashDialog__C2582_VT)) failedCast(r0);
    s.lastBrkId = 2473;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2473]) return breakpoint(s, 1, 2473, r0);
  case 1:
    s.tmp_0 = game_BaseDialog_constructor__P2566_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.tmp_0.arg2 = s.arg2;
    s.tmp_1 = game_defaultSplashFrame__P4543_mk(s);
    s.callLocIdx = 1007; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    s.tmp_0.arg3 = r0;
    s.tmp_0.arg4 = undefined;
    s.tmp_0.arg5 = undefined;
    s.callLocIdx = 1008; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 2474;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2474]) return breakpoint(s, 4, 2474, r0);
  case 4:
    r0 = (s.arg0).fields["maxOffset"] = (-1);
    s.lastBrkId = 2475;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2475]) return breakpoint(s, 5, 2475, r0);
  case 5:
    r0 = (s.arg0).fields["maxSubOffset"] = (-1);
    s.lastBrkId = 2476;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2476]) return breakpoint(s, 6, 2476, r0);
  case 6:
    r0 = (s.arg0).fields["textColor"] = (1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_SplashDialog_constructor__P2589.info = {"start":8536,"length":210,"line":268,"column":8,"endLine":273,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"inline","argumentNames":["this","width","height"]}

function game_SplashDialog_constructor__P2589_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_SplashDialog_constructor__P2589, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function game_BaseDialog_update__P2567(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_BaseDialog__C2554_VT)) failedCast(r0);
    s.lastBrkId = 2358;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2358]) return breakpoint(s, 1, 2358, r0);
  case 1:
    s.tmp_0 = game_BaseDialog_clearInterior__P4531_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 957; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 2359;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2359]) return breakpoint(s, 3, 2359, r0);
  case 3:
    s.tmp_0 = game_BaseDialog__C2554_v2_1_mk(s);
    s.tmp_0.arg0 = s.arg0;
    if (!checkSubtype(s.tmp_0.arg0, game_BaseDialog__C2554_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.drawTextCore;
    s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.lastBrkId = 2360;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2360]) return breakpoint(s, 5, 2360, r0);
  case 5:
    s.tmp_0 = game_BaseDialog_drawCursorRow__P2570_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 958; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_BaseDialog_update__P2567.info = {"start":1570,"length":121,"line":61,"column":8,"endLine":65,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"update","argumentNames":["this"]}

function game_BaseDialog_update__P2567_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_BaseDialog_update__P2567, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function game_BaseDialog_drawTextCore__P2569(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_BaseDialog__C2554_VT)) failedCast(r0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_BaseDialog_drawTextCore__P2569.info = {"start":1788,"length":65,"line":71,"column":8,"endLine":73,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"drawTextCore","argumentNames":["this"]}

function game_BaseDialog_drawTextCore__P2569_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_BaseDialog_drawTextCore__P2569, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function sprites_create__P2043(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.scene___14384 = undefined;
    s.sprite___14387 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 1182;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1182]) return breakpoint(s, 1, 1182, r0);
  case 1:
    s.tmp_0 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 268; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.scene___14384 = (r0);
    s.lastBrkId = 1183;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1183]) return breakpoint(s, 3, 1183, r0);
  case 3:
    r0 = pxsim_pxtcore_mkClassInstance(Sprite__C2092_VT);
    s.tmp_0 = r0;
    s.tmp_1 = Sprite_constructor__P2129_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = s.arg0;
    s.callLocIdx = 269; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
    s.sprite___14387 = (s.tmp_0);
    s.lastBrkId = 1184;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1184]) return breakpoint(s, 5, 1184, r0);
  case 5:
    s.tmp_0 = Sprite_setKind__P2147_mk(s);
    s.tmp_0.arg0 = s.sprite___14387;
    s.tmp_0.arg1 = s.arg1;
    s.callLocIdx = 270; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    s.lastBrkId = 1185;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1185]) return breakpoint(s, 7, 1185, r0);
  case 7:
    s.tmp_0 = PhysicsEngine__C2238_v0_2_mk(s);
    r0 = s.scene___14384.fields["physicsEngine"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = s.sprite___14387;
    if (!checkSubtype(s.tmp_0.arg0, PhysicsEngine__C2238_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.addSprite;
    s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
    s.lastBrkId = 1186;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1186]) return breakpoint(s, 9, 1186, r0);
  case 9:
    r0 = pxsim_pxtcore_mkAction(1, forEach_inline__P14402);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg1);
    r0 = pxsim_pxtcore_mkAction(1, sprites_create_inline__P14409);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_1, 0, s.sprite___14387);
    s.tmp_2 = helpers_arrayForEach__P109_mk(s);
    s.tmp_3 = helpers_arrayFilter__P110_mk(s);
    r0 = s.scene___14384.fields["createdHandlers"];
    s.tmp_3.arg0 = r0;
    s.tmp_3.arg1 = s.tmp_0;
    s.callLocIdx = 271; s.pc = 11; return s.tmp_3;
  case 11:
    r0 = s.retval;
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = s.tmp_1;
    s.callLocIdx = 273; s.pc = 10; return s.tmp_2;
  case 10:
    r0 = s.retval;
    s.lastBrkId = 1187;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1187]) return breakpoint(s, 12, 1187, r0);
  case 12:
    r0 = s.sprite___14387;
    return leave(s, r0)
  default: oops()
} } }
sprites_create__P2043.info = {"start":890,"length":400,"line":35,"column":4,"endLine":47,"endColumn":5,"fileName":"pxt_modules/game/sprites.ts","functionName":"create","argumentNames":["img","kind"]}

function sprites_create__P2043_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_create__P2043, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  scene___14384: undefined,
  sprite___14387: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function forEach_inline__P14402(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0.fields["kind"];
    s.tmp_0 = r0;
    r0 = (s.tmp_0 == s.caps[0]);
    return leave(s, r0)
  default: oops()
} } }
forEach_inline__P14402.info = {"start":1195,"length":19,"line":43,"column":20,"endLine":43,"endColumn":39,"fileName":"pxt_modules/game/sprites.ts","functionName":"inline","argumentNames":["h"]}

function forEach_inline__P14402_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: forEach_inline__P14402, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function sprites_create_inline__P14409(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = if_handler_2_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.caps[0];
    if (!s.tmp_0.arg0.vtable.iface) {
      setupLambda(s.tmp_0, pxsim_pxtrt.mapGetByString(s.tmp_0.arg0, "handler"), 2);
      s.callLocIdx = 272; s.pc = 1; return s.tmp_0;
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["handler"];
      if (s.tmp_0.fn == null) { setupLambda(s.tmp_0, s.tmp_0.arg0.fields["handler"], 2); s.callLocIdx = 272; s.pc = 1; return s.tmp_0; }
      else if (s.tmp_0.fn.isGetter) { s.tmp_0.stage2Call = true; s.callLocIdx = 272; s.pc = 1; return s.tmp_0;; }
     else { s.callLocIdx = 272; s.pc = 1; return s.tmp_0; }
    }
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
sprites_create_inline__P14409.info = {"start":1237,"length":22,"line":44,"column":21,"endLine":44,"endColumn":43,"fileName":"pxt_modules/game/sprites.ts","functionName":"inline","argumentNames":["h"]}

function sprites_create_inline__P14409_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_create_inline__P14409, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function PhysicsEngine_addSprite__P2240(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, PhysicsEngine__C2238_VT)) failedCast(r0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
PhysicsEngine_addSprite__P2240.info = {"start":124,"length":29,"line":8,"column":4,"endLine":8,"endColumn":33,"fileName":"pxt_modules/game/physics.ts","functionName":"addSprite","argumentNames":["this","sprite"]}

function PhysicsEngine_addSprite__P2240_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: PhysicsEngine_addSprite__P2240, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
} }





function Sprite_setKind__P2147(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.spritesByKind___16458 = undefined;
    s.overlapMap___16487 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1271;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1271]) return breakpoint(s, 16, 1271, r0);
  case 16:
    r0 = (s.arg1 == undefined);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = s.arg0.fields["_kind"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 === s.arg1);
  case 2:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1272;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1272]) return breakpoint(s, 17, 1272, r0);
  case 17:
    { step = 15; continue; }
  case 3:
  case 4:
    s.lastBrkId = 1273;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1273]) return breakpoint(s, 18, 1273, r0);
  case 18:
    s.tmp_3 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 340; s.pc = 19; return s.tmp_3;
  case 19:
    r0 = s.retval;
    r0 = r0.fields["spritesByKind"];
    s.spritesByKind___16458 = (r0);
    s.lastBrkId = 1274;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1274]) return breakpoint(s, 20, 1274, r0);
  case 20:
    r0 = s.arg0.fields["_kind"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 >= 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 5; continue; }
    r0 = s.tmp_0;
    { step = 6; continue; }
  case 5:
    r0 = s.arg0.fields["_kind"];
    s.tmp_2 = r0;
    r0 = pxsim_pxtrt.mapGetGeneric(s.spritesByKind___16458, s.tmp_2);
  case 6:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 1275;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1275]) return breakpoint(s, 21, 1275, r0);
  case 21:
    s.tmp_4 = sprites_SpriteSet_remove__P2197_mk(s);
    r0 = s.arg0.fields["_kind"];
    s.tmp_5 = r0;
    r0 = pxsim_pxtrt.mapGetGeneric(s.spritesByKind___16458, s.tmp_5);
    s.tmp_4.arg0 = r0;
    s.tmp_4.arg1 = s.arg0;
    s.callLocIdx = 341; s.pc = 22; return s.tmp_4;
  case 22:
    r0 = s.retval;
  case 7:
  case 8:
    s.lastBrkId = 1276;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1276]) return breakpoint(s, 23, 1276, r0);
  case 23:
    r0 = (s.arg1 >= 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 11; continue; }
    s.lastBrkId = 1277;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1277]) return breakpoint(s, 24, 1277, r0);
  case 24:
    r0 = pxsim_pxtrt.mapGetGeneric(s.spritesByKind___16458, s.arg1);
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 1278;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1278]) return breakpoint(s, 25, 1278, r0);
  case 25:
    r0 = pxsim_pxtcore_mkClassInstance(sprites_SpriteSet__C2190_VT);
    s.tmp_4 = r0;
    s.tmp_5 = sprites_SpriteSet_constructor__P2192_mk(s);
    s.tmp_5.arg0 = s.tmp_4;
    s.callLocIdx = 342; s.pc = 26; return s.tmp_5;
  case 26:
    r0 = s.retval;
    r0 = pxsim_pxtrt.mapSetGeneric(s.spritesByKind___16458, s.arg1, s.tmp_4);
  case 9:
  case 10:
    s.lastBrkId = 1279;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1279]) return breakpoint(s, 27, 1279, r0);
  case 27:
    s.tmp_0 = sprites_SpriteSet_add__P2195_mk(s);
    r0 = pxsim_pxtrt.mapGetGeneric(s.spritesByKind___16458, s.arg1);
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = s.arg0;
    s.callLocIdx = 343; s.pc = 28; return s.tmp_0;
  case 28:
    r0 = s.retval;
  case 11:
  case 12:
    s.lastBrkId = 1280;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1280]) return breakpoint(s, 29, 1280, r0);
  case 29:
    s.tmp_0 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 344; s.pc = 30; return s.tmp_0;
  case 30:
    r0 = s.retval;
    r0 = r0.fields["overlapMap"];
    s.overlapMap___16487 = (r0);
    s.lastBrkId = 1281;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1281]) return breakpoint(s, 31, 1281, r0);
  case 31:
    r0 = pxsim_pxtrt.mapGetGeneric(s.overlapMap___16487, s.arg1);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 13; continue; }
    s.lastBrkId = 1282;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1282]) return breakpoint(s, 32, 1282, r0);
  case 32:
    s.tmp_3 = r0 = s.overlapMap___16487;
    s.tmp_4 = r0 = s.arg1;
    r0 = pxsim_Array__mk();
    s.tmp_5 = r0;
    r0 = pxsim_pxtrt.mapSetGeneric(s.tmp_3, s.tmp_4, s.tmp_5);
  case 13:
  case 14:
    s.lastBrkId = 1283;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1283]) return breakpoint(s, 33, 1283, r0);
  case 33:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_pxtrt.mapGetGeneric(s.overlapMap___16487, s.arg1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_kindsOverlappedWith"] = (s.tmp_1);
    s.lastBrkId = 1284;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1284]) return breakpoint(s, 34, 1284, r0);
  case 34:
    r0 = (s.arg0).fields["_kind"] = (s.arg1);
  case 15:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite_setKind__P2147.info = {"start":11167,"length":663,"line":404,"column":4,"endLine":424,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"setKind","argumentNames":["this","value"]}

function Sprite_setKind__P2147_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_setKind__P2147, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  spritesByKind___16458: undefined,
  overlapMap___16487: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function sprites_SpriteSet_remove__P2197(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.i___16283 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_SpriteSet__C2190_VT)) failedCast(r0);
    s.lastBrkId = 1467;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1467]) return breakpoint(s, 4, 1467, r0);
  case 4:
    r0 = s.arg0.fields["_sprites"];
    s.tmp_0 = r0;
    r0 = pxsim_Array_.indexOf(s.tmp_0, s.arg1, undefined);
    s.i___16283 = (r0);
    s.lastBrkId = 1468;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1468]) return breakpoint(s, 5, 1468, r0);
  case 5:
    r0 = (s.i___16283 > -1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1469;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1469]) return breakpoint(s, 6, 1469, r0);
  case 6:
    s.tmp_1 = helpers_arraySplice__P100_mk(s);
    r0 = s.arg0.fields["_sprites"];
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = s.i___16283;
    s.tmp_1.arg2 = 1;
    s.callLocIdx = 488; s.pc = 7; return s.tmp_1;
  case 7:
    r0 = s.retval;
    s.lastBrkId = 1470;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1470]) return breakpoint(s, 8, 1470, r0);
  case 8:
    r0 = true;
    { step = 3; continue; }
  case 1:
  case 2:
    s.lastBrkId = 1471;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1471]) return breakpoint(s, 9, 1471, r0);
  case 9:
    r0 = false;
  case 3:
    return leave(s, r0)
  default: oops()
} } }
sprites_SpriteSet_remove__P2197.info = {"start":1827,"length":235,"line":66,"column":8,"endLine":73,"endColumn":9,"fileName":"pxt_modules/game/spriteset.ts","functionName":"remove","argumentNames":["this","sprite"]}

function sprites_SpriteSet_remove__P2197_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_SpriteSet_remove__P2197, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  i___16283: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function sprites_SpriteSet_add__P2195(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_SpriteSet__C2190_VT)) failedCast(r0);
    s.lastBrkId = 1461;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1461]) return breakpoint(s, 6, 1461, r0);
  case 6:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1462;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1462]) return breakpoint(s, 7, 1462, r0);
  case 7:
    r0 = false;
    { step = 5; continue; }
  case 1:
  case 2:
    s.lastBrkId = 1463;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1463]) return breakpoint(s, 8, 1463, r0);
  case 8:
    s.tmp_3 = sprites_SpriteSet_contains__P2198_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.tmp_3.arg1 = s.arg1;
    s.callLocIdx = 487; s.pc = 9; return s.tmp_3;
  case 9:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1464;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1464]) return breakpoint(s, 10, 1464, r0);
  case 10:
    r0 = false;
    { step = 5; continue; }
  case 3:
  case 4:
    s.lastBrkId = 1465;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1465]) return breakpoint(s, 11, 1465, r0);
  case 11:
    r0 = s.arg0.fields["_sprites"];
    s.tmp_4 = r0;
    r0 = pxsim_Array__push(s.tmp_4, s.arg1);
    s.lastBrkId = 1466;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1466]) return breakpoint(s, 12, 1466, r0);
  case 12:
    r0 = true;
  case 5:
    return leave(s, r0)
  default: oops()
} } }
sprites_SpriteSet_add__P2195.info = {"start":1041,"length":263,"line":41,"column":8,"endLine":49,"endColumn":9,"fileName":"pxt_modules/game/spriteset.ts","functionName":"add","argumentNames":["this","sprite"]}

function sprites_SpriteSet_add__P2195_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_SpriteSet_add__P2195, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function sprites_SpriteSet_contains__P2198(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_SpriteSet__C2190_VT)) failedCast(r0);
    s.lastBrkId = 1472;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1472]) return breakpoint(s, 1, 1472, r0);
  case 1:
    r0 = s.arg0.fields["_sprites"];
    s.tmp_1 = r0;
    r0 = pxsim_Array_.indexOf(s.tmp_1, s.arg1, undefined);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 > -1);
    return leave(s, r0)
  default: oops()
} } }
sprites_SpriteSet_contains__P2198.info = {"start":2172,"length":100,"line":79,"column":8,"endLine":81,"endColumn":9,"fileName":"pxt_modules/game/spriteset.ts","functionName":"contains","argumentNames":["this","sprite"]}

function sprites_SpriteSet_contains__P2198_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_SpriteSet_contains__P2198, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function sprites_SpriteSet_constructor__P2192(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_SpriteSet__C2190_VT)) failedCast(r0);
    s.lastBrkId = 1458;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1458]) return breakpoint(s, 1, 1458, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_sprites"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
sprites_SpriteSet_constructor__P2192.info = {"start":485,"length":57,"line":19,"column":8,"endLine":21,"endColumn":9,"fileName":"pxt_modules/game/spriteset.ts","functionName":"inline","argumentNames":["this"]}

function sprites_SpriteSet_constructor__P2192_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_SpriteSet_constructor__P2192, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function Sprite_constructor__P2129(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1212;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1212]) return breakpoint(s, 1, 1212, r0);
  case 1:
    s.tmp_0 = sprites_BaseSprite_constructor__P1888_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 0;
    s.callLocIdx = 294; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 1213;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1213]) return breakpoint(s, 3, 1213, r0);
  case 3:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Fx8__P149_mk(s);
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_4 = r0;
    r0 = pxsim_ImageMethods.width(s.arg1);
    s.tmp_5 = r0;
    r0 = (s.tmp_4 - s.tmp_5);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 >> 1);
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 295; s.pc = 4; return s.tmp_2;
  case 4:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_x"] = (s.tmp_1);
    s.lastBrkId = 1214;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1214]) return breakpoint(s, 5, 1214, r0);
  case 5:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Fx8__P149_mk(s);
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_4 = r0;
    r0 = pxsim_ImageMethods.height(s.arg1);
    s.tmp_5 = r0;
    r0 = (s.tmp_4 - s.tmp_5);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 >> 1);
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 296; s.pc = 6; return s.tmp_2;
  case 6:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_y"] = (s.tmp_1);
    s.lastBrkId = 1215;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1215]) return breakpoint(s, 7, 1215, r0);
  case 7:
    r0 = s.arg0.fields["_x"];
    s.tmp_0 = r0;
    r0 = (s.arg0).fields["_lastX"] = (s.tmp_0);
    s.lastBrkId = 1216;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1216]) return breakpoint(s, 8, 1216, r0);
  case 8:
    r0 = s.arg0.fields["_y"];
    s.tmp_0 = r0;
    r0 = (s.arg0).fields["_lastY"] = (s.tmp_0);
    s.lastBrkId = 1217;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1217]) return breakpoint(s, 9, 1217, r0);
  case 9:
    s.tmp_0 = Sprite_vx__P2106_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 0;
    s.callLocIdx = 297; s.pc = 10; return s.tmp_0;
  case 10:
    r0 = s.retval;
    s.lastBrkId = 1218;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1218]) return breakpoint(s, 11, 1218, r0);
  case 11:
    s.tmp_0 = Sprite_vy__P2108_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 0;
    s.callLocIdx = 298; s.pc = 12; return s.tmp_0;
  case 12:
    r0 = s.retval;
    s.lastBrkId = 1219;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1219]) return breakpoint(s, 13, 1219, r0);
  case 13:
    s.tmp_0 = Sprite_ax__P2110_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 0;
    s.callLocIdx = 299; s.pc = 14; return s.tmp_0;
  case 14:
    r0 = s.retval;
    s.lastBrkId = 1220;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1220]) return breakpoint(s, 15, 1220, r0);
  case 15:
    s.tmp_0 = Sprite_ay__P2112_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 0;
    s.callLocIdx = 300; s.pc = 16; return s.tmp_0;
  case 16:
    r0 = s.retval;
    s.lastBrkId = 1221;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1221]) return breakpoint(s, 17, 1221, r0);
  case 17:
    s.tmp_0 = Sprite_fx__P2114_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 0;
    s.callLocIdx = 301; s.pc = 18; return s.tmp_0;
  case 18:
    r0 = s.retval;
    s.lastBrkId = 1222;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1222]) return breakpoint(s, 19, 1222, r0);
  case 19:
    s.tmp_0 = Sprite_fy__P2116_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 0;
    s.callLocIdx = 302; s.pc = 20; return s.tmp_0;
  case 20:
    r0 = s.retval;
    s.lastBrkId = 1223;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1223]) return breakpoint(s, 21, 1223, r0);
  case 21:
    r0 = (s.arg0).fields["flags"] = (0);
    s.lastBrkId = 1224;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1224]) return breakpoint(s, 22, 1224, r0);
  case 22:
    s.tmp_0 = Sprite_setImage__P2132_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.callLocIdx = 303; s.pc = 23; return s.tmp_0;
  case 23:
    r0 = s.retval;
    s.lastBrkId = 1225;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1225]) return breakpoint(s, 24, 1225, r0);
  case 24:
    s.tmp_0 = Sprite_setKind__P2147_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = -1;
    s.callLocIdx = 304; s.pc = 25; return s.tmp_0;
  case 25:
    r0 = s.retval;
    s.lastBrkId = 1226;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1226]) return breakpoint(s, 26, 1226, r0);
  case 26:
    r0 = (s.arg0).fields["layer"] = (1);
    s.lastBrkId = 1227;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1227]) return breakpoint(s, 27, 1227, r0);
  case 27:
    r0 = (s.arg0).fields["lifespan"] = (undefined);
    s.lastBrkId = 1228;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1228]) return breakpoint(s, 28, 1228, r0);
  case 28:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_overlappers"] = (s.tmp_1);
    s.lastBrkId = 1229;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1229]) return breakpoint(s, 29, 1229, r0);
  case 29:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_obstacles"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite_constructor__P2129.info = {"start":5445,"length":618,"line":208,"column":4,"endLine":228,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"inline","argumentNames":["this","img"]}

function Sprite_constructor__P2129_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_constructor__P2129, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Sprite_setImage__P2132(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1231;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1231]) return breakpoint(s, 4, 1231, r0);
  case 4:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1232;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1232]) return breakpoint(s, 5, 1232, r0);
  case 5:
    { step = 3; continue; }
  case 1:
  case 2:
    s.lastBrkId = 1233;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1233]) return breakpoint(s, 6, 1233, r0);
  case 6:
    r0 = (s.arg0).fields["_image"] = (s.arg1);
    s.lastBrkId = 1234;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1234]) return breakpoint(s, 7, 1234, r0);
  case 7:
    s.tmp_0 = Sprite_setHitbox__P2133_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 305; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
  case 3:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite_setImage__P2132.info = {"start":7092,"length":133,"line":258,"column":4,"endLine":262,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"setImage","argumentNames":["this","img"]}

function Sprite_setImage__P2132_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_setImage__P2132, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Sprite_setHitbox__P2133(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.newHitBox___14482 = undefined;
    s.oMinX___14496 = undefined;
    s.oMinY___14500 = undefined;
    s.oMaxX___14504 = undefined;
    s.oMaxY___14511 = undefined;
    s.nMinX___14518 = undefined;
    s.nMinY___14521 = undefined;
    s.nMaxX___14524 = undefined;
    s.nMaxY___14530 = undefined;
    s.xDiff___14536 = undefined;
    s.yDiff___14547 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1235;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1235]) return breakpoint(s, 10, 1235, r0);
  case 10:
    s.tmp_0 = game_calculateHitBox__P2002_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 306; s.pc = 11; return s.tmp_0;
  case 11:
    r0 = s.retval;
    s.newHitBox___14482 = (r0);
    s.lastBrkId = 1236;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1236]) return breakpoint(s, 12, 1236, r0);
  case 12:
    r0 = s.arg0.fields["_hitbox"];
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    s.tmp_3 = game_Hitbox_isValid__P2001_mk(s);
    r0 = s.arg0.fields["_hitbox"];
    s.tmp_3.arg0 = r0;
    s.callLocIdx = 307; s.pc = 13; return s.tmp_3;
  case 13:
    r0 = s.retval;
  case 2:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1237;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1237]) return breakpoint(s, 14, 1237, r0);
  case 14:
    r0 = (s.arg0).fields["_hitbox"] = (s.newHitBox___14482);
    s.lastBrkId = 1238;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1238]) return breakpoint(s, 15, 1238, r0);
  case 15:
    { step = 9; continue; }
  case 3:
  case 4:
    s.lastBrkId = 1239;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1239]) return breakpoint(s, 16, 1239, r0);
  case 16:
    r0 = s.arg0.fields["_hitbox"];
    r0 = r0.fields["ox"];
    s.oMinX___14496 = (r0);
    s.lastBrkId = 1240;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1240]) return breakpoint(s, 17, 1240, r0);
  case 17:
    r0 = s.arg0.fields["_hitbox"];
    r0 = r0.fields["oy"];
    s.oMinY___14500 = (r0);
    s.lastBrkId = 1241;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1241]) return breakpoint(s, 18, 1241, r0);
  case 18:
    s.tmp_0 = Fx_add__P157_mk(s);
    s.tmp_0.arg0 = s.oMinX___14496;
    r0 = s.arg0.fields["_hitbox"];
    r0 = r0.fields["width"];
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 308; s.pc = 19; return s.tmp_0;
  case 19:
    r0 = s.retval;
    s.oMaxX___14504 = (r0);
    s.lastBrkId = 1242;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1242]) return breakpoint(s, 20, 1242, r0);
  case 20:
    s.tmp_0 = Fx_add__P157_mk(s);
    s.tmp_0.arg0 = s.oMinY___14500;
    r0 = s.arg0.fields["_hitbox"];
    r0 = r0.fields["height"];
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 309; s.pc = 21; return s.tmp_0;
  case 21:
    r0 = s.retval;
    s.oMaxY___14511 = (r0);
    s.lastBrkId = 1243;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1243]) return breakpoint(s, 22, 1243, r0);
  case 22:
    r0 = s.newHitBox___14482.fields["ox"];
    s.nMinX___14518 = (r0);
    s.lastBrkId = 1244;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1244]) return breakpoint(s, 23, 1244, r0);
  case 23:
    r0 = s.newHitBox___14482.fields["oy"];
    s.nMinY___14521 = (r0);
    s.lastBrkId = 1245;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1245]) return breakpoint(s, 24, 1245, r0);
  case 24:
    s.tmp_0 = Fx_add__P157_mk(s);
    s.tmp_0.arg0 = s.nMinX___14518;
    r0 = s.newHitBox___14482.fields["width"];
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 310; s.pc = 25; return s.tmp_0;
  case 25:
    r0 = s.retval;
    s.nMaxX___14524 = (r0);
    s.lastBrkId = 1246;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1246]) return breakpoint(s, 26, 1246, r0);
  case 26:
    s.tmp_0 = Fx_add__P157_mk(s);
    s.tmp_0.arg0 = s.nMinY___14521;
    r0 = s.newHitBox___14482.fields["height"];
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 311; s.pc = 27; return s.tmp_0;
  case 27:
    r0 = s.retval;
    s.nMaxY___14530 = (r0);
    s.lastBrkId = 1247;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1247]) return breakpoint(s, 28, 1247, r0);
  case 28:
    s.tmp_0 = Fx_add__P157_mk(s);
    s.tmp_1 = Fx_abs__P165_mk(s);
    s.tmp_2 = Fx_sub__P159_mk(s);
    s.tmp_2.arg0 = s.oMinX___14496;
    s.tmp_2.arg1 = s.nMinX___14518;
    s.callLocIdx = 312; s.pc = 31; return s.tmp_2;
  case 31:
    r0 = s.retval;
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 313; s.pc = 30; return s.tmp_1;
  case 30:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.tmp_3 = Fx_abs__P165_mk(s);
    s.tmp_4 = Fx_sub__P159_mk(s);
    s.tmp_4.arg0 = s.oMaxX___14504;
    s.tmp_4.arg1 = s.nMaxX___14524;
    s.callLocIdx = 314; s.pc = 33; return s.tmp_4;
  case 33:
    r0 = s.retval;
    s.tmp_3.arg0 = r0;
    s.callLocIdx = 315; s.pc = 32; return s.tmp_3;
  case 32:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 316; s.pc = 29; return s.tmp_0;
  case 29:
    r0 = s.retval;
    s.xDiff___14536 = (r0);
    s.lastBrkId = 1248;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1248]) return breakpoint(s, 34, 1248, r0);
  case 34:
    s.tmp_0 = Fx_add__P157_mk(s);
    s.tmp_1 = Fx_abs__P165_mk(s);
    s.tmp_2 = Fx_sub__P159_mk(s);
    s.tmp_2.arg0 = s.oMinY___14500;
    s.tmp_2.arg1 = s.nMinY___14521;
    s.callLocIdx = 317; s.pc = 37; return s.tmp_2;
  case 37:
    r0 = s.retval;
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 318; s.pc = 36; return s.tmp_1;
  case 36:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.tmp_3 = Fx_abs__P165_mk(s);
    s.tmp_4 = Fx_sub__P159_mk(s);
    s.tmp_4.arg0 = s.oMaxY___14511;
    s.tmp_4.arg1 = s.nMaxY___14530;
    s.callLocIdx = 319; s.pc = 39; return s.tmp_4;
  case 39:
    r0 = s.retval;
    s.tmp_3.arg0 = r0;
    s.callLocIdx = 320; s.pc = 38; return s.tmp_3;
  case 38:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 321; s.pc = 35; return s.tmp_0;
  case 35:
    r0 = s.retval;
    s.yDiff___14547 = (r0);
    s.lastBrkId = 1249;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1249]) return breakpoint(s, 40, 1249, r0);
  case 40:
    r0 = (s.arg0).fields["_hitbox"] = (s.newHitBox___14482);
    s.lastBrkId = 1250;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1250]) return breakpoint(s, 41, 1250, r0);
  case 41:
    r0 = (s.xDiff___14536 <= 512);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 1251;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1251]) return breakpoint(s, 42, 1251, r0);
  case 42:
    r0 = s.arg0.fields["_hitbox"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1).fields["ox"] = (s.oMinX___14496);
    s.lastBrkId = 1252;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1252]) return breakpoint(s, 43, 1252, r0);
  case 43:
    r0 = s.arg0.fields["_hitbox"];
    s.tmp_0 = r0;
    s.tmp_2 = Fx_sub__P159_mk(s);
    s.tmp_2.arg0 = s.oMaxX___14504;
    s.tmp_2.arg1 = s.oMinX___14496;
    s.callLocIdx = 322; s.pc = 44; return s.tmp_2;
  case 44:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["width"] = (s.tmp_1);
  case 5:
  case 6:
    s.lastBrkId = 1253;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1253]) return breakpoint(s, 45, 1253, r0);
  case 45:
    r0 = (s.yDiff___14547 <= 512);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 1254;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1254]) return breakpoint(s, 46, 1254, r0);
  case 46:
    r0 = s.arg0.fields["_hitbox"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1).fields["oy"] = (s.oMinY___14500);
    s.lastBrkId = 1255;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1255]) return breakpoint(s, 47, 1255, r0);
  case 47:
    r0 = s.arg0.fields["_hitbox"];
    s.tmp_0 = r0;
    s.tmp_2 = Fx_sub__P159_mk(s);
    s.tmp_2.arg0 = s.oMaxY___14511;
    s.tmp_2.arg1 = s.oMinY___14500;
    s.callLocIdx = 323; s.pc = 48; return s.tmp_2;
  case 48:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["height"] = (s.tmp_1);
  case 7:
  case 8:
  case 9:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite_setHitbox__P2133.info = {"start":7231,"length":1324,"line":264,"column":4,"endLine":303,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"setHitbox","argumentNames":["this"]}

function Sprite_setHitbox__P2133_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_setHitbox__P2133, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  newHitBox___14482: undefined,
  oMinX___14496: undefined,
  oMinY___14500: undefined,
  oMaxX___14504: undefined,
  oMaxY___14511: undefined,
  nMinX___14518: undefined,
  nMinY___14521: undefined,
  nMaxX___14524: undefined,
  nMaxY___14530: undefined,
  xDiff___14536: undefined,
  yDiff___14547: undefined,
  arg0: undefined,
} }





function game_calculateHitBox__P2002(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.i___14629 = undefined;
    s.minX___14632 = undefined;
    s.minY___14635 = undefined;
    s.maxX___14638 = undefined;
    s.maxY___14639 = undefined;
    s.c___14640 = undefined;
    s.r___14646 = undefined;
    s.width___14677 = undefined;
    s.height___14683 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 1159;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1159]) return breakpoint(s, 12, 1159, r0);
  case 12:
    r0 = s.arg0.fields["_hitbox"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    s.tmp_1 = game_Hitbox_isValid__P2001_mk(s);
    r0 = s.arg0.fields["_hitbox"];
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 261; s.pc = 13; return s.tmp_1;
  case 13:
    r0 = s.retval;
  case 2:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1160;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1160]) return breakpoint(s, 14, 1160, r0);
  case 14:
    r0 = s.arg0.fields["_hitbox"];
    { step = 11; continue; }
  case 3:
  case 4:
    s.lastBrkId = 1161;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1161]) return breakpoint(s, 15, 1161, r0);
  case 15:
    s.tmp_3 = Sprite_image__P2131_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.callLocIdx = 262; s.pc = 16; return s.tmp_3;
  case 16:
    r0 = s.retval;
    s.i___14629 = (r0);
    s.lastBrkId = 1162;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1162]) return breakpoint(s, 17, 1162, r0);
  case 17:
    r0 = pxsim_ImageMethods.width(s.i___14629);
    s.minX___14632 = (r0);
    s.lastBrkId = 1163;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1163]) return breakpoint(s, 18, 1163, r0);
  case 18:
    r0 = pxsim_ImageMethods.height(s.i___14629);
    s.minY___14635 = (r0);
    s.lastBrkId = 1164;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1164]) return breakpoint(s, 19, 1164, r0);
  case 19:
    s.maxX___14638 = (0);
    s.lastBrkId = 1165;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1165]) return breakpoint(s, 20, 1165, r0);
  case 20:
    s.maxY___14639 = (0);
    s.lastBrkId = 1166;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1166]) return breakpoint(s, 21, 1166, r0);
  case 21:
    s.c___14640 = (0);
    s.lastBrkId = 1167;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1167]) return breakpoint(s, 22, 1167, r0);
  case 22:
  case 5:
    s.lastBrkId = 1168;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1168]) return breakpoint(s, 23, 1168, r0);
  case 23:
    s.tmp_1 = r0 = s.c___14640;
    r0 = pxsim_ImageMethods.width(s.i___14629);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 10; continue; }
    s.lastBrkId = 1169;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1169]) return breakpoint(s, 24, 1169, r0);
  case 24:
    s.r___14646 = (0);
    s.lastBrkId = 1170;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1170]) return breakpoint(s, 25, 1170, r0);
  case 25:
  case 6:
    s.lastBrkId = 1171;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1171]) return breakpoint(s, 26, 1171, r0);
  case 26:
    s.tmp_1 = r0 = s.r___14646;
    r0 = pxsim_ImageMethods.height(s.i___14629);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 1172;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1172]) return breakpoint(s, 27, 1172, r0);
  case 27:
    r0 = pxsim_ImageMethods.getPixel(s.i___14629, s.c___14640, s.r___14646);
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 1173;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1173]) return breakpoint(s, 28, 1173, r0);
  case 28:
    s.tmp_4 = Math_min__P131_mk(s);
    s.tmp_4.arg0 = s.minX___14632;
    s.tmp_4.arg1 = s.c___14640;
    s.callLocIdx = 263; s.pc = 29; return s.tmp_4;
  case 29:
    r0 = s.retval;
    s.minX___14632 = (r0);
    s.lastBrkId = 1174;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1174]) return breakpoint(s, 30, 1174, r0);
  case 30:
    s.tmp_0 = Math_min__P131_mk(s);
    s.tmp_0.arg0 = s.minY___14635;
    s.tmp_0.arg1 = s.r___14646;
    s.callLocIdx = 264; s.pc = 31; return s.tmp_0;
  case 31:
    r0 = s.retval;
    s.minY___14635 = (r0);
    s.lastBrkId = 1175;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1175]) return breakpoint(s, 32, 1175, r0);
  case 32:
    s.tmp_0 = Math_max__P130_mk(s);
    s.tmp_0.arg0 = s.maxX___14638;
    s.tmp_0.arg1 = s.c___14640;
    s.callLocIdx = 265; s.pc = 33; return s.tmp_0;
  case 33:
    r0 = s.retval;
    s.maxX___14638 = (r0);
    s.lastBrkId = 1176;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1176]) return breakpoint(s, 34, 1176, r0);
  case 34:
    s.tmp_0 = Math_max__P130_mk(s);
    s.tmp_0.arg0 = s.maxY___14639;
    s.tmp_0.arg1 = s.r___14646;
    s.callLocIdx = 266; s.pc = 35; return s.tmp_0;
  case 35:
    r0 = s.retval;
    s.maxY___14639 = (r0);
  case 7:
  case 8:
    s.lastBrkId = 1177;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1177]) return breakpoint(s, 36, 1177, r0);
  case 36:
    r0 = (s.r___14646 + 1);
    s.r___14646 = (r0);
    { step = 6; continue; }
  case 9:
    s.lastBrkId = 1178;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1178]) return breakpoint(s, 37, 1178, r0);
  case 37:
    r0 = (s.c___14640 + 1);
    s.c___14640 = (r0);
    { step = 5; continue; }
  case 10:
    s.lastBrkId = 1179;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1179]) return breakpoint(s, 38, 1179, r0);
  case 38:
    r0 = (s.maxX___14638 - s.minX___14632);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 + 1);
    s.width___14677 = (r0);
    s.lastBrkId = 1180;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1180]) return breakpoint(s, 39, 1180, r0);
  case 39:
    r0 = (s.maxY___14639 - s.minY___14635);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 + 1);
    s.height___14683 = (r0);
    s.lastBrkId = 1181;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1181]) return breakpoint(s, 40, 1181, r0);
  case 40:
    r0 = pxsim_pxtcore_mkClassInstance(game_Hitbox__C1988_VT);
    s.tmp_0 = r0;
    s.tmp_1 = game_Hitbox_constructor__P1996_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = s.arg0;
    s.tmp_1.arg2 = s.width___14677;
    s.tmp_1.arg3 = s.height___14683;
    s.tmp_1.arg4 = s.minX___14632;
    s.tmp_1.arg5 = s.minY___14635;
    s.callLocIdx = 267; s.pc = 41; return s.tmp_1;
  case 41:
    r0 = s.retval;
    r0 = s.tmp_0;
  case 11:
    return leave(s, r0)
  default: oops()
} } }
game_calculateHitBox__P2002.info = {"start":1147,"length":761,"line":48,"column":4,"endLine":73,"endColumn":5,"fileName":"pxt_modules/game/hitbox.ts","functionName":"calculateHitBox","argumentNames":["s"]}

function game_calculateHitBox__P2002_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_calculateHitBox__P2002, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  i___14629: undefined,
  minX___14632: undefined,
  minY___14635: undefined,
  maxX___14638: undefined,
  maxY___14639: undefined,
  c___14640: undefined,
  r___14646: undefined,
  width___14677: undefined,
  height___14683: undefined,
  arg0: undefined,
} }





function Sprite_image__P2131(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1230;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1230]) return breakpoint(s, 1, 1230, r0);
  case 1:
    r0 = s.arg0.fields["_image"];
    return leaveAccessor(s, r0)
  default: oops()
} } }
Sprite_image__P2131.info = {"start":6816,"length":54,"line":248,"column":4,"endLine":250,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"image","argumentNames":["this"]}
Sprite_image__P2131.isGetter = true;

function Sprite_image__P2131_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_image__P2131, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function game_Hitbox_constructor__P1996(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.arg5 = (s.lambdaArgs[5]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Hitbox__C1988_VT)) failedCast(r0);
    s.lastBrkId = 1147;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1147]) return breakpoint(s, 1, 1147, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Sprite_image__P2131_mk(s);
    s.tmp_2.arg0 = s.arg1;
    s.callLocIdx = 245; s.pc = 2; return s.tmp_2;
  case 2:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["img"] = (s.tmp_1);
    s.lastBrkId = 1148;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1148]) return breakpoint(s, 3, 1148, r0);
  case 3:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_3 = Sprite_image__P2131_mk(s);
    s.tmp_3.arg0 = s.arg1;
    s.callLocIdx = 246; s.pc = 4; return s.tmp_3;
  case 4:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_ImageMethods.revision(s.tmp_2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["rev"] = (s.tmp_1);
    s.lastBrkId = 1149;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1149]) return breakpoint(s, 5, 1149, r0);
  case 5:
    r0 = (s.arg0).fields["parent"] = (s.arg1);
    s.lastBrkId = 1150;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1150]) return breakpoint(s, 6, 1150, r0);
  case 6:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Fx8__P149_mk(s);
    s.tmp_2.arg0 = s.arg2;
    s.callLocIdx = 247; s.pc = 7; return s.tmp_2;
  case 7:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["width"] = (s.tmp_1);
    s.lastBrkId = 1151;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1151]) return breakpoint(s, 8, 1151, r0);
  case 8:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Fx8__P149_mk(s);
    s.tmp_2.arg0 = s.arg3;
    s.callLocIdx = 248; s.pc = 9; return s.tmp_2;
  case 9:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["height"] = (s.tmp_1);
    s.lastBrkId = 1152;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1152]) return breakpoint(s, 10, 1152, r0);
  case 10:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Fx8__P149_mk(s);
    s.tmp_2.arg0 = s.arg4;
    s.callLocIdx = 249; s.pc = 11; return s.tmp_2;
  case 11:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["ox"] = (s.tmp_1);
    s.lastBrkId = 1153;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1153]) return breakpoint(s, 12, 1153, r0);
  case 12:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Fx8__P149_mk(s);
    s.tmp_2.arg0 = s.arg5;
    s.callLocIdx = 250; s.pc = 13; return s.tmp_2;
  case 13:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["oy"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Hitbox_constructor__P1996.info = {"start":192,"length":351,"line":10,"column":8,"endLine":18,"endColumn":9,"fileName":"pxt_modules/game/hitbox.ts","functionName":"inline","argumentNames":["this","parent","width","height","ox","oy"]}

function game_Hitbox_constructor__P1996_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Hitbox_constructor__P1996, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
  arg5: undefined,
} }





function game_Hitbox_isValid__P2001(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Hitbox__C1988_VT)) failedCast(r0);
    s.lastBrkId = 1158;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1158]) return breakpoint(s, 3, 1158, r0);
  case 3:
    r0 = s.arg0.fields["img"];
    s.tmp_1 = r0;
    s.tmp_3 = Sprite_image__P2131_mk(s);
    r0 = s.arg0.fields["parent"];
    s.tmp_3.arg0 = r0;
    s.callLocIdx = 259; s.pc = 4; return s.tmp_3;
  case 4:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1 === s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = s.arg0.fields["rev"];
    s.tmp_4 = r0;
    s.tmp_7 = Sprite_image__P2131_mk(s);
    r0 = s.arg0.fields["parent"];
    s.tmp_7.arg0 = r0;
    s.callLocIdx = 260; s.pc = 5; return s.tmp_7;
  case 5:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = pxsim_ImageMethods.revision(s.tmp_6);
    s.tmp_5 = r0;
    r0 = (s.tmp_4 === s.tmp_5);
  case 2:
    // jmp value (already in r0)
    s.tmp_8 = r0;
    r0 = s.tmp_8;
    return leave(s, r0)
  default: oops()
} } }
game_Hitbox_isValid__P2001.info = {"start":1017,"length":117,"line":42,"column":8,"endLine":44,"endColumn":9,"fileName":"pxt_modules/game/hitbox.ts","functionName":"isValid","argumentNames":["this"]}

function game_Hitbox_isValid__P2001_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Hitbox_isValid__P2001, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  arg0: undefined,
} }





function Fx_abs__P165(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 271;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[271]) return breakpoint(s, 4, 271, r0);
  case 4:
    r0 = (s.arg0 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 272;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[272]) return breakpoint(s, 5, 272, r0);
  case 5:
    r0 = (0 - s.arg0);
    { step = 3; continue; }
    { step = 2; continue; }
  case 1:
    s.lastBrkId = 273;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[273]) return breakpoint(s, 6, 273, r0);
  case 6:
    r0 = s.arg0;
    { step = 3; continue; }
  case 2:
    r0 = undefined;
  case 3:
    return leave(s, r0)
  default: oops()
} } }
Fx_abs__P165.info = {"start":1506,"length":164,"line":44,"column":4,"endLine":49,"endColumn":5,"fileName":"pxt_modules/base/fixed.ts","functionName":"abs","argumentNames":["a"]}

function Fx_abs__P165_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Fx_abs__P165, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function Fx_sub__P159(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 265;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[265]) return breakpoint(s, 1, 265, r0);
  case 1:
    r0 = (s.arg0 - s.arg1);
    return leave(s, r0)
  default: oops()
} } }
Fx_sub__P159.info = {"start":749,"length":118,"line":26,"column":4,"endLine":28,"endColumn":5,"fileName":"pxt_modules/base/fixed.ts","functionName":"sub","argumentNames":["a","b"]}

function Fx_sub__P159_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Fx_sub__P159, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
} }





function Sprite_fy__P2116(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1207;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1207]) return breakpoint(s, 1, 1207, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Fx8__P149_mk(s);
    s.tmp_3 = Math_max__P130_mk(s);
    s.tmp_3.arg0 = 0;
    s.tmp_3.arg1 = s.arg1;
    s.callLocIdx = 292; s.pc = 3; return s.tmp_3;
  case 3:
    r0 = s.retval;
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 293; s.pc = 2; return s.tmp_2;
  case 2:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_fy"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite_fy__P2116.info = {"start":4340,"length":64,"line":157,"column":4,"endLine":159,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"fy","argumentNames":["this","v"]}

function Sprite_fy__P2116_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_fy__P2116, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Sprite_fy__P2115(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1206;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1206]) return breakpoint(s, 1, 1206, r0);
  case 1:
    s.tmp_0 = Fx_toFloat__P171_mk(s);
    r0 = s.arg0.fields["_fy"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 291; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leaveAccessor(s, r0)
  default: oops()
} } }
Sprite_fy__P2115.info = {"start":4178,"length":60,"line":152,"column":4,"endLine":154,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"fy","argumentNames":["this"]}
Sprite_fy__P2115.isGetter = true;

function Sprite_fy__P2115_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_fy__P2115, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function Sprite_fx__P2114(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1205;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1205]) return breakpoint(s, 1, 1205, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Fx8__P149_mk(s);
    s.tmp_3 = Math_max__P130_mk(s);
    s.tmp_3.arg0 = 0;
    s.tmp_3.arg1 = s.arg1;
    s.callLocIdx = 289; s.pc = 3; return s.tmp_3;
  case 3:
    r0 = s.retval;
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 290; s.pc = 2; return s.tmp_2;
  case 2:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_fx"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite_fx__P2114.info = {"start":3997,"length":64,"line":147,"column":4,"endLine":149,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"fx","argumentNames":["this","v"]}

function Sprite_fx__P2114_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_fx__P2114, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Sprite_fx__P2113(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1204;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1204]) return breakpoint(s, 1, 1204, r0);
  case 1:
    s.tmp_0 = Fx_toFloat__P171_mk(s);
    r0 = s.arg0.fields["_fx"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 288; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leaveAccessor(s, r0)
  default: oops()
} } }
Sprite_fx__P2113.info = {"start":3835,"length":60,"line":142,"column":4,"endLine":144,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"fx","argumentNames":["this"]}
Sprite_fx__P2113.isGetter = true;

function Sprite_fx__P2113_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_fx__P2113, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function Sprite_ay__P2112(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1203;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1203]) return breakpoint(s, 1, 1203, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Fx8__P149_mk(s);
    s.tmp_2.arg0 = s.arg1;
    s.callLocIdx = 287; s.pc = 2; return s.tmp_2;
  case 2:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_ay"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite_ay__P2112.info = {"start":3666,"length":51,"line":136,"column":4,"endLine":138,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"ay","argumentNames":["this","v"]}

function Sprite_ay__P2112_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_ay__P2112, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Sprite_ay__P2111(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1202;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1202]) return breakpoint(s, 1, 1202, r0);
  case 1:
    s.tmp_0 = Fx_toFloat__P171_mk(s);
    r0 = s.arg0.fields["_ay"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 286; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leaveAccessor(s, r0)
  default: oops()
} } }
Sprite_ay__P2111.info = {"start":3500,"length":60,"line":131,"column":4,"endLine":133,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"ay","argumentNames":["this"]}
Sprite_ay__P2111.isGetter = true;

function Sprite_ay__P2111_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_ay__P2111, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function Sprite_ax__P2110(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1201;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1201]) return breakpoint(s, 1, 1201, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Fx8__P149_mk(s);
    s.tmp_2.arg0 = s.arg1;
    s.callLocIdx = 285; s.pc = 2; return s.tmp_2;
  case 2:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_ax"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite_ax__P2110.info = {"start":3327,"length":51,"line":125,"column":4,"endLine":127,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"ax","argumentNames":["this","v"]}

function Sprite_ax__P2110_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_ax__P2110, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Sprite_ax__P2109(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1200;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1200]) return breakpoint(s, 1, 1200, r0);
  case 1:
    s.tmp_0 = Fx_toFloat__P171_mk(s);
    r0 = s.arg0.fields["_ax"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 284; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leaveAccessor(s, r0)
  default: oops()
} } }
Sprite_ax__P2109.info = {"start":3161,"length":60,"line":120,"column":4,"endLine":122,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"ax","argumentNames":["this"]}
Sprite_ax__P2109.isGetter = true;

function Sprite_ax__P2109_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_ax__P2109, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function Sprite_vy__P2108(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1199;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1199]) return breakpoint(s, 1, 1199, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Fx8__P149_mk(s);
    s.tmp_2.arg0 = s.arg1;
    s.callLocIdx = 283; s.pc = 2; return s.tmp_2;
  case 2:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_vy"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite_vy__P2108.info = {"start":2988,"length":51,"line":114,"column":4,"endLine":116,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"vy","argumentNames":["this","v"]}

function Sprite_vy__P2108_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_vy__P2108, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Sprite_vy__P2107(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1198;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1198]) return breakpoint(s, 1, 1198, r0);
  case 1:
    s.tmp_0 = Fx_toFloat__P171_mk(s);
    r0 = s.arg0.fields["_vy"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 282; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leaveAccessor(s, r0)
  default: oops()
} } }
Sprite_vy__P2107.info = {"start":2826,"length":60,"line":109,"column":4,"endLine":111,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"vy","argumentNames":["this"]}
Sprite_vy__P2107.isGetter = true;

function Sprite_vy__P2107_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_vy__P2107, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function Sprite_vx__P2106(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1197;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1197]) return breakpoint(s, 1, 1197, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Fx8__P149_mk(s);
    s.tmp_2.arg0 = s.arg1;
    s.callLocIdx = 281; s.pc = 2; return s.tmp_2;
  case 2:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_vx"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite_vx__P2106.info = {"start":2657,"length":51,"line":103,"column":4,"endLine":105,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"vx","argumentNames":["this","v"]}

function Sprite_vx__P2106_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_vx__P2106, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Sprite_vx__P2105(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1196;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1196]) return breakpoint(s, 1, 1196, r0);
  case 1:
    s.tmp_0 = Fx_toFloat__P171_mk(s);
    r0 = s.arg0.fields["_vx"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 280; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leaveAccessor(s, r0)
  default: oops()
} } }
Sprite_vx__P2105.info = {"start":2495,"length":60,"line":98,"column":4,"endLine":100,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"vx","argumentNames":["this"]}
Sprite_vx__P2105.isGetter = true;

function Sprite_vx__P2105_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_vx__P2105, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function controller__setUserEventsEnabled__P1986(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 1146;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1146]) return breakpoint(s, 1, 1146, r0);
  case 1:
    globals._userEventsEnabled___4377 = (s.arg0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller__setUserEventsEnabled__P1986.info = {"start":6390,"length":101,"line":194,"column":4,"endLine":196,"endColumn":5,"fileName":"pxt_modules/game/controllerbutton.ts","functionName":"_setUserEventsEnabled","argumentNames":["enabled"]}

function controller__setUserEventsEnabled__P1986_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller__setUserEventsEnabled__P1986, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function console_inspect__P380(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.asArr___14899 = undefined;
    s.asString___14917 = undefined;
    s.keys___14929 = undefined;
    s.snipped___14933 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 397;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[397]) return breakpoint(s, 18, 397, r0);
  case 18:
    r0 = pxsim_pxtcore.typeOf(s.arg0);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 == "string");
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 398;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[398]) return breakpoint(s, 19, 398, r0);
  case 19:
    r0 = s.arg0;
    { step = 17; continue; }
    { step = 16; continue; }
  case 1:
    s.lastBrkId = 399;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[399]) return breakpoint(s, 20, 399, r0);
  case 20:
    r0 = pxsim_pxtcore.typeOf(s.arg0);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 == "number");
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 400;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[400]) return breakpoint(s, 21, 400, r0);
  case 21:
    r0 = pxsim_String_.mkEmpty();
    s.tmp_4 = r0;
    if ((s.arg0) && (s.arg0).vtable) {
    setupResume(s, 22);
    pxsim_String__stringConv(s.arg0);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.arg0) + ""; }
  case 22:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = pxsim_String__concat(s.tmp_4, s.tmp_5);
    { step = 17; continue; }
    { step = 15; continue; }
  case 2:
    s.lastBrkId = 401;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[401]) return breakpoint(s, 23, 401, r0);
  case 23:
    r0 = pxsim_Array_.isArray(s.arg0);
    s.tmp_6 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_6);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 402;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[402]) return breakpoint(s, 24, 402, r0);
  case 24:
    s.asArr___14899 = (s.arg0);
    s.lastBrkId = 403;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[403]) return breakpoint(s, 25, 403, r0);
  case 25:
    r0 = pxsim_Array__length(s.asArr___14899);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 <= s.arg1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 404;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[404]) return breakpoint(s, 26, 404, r0);
  case 26:
    s.tmp_2 = helpers_arrayJoin__P103_mk(s);
    s.tmp_2.arg0 = s.asArr___14899;
    s.tmp_2.arg1 = ",";
    s.callLocIdx = 40; s.pc = 27; return s.tmp_2;
  case 27:
    r0 = s.retval;
    { step = 17; continue; }
    { step = 4; continue; }
  case 3:
    s.lastBrkId = 405;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[405]) return breakpoint(s, 28, 405, r0);
  case 28:
    r0 = pxsim_String_.mkEmpty();
    s.tmp_4 = r0;
    s.tmp_7 = helpers_arrayJoin__P103_mk(s);
    s.tmp_8 = helpers_arraySlice__P115_mk(s);
    s.tmp_8.arg0 = s.asArr___14899;
    s.tmp_8.arg1 = 0;
    s.tmp_8.arg2 = s.arg1;
    s.callLocIdx = 41; s.pc = 30; return s.tmp_8;
  case 30:
    r0 = s.retval;
    s.tmp_7.arg0 = r0;
    s.tmp_7.arg1 = ",";
    s.callLocIdx = 42; s.pc = 29; return s.tmp_7;
  case 29:
    r0 = s.retval;
    s.tmp_6 = r0;
    if ((s.tmp_6) && (s.tmp_6).vtable) {
    setupResume(s, 31);
    pxsim_String__stringConv(s.tmp_6);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_6) + ""; }
  case 31:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = pxsim_String__concat(s.tmp_4, s.tmp_5);
    s.tmp_3 = r0;
    r0 = pxsim_String__concat(s.tmp_3, "...");
    { step = 17; continue; }
  case 4:
    { step = 14; continue; }
  case 5:
    s.lastBrkId = 406;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[406]) return breakpoint(s, 32, 406, r0);
  case 32:
    if ((s.arg0) && (s.arg0).vtable) {
    setupResume(s, 33);
    pxsim_String__stringConv(s.arg0);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.arg0) + ""; }
  case 33:
    r0 = s.retval;
    s.tmp_9 = r0;
    r0 = pxsim_String_.mkEmpty();
    s.tmp_10 = r0;
    r0 = pxsim_String__concat(s.tmp_9, s.tmp_10);
    s.asString___14917 = (r0);
    s.lastBrkId = 407;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[407]) return breakpoint(s, 34, 407, r0);
  case 34:
    r0 = (s.asString___14917 != "[object Object]");
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 6; continue; }
    r0 = s.tmp_0;
    { step = 7; continue; }
  case 6:
    r0 = (s.asString___14917 != "[Object]");
  case 7:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 8; continue; }
    s.lastBrkId = 408;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[408]) return breakpoint(s, 35, 408, r0);
  case 35:
    r0 = s.asString___14917;
    { step = 17; continue; }
  case 8:
  case 9:
    s.lastBrkId = 409;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[409]) return breakpoint(s, 36, 409, r0);
  case 36:
    r0 = pxsim_pxtrt.keysOf(s.arg0);
    s.keys___14929 = (r0);
    s.lastBrkId = 410;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[410]) return breakpoint(s, 37, 410, r0);
  case 37:
    r0 = pxsim_Array__length(s.keys___14929);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 > s.arg1);
    s.snipped___14933 = (r0);
    s.lastBrkId = 411;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[411]) return breakpoint(s, 38, 411, r0);
  case 38:
    r0 = pxsim_numops_toBoolDecr(s.snipped___14933);
    if (!r0) { step = 10; continue; }
    s.lastBrkId = 412;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[412]) return breakpoint(s, 39, 412, r0);
  case 39:
    s.tmp_0 = helpers_arraySlice__P115_mk(s);
    s.tmp_0.arg0 = s.keys___14929;
    s.tmp_0.arg1 = 0;
    s.tmp_0.arg2 = s.arg1;
    s.callLocIdx = 43; s.pc = 40; return s.tmp_0;
  case 40:
    r0 = s.retval;
    s.keys___14929 = (r0);
  case 10:
  case 11:
    s.lastBrkId = 413;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[413]) return breakpoint(s, 41, 413, r0);
  case 41:
    r0 = pxsim_pxtcore_mkAction(1, console_inspect_inline__P14950);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    r0 = pxsim_numops_toBoolDecr(s.snipped___14933);
    if (!r0) { step = 12; continue; }
    r0 = "\n    ...";
    { step = 13; continue; }
  case 12:
    r0 = pxsim_String_.mkEmpty();
  case 13:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    s.tmp_7 = helpers_arrayReduce__P112_mk(s);
    s.tmp_7.arg0 = s.keys___14929;
    s.tmp_7.arg1 = s.tmp_0;
    r0 = pxsim_String_.mkEmpty();
    s.tmp_7.arg2 = r0;
    s.callLocIdx = 44; s.pc = 42; return s.tmp_7;
  case 42:
    r0 = s.retval;
    s.tmp_6 = r0;
    if ((s.tmp_6) && (s.tmp_6).vtable) {
    setupResume(s, 43);
    pxsim_String__stringConv(s.tmp_6);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_6) + ""; }
  case 43:
    r0 = s.retval;
    s.tmp_5 = r0;
    if ((s.tmp_1) && (s.tmp_1).vtable) {
    setupResume(s, 44);
    pxsim_String__stringConv(s.tmp_1);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_1) + ""; }
  case 44:
    r0 = s.retval;
    s.tmp_8 = r0;
    r0 = pxsim_String__concat(s.tmp_5, s.tmp_8);
    s.tmp_4 = r0;
    if ((s.tmp_4) && (s.tmp_4).vtable) {
    setupResume(s, 45);
    pxsim_String__stringConv(s.tmp_4);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_4) + ""; }
  case 45:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = pxsim_String__concat("{", s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim_String__concat(s.tmp_2, "\n}");
    { step = 17; continue; }
  case 14:
  case 15:
  case 16:
    r0 = undefined;
  case 17:
    return leave(s, r0)
  default: oops()
} } }
console_inspect__P380.info = {"start":2271,"length":1190,"line":81,"column":4,"endLine":114,"endColumn":5,"fileName":"pxt_modules/base/console.ts","functionName":"inspect","argumentNames":["obj","maxElements"]}

function console_inspect__P380_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: console_inspect__P380, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  asArr___14899: undefined,
  asString___14917: undefined,
  keys___14929: undefined,
  snipped___14933: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function console_inspect_inline__P14950(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    if ((s.arg0) && (s.arg0).vtable) {
    setupResume(s, 1);
    pxsim_String__stringConv(s.arg0);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.arg0) + ""; }
  case 1:
    r0 = s.retval;
    s.tmp_0 = r0;
    if ((s.arg1) && (s.arg1).vtable) {
    setupResume(s, 2);
    pxsim_String__stringConv(s.arg1);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.arg1) + ""; }
  case 2:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = pxsim_String__concat("\n    ", s.tmp_5);
    s.tmp_4 = r0;
    r0 = pxsim_String__concat(s.tmp_4, ": ");
    s.tmp_3 = r0;
    r0 = pxsim_pxtrt.mapGetGeneric(s.caps[0], s.arg1);
    s.tmp_7 = r0;
    if ((s.tmp_7) && (s.tmp_7).vtable) {
    setupResume(s, 3);
    pxsim_String__stringConv(s.tmp_7);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_7) + ""; }
  case 3:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = pxsim_String__concat(s.tmp_3, s.tmp_6);
    s.tmp_2 = r0;
    if ((s.tmp_2) && (s.tmp_2).vtable) {
    setupResume(s, 4);
    pxsim_String__stringConv(s.tmp_2);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_2) + ""; }
  case 4:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_String__concat(s.tmp_0, s.tmp_1);
    return leave(s, r0)
  default: oops()
} } }
console_inspect_inline__P14950.info = {"start":3293,"length":61,"line":108,"column":20,"endLine":108,"endColumn":81,"fileName":"pxt_modules/base/console.ts","functionName":"inline","argumentNames":["prev","currKey"]}

function console_inspect_inline__P14950_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: console_inspect_inline__P14950, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function helpers_arrayReduce__P112(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.len___14977 = undefined;
    s.i___14980 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 126;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[126]) return breakpoint(s, 3, 126, r0);
  case 3:
    r0 = pxsim_Array__length(s.arg0);
    s.len___14977 = (r0);
    s.lastBrkId = 127;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[127]) return breakpoint(s, 4, 127, r0);
  case 4:
    s.i___14980 = (0);
    s.lastBrkId = 128;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[128]) return breakpoint(s, 5, 128, r0);
  case 5:
  case 1:
    s.lastBrkId = 129;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[129]) return breakpoint(s, 6, 129, r0);
  case 6:
    r0 = (s.i___14980 < s.len___14977);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 130;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[130]) return breakpoint(s, 7, 130, r0);
  case 7:
    s.tmp_1 = lambda_4_mk(s);
    s.tmp_1.argL = s.arg1;
    s.tmp_1.arg0 = s.arg2;
    r0 = pxsim_Array__getAt(s.arg0, s.i___14980);
    s.tmp_1.arg1 = r0;
    s.tmp_1.arg2 = s.i___14980;
    setupLambda(s.tmp_1, s.tmp_1.argL);
    s.callLocIdx = 8; s.pc = 8; return s.tmp_1;
  case 8:
    r0 = s.retval;
    s.arg2 = (r0);
    s.lastBrkId = 131;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[131]) return breakpoint(s, 9, 131, r0);
  case 9:
    r0 = (s.i___14980 + 1);
    s.i___14980 = (r0);
    { step = 1; continue; }
  case 2:
    s.lastBrkId = 132;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[132]) return breakpoint(s, 10, 132, r0);
  case 10:
    r0 = s.arg2;
    return leave(s, r0)
  default: oops()
} } }
helpers_arrayReduce__P112.info = {"start":8316,"length":317,"line":280,"column":4,"endLine":286,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"arrayReduce","argumentNames":["arr","callbackfn","initialValue"]}

function helpers_arrayReduce__P112_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_arrayReduce__P112, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  len___14977: undefined,
  i___14980: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function helpers_arrayJoin__P103(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.r___15005 = undefined;
    s.len___15006 = undefined;
    s.i___15009 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 45;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[45]) return breakpoint(s, 15, 45, r0);
  case 15:
    r0 = (s.arg1 === undefined);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = (s.arg1 === null);
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 46;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[46]) return breakpoint(s, 16, 46, r0);
  case 16:
    s.arg1 = (",");
  case 3:
  case 4:
    s.lastBrkId = 47;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[47]) return breakpoint(s, 17, 47, r0);
  case 17:
    r0 = pxsim_String_.mkEmpty();
    s.r___15005 = (r0);
    s.lastBrkId = 48;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[48]) return breakpoint(s, 18, 48, r0);
  case 18:
    r0 = pxsim_Array__length(s.arg0);
    s.len___15006 = (r0);
    s.lastBrkId = 49;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[49]) return breakpoint(s, 19, 49, r0);
  case 19:
    s.i___15009 = (0);
    s.lastBrkId = 50;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[50]) return breakpoint(s, 20, 50, r0);
  case 20:
  case 5:
    s.lastBrkId = 51;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[51]) return breakpoint(s, 21, 51, r0);
  case 21:
    r0 = (s.i___15009 < s.len___15006);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 14; continue; }
    s.lastBrkId = 52;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[52]) return breakpoint(s, 22, 52, r0);
  case 22:
    r0 = (s.i___15009 > 0);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBool(s.tmp_1);
    if (r0) { step = 6; continue; }
    r0 = s.tmp_1;
    { step = 7; continue; }
  case 6:
    r0 = s.arg1;
  case 7:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 8; continue; }
    s.lastBrkId = 53;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[53]) return breakpoint(s, 23, 53, r0);
  case 23:
    if ((s.r___15005) && (s.r___15005).vtable) {
    setupResume(s, 24);
    pxsim_String__stringConv(s.r___15005);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.r___15005) + ""; }
  case 24:
    r0 = s.retval;
    s.tmp_3 = r0;
    if ((s.arg1) && (s.arg1).vtable) {
    setupResume(s, 25);
    pxsim_String__stringConv(s.arg1);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.arg1) + ""; }
  case 25:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_String__concat(s.tmp_3, s.tmp_4);
    s.r___15005 = (r0);
  case 8:
  case 9:
    s.lastBrkId = 54;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[54]) return breakpoint(s, 26, 54, r0);
  case 26:
    r0 = pxsim_Array__getAt(s.arg0, s.i___15009);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 === undefined);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 10; continue; }
    r0 = s.tmp_0;
    { step = 11; continue; }
  case 10:
    r0 = pxsim_Array__getAt(s.arg0, s.i___15009);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 === null);
  case 11:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 12; continue; }
    r0 = pxsim_String_.mkEmpty();
    { step = 13; continue; }
  case 12:
    r0 = pxsim_Array__getAt(s.arg0, s.i___15009);
  case 13:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    if ((s.r___15005) && (s.r___15005).vtable) {
    setupResume(s, 27);
    pxsim_String__stringConv(s.r___15005);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.r___15005) + ""; }
  case 27:
    r0 = s.retval;
    s.tmp_5 = r0;
    if ((s.tmp_4) && (s.tmp_4).vtable) {
    setupResume(s, 28);
    pxsim_String__stringConv(s.tmp_4);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_4) + ""; }
  case 28:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = pxsim_String__concat(s.tmp_5, s.tmp_6);
    s.r___15005 = (r0);
    s.lastBrkId = 55;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[55]) return breakpoint(s, 29, 55, r0);
  case 29:
    r0 = (s.i___15009 + 1);
    s.i___15009 = (r0);
    { step = 5; continue; }
  case 14:
    s.lastBrkId = 56;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[56]) return breakpoint(s, 30, 56, r0);
  case 30:
    r0 = s.r___15005;
    return leave(s, r0)
  default: oops()
} } }
helpers_arrayJoin__P103.info = {"start":4133,"length":432,"line":157,"column":4,"endLine":170,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"arrayJoin","argumentNames":["arr","sep"]}

function helpers_arrayJoin__P103_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_arrayJoin__P103, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  r___15005: undefined,
  len___15006: undefined,
  i___15009: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Stats_addWin__P55118(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Stats__C55116_VT)) failedCast(r0);
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["games"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["games"] = (s.tmp_1);
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["wins"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["wins"] = (s.tmp_1);
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["streak"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["streak"] = (s.tmp_1);
    r0 = s.arg0.fields["guesses"];
    s.tmp_0 = r0;
    r0 = (s.arg1 - 1);
    s.tmp_1 = r0;
    r0 = (s.arg1 - 1);
    s.tmp_4 = r0;
    r0 = pxsim_Array__getAt(s.tmp_0, s.tmp_4);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 + 1);
    s.tmp_2 = r0;
    r0 = pxsim_Array_.setAt(s.tmp_0, s.tmp_1, s.tmp_2);
    s.tmp_0 = Stats_save__P55120_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 89; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Stats_addWin__P55118.info = {"start":278,"length":169,"line":16,"column":4,"endLine":22,"endColumn":5,"fileName":"stats.ts","functionName":"addWin","argumentNames":["this","numGuesses"]}

function Stats_addWin__P55118_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Stats_addWin__P55118, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function MainGame_revealNext__P82387(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.row___82532 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, MainGame__C82383_VT)) failedCast(r0);
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["lastRevealed"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["lastRevealed"] = (s.tmp_1);
    r0 = s.arg0.fields["guessCount"];
    s.tmp_0 = r0;
    r0 = (s.tmp_0 - 1);
    s.row___82532 = (r0);
    r0 = s.arg0.fields["guessCount"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > 6);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.row___82532 = (5);
  case 1:
  case 2:
    s.tmp_0 = GameBoard_reveal__P67282_mk(s);
    r0 = s.arg0.fields["board"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = s.row___82532;
    r0 = s.arg0.fields["lastRevealed"];
    s.tmp_0.arg2 = r0;
    r0 = s.arg0.fields["guess"];
    r0 = r0.fields["guess"];
    s.tmp_1 = r0;
    r0 = s.arg0.fields["lastRevealed"];
    s.tmp_2 = r0;
    r0 = pxsim_String_.charAt(s.tmp_1, s.tmp_2);
    s.tmp_0.arg3 = r0;
    r0 = s.arg0.fields["guess"];
    r0 = r0.fields["matches"];
    s.tmp_3 = r0;
    r0 = s.arg0.fields["lastRevealed"];
    s.tmp_4 = r0;
    r0 = pxsim_Array__getAt(s.tmp_3, s.tmp_4);
    s.tmp_0.arg4 = r0;
    s.callLocIdx = 158; s.pc = 5; return s.tmp_0;
  case 5:
    r0 = s.retval;
    s.tmp_0 = r0 = s.arg0;
    s.tmp_3 = game_runtime__P2630_mk(s);
    s.callLocIdx = 159; s.pc = 6; return s.tmp_3;
  case 6:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + 500);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["nextReveal"] = (s.tmp_1);
    r0 = s.arg0.fields["lastRevealed"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 >= 4);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    r0 = (s.arg0).fields["revealFinished"] = (true);
  case 3:
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
MainGame_revealNext__P82387.info = {"start":2561,"length":547,"line":79,"column":4,"endLine":92,"endColumn":5,"fileName":"game.ts","functionName":"revealNext","argumentNames":["this"]}

function MainGame_revealNext__P82387_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: MainGame_revealNext__P82387, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  row___82532: undefined,
  arg0: undefined,
} }





function GameBoard_reveal__P67282(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.letterSprite___67323 = undefined;
    s.upperLetter___67329 = undefined;
    s.charIndex___67335 = undefined;
    s.letterBoardSprite___67343 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, GameBoard__C67279_VT)) failedCast(r0);
    r0 = s.arg0.fields["gameBoard"];
    s.tmp_1 = r0;
    r0 = pxsim_Array__getAt(s.tmp_1, s.arg1);
    s.tmp_0 = r0;
    r0 = pxsim_Array__getAt(s.tmp_0, s.arg2);
    s.letterSprite___67323 = (r0);
    s.tmp_0 = helpers_stringToUpperCase__P120_mk(s);
    s.tmp_0.arg0 = s.arg3;
    s.callLocIdx = 111; s.pc = 9; return s.tmp_0;
  case 9:
    r0 = s.retval;
    s.upperLetter___67329 = (r0);
    r0 = (s.letterSprite___67323).fields["text"] = (s.upperLetter___67329);
    r0 = pxsim_String_.charCodeAt(s.upperLetter___67329, 0);
    s.tmp_0 = r0;
    r0 = pxsim_String_.charCodeAt("A", 0);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 - s.tmp_1);
    s.charIndex___67335 = (r0);
    r0 = s.arg0.fields["letterBoard"];
    s.tmp_0 = r0;
    r0 = pxsim_Array__getAt(s.tmp_0, s.charIndex___67335);
    s.letterBoardSprite___67343 = (r0);
    s.tmp_0 = r0 = s.arg4;
    r0 = pxsim_pxtcore.switch_eq(0, s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = pxsim_pxtcore.switch_eq(1, s.tmp_0);
    if (r0) { step = 2; continue; }
    r0 = s.tmp_0;
    { step = 5; continue; }
  case 1:
    s.tmp_1 = music_Melody_play__P1617_mk(s);
    s.tmp_1.arg0 = globals.baDing___1626;
    s.tmp_1.arg1 = 255;
    s.callLocIdx = 112; s.pc = 10; return s.tmp_1;
  case 10:
    r0 = s.retval;
    r0 = (s.letterSprite___67323).fields["bg"] = (7);
    r0 = (s.letterSprite___67323).fields["fg"] = (1);
    r0 = (s.letterBoardSprite___67343).fields["bg"] = (7);
    r0 = (s.letterBoardSprite___67343).fields["fg"] = (1);
    { step = 8; continue; }
  case 2:
    s.tmp_0 = music_Melody_play__P1617_mk(s);
    s.tmp_0.arg0 = globals.smallCrash___1638;
    s.tmp_0.arg1 = 255;
    s.callLocIdx = 113; s.pc = 11; return s.tmp_0;
  case 11:
    r0 = s.retval;
    r0 = (s.letterSprite___67323).fields["bg"] = (5);
    r0 = (s.letterSprite___67323).fields["fg"] = (15);
    r0 = s.letterBoardSprite___67343.fields["bg"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 == 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    r0 = (s.letterBoardSprite___67343).fields["bg"] = (5);
    r0 = (s.letterBoardSprite___67343).fields["fg"] = (15);
  case 3:
  case 4:
    { step = 8; continue; }
  case 5:
    s.tmp_0 = music_Melody_play__P1617_mk(s);
    s.tmp_0.arg0 = globals.knock___1635;
    s.tmp_0.arg1 = 255;
    s.callLocIdx = 114; s.pc = 12; return s.tmp_0;
  case 12:
    r0 = s.retval;
    r0 = (s.letterSprite___67323).fields["bg"] = (15);
    r0 = (s.letterSprite___67323).fields["fg"] = (1);
    r0 = s.letterBoardSprite___67343.fields["bg"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 == 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 6; continue; }
    s.tmp_2 = r0 = s.letterBoardSprite___67343;
    r0 = pxsim_String_.mkEmpty();
    s.tmp_3 = r0;
    r0 = (s.tmp_2).fields["text"] = (s.tmp_3);
  case 6:
  case 7:
  case 8:
    s.tmp_0 = TextSprite_update__P3850_mk(s);
    s.tmp_0.arg0 = s.letterSprite___67323;
    s.callLocIdx = 115; s.pc = 13; return s.tmp_0;
  case 13:
    r0 = s.retval;
    s.tmp_0 = TextSprite_update__P3850_mk(s);
    s.tmp_0.arg0 = s.letterBoardSprite___67343;
    s.callLocIdx = 116; s.pc = 14; return s.tmp_0;
  case 14:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
GameBoard_reveal__P67282.info = {"start":706,"length":1462,"line":31,"column":4,"endLine":67,"endColumn":5,"fileName":"board.ts","functionName":"reveal","argumentNames":["this","row","col","letter","status"]}

function GameBoard_reveal__P67282_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: GameBoard_reveal__P67282, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  letterSprite___67323: undefined,
  upperLetter___67329: undefined,
  charIndex___67335: undefined,
  letterBoardSprite___67343: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
} }





function TextSprite_update__P3850(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.borderAndPadding___16549 = undefined;
    s.iconWidth___16558 = undefined;
    s.iconHeight___16571 = undefined;
    s.font___16578 = undefined;
    s.width___16585 = undefined;
    s.height___16598 = undefined;
    s.img___16608 = undefined;
    s.iconHeightOffset___16638 = undefined;
    s.textHeightOffset___16650 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, TextSprite__C3848_VT)) failedCast(r0);
    s.lastBrkId = 3619;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3619]) return breakpoint(s, 9, 3619, r0);
  case 9:
    r0 = s.arg0.fields["borderWidth"];
    s.tmp_1 = r0;
    r0 = s.arg0.fields["padding"];
    s.tmp_2 = r0;
    r0 = (s.tmp_1 + s.tmp_2);
    s.tmp_0 = r0;
    r0 = s.arg0.fields["outlineWidth"];
    s.tmp_3 = r0;
    r0 = (s.tmp_0 + s.tmp_3);
    s.borderAndPadding___16549 = (r0);
    s.lastBrkId = 3620;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3620]) return breakpoint(s, 10, 3620, r0);
  case 10:
    r0 = s.arg0.fields["icon"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.arg0.fields["icon"];
    s.tmp_3 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_3);
    s.tmp_2 = r0;
    r0 = s.arg0.fields["padding"];
    s.tmp_4 = r0;
    r0 = (s.tmp_2 + s.tmp_4);
    s.tmp_1 = r0;
    r0 = s.arg0.fields["outlineWidth"];
    s.tmp_5 = r0;
    r0 = (s.tmp_1 + s.tmp_5);
    { step = 2; continue; }
  case 1:
    r0 = 0;
  case 2:
    // jmp value (already in r0)
    s.tmp_6 = r0;
    s.iconWidth___16558 = (s.tmp_6);
    s.lastBrkId = 3621;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3621]) return breakpoint(s, 11, 3621, r0);
  case 11:
    r0 = s.arg0.fields["icon"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    r0 = s.arg0.fields["icon"];
    s.tmp_1 = r0;
    r0 = pxsim_ImageMethods.height(s.tmp_1);
    { step = 4; continue; }
  case 3:
    r0 = 0;
  case 4:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    s.iconHeight___16571 = (s.tmp_2);
    s.lastBrkId = 3622;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3622]) return breakpoint(s, 12, 3622, r0);
  case 12:
    s.tmp_0 = textsprite_getFontForTextAndHeight__P3858_mk(s);
    r0 = s.arg0.fields["text"];
    s.tmp_0.arg0 = r0;
    r0 = s.arg0.fields["maxFontHeight"];
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1615; s.pc = 13; return s.tmp_0;
  case 13:
    r0 = s.retval;
    s.font___16578 = (r0);
    s.lastBrkId = 3623;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3623]) return breakpoint(s, 14, 3623, r0);
  case 14:
    s.tmp_1 = r0 = s.iconWidth___16558;
    s.tmp_4 = if_charWidth_1_mk(s);
    s.tmp_4.arg0 = s.font___16578;
    if (!s.tmp_4.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_4.arg0, "charWidth");
    } else {
      s.tmp_4.fn = s.tmp_4.arg0.vtable.iface["charWidth"];
      if (s.tmp_4.fn == null) { s.retval = s.tmp_4.arg0.fields["charWidth"]; }
      else if (!s.tmp_4.fn.isGetter) { s.retval = bind(s.tmp_4); }
     else { s.callLocIdx = 1616; s.pc = 15; return s.tmp_4; }
    }
  case 15:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = s.arg0.fields["text"];
    s.tmp_6 = r0;
    r0 = pxsim_String_.length(s.tmp_6);
    s.tmp_5 = r0;
    r0 = (s.tmp_3 * s.tmp_5);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 + s.tmp_2);
    s.tmp_0 = r0;
    r0 = (2 * s.borderAndPadding___16549);
    s.tmp_7 = r0;
    r0 = (s.tmp_0 + s.tmp_7);
    s.width___16585 = (r0);
    s.lastBrkId = 3624;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3624]) return breakpoint(s, 16, 3624, r0);
  case 16:
    s.tmp_1 = Math_max__P130_mk(s);
    s.tmp_1.arg0 = s.iconHeight___16571;
    s.tmp_2 = if_charHeight_1_mk(s);
    s.tmp_2.arg0 = s.font___16578;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "charHeight");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["charHeight"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["charHeight"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1617; s.pc = 18; return s.tmp_2; }
    }
  case 18:
    r0 = s.retval;
    s.tmp_1.arg1 = r0;
    s.callLocIdx = 1618; s.pc = 17; return s.tmp_1;
  case 17:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = (2 * s.borderAndPadding___16549);
    s.tmp_3 = r0;
    r0 = (s.tmp_0 + s.tmp_3);
    s.height___16598 = (r0);
    s.lastBrkId = 3625;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3625]) return breakpoint(s, 19, 3625, r0);
  case 19:
    r0 = pxsim.image.create(s.width___16585, s.height___16598);
    s.img___16608 = (r0);
    s.lastBrkId = 3626;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3626]) return breakpoint(s, 20, 3626, r0);
  case 20:
    r0 = s.arg0.fields["borderColor"];
    s.tmp_0 = r0;
    r0 = pxsim_ImageMethods.fill(s.img___16608, s.tmp_0);
    s.lastBrkId = 3627;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3627]) return breakpoint(s, 21, 3627, r0);
  case 21:
    s.tmp_0 = helpers_imageFillRect__P1753_mk(s);
    s.tmp_0.arg0 = s.img___16608;
    r0 = s.arg0.fields["borderWidth"];
    s.tmp_0.arg1 = r0;
    r0 = s.arg0.fields["borderWidth"];
    s.tmp_0.arg2 = r0;
    s.tmp_1 = r0 = s.width___16585;
    r0 = s.arg0.fields["borderWidth"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 * 2);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 - s.tmp_2);
    s.tmp_0.arg3 = r0;
    s.tmp_4 = r0 = s.height___16598;
    r0 = s.arg0.fields["borderWidth"];
    s.tmp_6 = r0;
    r0 = (s.tmp_6 * 2);
    s.tmp_5 = r0;
    r0 = (s.tmp_4 - s.tmp_5);
    s.tmp_0.arg4 = r0;
    r0 = s.arg0.fields["bg"];
    s.tmp_0.arg5 = r0;
    s.callLocIdx = 1619; s.pc = 22; return s.tmp_0;
  case 22:
    r0 = s.retval;
    s.lastBrkId = 3628;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3628]) return breakpoint(s, 23, 3628, r0);
  case 23:
    r0 = s.arg0.fields["icon"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 3629;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3629]) return breakpoint(s, 24, 3629, r0);
  case 24:
    r0 = (s.height___16598 - s.iconHeight___16571);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 / 2);
    s.iconHeightOffset___16638 = (r0);
    s.lastBrkId = 3630;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3630]) return breakpoint(s, 25, 3630, r0);
  case 25:
    s.tmp_0 = textsprite_renderScaledImage__P3857_mk(s);
    r0 = s.arg0.fields["icon"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = s.img___16608;
    s.tmp_0.arg2 = s.borderAndPadding___16549;
    s.tmp_0.arg3 = s.iconHeightOffset___16638;
    s.tmp_0.arg4 = 0;
    s.callLocIdx = 1620; s.pc = 26; return s.tmp_0;
  case 26:
    r0 = s.retval;
  case 5:
  case 6:
    s.lastBrkId = 3631;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3631]) return breakpoint(s, 27, 3631, r0);
  case 27:
    s.tmp_1 = r0 = s.height___16598;
    s.tmp_3 = if_charHeight_1_mk(s);
    s.tmp_3.arg0 = s.font___16578;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "charHeight");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["charHeight"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["charHeight"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1621; s.pc = 28; return s.tmp_3; }
    }
  case 28:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1 - s.tmp_2);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 / 2);
    s.textHeightOffset___16650 = (r0);
    s.lastBrkId = 3632;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3632]) return breakpoint(s, 29, 3632, r0);
  case 29:
    s.tmp_0 = helpers_imagePrint__P1785_mk(s);
    s.tmp_0.arg0 = s.img___16608;
    r0 = s.arg0.fields["text"];
    s.tmp_0.arg1 = r0;
    r0 = (s.iconWidth___16558 + s.borderAndPadding___16549);
    s.tmp_0.arg2 = r0;
    s.tmp_0.arg3 = s.textHeightOffset___16650;
    r0 = s.arg0.fields["fg"];
    s.tmp_0.arg4 = r0;
    s.tmp_0.arg5 = s.font___16578;
    s.tmp_0.arg6 = undefined;
    s.callLocIdx = 1622; s.pc = 30; return s.tmp_0;
  case 30:
    r0 = s.retval;
    s.lastBrkId = 3633;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3633]) return breakpoint(s, 31, 3633, r0);
  case 31:
    r0 = s.arg0.fields["outlineWidth"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 3634;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3634]) return breakpoint(s, 32, 3634, r0);
  case 32:
    s.tmp_2 = textsprite_outlineOtherColor__P3860_mk(s);
    s.tmp_2.arg0 = s.img___16608;
    r0 = s.arg0.fields["fg"];
    s.tmp_2.arg1 = r0;
    r0 = s.arg0.fields["outlineWidth"];
    s.tmp_2.arg2 = r0;
    r0 = s.arg0.fields["outlineColor"];
    s.tmp_2.arg3 = r0;
    s.callLocIdx = 1623; s.pc = 33; return s.tmp_2;
  case 33:
    r0 = s.retval;
  case 7:
  case 8:
    s.lastBrkId = 3635;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3635]) return breakpoint(s, 34, 3635, r0);
  case 34:
    s.tmp_0 = Sprite_setImage__P2132_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.img___16608;
    s.callLocIdx = 1624; s.pc = 35; return s.tmp_0;
  case 35:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
TextSprite_update__P3850.info = {"start":678,"length":1260,"line":26,"column":4,"endLine":45,"endColumn":5,"fileName":"pxt_modules/arcade-text/text.ts","functionName":"update","argumentNames":["this"]}

function TextSprite_update__P3850_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: TextSprite_update__P3850, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  borderAndPadding___16549: undefined,
  iconWidth___16558: undefined,
  iconHeight___16571: undefined,
  font___16578: undefined,
  width___16585: undefined,
  height___16598: undefined,
  img___16608: undefined,
  iconHeightOffset___16638: undefined,
  textHeightOffset___16650: undefined,
  arg0: undefined,
} }





function textsprite_outlineOtherColor__P3860(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.toOutlineX___16686 = undefined;
    s.toOutlineY___16688 = undefined;
    s.x___16690 = undefined;
    s.y___16696 = undefined;
    s.sx___16702 = undefined;
    s.sy___16707 = undefined;
    s.i___16786 = undefined;
    s.x___16792 = undefined;
    s.y___16796 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3655;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3655]) return breakpoint(s, 24, 3655, r0);
  case 24:
    r0 = pxsim_Array__mk();
    s.toOutlineX___16686 = (r0);
    s.lastBrkId = 3656;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3656]) return breakpoint(s, 25, 3656, r0);
  case 25:
    r0 = pxsim_Array__mk();
    s.toOutlineY___16688 = (r0);
    s.lastBrkId = 3657;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3657]) return breakpoint(s, 26, 3657, r0);
  case 26:
    s.x___16690 = (0);
    s.lastBrkId = 3658;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3658]) return breakpoint(s, 27, 3658, r0);
  case 27:
  case 1:
    s.lastBrkId = 3659;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3659]) return breakpoint(s, 28, 3659, r0);
  case 28:
    s.tmp_1 = r0 = s.x___16690;
    r0 = pxsim_ImageMethods.width(s.arg0);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 21; continue; }
    s.lastBrkId = 3660;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3660]) return breakpoint(s, 29, 3660, r0);
  case 29:
    s.y___16696 = (0);
    s.lastBrkId = 3661;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3661]) return breakpoint(s, 30, 3661, r0);
  case 30:
  case 2:
    s.lastBrkId = 3662;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3662]) return breakpoint(s, 31, 3662, r0);
  case 31:
    s.tmp_1 = r0 = s.y___16696;
    r0 = pxsim_ImageMethods.height(s.arg0);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 20; continue; }
    s.lastBrkId = 3663;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3663]) return breakpoint(s, 32, 3663, r0);
  case 32:
    s.sx___16702 = (0);
    s.lastBrkId = 3664;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3664]) return breakpoint(s, 33, 3664, r0);
  case 33:
  case 3:
    s.lastBrkId = 3665;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3665]) return breakpoint(s, 34, 3665, r0);
  case 34:
    r0 = (s.sx___16702 <= s.arg2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 19; continue; }
    s.lastBrkId = 3666;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3666]) return breakpoint(s, 35, 3666, r0);
  case 35:
    s.sy___16707 = (0);
    s.lastBrkId = 3667;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3667]) return breakpoint(s, 36, 3667, r0);
  case 36:
  case 4:
    s.lastBrkId = 3668;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3668]) return breakpoint(s, 37, 3668, r0);
  case 37:
    r0 = (s.sy___16707 <= s.arg2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 18; continue; }
    s.lastBrkId = 3669;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3669]) return breakpoint(s, 38, 3669, r0);
  case 38:
    r0 = (s.sx___16702 + s.sy___16707);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 === 0);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 3670;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3670]) return breakpoint(s, 39, 3670, r0);
  case 39:
    { step = 17; continue; }
  case 5:
  case 6:
    s.lastBrkId = 3671;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3671]) return breakpoint(s, 40, 3671, r0);
  case 40:
    r0 = pxsim_ImageMethods.getPixel(s.arg0, s.x___16690, s.y___16696);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 === s.arg1);
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 3672;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3672]) return breakpoint(s, 41, 3672, r0);
  case 41:
    { step = 17; continue; }
  case 7:
  case 8:
    s.lastBrkId = 3673;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3673]) return breakpoint(s, 42, 3673, r0);
  case 42:
    s.tmp_7 = r0 = s.arg0;
    r0 = (s.x___16690 + s.sx___16702);
    s.tmp_8 = r0;
    r0 = (s.y___16696 + s.sy___16707);
    s.tmp_9 = r0;
    r0 = pxsim_ImageMethods.getPixel(s.tmp_7, s.tmp_8, s.tmp_9);
    s.tmp_6 = r0;
    r0 = (s.tmp_6 === s.arg1);
    s.tmp_5 = r0;
    r0 = pxsim_numops_toBool(s.tmp_5);
    if (!r0) { step = 9; continue; }
    r0 = s.tmp_5;
    { step = 10; continue; }
  case 9:
    s.tmp_11 = r0 = s.arg0;
    r0 = (s.x___16690 - s.sx___16702);
    s.tmp_12 = r0;
    r0 = (s.y___16696 + s.sy___16707);
    s.tmp_13 = r0;
    r0 = pxsim_ImageMethods.getPixel(s.tmp_11, s.tmp_12, s.tmp_13);
    s.tmp_10 = r0;
    r0 = (s.tmp_10 === s.arg1);
  case 10:
    // jmp value (already in r0)
    s.tmp_14 = r0;
    r0 = pxsim_numops_toBool(s.tmp_14);
    if (!r0) { step = 11; continue; }
    r0 = s.tmp_14;
    { step = 12; continue; }
  case 11:
    s.tmp_16 = r0 = s.arg0;
    r0 = (s.x___16690 + s.sx___16702);
    s.tmp_17 = r0;
    r0 = (s.y___16696 - s.sy___16707);
    s.tmp_18 = r0;
    r0 = pxsim_ImageMethods.getPixel(s.tmp_16, s.tmp_17, s.tmp_18);
    s.tmp_15 = r0;
    r0 = (s.tmp_15 === s.arg1);
  case 12:
    // jmp value (already in r0)
    s.tmp_19 = r0;
    r0 = pxsim_numops_toBool(s.tmp_19);
    if (!r0) { step = 13; continue; }
    r0 = s.tmp_19;
    { step = 14; continue; }
  case 13:
    s.tmp_21 = r0 = s.arg0;
    r0 = (s.x___16690 - s.sx___16702);
    s.tmp_22 = r0;
    r0 = (s.y___16696 - s.sy___16707);
    s.tmp_23 = r0;
    r0 = pxsim_ImageMethods.getPixel(s.tmp_21, s.tmp_22, s.tmp_23);
    s.tmp_20 = r0;
    r0 = (s.tmp_20 === s.arg1);
  case 14:
    // jmp value (already in r0)
    s.tmp_24 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_24);
    if (!r0) { step = 15; continue; }
    s.lastBrkId = 3674;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3674]) return breakpoint(s, 43, 3674, r0);
  case 43:
    r0 = pxsim_Array__push(s.toOutlineX___16686, s.x___16690);
    s.lastBrkId = 3675;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3675]) return breakpoint(s, 44, 3675, r0);
  case 44:
    r0 = pxsim_Array__push(s.toOutlineY___16688, s.y___16696);
  case 15:
  case 16:
  case 17:
    s.lastBrkId = 3676;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3676]) return breakpoint(s, 45, 3676, r0);
  case 45:
    r0 = (s.sy___16707 + 1);
    s.sy___16707 = (r0);
    { step = 4; continue; }
  case 18:
    s.lastBrkId = 3677;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3677]) return breakpoint(s, 46, 3677, r0);
  case 46:
    r0 = (s.sx___16702 + 1);
    s.sx___16702 = (r0);
    { step = 3; continue; }
  case 19:
    s.lastBrkId = 3678;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3678]) return breakpoint(s, 47, 3678, r0);
  case 47:
    r0 = (s.y___16696 + 1);
    s.y___16696 = (r0);
    { step = 2; continue; }
  case 20:
    s.lastBrkId = 3679;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3679]) return breakpoint(s, 48, 3679, r0);
  case 48:
    r0 = (s.x___16690 + 1);
    s.x___16690 = (r0);
    { step = 1; continue; }
  case 21:
    s.lastBrkId = 3680;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3680]) return breakpoint(s, 49, 3680, r0);
  case 49:
    s.i___16786 = (0);
    s.lastBrkId = 3681;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3681]) return breakpoint(s, 50, 3681, r0);
  case 50:
  case 22:
    s.lastBrkId = 3682;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3682]) return breakpoint(s, 51, 3682, r0);
  case 51:
    s.tmp_1 = r0 = s.i___16786;
    r0 = pxsim_Array__length(s.toOutlineX___16686);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 23; continue; }
    s.lastBrkId = 3683;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3683]) return breakpoint(s, 52, 3683, r0);
  case 52:
    r0 = pxsim_Array__getAt(s.toOutlineX___16686, s.i___16786);
    s.x___16792 = (r0);
    s.lastBrkId = 3684;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3684]) return breakpoint(s, 53, 3684, r0);
  case 53:
    r0 = pxsim_Array__getAt(s.toOutlineY___16688, s.i___16786);
    s.y___16796 = (r0);
    s.lastBrkId = 3685;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3685]) return breakpoint(s, 54, 3685, r0);
  case 54:
    r0 = pxsim_ImageMethods.setPixel(s.arg0, s.x___16792, s.y___16796, s.arg3);
    s.lastBrkId = 3686;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3686]) return breakpoint(s, 55, 3686, r0);
  case 55:
    r0 = (s.i___16786 + 1);
    s.i___16786 = (r0);
    { step = 22; continue; }
  case 23:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
textsprite_outlineOtherColor__P3860.info = {"start":5293,"length":1299,"line":148,"column":4,"endLine":176,"endColumn":5,"fileName":"pxt_modules/arcade-text/text.ts","functionName":"outlineOtherColor","argumentNames":["img","targetColor","outlineWidth","outlineColor"]}

function textsprite_outlineOtherColor__P3860_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: textsprite_outlineOtherColor__P3860, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  tmp_12: undefined,
  tmp_13: undefined,
  tmp_14: undefined,
  tmp_15: undefined,
  tmp_16: undefined,
  tmp_17: undefined,
  tmp_18: undefined,
  tmp_19: undefined,
  tmp_20: undefined,
  tmp_21: undefined,
  tmp_22: undefined,
  tmp_23: undefined,
  tmp_24: undefined,
  toOutlineX___16686: undefined,
  toOutlineY___16688: undefined,
  x___16690: undefined,
  y___16696: undefined,
  sx___16702: undefined,
  sy___16707: undefined,
  i___16786: undefined,
  x___16792: undefined,
  y___16796: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function textsprite_getFontForTextAndHeight__P3858(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.baseFont___16869 = undefined;
    s.hasUnicode___16873 = undefined;
    s.availableFonts___16877 = undefined;
    s.remainders___16885 = undefined;
    s.fontIdx___16895 = undefined;
    s.font___16910 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3648;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3648]) return breakpoint(s, 3, 3648, r0);
  case 3:
    s.tmp_0 = image_getFontForText__P1772_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1625; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.baseFont___16869 = (r0);
    s.lastBrkId = 3649;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3649]) return breakpoint(s, 5, 3649, r0);
  case 5:
    s.tmp_1 = if_charHeight_1_mk(s);
    s.tmp_1.arg0 = s.baseFont___16869;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "charHeight");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["charHeight"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["charHeight"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 1626; s.pc = 6; return s.tmp_1; }
    }
  case 6:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = (s.tmp_0 === 12);
    s.hasUnicode___16873 = (r0);
    s.lastBrkId = 3650;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3650]) return breakpoint(s, 7, 3650, r0);
  case 7:
    r0 = pxsim_numops_toBoolDecr(s.hasUnicode___16873);
    if (!r0) { step = 1; continue; }
    r0 = pxsim_Array__mk();
    s.tmp_0 = r0;
    r0 = pxsim_Array__push(s.tmp_0, s.baseFont___16869);
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = pxsim_Array__push(s.tmp_1, globals.font8___1770);
    r0 = pxsim_Array__push(s.tmp_1, globals.font5___1775);
    r0 = s.tmp_1;
  case 2:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    s.availableFonts___16877 = (s.tmp_2);
    s.lastBrkId = 3651;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3651]) return breakpoint(s, 8, 3651, r0);
  case 8:
    r0 = pxsim_pxtcore_mkAction(1, remainders_inline__P16887);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg1);
    s.tmp_1 = helpers_arrayMap__P106_mk(s);
    s.tmp_1.arg0 = s.availableFonts___16877;
    s.tmp_1.arg1 = s.tmp_0;
    s.callLocIdx = 1628; s.pc = 9; return s.tmp_1;
  case 9:
    r0 = s.retval;
    s.remainders___16885 = (r0);
    s.lastBrkId = 3652;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3652]) return breakpoint(s, 10, 3652, r0);
  case 10:
    r0 = pxsim_pxtcore_mkAction(1, fontIdx_inline__P16899);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.remainders___16885);
    s.tmp_1 = helpers_arrayReduce__P112_mk(s);
    s.tmp_1.arg0 = s.remainders___16885;
    s.tmp_1.arg1 = s.tmp_0;
    s.tmp_1.arg2 = 99;
    s.callLocIdx = 1629; s.pc = 11; return s.tmp_1;
  case 11:
    r0 = s.retval;
    s.fontIdx___16895 = (r0);
    s.lastBrkId = 3653;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3653]) return breakpoint(s, 12, 3653, r0);
  case 12:
    r0 = pxsim_Array__getAt(s.availableFonts___16877, s.fontIdx___16895);
    s.font___16910 = (r0);
    s.lastBrkId = 3654;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3654]) return breakpoint(s, 13, 3654, r0);
  case 13:
    s.tmp_0 = image_scaledFont__P1774_mk(s);
    s.tmp_0.arg0 = s.font___16910;
    s.tmp_1 = r0 = s.arg1;
    s.tmp_3 = if_charHeight_1_mk(s);
    s.tmp_3.arg0 = s.font___16910;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "charHeight");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["charHeight"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["charHeight"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1630; s.pc = 15; return s.tmp_3; }
    }
  case 15:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1 / s.tmp_2);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1631; s.pc = 14; return s.tmp_0;
  case 14:
    r0 = s.retval;
    return leave(s, r0)
  default: oops()
} } }
textsprite_getFontForTextAndHeight__P3858.info = {"start":4027,"length":663,"line":116,"column":4,"endLine":126,"endColumn":5,"fileName":"pxt_modules/arcade-text/text.ts","functionName":"getFontForTextAndHeight","argumentNames":["text","maxHeight"]}

function textsprite_getFontForTextAndHeight__P3858_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: textsprite_getFontForTextAndHeight__P3858, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  baseFont___16869: undefined,
  hasUnicode___16873: undefined,
  availableFonts___16877: undefined,
  remainders___16885: undefined,
  fontIdx___16895: undefined,
  font___16910: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function remainders_inline__P16887(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = r0 = s.caps[0];
    s.tmp_2 = if_charHeight_1_mk(s);
    s.tmp_2.arg0 = s.arg0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "charHeight");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["charHeight"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["charHeight"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1627; s.pc = 1; return s.tmp_2; }
    }
  case 1:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0 % s.tmp_1);
    return leave(s, r0)
  default: oops()
} } }
remainders_inline__P16887.info = {"start":4455,"length":29,"line":122,"column":46,"endLine":122,"endColumn":75,"fileName":"pxt_modules/arcade-text/text.ts","functionName":"inline","argumentNames":["s"]}

function remainders_inline__P16887_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: remainders_inline__P16887, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function fontIdx_inline__P16899(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = pxsim_Array__getAt(s.caps[0], s.arg0);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 <= s.arg1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.arg0;
    { step = 2; continue; }
  case 1:
    r0 = s.arg2;
  case 2:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = s.tmp_2;
    return leave(s, r0)
  default: oops()
} } }
fontIdx_inline__P16899.info = {"start":4528,"length":39,"line":123,"column":42,"endLine":123,"endColumn":81,"fileName":"pxt_modules/arcade-text/text.ts","functionName":"inline","argumentNames":["p","n","i"]}

function fontIdx_inline__P16899_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: fontIdx_inline__P16899, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function image_scaledFont__P1774(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 839;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[839]) return breakpoint(s, 6, 839, r0);
  case 6:
    r0 = (s.arg1 | 0);
    s.arg1 = (r0);
    s.lastBrkId = 840;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[840]) return breakpoint(s, 7, 840, r0);
  case 7:
    r0 = (s.arg1 < 2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 841;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[841]) return breakpoint(s, 8, 841, r0);
  case 8:
    r0 = s.arg0;
    { step = 5; continue; }
  case 1:
  case 2:
    s.lastBrkId = 842;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[842]) return breakpoint(s, 9, 842, r0);
  case 9:
    r0 = pxsim_pxtrt.mkMap();
    s.tmp_1 = r0;
    s.tmp_4 = if_charWidth_1_mk(s);
    s.tmp_4.arg0 = s.arg0;
    if (!s.tmp_4.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_4.arg0, "charWidth");
    } else {
      s.tmp_4.fn = s.tmp_4.arg0.vtable.iface["charWidth"];
      if (s.tmp_4.fn == null) { s.retval = s.tmp_4.arg0.fields["charWidth"]; }
      else if (!s.tmp_4.fn.isGetter) { s.retval = bind(s.tmp_4); }
     else { s.callLocIdx = 136; s.pc = 10; return s.tmp_4; }
    }
  case 10:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_3 * s.arg1);
    s.tmp_2 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_1, "charWidth", s.tmp_2);
    s.tmp_7 = if_charHeight_1_mk(s);
    s.tmp_7.arg0 = s.arg0;
    if (!s.tmp_7.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_7.arg0, "charHeight");
    } else {
      s.tmp_7.fn = s.tmp_7.arg0.vtable.iface["charHeight"];
      if (s.tmp_7.fn == null) { s.retval = s.tmp_7.arg0.fields["charHeight"]; }
      else if (!s.tmp_7.fn.isGetter) { s.retval = bind(s.tmp_7); }
     else { s.callLocIdx = 137; s.pc = 11; return s.tmp_7; }
    }
  case 11:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = (s.tmp_6 * s.arg1);
    s.tmp_5 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_1, "charHeight", s.tmp_5);
    s.tmp_9 = if_data_1_mk(s);
    s.tmp_9.arg0 = s.arg0;
    if (!s.tmp_9.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_9.arg0, "data");
    } else {
      s.tmp_9.fn = s.tmp_9.arg0.vtable.iface["data"];
      if (s.tmp_9.fn == null) { s.retval = s.tmp_9.arg0.fields["data"]; }
      else if (!s.tmp_9.fn.isGetter) { s.retval = bind(s.tmp_9); }
     else { s.callLocIdx = 138; s.pc = 12; return s.tmp_9; }
    }
  case 12:
    r0 = s.retval;
    s.tmp_8 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_1, "data", s.tmp_8);
    s.tmp_11 = if_multiplier_1_mk(s);
    s.tmp_11.arg0 = s.arg0;
    if (!s.tmp_11.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_11.arg0, "multiplier");
    } else {
      s.tmp_11.fn = s.tmp_11.arg0.vtable.iface["multiplier"];
      if (s.tmp_11.fn == null) { s.retval = s.tmp_11.arg0.fields["multiplier"]; }
      else if (!s.tmp_11.fn.isGetter) { s.retval = bind(s.tmp_11); }
     else { s.callLocIdx = 139; s.pc = 13; return s.tmp_11; }
    }
  case 13:
    r0 = s.retval;
    s.tmp_10 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_10);
    if (!r0) { step = 3; continue; }
    s.tmp_12 = r0 = s.arg1;
    s.tmp_14 = if_multiplier_1_mk(s);
    s.tmp_14.arg0 = s.arg0;
    if (!s.tmp_14.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_14.arg0, "multiplier");
    } else {
      s.tmp_14.fn = s.tmp_14.arg0.vtable.iface["multiplier"];
      if (s.tmp_14.fn == null) { s.retval = s.tmp_14.arg0.fields["multiplier"]; }
      else if (!s.tmp_14.fn.isGetter) { s.retval = bind(s.tmp_14); }
     else { s.callLocIdx = 140; s.pc = 14; return s.tmp_14; }
    }
  case 14:
    r0 = s.retval;
    s.tmp_13 = r0;
    r0 = (s.tmp_12 * s.tmp_13);
    { step = 4; continue; }
  case 3:
    r0 = s.arg1;
  case 4:
    // jmp value (already in r0)
    s.tmp_15 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_1, "multiplier", s.tmp_15);
    r0 = s.tmp_1;
  case 5:
    return leave(s, r0)
  default: oops()
} } }
image_scaledFont__P1774.info = {"start":12096,"length":331,"line":150,"column":4,"endLine":160,"endColumn":5,"fileName":"pxt_modules/screen/text.ts","functionName":"scaledFont","argumentNames":["f","size"]}

function image_scaledFont__P1774_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: image_scaledFont__P1774, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  tmp_12: undefined,
  tmp_13: undefined,
  tmp_14: undefined,
  tmp_15: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function helpers_arrayMap__P106(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.res___16947 = undefined;
    s.len___16949 = undefined;
    s.i___16952 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 94;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[94]) return breakpoint(s, 3, 94, r0);
  case 3:
    r0 = pxsim_Array__mk();
    s.res___16947 = (r0);
    s.lastBrkId = 95;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[95]) return breakpoint(s, 4, 95, r0);
  case 4:
    r0 = pxsim_Array__length(s.arg0);
    s.len___16949 = (r0);
    s.lastBrkId = 96;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[96]) return breakpoint(s, 5, 96, r0);
  case 5:
    s.i___16952 = (0);
    s.lastBrkId = 97;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[97]) return breakpoint(s, 6, 97, r0);
  case 6:
  case 1:
    s.lastBrkId = 98;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[98]) return breakpoint(s, 7, 98, r0);
  case 7:
    r0 = (s.i___16952 < s.len___16949);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 99;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[99]) return breakpoint(s, 8, 99, r0);
  case 8:
    s.tmp_1 = r0 = s.res___16947;
    s.tmp_3 = lambda_3_mk(s);
    s.tmp_3.argL = s.arg1;
    r0 = pxsim_Array__getAt(s.arg0, s.i___16952);
    s.tmp_3.arg0 = r0;
    s.tmp_3.arg1 = s.i___16952;
    setupLambda(s.tmp_3, s.tmp_3.argL);
    s.callLocIdx = 4; s.pc = 9; return s.tmp_3;
  case 9:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_Array__push(s.tmp_1, s.tmp_2);
    s.lastBrkId = 100;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[100]) return breakpoint(s, 10, 100, r0);
  case 10:
    r0 = (s.i___16952 + 1);
    s.i___16952 = (r0);
    { step = 1; continue; }
  case 2:
    s.lastBrkId = 101;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[101]) return breakpoint(s, 11, 101, r0);
  case 11:
    r0 = s.res___16947;
    return leave(s, r0)
  default: oops()
} } }
helpers_arrayMap__P106.info = {"start":6528,"length":299,"line":229,"column":4,"endLine":236,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"arrayMap","argumentNames":["arr","callbackfn"]}

function helpers_arrayMap__P106_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_arrayMap__P106, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  res___16947: undefined,
  len___16949: undefined,
  i___16952: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function textsprite_renderScaledImage__P3857(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.scale___16813 = undefined;
    s.tile___16815 = undefined;
    s.i___16817 = undefined;
    s.j___16823 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3636;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3636]) return breakpoint(s, 7, 3636, r0);
  case 7:
    s.scale___16813 = (s.arg4);
    s.lastBrkId = 3637;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3637]) return breakpoint(s, 8, 3637, r0);
  case 8:
    s.tile___16815 = (s.arg0);
    s.lastBrkId = 3638;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3638]) return breakpoint(s, 9, 3638, r0);
  case 9:
    s.i___16817 = (0);
    s.lastBrkId = 3639;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3639]) return breakpoint(s, 10, 3639, r0);
  case 10:
  case 1:
    s.lastBrkId = 3640;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3640]) return breakpoint(s, 11, 3640, r0);
  case 11:
    s.tmp_1 = r0 = s.i___16817;
    r0 = pxsim_ImageMethods.width(s.arg0);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 6; continue; }
    s.lastBrkId = 3641;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3641]) return breakpoint(s, 12, 3641, r0);
  case 12:
    s.j___16823 = (0);
    s.lastBrkId = 3642;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3642]) return breakpoint(s, 13, 3642, r0);
  case 13:
  case 2:
    s.lastBrkId = 3643;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3643]) return breakpoint(s, 14, 3643, r0);
  case 14:
    s.tmp_1 = r0 = s.j___16823;
    r0 = pxsim_ImageMethods.height(s.arg0);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 3644;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3644]) return breakpoint(s, 15, 3644, r0);
  case 15:
    r0 = pxsim_ImageMethods.getPixel(s.arg0, s.i___16817, s.j___16823);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 != 0);
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 3645;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3645]) return breakpoint(s, 16, 3645, r0);
  case 16:
    s.tmp_5 = r0 = s.arg1;
    s.tmp_7 = r0 = s.arg2;
    r0 = (s.i___16817 >> s.scale___16813);
    s.tmp_8 = r0;
    r0 = (s.tmp_7 + s.tmp_8);
    s.tmp_6 = r0;
    s.tmp_10 = r0 = s.arg3;
    r0 = (s.j___16823 >> s.scale___16813);
    s.tmp_11 = r0;
    r0 = (s.tmp_10 + s.tmp_11);
    s.tmp_9 = r0;
    r0 = pxsim_ImageMethods.getPixel(s.arg0, s.i___16817, s.j___16823);
    s.tmp_12 = r0;
    r0 = pxsim_ImageMethods.setPixel(s.tmp_5, s.tmp_6, s.tmp_9, s.tmp_12);
  case 3:
  case 4:
    s.lastBrkId = 3646;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3646]) return breakpoint(s, 17, 3646, r0);
  case 17:
    s.tmp_0 = r0 = s.j___16823;
    r0 = (1 << s.scale___16813);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 + s.tmp_1);
    s.j___16823 = (r0);
    { step = 2; continue; }
  case 5:
    s.lastBrkId = 3647;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3647]) return breakpoint(s, 18, 3647, r0);
  case 18:
    s.tmp_0 = r0 = s.i___16817;
    r0 = (1 << s.scale___16813);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 + s.tmp_1);
    s.i___16817 = (r0);
    { step = 1; continue; }
  case 6:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
textsprite_renderScaledImage__P3857.info = {"start":3500,"length":521,"line":104,"column":4,"endLine":114,"endColumn":5,"fileName":"pxt_modules/arcade-text/text.ts","functionName":"renderScaledImage","argumentNames":["source","destination","x","y","downScalePowerOfTwo"]}

function textsprite_renderScaledImage__P3857_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: textsprite_renderScaledImage__P3857, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  tmp_12: undefined,
  scale___16813: undefined,
  tile___16815: undefined,
  i___16817: undefined,
  j___16823: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
} }





function helpers_stringToUpperCase__P120(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.r___16163 = undefined;
    s.prev___16164 = undefined;
    s.i___16165 = undefined;
    s.c___16171 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 174;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[174]) return breakpoint(s, 7, 174, r0);
  case 7:
    r0 = pxsim_String_.mkEmpty();
    s.r___16163 = (r0);
    s.lastBrkId = 175;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[175]) return breakpoint(s, 8, 175, r0);
  case 8:
    s.prev___16164 = (0);
    s.lastBrkId = 176;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[176]) return breakpoint(s, 9, 176, r0);
  case 9:
    s.i___16165 = (0);
    s.lastBrkId = 177;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[177]) return breakpoint(s, 10, 177, r0);
  case 10:
  case 1:
    s.lastBrkId = 178;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[178]) return breakpoint(s, 11, 178, r0);
  case 11:
    s.tmp_1 = r0 = s.i___16165;
    r0 = pxsim_String_.length(s.arg0);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 6; continue; }
    s.lastBrkId = 179;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[179]) return breakpoint(s, 12, 179, r0);
  case 12:
    r0 = pxsim_String_.charCodeAt(s.arg0, s.i___16165);
    s.c___16171 = (r0);
    s.lastBrkId = 180;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[180]) return breakpoint(s, 13, 180, r0);
  case 13:
    r0 = (97 <= s.c___16171);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 2; continue; }
    r0 = s.tmp_0;
    { step = 3; continue; }
  case 2:
    r0 = (s.c___16171 <= 122);
  case 3:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 181;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[181]) return breakpoint(s, 14, 181, r0);
  case 14:
    if ((s.r___16163) && (s.r___16163).vtable) {
    setupResume(s, 15);
    pxsim_String__stringConv(s.r___16163);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.r___16163) + ""; }
  case 15:
    r0 = s.retval;
    s.tmp_2 = r0;
    s.tmp_7 = helpers_stringSlice__P119_mk(s);
    s.tmp_7.arg0 = s.arg0;
    s.tmp_7.arg1 = s.prev___16164;
    s.tmp_7.arg2 = s.i___16165;
    s.callLocIdx = 11; s.pc = 16; return s.tmp_7;
  case 16:
    r0 = s.retval;
    s.tmp_6 = r0;
    if ((s.tmp_6) && (s.tmp_6).vtable) {
    setupResume(s, 17);
    pxsim_String__stringConv(s.tmp_6);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_6) + ""; }
  case 17:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = (s.c___16171 - 32);
    s.tmp_10 = r0;
    r0 = pxsim_String_.fromCharCode(s.tmp_10);
    s.tmp_9 = r0;
    if ((s.tmp_9) && (s.tmp_9).vtable) {
    setupResume(s, 18);
    pxsim_String__stringConv(s.tmp_9);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_9) + ""; }
  case 18:
    r0 = s.retval;
    s.tmp_8 = r0;
    r0 = pxsim_String__concat(s.tmp_5, s.tmp_8);
    s.tmp_4 = r0;
    if ((s.tmp_4) && (s.tmp_4).vtable) {
    setupResume(s, 19);
    pxsim_String__stringConv(s.tmp_4);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_4) + ""; }
  case 19:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = pxsim_String__concat(s.tmp_2, s.tmp_3);
    s.r___16163 = (r0);
    s.lastBrkId = 182;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[182]) return breakpoint(s, 20, 182, r0);
  case 20:
    r0 = (s.i___16165 + 1);
    s.prev___16164 = (r0);
  case 4:
  case 5:
    s.lastBrkId = 183;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[183]) return breakpoint(s, 21, 183, r0);
  case 21:
    r0 = (s.i___16165 + 1);
    s.i___16165 = (r0);
    { step = 1; continue; }
  case 6:
    s.lastBrkId = 184;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[184]) return breakpoint(s, 22, 184, r0);
  case 22:
    if ((s.r___16163) && (s.r___16163).vtable) {
    setupResume(s, 23);
    pxsim_String__stringConv(s.r___16163);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.r___16163) + ""; }
  case 23:
    r0 = s.retval;
    s.tmp_0 = r0;
    s.tmp_3 = helpers_stringSlice__P119_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.tmp_3.arg1 = s.prev___16164;
    s.tmp_3.arg2 = undefined;
    s.callLocIdx = 12; s.pc = 24; return s.tmp_3;
  case 24:
    r0 = s.retval;
    s.tmp_2 = r0;
    if ((s.tmp_2) && (s.tmp_2).vtable) {
    setupResume(s, 25);
    pxsim_String__stringConv(s.tmp_2);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_2) + ""; }
  case 25:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_String__concat(s.tmp_0, s.tmp_1);
    s.r___16163 = (r0);
    s.lastBrkId = 185;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[185]) return breakpoint(s, 26, 185, r0);
  case 26:
    r0 = s.r___16163;
    return leave(s, r0)
  default: oops()
} } }
helpers_stringToUpperCase__P120.info = {"start":12038,"length":387,"line":405,"column":4,"endLine":417,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"stringToUpperCase","argumentNames":["s"]}

function helpers_stringToUpperCase__P120_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_stringToUpperCase__P120, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  r___16163: undefined,
  prev___16164: undefined,
  i___16165: undefined,
  c___16171: undefined,
  arg0: undefined,
} }





function RotatingScreens_rotate__P3956(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, RotatingScreens__C3926_VT)) failedCast(r0);
    s.lastBrkId = 3735;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3735]) return breakpoint(s, 1, 3735, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["_currScreen"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_currScreen"] = (s.tmp_1);
    s.lastBrkId = 3736;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3736]) return breakpoint(s, 2, 3736, r0);
  case 2:
    s.tmp_0 = RotatingScreens__C3926_v2_1_mk(s);
    s.tmp_0.arg0 = s.arg0;
    if (!checkSubtype(s.tmp_0.arg0, RotatingScreens__C3926_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.refresh;
    s.pc = 3; return s.tmp_0;
  case 3:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
RotatingScreens_rotate__P3956.info = {"start":17192,"length":79,"line":579,"column":4,"endLine":582,"endColumn":5,"fileName":"pxt_modules/pxt-arcade-info-screens/info-screens.ts","functionName":"rotate","argumentNames":["this"]}

function RotatingScreens_rotate__P3956_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: RotatingScreens_rotate__P3956, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function RotatingScreens_refresh__P3955(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, RotatingScreens__C3926_VT)) failedCast(r0);
    s.lastBrkId = 3731;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3731]) return breakpoint(s, 7, 3731, r0);
  case 7:
    r0 = s.arg0.fields["_currScreen"];
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = s.arg0.fields["_currScreen"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 < 0);
  case 2:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBool(s.tmp_4);
    if (!r0) { step = 3; continue; }
    r0 = s.tmp_4;
    { step = 4; continue; }
  case 3:
    r0 = s.arg0.fields["_currScreen"];
    s.tmp_5 = r0;
    s.tmp_8 = if_data_1_mk(s);
    r0 = s.arg0.fields["_headlines"];
    s.tmp_8.arg0 = r0;
    if (!s.tmp_8.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_8.arg0, "data");
    } else {
      s.tmp_8.fn = s.tmp_8.arg0.vtable.iface["data"];
      if (s.tmp_8.fn == null) { s.retval = s.tmp_8.arg0.fields["data"]; }
      else if (!s.tmp_8.fn.isGetter) { s.retval = bind(s.tmp_8); }
     else { s.callLocIdx = 1643; s.pc = 8; return s.tmp_8; }
    }
  case 8:
    r0 = s.retval;
    s.tmp_7 = r0;
    r0 = pxsim_Array__length(s.tmp_7);
    s.tmp_6 = r0;
    r0 = (s.tmp_5 >= s.tmp_6);
  case 4:
    // jmp value (already in r0)
    s.tmp_9 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_9);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 3732;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3732]) return breakpoint(s, 9, 3732, r0);
  case 9:
    r0 = (s.arg0).fields["_currScreen"] = (0);
  case 5:
  case 6:
    s.lastBrkId = 3733;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3733]) return breakpoint(s, 10, 3733, r0);
  case 10:
    s.tmp_0 = RotatingScreens_drawCurrHeadline__P6603_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1644; s.pc = 11; return s.tmp_0;
  case 11:
    r0 = s.retval;
    s.lastBrkId = 3734;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3734]) return breakpoint(s, 12, 3734, r0);
  case 12:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_3 = game_runtime__P2630_mk(s);
    s.callLocIdx = 1645; s.pc = 13; return s.tmp_3;
  case 13:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = s.arg0.fields["_interval"];
    s.tmp_4 = r0;
    r0 = (s.tmp_2 + s.tmp_4);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_next"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
RotatingScreens_refresh__P3955.info = {"start":16699,"length":319,"line":566,"column":4,"endLine":572,"endColumn":5,"fileName":"pxt_modules/pxt-arcade-info-screens/info-screens.ts","functionName":"refresh","argumentNames":["this"]}

function RotatingScreens_refresh__P3955_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: RotatingScreens_refresh__P3955, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  arg0: undefined,
} }





function RotatingScreens_drawCurrHeadline__P6603(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lines___14147 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, RotatingScreens__C3926_VT)) failedCast(r0);
    s.lastBrkId = 3814;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3814]) return breakpoint(s, 8, 3814, r0);
  case 8:
    r0 = pxsim_numops_toBoolDecr(globals.RotatingScreens__base___6606);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3815;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3815]) return breakpoint(s, 9, 3815, r0);
  case 9:
    { step = 7; continue; }
  case 1:
  case 2:
    s.lastBrkId = 3816;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3816]) return breakpoint(s, 10, 3816, r0);
  case 10:
    s.tmp_3 = if_data_1_mk(s);
    r0 = s.arg0.fields["_headlines"];
    s.tmp_3.arg0 = r0;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "data");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["data"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["data"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1760; s.pc = 11; return s.tmp_3; }
    }
  case 11:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 3817;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3817]) return breakpoint(s, 12, 3817, r0);
  case 12:
    s.tmp_5 = if_data_1_mk(s);
    r0 = s.arg0.fields["_headlines"];
    s.tmp_5.arg0 = r0;
    if (!s.tmp_5.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_5.arg0, "data");
    } else {
      s.tmp_5.fn = s.tmp_5.arg0.vtable.iface["data"];
      if (s.tmp_5.fn == null) { s.retval = s.tmp_5.arg0.fields["data"]; }
      else if (!s.tmp_5.fn.isGetter) { s.retval = bind(s.tmp_5); }
     else { s.callLocIdx = 1761; s.pc = 13; return s.tmp_5; }
    }
  case 13:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = s.arg0.fields["_currScreen"];
    s.tmp_6 = r0;
    r0 = pxsim_Array__getAt(s.tmp_4, s.tmp_6);
    s.lines___14147 = (r0);
    s.lastBrkId = 3818;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3818]) return breakpoint(s, 14, 3818, r0);
  case 14:
    r0 = pxsim_numops_toBoolDecr(s.lines___14147);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 3819;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3819]) return breakpoint(s, 15, 3819, r0);
  case 15:
    s.tmp_0 = helpers_imageFillRect__P1753_mk(s);
    s.tmp_0.arg0 = globals.RotatingScreens__base___6606;
    s.tmp_0.arg1 = 0;
    s.tmp_1 = if_y_1_mk(s);
    r0 = s.arg0.fields["_headlines"];
    s.tmp_1.arg0 = r0;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "y");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["y"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["y"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 1762; s.pc = 17; return s.tmp_1; }
    }
  case 17:
    r0 = s.retval;
    s.tmp_0.arg2 = r0;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_0.arg3 = r0;
    r0 = pxsim_Array__length(s.lines___14147);
    s.tmp_2 = r0;
    s.tmp_5 = if_charHeight_1_mk(s);
    s.tmp_6 = if_font_1_mk(s);
    r0 = s.arg0.fields["_headlines"];
    s.tmp_6.arg0 = r0;
    if (!s.tmp_6.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_6.arg0, "font");
    } else {
      s.tmp_6.fn = s.tmp_6.arg0.vtable.iface["font"];
      if (s.tmp_6.fn == null) { s.retval = s.tmp_6.arg0.fields["font"]; }
      else if (!s.tmp_6.fn.isGetter) { s.retval = bind(s.tmp_6); }
     else { s.callLocIdx = 1763; s.pc = 19; return s.tmp_6; }
    }
  case 19:
    r0 = s.retval;
    s.tmp_5.arg0 = r0;
    if (!s.tmp_5.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_5.arg0, "charHeight");
    } else {
      s.tmp_5.fn = s.tmp_5.arg0.vtable.iface["charHeight"];
      if (s.tmp_5.fn == null) { s.retval = s.tmp_5.arg0.fields["charHeight"]; }
      else if (!s.tmp_5.fn.isGetter) { s.retval = bind(s.tmp_5); }
     else { s.callLocIdx = 1764; s.pc = 18; return s.tmp_5; }
    }
  case 18:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = (s.tmp_4 + 1);
    s.tmp_3 = r0;
    r0 = (s.tmp_2 * s.tmp_3);
    s.tmp_0.arg4 = r0;
    r0 = s.arg0.fields["_backColor"];
    s.tmp_0.arg5 = r0;
    s.callLocIdx = 1765; s.pc = 16; return s.tmp_0;
  case 16:
    r0 = s.retval;
    s.lastBrkId = 3820;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3820]) return breakpoint(s, 20, 3820, r0);
  case 20:
    s.tmp_0 = RotatingScreens_printMultipleCenter__P6605_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.lines___14147;
    s.tmp_0.arg2 = globals.RotatingScreens__base___6606;
    s.tmp_1 = if_y_1_mk(s);
    r0 = s.arg0.fields["_headlines"];
    s.tmp_1.arg0 = r0;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "y");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["y"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["y"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 1766; s.pc = 22; return s.tmp_1; }
    }
  case 22:
    r0 = s.retval;
    s.tmp_0.arg3 = r0;
    s.tmp_2 = if_color_1_mk(s);
    r0 = s.arg0.fields["_headlines"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "color");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["color"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["color"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1767; s.pc = 23; return s.tmp_2; }
    }
  case 23:
    r0 = s.retval;
    s.tmp_0.arg4 = r0;
    s.tmp_3 = if_font_1_mk(s);
    r0 = s.arg0.fields["_headlines"];
    s.tmp_3.arg0 = r0;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "font");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["font"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["font"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1768; s.pc = 24; return s.tmp_3; }
    }
  case 24:
    r0 = s.retval;
    s.tmp_0.arg5 = r0;
    s.tmp_0.arg6 = 1;
    s.callLocIdx = 1769; s.pc = 21; return s.tmp_0;
  case 21:
    r0 = s.retval;
  case 3:
  case 4:
  case 5:
  case 6:
  case 7:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
RotatingScreens_drawCurrHeadline__P6603.info = {"start":25152,"length":710,"line":758,"column":4,"endLine":773,"endColumn":5,"fileName":"pxt_modules/pxt-arcade-info-screens/info-screens.ts","functionName":"drawCurrHeadline","argumentNames":["this"]}

function RotatingScreens_drawCurrHeadline__P6603_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: RotatingScreens_drawCurrHeadline__P6603, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  lines___14147: undefined,
  arg0: undefined,
} }





function RotatingScreens_printMultipleCenter__P6605(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.currY___14197 = undefined;
    s.t___14200 = undefined;
    s.unnamed1672___U2 = undefined;
    s.unnamed1673___U3 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.arg5 = (s.lambdaArgs[5]);
      s.arg6 = (s.lambdaArgs[6]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, RotatingScreens__C3926_VT)) failedCast(r0);
    s.lastBrkId = 3828;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3828]) return breakpoint(s, 7, 3828, r0);
  case 7:
    r0 = pxsim_numops_toBoolDecr(s.arg5);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3829;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3829]) return breakpoint(s, 8, 3829, r0);
  case 8:
    s.arg5 = (globals.DEFAULT_FONT___3885);
  case 1:
  case 2:
    s.lastBrkId = 3830;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3830]) return breakpoint(s, 9, 3830, r0);
  case 9:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 3831;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3831]) return breakpoint(s, 10, 3831, r0);
  case 10:
    s.currY___14197 = (s.arg3);
    s.lastBrkId = 3832;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3832]) return breakpoint(s, 11, 3832, r0);
  case 11:
    s.t___14200 = (undefined);
    s.unnamed1672___U2 = (s.arg1);
    s.unnamed1673___U3 = (0);
    s.lastBrkId = 3833;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3833]) return breakpoint(s, 12, 3833, r0);
  case 12:
  case 3:
    s.tmp_0 = r0 = s.unnamed1673___U3;
    r0 = pxsim_Array__length(s.unnamed1672___U2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 4; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1672___U2, s.unnamed1673___U3);
    s.t___14200 = (r0);
    s.lastBrkId = 3834;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3834]) return breakpoint(s, 13, 3834, r0);
  case 13:
    s.tmp_2 = helpers_imagePrintCenter__P1784_mk(s);
    s.tmp_2.arg0 = s.arg2;
    s.tmp_2.arg1 = s.t___14200;
    s.tmp_2.arg2 = s.currY___14197;
    s.tmp_2.arg3 = s.arg4;
    s.tmp_2.arg4 = s.arg5;
    s.callLocIdx = 1772; s.pc = 14; return s.tmp_2;
  case 14:
    r0 = s.retval;
    s.lastBrkId = 3835;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3835]) return breakpoint(s, 15, 3835, r0);
  case 15:
    s.tmp_0 = r0 = s.currY___14197;
    s.tmp_3 = if_charHeight_1_mk(s);
    s.tmp_3.arg0 = s.arg5;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "charHeight");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["charHeight"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["charHeight"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1773; s.pc = 16; return s.tmp_3; }
    }
  case 16:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + s.arg6);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 + s.tmp_1);
    s.currY___14197 = (r0);
    r0 = (s.unnamed1673___U3 + 1);
    s.unnamed1673___U3 = (r0);
    { step = 3; continue; }
  case 4:
    s.unnamed1672___U2 = (undefined);
  case 5:
  case 6:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
RotatingScreens_printMultipleCenter__P6605.info = {"start":27447,"length":492,"line":808,"column":4,"endLine":822,"endColumn":5,"fileName":"pxt_modules/pxt-arcade-info-screens/info-screens.ts","functionName":"printMultipleCenter","argumentNames":["this","text","img","y","color","font","spacing"]}

function RotatingScreens_printMultipleCenter__P6605_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: RotatingScreens_printMultipleCenter__P6605, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  currY___14197: undefined,
  t___14200: undefined,
  unnamed1672___U2: undefined,
  unnamed1673___U3: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
  arg5: undefined,
  arg6: undefined,
} }





function RotatingScreens_nextTime__P3941(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, RotatingScreens__C3926_VT)) failedCast(r0);
    s.lastBrkId = 3708;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3708]) return breakpoint(s, 1, 3708, r0);
  case 1:
    r0 = s.arg0.fields["_next"];
    return leaveAccessor(s, r0)
  default: oops()
} } }
RotatingScreens_nextTime__P3941.info = {"start":11577,"length":63,"line":408,"column":4,"endLine":410,"endColumn":5,"fileName":"pxt_modules/pxt-arcade-info-screens/info-screens.ts","functionName":"nextTime","argumentNames":["this"]}
RotatingScreens_nextTime__P3941.isGetter = true;

function RotatingScreens_nextTime__P3941_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: RotatingScreens_nextTime__P3941, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function game_runtime__P2630(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 2789;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2789]) return breakpoint(s, 1, 2789, r0);
  case 1:
    s.tmp_0 = scene_Scene_millis__P2520_mk(s);
    s.tmp_1 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 1148; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 1149; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leave(s, r0)
  default: oops()
} } }
game_runtime__P2630.info = {"start":1504,"length":81,"line":46,"column":4,"endLine":48,"endColumn":5,"fileName":"pxt_modules/game/gameutil.ts","functionName":"runtime","argumentNames":[]}

function game_runtime__P2630_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_runtime__P2630, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
} }





function game_onUpdate__P2628(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 2778;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2778]) return breakpoint(s, 4, 2778, r0);
  case 4:
    r0 = pxsim_numops_toBoolDecr(s.arg0);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2779;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2779]) return breakpoint(s, 5, 2779, r0);
  case 5:
    { step = 3; continue; }
  case 1:
  case 2:
    s.lastBrkId = 2780;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2780]) return breakpoint(s, 6, 2780, r0);
  case 6:
    s.tmp_2 = control_EventContext_registerFrameHandler__P401_mk(s);
    s.tmp_3 = game_eventContext__P2612_mk(s);
    s.callLocIdx = 1141; s.pc = 8; return s.tmp_3;
  case 8:
    r0 = s.retval;
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = 20;
    s.tmp_2.arg2 = s.arg0;
    s.callLocIdx = 1142; s.pc = 7; return s.tmp_2;
  case 7:
    r0 = s.retval;
  case 3:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_onUpdate__P2628.info = {"start":405,"length":153,"line":15,"column":4,"endLine":18,"endColumn":5,"fileName":"pxt_modules/game/gameutil.ts","functionName":"onUpdate","argumentNames":["a"]}

function game_onUpdate__P2628_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_onUpdate__P2628, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
} }





function startAttractMode__P62554(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.tmp_0 = buildSplashScreen__P62542_mk(s);
    s.callLocIdx = 64; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    s.tmp_0 = RotatingScreens__C3926_v0_1_mk(s);
    s.tmp_0.arg0 = globals.g_splashScreen___62541;
    if (!checkSubtype(s.tmp_0.arg0, RotatingScreens__C3926_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.build;
    s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    globals.g_gameMode___62539 = (0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
startAttractMode__P62554.info = {"start":688,"length":122,"line":29,"column":0,"endLine":33,"endColumn":1,"fileName":"attract.ts","functionName":"startAttractMode","argumentNames":[]}

function startAttractMode__P62554_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: startAttractMode__P62554, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
} }





function RotatingScreens_build__P3950(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, RotatingScreens__C3926_VT)) failedCast(r0);
    s.lastBrkId = 3709;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3709]) return breakpoint(s, 7, 3709, r0);
  case 7:
    s.tmp_0 = RotatingScreens__C3926_v1_1_mk(s);
    s.tmp_0.arg0 = s.arg0;
    if (!checkSubtype(s.tmp_0.arg0, RotatingScreens__C3926_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.destroySprites;
    s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
    s.lastBrkId = 3710;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3710]) return breakpoint(s, 9, 3710, r0);
  case 9:
    s.tmp_0 = RotatingScreens_rebuild__P3953_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1633; s.pc = 10; return s.tmp_0;
  case 10:
    r0 = s.retval;
    s.lastBrkId = 3711;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3711]) return breakpoint(s, 11, 3711, r0);
  case 11:
    s.tmp_0 = RotatingScreens__C3926_v2_1_mk(s);
    s.tmp_0.arg0 = s.arg0;
    if (!checkSubtype(s.tmp_0.arg0, RotatingScreens__C3926_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.refresh;
    s.pc = 12; return s.tmp_0;
  case 12:
    r0 = s.retval;
    s.lastBrkId = 3712;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3712]) return breakpoint(s, 13, 3712, r0);
  case 13:
    r0 = s.arg0.fields["_staticSprites"];
    s.tmp_2 = r0;
    r0 = pxsim_Array__length(s.tmp_2);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3713;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3713]) return breakpoint(s, 14, 3713, r0);
  case 14:
    s.tmp_3 = RotatingScreens_addStaticSprites__P6600_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.callLocIdx = 1634; s.pc = 15; return s.tmp_3;
  case 15:
    r0 = s.retval;
  case 1:
  case 2:
    s.lastBrkId = 3714;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3714]) return breakpoint(s, 16, 3714, r0);
  case 16:
    s.tmp_1 = if_mode_1_mk(s);
    r0 = s.arg0.fields["_movingSprites"];
    s.tmp_1.arg0 = r0;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "mode");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["mode"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["mode"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 1635; s.pc = 17; return s.tmp_1; }
    }
  case 17:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_pxtcore.switch_eq(0, s.tmp_0);
    if (r0) { step = 3; continue; }
    r0 = pxsim_pxtcore.switch_eq(1, s.tmp_0);
    if (r0) { step = 4; continue; }
    r0 = pxsim_pxtcore.switch_eq(2, s.tmp_0);
    if (r0) { step = 5; continue; }
    r0 = s.tmp_0;
    { step = 6; continue; }
  case 3:
    s.lastBrkId = 3715;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3715]) return breakpoint(s, 18, 3715, r0);
  case 18:
    r0 = (s.arg0).fields["_currSprite"] = (0);
    s.lastBrkId = 3716;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3716]) return breakpoint(s, 19, 3716, r0);
  case 19:
    s.tmp_0 = RotatingScreens_showScrollingSprite__P3958_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1636; s.pc = 20; return s.tmp_0;
  case 20:
    r0 = s.retval;
    s.lastBrkId = 3717;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3717]) return breakpoint(s, 21, 3717, r0);
  case 21:
    { step = 6; continue; }
  case 4:
    s.lastBrkId = 3718;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3718]) return breakpoint(s, 22, 3718, r0);
  case 22:
    s.tmp_0 = RotatingScreens_addAllMovingSprites__P6599_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = true;
    s.callLocIdx = 1637; s.pc = 23; return s.tmp_0;
  case 23:
    r0 = s.retval;
    s.lastBrkId = 3719;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3719]) return breakpoint(s, 24, 3719, r0);
  case 24:
    { step = 6; continue; }
  case 5:
    s.lastBrkId = 3720;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3720]) return breakpoint(s, 25, 3720, r0);
  case 25:
    s.tmp_0 = RotatingScreens_addAllMovingSprites__P6599_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = false;
    s.callLocIdx = 1638; s.pc = 26; return s.tmp_0;
  case 26:
    r0 = s.retval;
    s.lastBrkId = 3721;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3721]) return breakpoint(s, 27, 3721, r0);
  case 27:
  case 6:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
RotatingScreens_build__P3950.info = {"start":14690,"length":684,"line":499,"column":4,"endLine":520,"endColumn":5,"fileName":"pxt_modules/pxt-arcade-info-screens/info-screens.ts","functionName":"build","argumentNames":["this"]}

function RotatingScreens_build__P3950_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: RotatingScreens_build__P3950, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
} }





function RotatingScreens_addStaticSprites__P6600(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.sprite___18635 = undefined;
    s.unnamed1668___U1 = undefined;
    s.unnamed1669___U2 = undefined;
    s.newSprite___18638 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, RotatingScreens__C3926_VT)) failedCast(r0);
    s.lastBrkId = 3768;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3768]) return breakpoint(s, 3, 3768, r0);
  case 3:
    s.sprite___18635 = (undefined);
    r0 = s.arg0.fields["_staticSprites"];
    s.unnamed1668___U1 = (r0);
    s.unnamed1669___U2 = (0);
    s.lastBrkId = 3769;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3769]) return breakpoint(s, 4, 3769, r0);
  case 4:
  case 1:
    s.tmp_0 = r0 = s.unnamed1669___U2;
    r0 = pxsim_Array__length(s.unnamed1668___U1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 2; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1668___U1, s.unnamed1669___U2);
    s.sprite___18635 = (r0);
    s.lastBrkId = 3770;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3770]) return breakpoint(s, 5, 3770, r0);
  case 5:
    s.tmp_2 = sprites_create__P2043_mk(s);
    s.tmp_4 = if_img_1_mk(s);
    s.tmp_4.arg0 = s.sprite___18635;
    if (!s.tmp_4.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_4.arg0, "img");
    } else {
      s.tmp_4.fn = s.tmp_4.arg0.vtable.iface["img"];
      if (s.tmp_4.fn == null) { s.retval = s.tmp_4.arg0.fields["img"]; }
      else if (!s.tmp_4.fn.isGetter) { s.retval = bind(s.tmp_4); }
     else { s.callLocIdx = 1684; s.pc = 7; return s.tmp_4; }
    }
  case 7:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = pxsim_ImageMethods.clone(s.tmp_3);
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = 42;
    s.callLocIdx = 1685; s.pc = 6; return s.tmp_2;
  case 6:
    r0 = s.retval;
    s.newSprite___18638 = (r0);
    s.lastBrkId = 3771;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3771]) return breakpoint(s, 8, 3771, r0);
  case 8:
    s.tmp_0 = Sprite_setFlag__P2158_mk(s);
    s.tmp_0.arg0 = s.newSprite___18638;
    s.tmp_0.arg1 = 7168;
    s.tmp_0.arg2 = true;
    s.callLocIdx = 1686; s.pc = 9; return s.tmp_0;
  case 9:
    r0 = s.retval;
    s.lastBrkId = 3772;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3772]) return breakpoint(s, 10, 3772, r0);
  case 10:
    s.tmp_0 = Sprite_x__P2102_mk(s);
    s.tmp_0.arg0 = s.newSprite___18638;
    s.tmp_1 = if_x_1_mk(s);
    s.tmp_1.arg0 = s.sprite___18635;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "x");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["x"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["x"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 1687; s.pc = 12; return s.tmp_1; }
    }
  case 12:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1688; s.pc = 11; return s.tmp_0;
  case 11:
    r0 = s.retval;
    s.lastBrkId = 3773;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3773]) return breakpoint(s, 13, 3773, r0);
  case 13:
    s.tmp_0 = Sprite_y__P2104_mk(s);
    s.tmp_0.arg0 = s.newSprite___18638;
    s.tmp_1 = if_y_1_mk(s);
    s.tmp_1.arg0 = s.sprite___18635;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "y");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["y"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["y"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 1689; s.pc = 15; return s.tmp_1; }
    }
  case 15:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1690; s.pc = 14; return s.tmp_0;
  case 14:
    r0 = s.retval;
    r0 = (s.unnamed1669___U2 + 1);
    s.unnamed1669___U2 = (r0);
    { step = 1; continue; }
  case 2:
    s.unnamed1668___U1 = (undefined);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
RotatingScreens_addStaticSprites__P6600.info = {"start":20613,"length":334,"line":662,"column":4,"endLine":669,"endColumn":5,"fileName":"pxt_modules/pxt-arcade-info-screens/info-screens.ts","functionName":"addStaticSprites","argumentNames":["this"]}

function RotatingScreens_addStaticSprites__P6600_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: RotatingScreens_addStaticSprites__P6600, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  sprite___18635: undefined,
  unnamed1668___U1: undefined,
  unnamed1669___U2: undefined,
  newSprite___18638: undefined,
  arg0: undefined,
} }





function Sprite_y__P2104(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1195;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1195]) return breakpoint(s, 1, 1195, r0);
  case 1:
    s.tmp_0 = Sprite_top__P2143_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_1 = r0 = s.arg1;
    r0 = s.arg0.fields["_image"];
    s.tmp_4 = r0;
    r0 = pxsim_ImageMethods.height(s.tmp_4);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 / 2);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 - s.tmp_2);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 279; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite_y__P2104.info = {"start":2305,"length":72,"line":92,"column":4,"endLine":94,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"y","argumentNames":["this","v"]}

function Sprite_y__P2104_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_y__P2104, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Sprite_top__P2143(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.physics___15604 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1266;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1266]) return breakpoint(s, 1, 1266, r0);
  case 1:
    s.tmp_0 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 333; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = r0.fields["physicsEngine"];
    s.physics___15604 = (r0);
    s.lastBrkId = 1267;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1267]) return breakpoint(s, 3, 1267, r0);
  case 3:
    s.tmp_0 = PhysicsEngine__C2238_v2_4_mk(s);
    s.tmp_0.arg0 = s.physics___15604;
    s.tmp_0.arg1 = s.arg0;
    s.tmp_0.arg2 = 0;
    s.tmp_1 = Fx_sub__P159_mk(s);
    s.tmp_2 = Fx8__P149_mk(s);
    s.tmp_2.arg0 = s.arg1;
    s.callLocIdx = 334; s.pc = 6; return s.tmp_2;
  case 6:
    r0 = s.retval;
    s.tmp_1.arg0 = r0;
    r0 = s.arg0.fields["_y"];
    s.tmp_1.arg1 = r0;
    s.callLocIdx = 335; s.pc = 5; return s.tmp_1;
  case 5:
    r0 = s.retval;
    s.tmp_0.arg3 = r0;
    if (!checkSubtype(s.tmp_0.arg0, PhysicsEngine__C2238_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.moveSprite;
    s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite_top__P2143.info = {"start":10028,"length":256,"line":361,"column":4,"endLine":371,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"top","argumentNames":["this","value"]}

function Sprite_top__P2143_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_top__P2143, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  physics___15604: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function PhysicsEngine_moveSprite__P2242(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, PhysicsEngine__C2238_VT)) failedCast(r0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
PhysicsEngine_moveSprite__P2242.info = {"start":230,"length":43,"line":13,"column":4,"endLine":13,"endColumn":47,"fileName":"pxt_modules/game/physics.ts","functionName":"moveSprite","argumentNames":["this","s","dx","dy"]}

function PhysicsEngine_moveSprite__P2242_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: PhysicsEngine_moveSprite__P2242, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function Sprite_top__P2142(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1265;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1265]) return breakpoint(s, 1, 1265, r0);
  case 1:
    s.tmp_0 = Fx_toFloat__P171_mk(s);
    r0 = s.arg0.fields["_y"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 332; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leaveAccessor(s, r0)
  default: oops()
} } }
Sprite_top__P2142.info = {"start":9885,"length":53,"line":356,"column":4,"endLine":358,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"top","argumentNames":["this"]}
Sprite_top__P2142.isGetter = true;

function Sprite_top__P2142_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_top__P2142, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function Sprite_x__P2102(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1193;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1193]) return breakpoint(s, 1, 1193, r0);
  case 1:
    s.tmp_0 = Sprite_left__P2139_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_1 = r0 = s.arg1;
    r0 = s.arg0.fields["_image"];
    s.tmp_4 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_4);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 / 2);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 - s.tmp_2);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 277; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite_x__P2102.info = {"start":1956,"length":72,"line":81,"column":4,"endLine":83,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"x","argumentNames":["this","v"]}

function Sprite_x__P2102_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_x__P2102, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Sprite_left__P2139(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.physics___15644 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1261;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1261]) return breakpoint(s, 1, 1261, r0);
  case 1:
    s.tmp_0 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 325; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = r0.fields["physicsEngine"];
    s.physics___15644 = (r0);
    s.lastBrkId = 1262;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1262]) return breakpoint(s, 3, 1262, r0);
  case 3:
    s.tmp_0 = PhysicsEngine__C2238_v2_4_mk(s);
    s.tmp_0.arg0 = s.physics___15644;
    s.tmp_0.arg1 = s.arg0;
    s.tmp_1 = Fx_sub__P159_mk(s);
    s.tmp_2 = Fx8__P149_mk(s);
    s.tmp_2.arg0 = s.arg1;
    s.callLocIdx = 326; s.pc = 6; return s.tmp_2;
  case 6:
    r0 = s.retval;
    s.tmp_1.arg0 = r0;
    r0 = s.arg0.fields["_x"];
    s.tmp_1.arg1 = r0;
    s.callLocIdx = 327; s.pc = 5; return s.tmp_1;
  case 5:
    r0 = s.retval;
    s.tmp_0.arg2 = r0;
    s.tmp_0.arg3 = 0;
    if (!checkSubtype(s.tmp_0.arg0, PhysicsEngine__C2238_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.moveSprite;
    s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite_left__P2139.info = {"start":9224,"length":257,"line":331,"column":4,"endLine":341,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"left","argumentNames":["this","value"]}

function Sprite_left__P2139_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_left__P2139, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  physics___15644: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Sprite_left__P2138(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1260;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1260]) return breakpoint(s, 1, 1260, r0);
  case 1:
    s.tmp_0 = Fx_toFloat__P171_mk(s);
    r0 = s.arg0.fields["_x"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 324; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leaveAccessor(s, r0)
  default: oops()
} } }
Sprite_left__P2138.info = {"start":9080,"length":53,"line":326,"column":4,"endLine":328,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"left","argumentNames":["this"]}
Sprite_left__P2138.isGetter = true;

function Sprite_left__P2138_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_left__P2138, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function RotatingScreens_addAllMovingSprites__P6599(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.img___18466 = undefined;
    s.unnamed1666___U1 = undefined;
    s.unnamed1667___U2 = undefined;
    s.newSprite___18470 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, RotatingScreens__C3926_VT)) failedCast(r0);
    s.lastBrkId = 3755;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3755]) return breakpoint(s, 7, 3755, r0);
  case 7:
    s.img___18466 = (undefined);
    s.tmp_0 = if_imgs_1_mk(s);
    r0 = s.arg0.fields["_movingSprites"];
    s.tmp_0.arg0 = r0;
    if (!s.tmp_0.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_0.arg0, "imgs");
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["imgs"];
      if (s.tmp_0.fn == null) { s.retval = s.tmp_0.arg0.fields["imgs"]; }
      else if (!s.tmp_0.fn.isGetter) { s.retval = bind(s.tmp_0); }
     else { s.callLocIdx = 1667; s.pc = 8; return s.tmp_0; }
    }
  case 8:
    r0 = s.retval;
    s.unnamed1666___U1 = (r0);
    s.unnamed1667___U2 = (0);
    s.lastBrkId = 3756;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3756]) return breakpoint(s, 9, 3756, r0);
  case 9:
  case 1:
    s.tmp_0 = r0 = s.unnamed1667___U2;
    r0 = pxsim_Array__length(s.unnamed1666___U1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 6; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1666___U1, s.unnamed1667___U2);
    s.img___18466 = (r0);
    s.lastBrkId = 3757;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3757]) return breakpoint(s, 10, 3757, r0);
  case 10:
    s.tmp_2 = sprites_create__P2043_mk(s);
    r0 = pxsim_ImageMethods.clone(s.img___18466);
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = 19;
    s.callLocIdx = 1668; s.pc = 11; return s.tmp_2;
  case 11:
    r0 = s.retval;
    s.newSprite___18470 = (r0);
    s.lastBrkId = 3758;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3758]) return breakpoint(s, 12, 3758, r0);
  case 12:
    s.tmp_0 = Sprite_setFlag__P2158_mk(s);
    s.tmp_0.arg0 = s.newSprite___18470;
    s.tmp_0.arg1 = 32;
    s.tmp_0.arg2 = s.arg1;
    s.callLocIdx = 1669; s.pc = 13; return s.tmp_0;
  case 13:
    r0 = s.retval;
    s.lastBrkId = 3759;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3759]) return breakpoint(s, 14, 3759, r0);
  case 14:
    s.tmp_0 = Sprite_setFlag__P2158_mk(s);
    s.tmp_0.arg0 = s.newSprite___18470;
    s.tmp_0.arg1 = 7168;
    s.tmp_0.arg2 = true;
    s.callLocIdx = 1670; s.pc = 15; return s.tmp_0;
  case 15:
    r0 = s.retval;
    s.lastBrkId = 3760;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3760]) return breakpoint(s, 16, 3760, r0);
  case 16:
    s.tmp_0 = Sprite_x__P2102_mk(s);
    s.tmp_0.arg0 = s.newSprite___18470;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_1 = r0;
    r0 = pxsim.Math_.randomRange(0, s.tmp_1);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1671; s.pc = 17; return s.tmp_0;
  case 17:
    r0 = s.retval;
    s.lastBrkId = 3761;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3761]) return breakpoint(s, 18, 3761, r0);
  case 18:
    s.tmp_0 = Sprite_y__P2104_mk(s);
    s.tmp_0.arg0 = s.newSprite___18470;
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_1 = r0;
    r0 = pxsim.Math_.randomRange(0, s.tmp_1);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1672; s.pc = 19; return s.tmp_0;
  case 19:
    r0 = s.retval;
    s.lastBrkId = 3762;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3762]) return breakpoint(s, 20, 3762, r0);
  case 20:
    s.tmp_0 = Sprite_vx__P2106_mk(s);
    s.tmp_0.arg0 = s.newSprite___18470;
    s.tmp_2 = if_speed_1_mk(s);
    r0 = s.arg0.fields["_movingSprites"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "speed");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["speed"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["speed"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1673; s.pc = 22; return s.tmp_2; }
    }
  case 22:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim.Math_.randomRange(0, s.tmp_1);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1674; s.pc = 21; return s.tmp_0;
  case 21:
    r0 = s.retval;
    s.lastBrkId = 3763;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3763]) return breakpoint(s, 23, 3763, r0);
  case 23:
    s.tmp_0 = Sprite_vy__P2108_mk(s);
    s.tmp_0.arg0 = s.newSprite___18470;
    s.tmp_2 = if_speed_1_mk(s);
    r0 = s.arg0.fields["_movingSprites"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "speed");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["speed"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["speed"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1675; s.pc = 25; return s.tmp_2; }
    }
  case 25:
    r0 = s.retval;
    s.tmp_1 = r0;
    s.tmp_4 = Sprite_vx__P2105_mk(s);
    s.tmp_4.arg0 = s.newSprite___18470;
    s.callLocIdx = 1676; s.pc = 26; return s.tmp_4;
  case 26:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_1 - s.tmp_3);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1677; s.pc = 24; return s.tmp_0;
  case 24:
    r0 = s.retval;
    s.lastBrkId = 3764;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3764]) return breakpoint(s, 27, 3764, r0);
  case 27:
    s.tmp_1 = Math_percentChance__P2662_mk(s);
    s.tmp_1.arg0 = 50;
    s.callLocIdx = 1678; s.pc = 28; return s.tmp_1;
  case 28:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 3765;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3765]) return breakpoint(s, 29, 3765, r0);
  case 29:
    s.tmp_2 = Sprite_vx__P2106_mk(s);
    s.tmp_2.arg0 = s.newSprite___18470;
    s.tmp_4 = Sprite_vx__P2105_mk(s);
    s.tmp_4.arg0 = s.newSprite___18470;
    s.callLocIdx = 1679; s.pc = 31; return s.tmp_4;
  case 31:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (0 - s.tmp_3);
    s.tmp_2.arg1 = r0;
    s.callLocIdx = 1680; s.pc = 30; return s.tmp_2;
  case 30:
    r0 = s.retval;
  case 2:
  case 3:
    s.lastBrkId = 3766;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3766]) return breakpoint(s, 32, 3766, r0);
  case 32:
    s.tmp_1 = Math_percentChance__P2662_mk(s);
    s.tmp_1.arg0 = 50;
    s.callLocIdx = 1681; s.pc = 33; return s.tmp_1;
  case 33:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 3767;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3767]) return breakpoint(s, 34, 3767, r0);
  case 34:
    s.tmp_2 = Sprite_vy__P2108_mk(s);
    s.tmp_2.arg0 = s.newSprite___18470;
    s.tmp_4 = Sprite_vy__P2107_mk(s);
    s.tmp_4.arg0 = s.newSprite___18470;
    s.callLocIdx = 1682; s.pc = 36; return s.tmp_4;
  case 36:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (0 - s.tmp_3);
    s.tmp_2.arg1 = r0;
    s.callLocIdx = 1683; s.pc = 35; return s.tmp_2;
  case 35:
    r0 = s.retval;
  case 4:
  case 5:
    r0 = (s.unnamed1667___U2 + 1);
    s.unnamed1667___U2 = (r0);
    { step = 1; continue; }
  case 6:
    s.unnamed1666___U1 = (undefined);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
RotatingScreens_addAllMovingSprites__P6599.info = {"start":19641,"length":893,"line":641,"column":4,"endLine":657,"endColumn":5,"fileName":"pxt_modules/pxt-arcade-info-screens/info-screens.ts","functionName":"addAllMovingSprites","argumentNames":["this","keepOnScreen"]}

function RotatingScreens_addAllMovingSprites__P6599_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: RotatingScreens_addAllMovingSprites__P6599, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  img___18466: undefined,
  unnamed1666___U1: undefined,
  unnamed1667___U2: undefined,
  newSprite___18470: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Math_percentChance__P2662(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3053;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3053]) return breakpoint(s, 6, 3053, r0);
  case 6:
    r0 = (s.arg0 >= 100);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3054;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3054]) return breakpoint(s, 7, 3054, r0);
  case 7:
    r0 = true;
    { step = 5; continue; }
    { step = 4; continue; }
  case 1:
    s.lastBrkId = 3055;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3055]) return breakpoint(s, 8, 3055, r0);
  case 8:
    r0 = (s.arg0 <= 0);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 3056;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3056]) return breakpoint(s, 9, 3056, r0);
  case 9:
    r0 = false;
    { step = 5; continue; }
  case 2:
  case 3:
  case 4:
    s.lastBrkId = 3057;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3057]) return breakpoint(s, 10, 3057, r0);
  case 10:
    r0 = pxsim.Math_.randomRange(0, 99);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 < s.arg0);
  case 5:
    return leave(s, r0)
  default: oops()
} } }
Math_percentChance__P2662.info = {"start":369,"length":259,"line":9,"column":4,"endLine":17,"endColumn":5,"fileName":"pxt_modules/game/mathUtil.ts","functionName":"percentChance","argumentNames":["percentage"]}

function Math_percentChance__P2662_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Math_percentChance__P2662, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function RotatingScreens_showScrollingSprite__P3958(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.newSprite___18563 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, RotatingScreens__C3926_VT)) failedCast(r0);
    s.lastBrkId = 3737;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3737]) return breakpoint(s, 13, 3737, r0);
  case 13:
    r0 = s.arg0.fields["_movingSpritesSequential"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 3738;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3738]) return breakpoint(s, 14, 3738, r0);
  case 14:
    s.tmp_1 = r0 = s.arg0;
    r0 = s.tmp_1.fields["_currSprite"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 + 1);
    s.tmp_2 = r0;
    r0 = (s.tmp_1).fields["_currSprite"] = (s.tmp_2);
    s.lastBrkId = 3739;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3739]) return breakpoint(s, 15, 3739, r0);
  case 15:
    r0 = s.arg0.fields["_currSprite"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = s.arg0.fields["_currSprite"];
    s.tmp_2 = r0;
    s.tmp_5 = if_imgs_1_mk(s);
    r0 = s.arg0.fields["_movingSprites"];
    s.tmp_5.arg0 = r0;
    if (!s.tmp_5.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_5.arg0, "imgs");
    } else {
      s.tmp_5.fn = s.tmp_5.arg0.vtable.iface["imgs"];
      if (s.tmp_5.fn == null) { s.retval = s.tmp_5.arg0.fields["imgs"]; }
      else if (!s.tmp_5.fn.isGetter) { s.retval = bind(s.tmp_5); }
     else { s.callLocIdx = 1646; s.pc = 16; return s.tmp_5; }
    }
  case 16:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_Array__length(s.tmp_4);
    s.tmp_3 = r0;
    r0 = (s.tmp_2 >= s.tmp_3);
  case 2:
    // jmp value (already in r0)
    s.tmp_6 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_6);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 3740;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3740]) return breakpoint(s, 17, 3740, r0);
  case 17:
    r0 = (s.arg0).fields["_currSprite"] = (0);
  case 3:
  case 4:
    { step = 6; continue; }
  case 5:
    s.lastBrkId = 3741;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3741]) return breakpoint(s, 18, 3741, r0);
  case 18:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_5 = if_imgs_1_mk(s);
    r0 = s.arg0.fields["_movingSprites"];
    s.tmp_5.arg0 = r0;
    if (!s.tmp_5.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_5.arg0, "imgs");
    } else {
      s.tmp_5.fn = s.tmp_5.arg0.vtable.iface["imgs"];
      if (s.tmp_5.fn == null) { s.retval = s.tmp_5.arg0.fields["imgs"]; }
      else if (!s.tmp_5.fn.isGetter) { s.retval = bind(s.tmp_5); }
     else { s.callLocIdx = 1647; s.pc = 19; return s.tmp_5; }
    }
  case 19:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_Array__length(s.tmp_4);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 - 1);
    s.tmp_2 = r0;
    r0 = pxsim.Math_.randomRange(0, s.tmp_2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_currSprite"] = (s.tmp_1);
  case 6:
    s.lastBrkId = 3742;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3742]) return breakpoint(s, 20, 3742, r0);
  case 20:
    s.tmp_0 = sprites_create__P2043_mk(s);
    s.tmp_3 = if_imgs_1_mk(s);
    r0 = s.arg0.fields["_movingSprites"];
    s.tmp_3.arg0 = r0;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "imgs");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["imgs"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["imgs"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1648; s.pc = 22; return s.tmp_3; }
    }
  case 22:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = s.arg0.fields["_currSprite"];
    s.tmp_4 = r0;
    r0 = pxsim_Array__getAt(s.tmp_2, s.tmp_4);
    s.tmp_1 = r0;
    r0 = pxsim_ImageMethods.clone(s.tmp_1);
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = 19;
    s.callLocIdx = 1649; s.pc = 21; return s.tmp_0;
  case 21:
    r0 = s.retval;
    s.newSprite___18563 = (r0);
    s.lastBrkId = 3743;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3743]) return breakpoint(s, 23, 3743, r0);
  case 23:
    s.tmp_0 = Sprite_setFlag__P2158_mk(s);
    s.tmp_0.arg0 = s.newSprite___18563;
    s.tmp_0.arg1 = 7168;
    s.tmp_0.arg2 = true;
    s.callLocIdx = 1650; s.pc = 24; return s.tmp_0;
  case 24:
    r0 = s.retval;
    s.lastBrkId = 3744;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3744]) return breakpoint(s, 25, 3744, r0);
  case 25:
    s.tmp_0 = Sprite_setFlag__P2158_mk(s);
    s.tmp_0.arg0 = s.newSprite___18563;
    s.tmp_0.arg1 = 4;
    s.tmp_0.arg2 = true;
    s.callLocIdx = 1651; s.pc = 26; return s.tmp_0;
  case 26:
    r0 = s.retval;
    s.lastBrkId = 3745;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3745]) return breakpoint(s, 27, 3745, r0);
  case 27:
    s.tmp_0 = Sprite_y__P2104_mk(s);
    s.tmp_0.arg0 = s.newSprite___18563;
    s.tmp_1 = if_y_1_mk(s);
    r0 = s.arg0.fields["_movingSprites"];
    s.tmp_1.arg0 = r0;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "y");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["y"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["y"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 1652; s.pc = 29; return s.tmp_1; }
    }
  case 29:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1653; s.pc = 28; return s.tmp_0;
  case 28:
    r0 = s.retval;
    s.lastBrkId = 3746;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3746]) return breakpoint(s, 30, 3746, r0);
  case 30:
    s.tmp_1 = Math_percentChance__P2662_mk(s);
    s.tmp_1.arg0 = 50;
    s.callLocIdx = 1654; s.pc = 31; return s.tmp_1;
  case 31:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 3747;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3747]) return breakpoint(s, 32, 3747, r0);
  case 32:
    s.tmp_2 = Sprite_x__P2102_mk(s);
    s.tmp_2.arg0 = s.newSprite___18563;
    s.tmp_6 = Sprite_image__P2131_mk(s);
    s.tmp_6.arg0 = s.newSprite___18563;
    s.callLocIdx = 1655; s.pc = 34; return s.tmp_6;
  case 34:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_5);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 / 2);
    s.tmp_3 = r0;
    r0 = (0 - s.tmp_3);
    s.tmp_2.arg1 = r0;
    s.callLocIdx = 1656; s.pc = 33; return s.tmp_2;
  case 33:
    r0 = s.retval;
    s.lastBrkId = 3748;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3748]) return breakpoint(s, 35, 3748, r0);
  case 35:
    s.tmp_0 = Sprite_vx__P2106_mk(s);
    s.tmp_0.arg0 = s.newSprite___18563;
    s.tmp_1 = if_speed_1_mk(s);
    r0 = s.arg0.fields["_movingSprites"];
    s.tmp_1.arg0 = r0;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "speed");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["speed"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["speed"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 1657; s.pc = 37; return s.tmp_1; }
    }
  case 37:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1658; s.pc = 36; return s.tmp_0;
  case 36:
    r0 = s.retval;
    s.lastBrkId = 3749;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3749]) return breakpoint(s, 38, 3749, r0);
  case 38:
    s.tmp_2 = if_dir_1_mk(s);
    r0 = s.arg0.fields["_movingSprites"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "dir");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["dir"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["dir"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1659; s.pc = 39; return s.tmp_2; }
    }
  case 39:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 === 1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 3750;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3750]) return breakpoint(s, 40, 3750, r0);
  case 40:
    s.tmp_4 = Sprite_image__P2131_mk(s);
    s.tmp_4.arg0 = s.newSprite___18563;
    s.callLocIdx = 1660; s.pc = 41; return s.tmp_4;
  case 41:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = pxsim_ImageMethods.flipX(s.tmp_3);
  case 7:
  case 8:
    { step = 12; continue; }
  case 9:
    s.lastBrkId = 3751;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3751]) return breakpoint(s, 42, 3751, r0);
  case 42:
    s.tmp_0 = Sprite_x__P2102_mk(s);
    s.tmp_0.arg0 = s.newSprite___18563;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_1 = r0;
    s.tmp_5 = Sprite_image__P2131_mk(s);
    s.tmp_5.arg0 = s.newSprite___18563;
    s.callLocIdx = 1661; s.pc = 44; return s.tmp_5;
  case 44:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_4);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 / 2);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 + s.tmp_2);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1662; s.pc = 43; return s.tmp_0;
  case 43:
    r0 = s.retval;
    s.lastBrkId = 3752;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3752]) return breakpoint(s, 45, 3752, r0);
  case 45:
    s.tmp_0 = Sprite_vx__P2106_mk(s);
    s.tmp_0.arg0 = s.newSprite___18563;
    s.tmp_2 = if_speed_1_mk(s);
    r0 = s.arg0.fields["_movingSprites"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "speed");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["speed"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["speed"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1663; s.pc = 47; return s.tmp_2; }
    }
  case 47:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (0 - s.tmp_1);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1664; s.pc = 46; return s.tmp_0;
  case 46:
    r0 = s.retval;
    s.lastBrkId = 3753;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3753]) return breakpoint(s, 48, 3753, r0);
  case 48:
    s.tmp_2 = if_dir_1_mk(s);
    r0 = s.arg0.fields["_movingSprites"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "dir");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["dir"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["dir"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1665; s.pc = 49; return s.tmp_2; }
    }
  case 49:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 === 2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 10; continue; }
    s.lastBrkId = 3754;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3754]) return breakpoint(s, 50, 3754, r0);
  case 50:
    s.tmp_4 = Sprite_image__P2131_mk(s);
    s.tmp_4.arg0 = s.newSprite___18563;
    s.callLocIdx = 1666; s.pc = 51; return s.tmp_4;
  case 51:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = pxsim_ImageMethods.flipX(s.tmp_3);
  case 10:
  case 11:
  case 12:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
RotatingScreens_showScrollingSprite__P3958.info = {"start":17849,"length":1498,"line":601,"column":4,"endLine":630,"endColumn":5,"fileName":"pxt_modules/pxt-arcade-info-screens/info-screens.ts","functionName":"showScrollingSprite","argumentNames":["this"]}

function RotatingScreens_showScrollingSprite__P3958_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: RotatingScreens_showScrollingSprite__P3958, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  newSprite___18563: undefined,
  arg0: undefined,
} }





function RotatingScreens_rebuild__P3953(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, RotatingScreens__C3926_VT)) failedCast(r0);
    s.lastBrkId = 3728;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3728]) return breakpoint(s, 1, 3728, r0);
  case 1:
    s.tmp_0 = RotatingScreens__C3926_v3_1_mk(s);
    s.tmp_0.arg0 = s.arg0;
    if (!checkSubtype(s.tmp_0.arg0, RotatingScreens__C3926_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.createBase;
    s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
RotatingScreens_rebuild__P3953.info = {"start":16224,"length":56,"line":548,"column":4,"endLine":550,"endColumn":5,"fileName":"pxt_modules/pxt-arcade-info-screens/info-screens.ts","functionName":"rebuild","argumentNames":["this"]}

function RotatingScreens_rebuild__P3953_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: RotatingScreens_rebuild__P3953, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function RotatingScreens_createBase__P6601(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.minY___18855 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, RotatingScreens__C3926_VT)) failedCast(r0);
    s.lastBrkId = 3774;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3774]) return breakpoint(s, 17, 3774, r0);
  case 17:
    r0 = pxsim_numops_toBoolDecr(globals.RotatingScreens__base___6606);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3775;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3775]) return breakpoint(s, 18, 3775, r0);
  case 18:
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_2 = r0;
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_3 = r0;
    r0 = pxsim.image.create(s.tmp_2, s.tmp_3);
    globals.RotatingScreens__base___6606 = (r0);
  case 1:
  case 2:
    s.lastBrkId = 3776;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3776]) return breakpoint(s, 19, 3776, r0);
  case 19:
    r0 = s.arg0.fields["_backColor"];
    s.tmp_0 = r0;
    r0 = pxsim_ImageMethods.fill(globals.RotatingScreens__base___6606, s.tmp_0);
    s.lastBrkId = 3777;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3777]) return breakpoint(s, 20, 3777, r0);
  case 20:
    s.tmp_0 = RotatingScreens_duplicateBackImage__P6602_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1691; s.pc = 21; return s.tmp_0;
  case 21:
    r0 = s.retval;
    s.lastBrkId = 3778;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3778]) return breakpoint(s, 22, 3778, r0);
  case 22:
    s.tmp_0 = RotatingScreens_printMultipleCenter__P6605_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_1 = if_data_1_mk(s);
    r0 = s.arg0.fields["_titles"];
    s.tmp_1.arg0 = r0;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "data");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["data"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["data"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 1692; s.pc = 24; return s.tmp_1; }
    }
  case 24:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = globals.RotatingScreens__base___6606;
    s.tmp_0.arg3 = 2;
    s.tmp_2 = if_color_1_mk(s);
    r0 = s.arg0.fields["_titles"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "color");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["color"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["color"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1693; s.pc = 25; return s.tmp_2; }
    }
  case 25:
    r0 = s.retval;
    s.tmp_0.arg4 = r0;
    s.tmp_3 = if_font_1_mk(s);
    r0 = s.arg0.fields["_titles"];
    s.tmp_3.arg0 = r0;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "font");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["font"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["font"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1694; s.pc = 26; return s.tmp_3; }
    }
  case 26:
    r0 = s.retval;
    s.tmp_0.arg5 = r0;
    s.tmp_0.arg6 = 1;
    s.callLocIdx = 1695; s.pc = 23; return s.tmp_0;
  case 23:
    r0 = s.retval;
    s.lastBrkId = 3779;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3779]) return breakpoint(s, 27, 3779, r0);
  case 27:
    s.tmp_0 = if_y_2_mk(s);
    r0 = s.arg0.fields["_footer"];
    s.tmp_0.arg0 = r0;
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_1 = r0;
    s.tmp_4 = if_charHeight_1_mk(s);
    s.tmp_5 = if_font_1_mk(s);
    r0 = s.arg0.fields["_footer"];
    s.tmp_5.arg0 = r0;
    if (!s.tmp_5.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_5.arg0, "font");
    } else {
      s.tmp_5.fn = s.tmp_5.arg0.vtable.iface["font"];
      if (s.tmp_5.fn == null) { s.retval = s.tmp_5.arg0.fields["font"]; }
      else if (!s.tmp_5.fn.isGetter) { s.retval = bind(s.tmp_5); }
     else { s.callLocIdx = 1696; s.pc = 30; return s.tmp_5; }
    }
  case 30:
    r0 = s.retval;
    s.tmp_4.arg0 = r0;
    if (!s.tmp_4.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_4.arg0, "charHeight");
    } else {
      s.tmp_4.fn = s.tmp_4.arg0.vtable.iface["charHeight"];
      if (s.tmp_4.fn == null) { s.retval = s.tmp_4.arg0.fields["charHeight"]; }
      else if (!s.tmp_4.fn.isGetter) { s.retval = bind(s.tmp_4); }
     else { s.callLocIdx = 1697; s.pc = 29; return s.tmp_4; }
    }
  case 29:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_3 + 2);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 - s.tmp_2);
    s.tmp_0.arg1 = r0;
    if (!s.tmp_0.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapSetByString(s.tmp_0.arg0, "y", s.tmp_0.arg1);
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["set/y"];
      if (s.tmp_0.fn === null) { s.tmp_0.arg0.fields["y"] = s.tmp_0.arg1; }
      else if (s.tmp_0.fn === undefined) { failedCast(s.tmp_0.arg0) } 
     else { s.callLocIdx = 1698; s.pc = 28; return s.tmp_0; }
    }
  case 28:
    r0 = s.retval;
    s.lastBrkId = 3780;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3780]) return breakpoint(s, 31, 3780, r0);
  case 31:
    s.tmp_0 = helpers_imagePrintCenter__P1784_mk(s);
    s.tmp_0.arg0 = globals.RotatingScreens__base___6606;
    s.tmp_1 = if_data_1_mk(s);
    r0 = s.arg0.fields["_footer"];
    s.tmp_1.arg0 = r0;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "data");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["data"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["data"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 1699; s.pc = 33; return s.tmp_1; }
    }
  case 33:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.tmp_2 = if_y_1_mk(s);
    r0 = s.arg0.fields["_footer"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "y");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["y"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["y"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1700; s.pc = 34; return s.tmp_2; }
    }
  case 34:
    r0 = s.retval;
    s.tmp_0.arg2 = r0;
    s.tmp_3 = if_color_1_mk(s);
    r0 = s.arg0.fields["_footer"];
    s.tmp_3.arg0 = r0;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "color");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["color"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["color"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1701; s.pc = 35; return s.tmp_3; }
    }
  case 35:
    r0 = s.retval;
    s.tmp_0.arg3 = r0;
    s.tmp_4 = if_font_1_mk(s);
    r0 = s.arg0.fields["_footer"];
    s.tmp_4.arg0 = r0;
    if (!s.tmp_4.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_4.arg0, "font");
    } else {
      s.tmp_4.fn = s.tmp_4.arg0.vtable.iface["font"];
      if (s.tmp_4.fn == null) { s.retval = s.tmp_4.arg0.fields["font"]; }
      else if (!s.tmp_4.fn.isGetter) { s.retval = bind(s.tmp_4); }
     else { s.callLocIdx = 1702; s.pc = 36; return s.tmp_4; }
    }
  case 36:
    r0 = s.retval;
    s.tmp_0.arg4 = r0;
    s.callLocIdx = 1703; s.pc = 32; return s.tmp_0;
  case 32:
    r0 = s.retval;
    s.lastBrkId = 3781;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3781]) return breakpoint(s, 37, 3781, r0);
  case 37:
    s.tmp_0 = if_y_2_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_0.arg0 = r0;
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - 10);
    s.tmp_0.arg1 = r0;
    if (!s.tmp_0.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapSetByString(s.tmp_0.arg0, "y", s.tmp_0.arg1);
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["set/y"];
      if (s.tmp_0.fn === null) { s.tmp_0.arg0.fields["y"] = s.tmp_0.arg1; }
      else if (s.tmp_0.fn === undefined) { failedCast(s.tmp_0.arg0) } 
     else { s.callLocIdx = 1704; s.pc = 38; return s.tmp_0; }
    }
  case 38:
    r0 = s.retval;
    s.lastBrkId = 3782;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3782]) return breakpoint(s, 39, 3782, r0);
  case 39:
    s.tmp_1 = if_data_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_1.arg0 = r0;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "data");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["data"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["data"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 1705; s.pc = 40; return s.tmp_1; }
    }
  case 40:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 3; continue; }
    r0 = s.tmp_0;
    { step = 4; continue; }
  case 3:
    s.tmp_4 = if_data_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_4.arg0 = r0;
    if (!s.tmp_4.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_4.arg0, "data");
    } else {
      s.tmp_4.fn = s.tmp_4.arg0.vtable.iface["data"];
      if (s.tmp_4.fn == null) { s.retval = s.tmp_4.arg0.fields["data"]; }
      else if (!s.tmp_4.fn.isGetter) { s.retval = bind(s.tmp_4); }
     else { s.callLocIdx = 1706; s.pc = 41; return s.tmp_4; }
    }
  case 41:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = pxsim_Array__length(s.tmp_3);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 > 0);
  case 4:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_5);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 3783;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3783]) return breakpoint(s, 42, 3783, r0);
  case 42:
    s.tmp_6 = if_y_2_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_6.arg0 = r0;
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_7 = r0;
    s.tmp_12 = if_charHeight_1_mk(s);
    s.tmp_13 = if_font_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_13.arg0 = r0;
    if (!s.tmp_13.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_13.arg0, "font");
    } else {
      s.tmp_13.fn = s.tmp_13.arg0.vtable.iface["font"];
      if (s.tmp_13.fn == null) { s.retval = s.tmp_13.arg0.fields["font"]; }
      else if (!s.tmp_13.fn.isGetter) { s.retval = bind(s.tmp_13); }
     else { s.callLocIdx = 1707; s.pc = 45; return s.tmp_13; }
    }
  case 45:
    r0 = s.retval;
    s.tmp_12.arg0 = r0;
    if (!s.tmp_12.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_12.arg0, "charHeight");
    } else {
      s.tmp_12.fn = s.tmp_12.arg0.vtable.iface["charHeight"];
      if (s.tmp_12.fn == null) { s.retval = s.tmp_12.arg0.fields["charHeight"]; }
      else if (!s.tmp_12.fn.isGetter) { s.retval = bind(s.tmp_12); }
     else { s.callLocIdx = 1708; s.pc = 44; return s.tmp_12; }
    }
  case 44:
    r0 = s.retval;
    s.tmp_11 = r0;
    r0 = (s.tmp_11 + 1);
    s.tmp_10 = r0;
    s.tmp_18 = if_data_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_18.arg0 = r0;
    if (!s.tmp_18.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_18.arg0, "data");
    } else {
      s.tmp_18.fn = s.tmp_18.arg0.vtable.iface["data"];
      if (s.tmp_18.fn == null) { s.retval = s.tmp_18.arg0.fields["data"]; }
      else if (!s.tmp_18.fn.isGetter) { s.retval = bind(s.tmp_18); }
     else { s.callLocIdx = 1709; s.pc = 46; return s.tmp_18; }
    }
  case 46:
    r0 = s.retval;
    s.tmp_17 = r0;
    r0 = pxsim_Array__getAt(s.tmp_17, 0);
    s.tmp_16 = r0;
    r0 = pxsim_Array__length(s.tmp_16);
    s.tmp_15 = r0;
    r0 = (s.tmp_15 + 1);
    s.tmp_14 = r0;
    r0 = (s.tmp_10 * s.tmp_14);
    s.tmp_9 = r0;
    r0 = (s.tmp_9 + 6);
    s.tmp_8 = r0;
    r0 = (s.tmp_7 - s.tmp_8);
    s.tmp_6.arg1 = r0;
    if (!s.tmp_6.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapSetByString(s.tmp_6.arg0, "y", s.tmp_6.arg1);
    } else {
      s.tmp_6.fn = s.tmp_6.arg0.vtable.iface["set/y"];
      if (s.tmp_6.fn === null) { s.tmp_6.arg0.fields["y"] = s.tmp_6.arg1; }
      else if (s.tmp_6.fn === undefined) { failedCast(s.tmp_6.arg0) } 
     else { s.callLocIdx = 1710; s.pc = 43; return s.tmp_6; }
    }
  case 43:
    r0 = s.retval;
    s.lastBrkId = 3784;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3784]) return breakpoint(s, 47, 3784, r0);
  case 47:
    s.tmp_2 = if_data_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "data");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["data"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["data"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1711; s.pc = 48; return s.tmp_2; }
    }
  case 48:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_Array__length(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_pxtcore.switch_eq(1, s.tmp_0);
    if (r0) { step = 5; continue; }
    r0 = pxsim_pxtcore.switch_eq(2, s.tmp_0);
    if (r0) { step = 6; continue; }
    r0 = s.tmp_0;
    { step = 7; continue; }
  case 5:
    s.lastBrkId = 3785;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3785]) return breakpoint(s, 49, 3785, r0);
  case 49:
    s.tmp_3 = RotatingScreens_printMultipleCenter__P6605_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.tmp_5 = if_data_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_5.arg0 = r0;
    if (!s.tmp_5.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_5.arg0, "data");
    } else {
      s.tmp_5.fn = s.tmp_5.arg0.vtable.iface["data"];
      if (s.tmp_5.fn == null) { s.retval = s.tmp_5.arg0.fields["data"]; }
      else if (!s.tmp_5.fn.isGetter) { s.retval = bind(s.tmp_5); }
     else { s.callLocIdx = 1712; s.pc = 51; return s.tmp_5; }
    }
  case 51:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_Array__getAt(s.tmp_4, 0);
    s.tmp_3.arg1 = r0;
    s.tmp_3.arg2 = globals.RotatingScreens__base___6606;
    s.tmp_6 = if_y_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_6.arg0 = r0;
    if (!s.tmp_6.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_6.arg0, "y");
    } else {
      s.tmp_6.fn = s.tmp_6.arg0.vtable.iface["y"];
      if (s.tmp_6.fn == null) { s.retval = s.tmp_6.arg0.fields["y"]; }
      else if (!s.tmp_6.fn.isGetter) { s.retval = bind(s.tmp_6); }
     else { s.callLocIdx = 1713; s.pc = 52; return s.tmp_6; }
    }
  case 52:
    r0 = s.retval;
    s.tmp_3.arg3 = r0;
    s.tmp_7 = if_color_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_7.arg0 = r0;
    if (!s.tmp_7.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_7.arg0, "color");
    } else {
      s.tmp_7.fn = s.tmp_7.arg0.vtable.iface["color"];
      if (s.tmp_7.fn == null) { s.retval = s.tmp_7.arg0.fields["color"]; }
      else if (!s.tmp_7.fn.isGetter) { s.retval = bind(s.tmp_7); }
     else { s.callLocIdx = 1714; s.pc = 53; return s.tmp_7; }
    }
  case 53:
    r0 = s.retval;
    s.tmp_3.arg4 = r0;
    s.tmp_8 = if_font_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_8.arg0 = r0;
    if (!s.tmp_8.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_8.arg0, "font");
    } else {
      s.tmp_8.fn = s.tmp_8.arg0.vtable.iface["font"];
      if (s.tmp_8.fn == null) { s.retval = s.tmp_8.arg0.fields["font"]; }
      else if (!s.tmp_8.fn.isGetter) { s.retval = bind(s.tmp_8); }
     else { s.callLocIdx = 1715; s.pc = 54; return s.tmp_8; }
    }
  case 54:
    r0 = s.retval;
    s.tmp_3.arg5 = r0;
    s.tmp_3.arg6 = 1;
    s.callLocIdx = 1716; s.pc = 50; return s.tmp_3;
  case 50:
    r0 = s.retval;
    s.lastBrkId = 3786;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3786]) return breakpoint(s, 55, 3786, r0);
  case 55:
    { step = 8; continue; }
  case 6:
    s.lastBrkId = 3787;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3787]) return breakpoint(s, 56, 3787, r0);
  case 56:
    s.tmp_0 = RotatingScreens_printMultiple__P6604_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_2 = if_data_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "data");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["data"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["data"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1717; s.pc = 58; return s.tmp_2; }
    }
  case 58:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_Array__getAt(s.tmp_1, 0);
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = globals.RotatingScreens__base___6606;
    s.tmp_0.arg3 = 1;
    s.tmp_3 = if_y_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_3.arg0 = r0;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "y");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["y"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["y"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1718; s.pc = 59; return s.tmp_3; }
    }
  case 59:
    r0 = s.retval;
    s.tmp_0.arg4 = r0;
    s.tmp_4 = if_color_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_4.arg0 = r0;
    if (!s.tmp_4.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_4.arg0, "color");
    } else {
      s.tmp_4.fn = s.tmp_4.arg0.vtable.iface["color"];
      if (s.tmp_4.fn == null) { s.retval = s.tmp_4.arg0.fields["color"]; }
      else if (!s.tmp_4.fn.isGetter) { s.retval = bind(s.tmp_4); }
     else { s.callLocIdx = 1719; s.pc = 60; return s.tmp_4; }
    }
  case 60:
    r0 = s.retval;
    s.tmp_0.arg5 = r0;
    s.tmp_5 = if_font_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_5.arg0 = r0;
    if (!s.tmp_5.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_5.arg0, "font");
    } else {
      s.tmp_5.fn = s.tmp_5.arg0.vtable.iface["font"];
      if (s.tmp_5.fn == null) { s.retval = s.tmp_5.arg0.fields["font"]; }
      else if (!s.tmp_5.fn.isGetter) { s.retval = bind(s.tmp_5); }
     else { s.callLocIdx = 1720; s.pc = 61; return s.tmp_5; }
    }
  case 61:
    r0 = s.retval;
    s.tmp_0.arg6 = r0;
    s.tmp_0.arg7 = 1;
    s.callLocIdx = 1721; s.pc = 57; return s.tmp_0;
  case 57:
    r0 = s.retval;
    s.lastBrkId = 3788;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3788]) return breakpoint(s, 62, 3788, r0);
  case 62:
    s.tmp_0 = RotatingScreens_printMultiple__P6604_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_2 = if_data_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "data");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["data"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["data"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1722; s.pc = 64; return s.tmp_2; }
    }
  case 64:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_Array__getAt(s.tmp_1, 1);
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = globals.RotatingScreens__base___6606;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 / 2);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 + 1);
    s.tmp_0.arg3 = r0;
    s.tmp_5 = if_y_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_5.arg0 = r0;
    if (!s.tmp_5.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_5.arg0, "y");
    } else {
      s.tmp_5.fn = s.tmp_5.arg0.vtable.iface["y"];
      if (s.tmp_5.fn == null) { s.retval = s.tmp_5.arg0.fields["y"]; }
      else if (!s.tmp_5.fn.isGetter) { s.retval = bind(s.tmp_5); }
     else { s.callLocIdx = 1723; s.pc = 65; return s.tmp_5; }
    }
  case 65:
    r0 = s.retval;
    s.tmp_0.arg4 = r0;
    s.tmp_6 = if_color_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_6.arg0 = r0;
    if (!s.tmp_6.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_6.arg0, "color");
    } else {
      s.tmp_6.fn = s.tmp_6.arg0.vtable.iface["color"];
      if (s.tmp_6.fn == null) { s.retval = s.tmp_6.arg0.fields["color"]; }
      else if (!s.tmp_6.fn.isGetter) { s.retval = bind(s.tmp_6); }
     else { s.callLocIdx = 1724; s.pc = 66; return s.tmp_6; }
    }
  case 66:
    r0 = s.retval;
    s.tmp_0.arg5 = r0;
    s.tmp_7 = if_font_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_7.arg0 = r0;
    if (!s.tmp_7.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_7.arg0, "font");
    } else {
      s.tmp_7.fn = s.tmp_7.arg0.vtable.iface["font"];
      if (s.tmp_7.fn == null) { s.retval = s.tmp_7.arg0.fields["font"]; }
      else if (!s.tmp_7.fn.isGetter) { s.retval = bind(s.tmp_7); }
     else { s.callLocIdx = 1725; s.pc = 67; return s.tmp_7; }
    }
  case 67:
    r0 = s.retval;
    s.tmp_0.arg6 = r0;
    s.tmp_0.arg7 = 1;
    s.callLocIdx = 1726; s.pc = 63; return s.tmp_0;
  case 63:
    r0 = s.retval;
    s.lastBrkId = 3789;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3789]) return breakpoint(s, 68, 3789, r0);
  case 68:
    { step = 8; continue; }
  case 7:
    s.lastBrkId = 3790;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3790]) return breakpoint(s, 69, 3790, r0);
  case 69:
    s.tmp_0 = RotatingScreens_printMultiple__P6604_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_2 = if_data_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "data");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["data"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["data"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1727; s.pc = 71; return s.tmp_2; }
    }
  case 71:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_Array__getAt(s.tmp_1, 0);
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = globals.RotatingScreens__base___6606;
    s.tmp_0.arg3 = 1;
    s.tmp_3 = if_y_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_3.arg0 = r0;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "y");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["y"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["y"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1728; s.pc = 72; return s.tmp_3; }
    }
  case 72:
    r0 = s.retval;
    s.tmp_0.arg4 = r0;
    s.tmp_4 = if_color_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_4.arg0 = r0;
    if (!s.tmp_4.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_4.arg0, "color");
    } else {
      s.tmp_4.fn = s.tmp_4.arg0.vtable.iface["color"];
      if (s.tmp_4.fn == null) { s.retval = s.tmp_4.arg0.fields["color"]; }
      else if (!s.tmp_4.fn.isGetter) { s.retval = bind(s.tmp_4); }
     else { s.callLocIdx = 1729; s.pc = 73; return s.tmp_4; }
    }
  case 73:
    r0 = s.retval;
    s.tmp_0.arg5 = r0;
    s.tmp_5 = if_font_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_5.arg0 = r0;
    if (!s.tmp_5.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_5.arg0, "font");
    } else {
      s.tmp_5.fn = s.tmp_5.arg0.vtable.iface["font"];
      if (s.tmp_5.fn == null) { s.retval = s.tmp_5.arg0.fields["font"]; }
      else if (!s.tmp_5.fn.isGetter) { s.retval = bind(s.tmp_5); }
     else { s.callLocIdx = 1730; s.pc = 74; return s.tmp_5; }
    }
  case 74:
    r0 = s.retval;
    s.tmp_0.arg6 = r0;
    s.tmp_0.arg7 = 1;
    s.callLocIdx = 1731; s.pc = 70; return s.tmp_0;
  case 70:
    r0 = s.retval;
    s.lastBrkId = 3791;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3791]) return breakpoint(s, 75, 3791, r0);
  case 75:
    s.tmp_0 = RotatingScreens_printMultipleCenter__P6605_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_2 = if_data_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "data");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["data"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["data"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1732; s.pc = 77; return s.tmp_2; }
    }
  case 77:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_Array__getAt(s.tmp_1, 1);
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = globals.RotatingScreens__base___6606;
    s.tmp_3 = if_y_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_3.arg0 = r0;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "y");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["y"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["y"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1733; s.pc = 78; return s.tmp_3; }
    }
  case 78:
    r0 = s.retval;
    s.tmp_0.arg3 = r0;
    s.tmp_4 = if_color_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_4.arg0 = r0;
    if (!s.tmp_4.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_4.arg0, "color");
    } else {
      s.tmp_4.fn = s.tmp_4.arg0.vtable.iface["color"];
      if (s.tmp_4.fn == null) { s.retval = s.tmp_4.arg0.fields["color"]; }
      else if (!s.tmp_4.fn.isGetter) { s.retval = bind(s.tmp_4); }
     else { s.callLocIdx = 1734; s.pc = 79; return s.tmp_4; }
    }
  case 79:
    r0 = s.retval;
    s.tmp_0.arg4 = r0;
    s.tmp_5 = if_font_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_5.arg0 = r0;
    if (!s.tmp_5.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_5.arg0, "font");
    } else {
      s.tmp_5.fn = s.tmp_5.arg0.vtable.iface["font"];
      if (s.tmp_5.fn == null) { s.retval = s.tmp_5.arg0.fields["font"]; }
      else if (!s.tmp_5.fn.isGetter) { s.retval = bind(s.tmp_5); }
     else { s.callLocIdx = 1735; s.pc = 80; return s.tmp_5; }
    }
  case 80:
    r0 = s.retval;
    s.tmp_0.arg5 = r0;
    s.tmp_0.arg6 = 1;
    s.callLocIdx = 1736; s.pc = 76; return s.tmp_0;
  case 76:
    r0 = s.retval;
    s.lastBrkId = 3792;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3792]) return breakpoint(s, 81, 3792, r0);
  case 81:
    s.tmp_0 = RotatingScreens_printMultiple__P6604_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_2 = if_data_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "data");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["data"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["data"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1737; s.pc = 83; return s.tmp_2; }
    }
  case 83:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_Array__getAt(s.tmp_1, 2);
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = globals.RotatingScreens__base___6606;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_5 = r0;
    r0 = (s.tmp_5 * 2);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 / 3);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 + 1);
    s.tmp_0.arg3 = r0;
    s.tmp_6 = if_y_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_6.arg0 = r0;
    if (!s.tmp_6.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_6.arg0, "y");
    } else {
      s.tmp_6.fn = s.tmp_6.arg0.vtable.iface["y"];
      if (s.tmp_6.fn == null) { s.retval = s.tmp_6.arg0.fields["y"]; }
      else if (!s.tmp_6.fn.isGetter) { s.retval = bind(s.tmp_6); }
     else { s.callLocIdx = 1738; s.pc = 84; return s.tmp_6; }
    }
  case 84:
    r0 = s.retval;
    s.tmp_0.arg4 = r0;
    s.tmp_7 = if_color_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_7.arg0 = r0;
    if (!s.tmp_7.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_7.arg0, "color");
    } else {
      s.tmp_7.fn = s.tmp_7.arg0.vtable.iface["color"];
      if (s.tmp_7.fn == null) { s.retval = s.tmp_7.arg0.fields["color"]; }
      else if (!s.tmp_7.fn.isGetter) { s.retval = bind(s.tmp_7); }
     else { s.callLocIdx = 1739; s.pc = 85; return s.tmp_7; }
    }
  case 85:
    r0 = s.retval;
    s.tmp_0.arg5 = r0;
    s.tmp_8 = if_font_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_8.arg0 = r0;
    if (!s.tmp_8.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_8.arg0, "font");
    } else {
      s.tmp_8.fn = s.tmp_8.arg0.vtable.iface["font"];
      if (s.tmp_8.fn == null) { s.retval = s.tmp_8.arg0.fields["font"]; }
      else if (!s.tmp_8.fn.isGetter) { s.retval = bind(s.tmp_8); }
     else { s.callLocIdx = 1740; s.pc = 86; return s.tmp_8; }
    }
  case 86:
    r0 = s.retval;
    s.tmp_0.arg6 = r0;
    s.tmp_0.arg7 = 1;
    s.callLocIdx = 1741; s.pc = 82; return s.tmp_0;
  case 82:
    r0 = s.retval;
    s.lastBrkId = 3793;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3793]) return breakpoint(s, 87, 3793, r0);
  case 87:
  case 8:
  case 9:
  case 10:
    s.lastBrkId = 3794;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3794]) return breakpoint(s, 88, 3794, r0);
  case 88:
    r0 = s.arg0.fields["_backImage"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 13; continue; }
    s.lastBrkId = 3795;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3795]) return breakpoint(s, 89, 3795, r0);
  case 89:
    s.tmp_2 = if_y_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "y");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["y"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["y"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1742; s.pc = 90; return s.tmp_2; }
    }
  case 90:
    r0 = s.retval;
    s.tmp_1 = r0;
    s.tmp_6 = if_charHeight_1_mk(s);
    s.tmp_7 = if_font_1_mk(s);
    r0 = s.arg0.fields["_headlines"];
    s.tmp_7.arg0 = r0;
    if (!s.tmp_7.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_7.arg0, "font");
    } else {
      s.tmp_7.fn = s.tmp_7.arg0.vtable.iface["font"];
      if (s.tmp_7.fn == null) { s.retval = s.tmp_7.arg0.fields["font"]; }
      else if (!s.tmp_7.fn.isGetter) { s.retval = bind(s.tmp_7); }
     else { s.callLocIdx = 1743; s.pc = 92; return s.tmp_7; }
    }
  case 92:
    r0 = s.retval;
    s.tmp_6.arg0 = r0;
    if (!s.tmp_6.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_6.arg0, "charHeight");
    } else {
      s.tmp_6.fn = s.tmp_6.arg0.vtable.iface["charHeight"];
      if (s.tmp_6.fn == null) { s.retval = s.tmp_6.arg0.fields["charHeight"]; }
      else if (!s.tmp_6.fn.isGetter) { s.retval = bind(s.tmp_6); }
     else { s.callLocIdx = 1744; s.pc = 91; return s.tmp_6; }
    }
  case 91:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = (s.tmp_5 + 1);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 * 2);
    s.tmp_3 = r0;
    r0 = (s.tmp_1 - s.tmp_3);
    s.minY___18855 = (r0);
    s.lastBrkId = 3796;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3796]) return breakpoint(s, 93, 3796, r0);
  case 93:
    r0 = s.arg0.fields["_backImage"];
    s.tmp_2 = r0;
    r0 = pxsim_ImageMethods.height(s.tmp_2);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > s.minY___18855);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 11; continue; }
    s.lastBrkId = 3797;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3797]) return breakpoint(s, 94, 3797, r0);
  case 94:
    s.tmp_3 = if_y_2_mk(s);
    r0 = s.arg0.fields["_headlines"];
    s.tmp_3.arg0 = r0;
    s.tmp_3.arg1 = s.minY___18855;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapSetByString(s.tmp_3.arg0, "y", s.tmp_3.arg1);
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["set/y"];
      if (s.tmp_3.fn === null) { s.tmp_3.arg0.fields["y"] = s.tmp_3.arg1; }
      else if (s.tmp_3.fn === undefined) { failedCast(s.tmp_3.arg0) } 
     else { s.callLocIdx = 1745; s.pc = 95; return s.tmp_3; }
    }
  case 95:
    r0 = s.retval;
    { step = 12; continue; }
  case 11:
    s.lastBrkId = 3798;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3798]) return breakpoint(s, 96, 3798, r0);
  case 96:
    s.tmp_0 = if_y_2_mk(s);
    r0 = s.arg0.fields["_headlines"];
    s.tmp_0.arg0 = r0;
    r0 = s.arg0.fields["_backImage"];
    s.tmp_1 = r0;
    r0 = pxsim_ImageMethods.height(s.tmp_1);
    s.tmp_0.arg1 = r0;
    if (!s.tmp_0.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapSetByString(s.tmp_0.arg0, "y", s.tmp_0.arg1);
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["set/y"];
      if (s.tmp_0.fn === null) { s.tmp_0.arg0.fields["y"] = s.tmp_0.arg1; }
      else if (s.tmp_0.fn === undefined) { failedCast(s.tmp_0.arg0) } 
     else { s.callLocIdx = 1746; s.pc = 97; return s.tmp_0; }
    }
  case 97:
    r0 = s.retval;
  case 12:
    { step = 16; continue; }
  case 13:
    s.lastBrkId = 3799;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3799]) return breakpoint(s, 98, 3799, r0);
  case 98:
    s.tmp_1 = if_data_1_mk(s);
    r0 = s.arg0.fields["_titles"];
    s.tmp_1.arg0 = r0;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "data");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["data"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["data"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 1747; s.pc = 99; return s.tmp_1; }
    }
  case 99:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 14; continue; }
    s.lastBrkId = 3800;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3800]) return breakpoint(s, 100, 3800, r0);
  case 100:
    s.tmp_2 = if_y_2_mk(s);
    r0 = s.arg0.fields["_headlines"];
    s.tmp_2.arg0 = r0;
    s.tmp_7 = if_charHeight_1_mk(s);
    s.tmp_8 = if_font_1_mk(s);
    r0 = s.arg0.fields["_titles"];
    s.tmp_8.arg0 = r0;
    if (!s.tmp_8.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_8.arg0, "font");
    } else {
      s.tmp_8.fn = s.tmp_8.arg0.vtable.iface["font"];
      if (s.tmp_8.fn == null) { s.retval = s.tmp_8.arg0.fields["font"]; }
      else if (!s.tmp_8.fn.isGetter) { s.retval = bind(s.tmp_8); }
     else { s.callLocIdx = 1748; s.pc = 103; return s.tmp_8; }
    }
  case 103:
    r0 = s.retval;
    s.tmp_7.arg0 = r0;
    if (!s.tmp_7.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_7.arg0, "charHeight");
    } else {
      s.tmp_7.fn = s.tmp_7.arg0.vtable.iface["charHeight"];
      if (s.tmp_7.fn == null) { s.retval = s.tmp_7.arg0.fields["charHeight"]; }
      else if (!s.tmp_7.fn.isGetter) { s.retval = bind(s.tmp_7); }
     else { s.callLocIdx = 1749; s.pc = 102; return s.tmp_7; }
    }
  case 102:
    r0 = s.retval;
    s.tmp_6 = r0;
    s.tmp_11 = if_data_1_mk(s);
    r0 = s.arg0.fields["_titles"];
    s.tmp_11.arg0 = r0;
    if (!s.tmp_11.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_11.arg0, "data");
    } else {
      s.tmp_11.fn = s.tmp_11.arg0.vtable.iface["data"];
      if (s.tmp_11.fn == null) { s.retval = s.tmp_11.arg0.fields["data"]; }
      else if (!s.tmp_11.fn.isGetter) { s.retval = bind(s.tmp_11); }
     else { s.callLocIdx = 1750; s.pc = 104; return s.tmp_11; }
    }
  case 104:
    r0 = s.retval;
    s.tmp_10 = r0;
    r0 = pxsim_Array__length(s.tmp_10);
    s.tmp_9 = r0;
    r0 = (s.tmp_6 * s.tmp_9);
    s.tmp_5 = r0;
    s.tmp_14 = if_data_1_mk(s);
    r0 = s.arg0.fields["_titles"];
    s.tmp_14.arg0 = r0;
    if (!s.tmp_14.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_14.arg0, "data");
    } else {
      s.tmp_14.fn = s.tmp_14.arg0.vtable.iface["data"];
      if (s.tmp_14.fn == null) { s.retval = s.tmp_14.arg0.fields["data"]; }
      else if (!s.tmp_14.fn.isGetter) { s.retval = bind(s.tmp_14); }
     else { s.callLocIdx = 1751; s.pc = 105; return s.tmp_14; }
    }
  case 105:
    r0 = s.retval;
    s.tmp_13 = r0;
    r0 = pxsim_Array__length(s.tmp_13);
    s.tmp_12 = r0;
    r0 = (s.tmp_5 + s.tmp_12);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 + 2);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 + 2);
    s.tmp_2.arg1 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapSetByString(s.tmp_2.arg0, "y", s.tmp_2.arg1);
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["set/y"];
      if (s.tmp_2.fn === null) { s.tmp_2.arg0.fields["y"] = s.tmp_2.arg1; }
      else if (s.tmp_2.fn === undefined) { failedCast(s.tmp_2.arg0) } 
     else { s.callLocIdx = 1752; s.pc = 101; return s.tmp_2; }
    }
  case 101:
    r0 = s.retval;
    { step = 15; continue; }
  case 14:
    s.lastBrkId = 3801;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3801]) return breakpoint(s, 106, 3801, r0);
  case 106:
    s.tmp_0 = if_y_2_mk(s);
    r0 = s.arg0.fields["_headlines"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = 4;
    if (!s.tmp_0.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapSetByString(s.tmp_0.arg0, "y", s.tmp_0.arg1);
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["set/y"];
      if (s.tmp_0.fn === null) { s.tmp_0.arg0.fields["y"] = s.tmp_0.arg1; }
      else if (s.tmp_0.fn === undefined) { failedCast(s.tmp_0.arg0) } 
     else { s.callLocIdx = 1753; s.pc = 107; return s.tmp_0; }
    }
  case 107:
    r0 = s.retval;
  case 15:
  case 16:
    s.lastBrkId = 3802;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3802]) return breakpoint(s, 108, 3802, r0);
  case 108:
    s.tmp_0 = if_y_2_mk(s);
    r0 = s.arg0.fields["_movingSprites"];
    s.tmp_0.arg0 = r0;
    s.tmp_5 = if_y_1_mk(s);
    r0 = s.arg0.fields["_headlines"];
    s.tmp_5.arg0 = r0;
    if (!s.tmp_5.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_5.arg0, "y");
    } else {
      s.tmp_5.fn = s.tmp_5.arg0.vtable.iface["y"];
      if (s.tmp_5.fn == null) { s.retval = s.tmp_5.arg0.fields["y"]; }
      else if (!s.tmp_5.fn.isGetter) { s.retval = bind(s.tmp_5); }
     else { s.callLocIdx = 1754; s.pc = 110; return s.tmp_5; }
    }
  case 110:
    r0 = s.retval;
    s.tmp_4 = r0;
    s.tmp_8 = if_charHeight_1_mk(s);
    s.tmp_9 = if_font_1_mk(s);
    r0 = s.arg0.fields["_headlines"];
    s.tmp_9.arg0 = r0;
    if (!s.tmp_9.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_9.arg0, "font");
    } else {
      s.tmp_9.fn = s.tmp_9.arg0.vtable.iface["font"];
      if (s.tmp_9.fn == null) { s.retval = s.tmp_9.arg0.fields["font"]; }
      else if (!s.tmp_9.fn.isGetter) { s.retval = bind(s.tmp_9); }
     else { s.callLocIdx = 1755; s.pc = 112; return s.tmp_9; }
    }
  case 112:
    r0 = s.retval;
    s.tmp_8.arg0 = r0;
    if (!s.tmp_8.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_8.arg0, "charHeight");
    } else {
      s.tmp_8.fn = s.tmp_8.arg0.vtable.iface["charHeight"];
      if (s.tmp_8.fn == null) { s.retval = s.tmp_8.arg0.fields["charHeight"]; }
      else if (!s.tmp_8.fn.isGetter) { s.retval = bind(s.tmp_8); }
     else { s.callLocIdx = 1756; s.pc = 111; return s.tmp_8; }
    }
  case 111:
    r0 = s.retval;
    s.tmp_7 = r0;
    r0 = (s.tmp_7 * 2);
    s.tmp_6 = r0;
    r0 = (s.tmp_4 + s.tmp_6);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 + 1);
    s.tmp_2 = r0;
    s.tmp_11 = if_y_1_mk(s);
    r0 = s.arg0.fields["_midText"];
    s.tmp_11.arg0 = r0;
    if (!s.tmp_11.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_11.arg0, "y");
    } else {
      s.tmp_11.fn = s.tmp_11.arg0.vtable.iface["y"];
      if (s.tmp_11.fn == null) { s.retval = s.tmp_11.arg0.fields["y"]; }
      else if (!s.tmp_11.fn.isGetter) { s.retval = bind(s.tmp_11); }
     else { s.callLocIdx = 1757; s.pc = 113; return s.tmp_11; }
    }
  case 113:
    r0 = s.retval;
    s.tmp_10 = r0;
    r0 = (s.tmp_2 + s.tmp_10);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 / 2);
    s.tmp_0.arg1 = r0;
    if (!s.tmp_0.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapSetByString(s.tmp_0.arg0, "y", s.tmp_0.arg1);
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["set/y"];
      if (s.tmp_0.fn === null) { s.tmp_0.arg0.fields["y"] = s.tmp_0.arg1; }
      else if (s.tmp_0.fn === undefined) { failedCast(s.tmp_0.arg0) } 
     else { s.callLocIdx = 1758; s.pc = 109; return s.tmp_0; }
    }
  case 109:
    r0 = s.retval;
    s.lastBrkId = 3803;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3803]) return breakpoint(s, 114, 3803, r0);
  case 114:
    s.tmp_0 = scene_setBackgroundImage__P2536_mk(s);
    s.tmp_0.arg0 = globals.RotatingScreens__base___6606;
    s.callLocIdx = 1759; s.pc = 115; return s.tmp_0;
  case 115:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
RotatingScreens_createBase__P6601.info = {"start":21043,"length":3469,"line":674,"column":4,"endLine":740,"endColumn":5,"fileName":"pxt_modules/pxt-arcade-info-screens/info-screens.ts","functionName":"createBase","argumentNames":["this"]}

function RotatingScreens_createBase__P6601_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: RotatingScreens_createBase__P6601, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  tmp_12: undefined,
  tmp_13: undefined,
  tmp_14: undefined,
  tmp_15: undefined,
  tmp_16: undefined,
  tmp_17: undefined,
  tmp_18: undefined,
  minY___18855: undefined,
  arg0: undefined,
} }





function RotatingScreens_printMultiple__P6604(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.currY___18947 = undefined;
    s.t___18950 = undefined;
    s.unnamed1670___U2 = undefined;
    s.unnamed1671___U3 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.arg5 = (s.lambdaArgs[5]);
      s.arg6 = (s.lambdaArgs[6]);
      s.arg7 = (s.lambdaArgs[7]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, RotatingScreens__C3926_VT)) failedCast(r0);
    s.lastBrkId = 3821;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3821]) return breakpoint(s, 5, 3821, r0);
  case 5:
    r0 = pxsim_numops_toBoolDecr(s.arg6);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3822;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3822]) return breakpoint(s, 6, 3822, r0);
  case 6:
    s.arg6 = (globals.DEFAULT_FONT___3885);
  case 1:
  case 2:
    s.lastBrkId = 3823;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3823]) return breakpoint(s, 7, 3823, r0);
  case 7:
    s.currY___18947 = (s.arg4);
    s.lastBrkId = 3824;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3824]) return breakpoint(s, 8, 3824, r0);
  case 8:
    s.t___18950 = (undefined);
    s.unnamed1670___U2 = (s.arg1);
    s.unnamed1671___U3 = (0);
    s.lastBrkId = 3825;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3825]) return breakpoint(s, 9, 3825, r0);
  case 9:
  case 3:
    s.tmp_0 = r0 = s.unnamed1671___U3;
    r0 = pxsim_Array__length(s.unnamed1670___U2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 4; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1670___U2, s.unnamed1671___U3);
    s.t___18950 = (r0);
    s.lastBrkId = 3826;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3826]) return breakpoint(s, 10, 3826, r0);
  case 10:
    s.tmp_2 = helpers_imagePrint__P1785_mk(s);
    s.tmp_2.arg0 = s.arg2;
    s.tmp_2.arg1 = s.t___18950;
    s.tmp_2.arg2 = s.arg3;
    s.tmp_2.arg3 = s.currY___18947;
    s.tmp_2.arg4 = s.arg5;
    s.tmp_2.arg5 = s.arg6;
    s.tmp_2.arg6 = undefined;
    s.callLocIdx = 1770; s.pc = 11; return s.tmp_2;
  case 11:
    r0 = s.retval;
    s.lastBrkId = 3827;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3827]) return breakpoint(s, 12, 3827, r0);
  case 12:
    s.tmp_0 = r0 = s.currY___18947;
    s.tmp_3 = if_charHeight_1_mk(s);
    s.tmp_3.arg0 = s.arg6;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "charHeight");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["charHeight"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["charHeight"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1771; s.pc = 13; return s.tmp_3; }
    }
  case 13:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + s.arg7);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 + s.tmp_1);
    s.currY___18947 = (r0);
    r0 = (s.unnamed1671___U3 + 1);
    s.unnamed1671___U3 = (r0);
    { step = 3; continue; }
  case 4:
    s.unnamed1670___U2 = (undefined);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
RotatingScreens_printMultiple__P6604.info = {"start":26478,"length":426,"line":785,"column":4,"endLine":797,"endColumn":5,"fileName":"pxt_modules/pxt-arcade-info-screens/info-screens.ts","functionName":"printMultiple","argumentNames":["this","text","img","x","y","color","font","spacing"]}

function RotatingScreens_printMultiple__P6604_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: RotatingScreens_printMultiple__P6604, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  currY___18947: undefined,
  t___18950: undefined,
  unnamed1670___U2: undefined,
  unnamed1671___U3: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
  arg5: undefined,
  arg6: undefined,
  arg7: undefined,
} }





function RotatingScreens_duplicateBackImage__P6602(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.x___18977 = undefined;
    s.y___18984 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, RotatingScreens__C3926_VT)) failedCast(r0);
    s.lastBrkId = 3804;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3804]) return breakpoint(s, 9, 3804, r0);
  case 9:
    r0 = s.arg0.fields["_backImage"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 != null);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = (globals.RotatingScreens__base___6606 != null);
  case 2:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 3805;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3805]) return breakpoint(s, 10, 3805, r0);
  case 10:
    s.x___18977 = (0);
    s.lastBrkId = 3806;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3806]) return breakpoint(s, 11, 3806, r0);
  case 11:
  case 3:
    s.lastBrkId = 3807;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3807]) return breakpoint(s, 12, 3807, r0);
  case 12:
    s.tmp_1 = r0 = s.x___18977;
    r0 = s.arg0.fields["_backImage"];
    s.tmp_3 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_3);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 6; continue; }
    s.lastBrkId = 3808;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3808]) return breakpoint(s, 13, 3808, r0);
  case 13:
    s.y___18984 = (0);
    s.lastBrkId = 3809;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3809]) return breakpoint(s, 14, 3809, r0);
  case 14:
  case 4:
    s.lastBrkId = 3810;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3810]) return breakpoint(s, 15, 3810, r0);
  case 15:
    s.tmp_1 = r0 = s.y___18984;
    r0 = s.arg0.fields["_backImage"];
    s.tmp_3 = r0;
    r0 = pxsim_ImageMethods.height(s.tmp_3);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 3811;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3811]) return breakpoint(s, 16, 3811, r0);
  case 16:
    s.tmp_4 = r0 = globals.RotatingScreens__base___6606;
    s.tmp_5 = r0 = s.x___18977;
    s.tmp_6 = r0 = s.y___18984;
    r0 = s.arg0.fields["_backImage"];
    s.tmp_8 = r0;
    r0 = pxsim_ImageMethods.getPixel(s.tmp_8, s.x___18977, s.y___18984);
    s.tmp_7 = r0;
    r0 = pxsim_ImageMethods.setPixel(s.tmp_4, s.tmp_5, s.tmp_6, s.tmp_7);
    s.lastBrkId = 3812;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3812]) return breakpoint(s, 17, 3812, r0);
  case 17:
    r0 = (s.y___18984 + 1);
    s.y___18984 = (r0);
    { step = 4; continue; }
  case 5:
    s.lastBrkId = 3813;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3813]) return breakpoint(s, 18, 3813, r0);
  case 18:
    r0 = (s.x___18977 + 1);
    s.x___18977 = (r0);
    { step = 3; continue; }
  case 6:
  case 7:
  case 8:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
RotatingScreens_duplicateBackImage__P6602.info = {"start":24605,"length":451,"line":745,"column":4,"endLine":753,"endColumn":5,"fileName":"pxt_modules/pxt-arcade-info-screens/info-screens.ts","functionName":"duplicateBackImage","argumentNames":["this"]}

function RotatingScreens_duplicateBackImage__P6602_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: RotatingScreens_duplicateBackImage__P6602, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  x___18977: undefined,
  y___18984: undefined,
  arg0: undefined,
} }





function RotatingScreens_destroySprites__P3952(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.sprite___14284 = undefined;
    s.unnamed1662___U1 = undefined;
    s.unnamed1663___U2 = undefined;
    s.sprite___14293 = undefined;
    s.unnamed1664___U4 = undefined;
    s.unnamed1665___U5 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, RotatingScreens__C3926_VT)) failedCast(r0);
    s.lastBrkId = 3722;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3722]) return breakpoint(s, 5, 3722, r0);
  case 5:
    s.sprite___14284 = (undefined);
    s.tmp_0 = sprites_allOfKind__P2045_mk(s);
    s.tmp_0.arg0 = 19;
    s.callLocIdx = 1639; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    s.unnamed1662___U1 = (r0);
    s.unnamed1663___U2 = (0);
    s.lastBrkId = 3723;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3723]) return breakpoint(s, 7, 3723, r0);
  case 7:
  case 1:
    s.tmp_0 = r0 = s.unnamed1663___U2;
    r0 = pxsim_Array__length(s.unnamed1662___U1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 2; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1662___U1, s.unnamed1663___U2);
    s.sprite___14284 = (r0);
    s.lastBrkId = 3724;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3724]) return breakpoint(s, 8, 3724, r0);
  case 8:
    s.tmp_2 = Sprite_destroy__P2166_mk(s);
    s.tmp_2.arg0 = s.sprite___14284;
    s.tmp_2.arg1 = undefined;
    s.tmp_2.arg2 = undefined;
    s.callLocIdx = 1640; s.pc = 9; return s.tmp_2;
  case 9:
    r0 = s.retval;
    r0 = (s.unnamed1663___U2 + 1);
    s.unnamed1663___U2 = (r0);
    { step = 1; continue; }
  case 2:
    s.unnamed1662___U1 = (undefined);
    s.lastBrkId = 3725;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3725]) return breakpoint(s, 10, 3725, r0);
  case 10:
    s.sprite___14293 = (undefined);
    s.tmp_0 = sprites_allOfKind__P2045_mk(s);
    s.tmp_0.arg0 = 42;
    s.callLocIdx = 1641; s.pc = 11; return s.tmp_0;
  case 11:
    r0 = s.retval;
    s.unnamed1664___U4 = (r0);
    s.unnamed1665___U5 = (0);
    s.lastBrkId = 3726;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3726]) return breakpoint(s, 12, 3726, r0);
  case 12:
  case 3:
    s.tmp_0 = r0 = s.unnamed1665___U5;
    r0 = pxsim_Array__length(s.unnamed1664___U4);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 4; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1664___U4, s.unnamed1665___U5);
    s.sprite___14293 = (r0);
    s.lastBrkId = 3727;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3727]) return breakpoint(s, 13, 3727, r0);
  case 13:
    s.tmp_2 = Sprite_destroy__P2166_mk(s);
    s.tmp_2.arg0 = s.sprite___14293;
    s.tmp_2.arg1 = undefined;
    s.tmp_2.arg2 = undefined;
    s.callLocIdx = 1642; s.pc = 14; return s.tmp_2;
  case 14:
    r0 = s.retval;
    r0 = (s.unnamed1665___U5 + 1);
    s.unnamed1665___U5 = (r0);
    { step = 3; continue; }
  case 4:
    s.unnamed1664___U4 = (undefined);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
RotatingScreens_destroySprites__P3952.info = {"start":15809,"length":285,"line":535,"column":4,"endLine":542,"endColumn":5,"fileName":"pxt_modules/pxt-arcade-info-screens/info-screens.ts","functionName":"destroySprites","argumentNames":["this"]}

function RotatingScreens_destroySprites__P3952_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: RotatingScreens_destroySprites__P3952, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  sprite___14284: undefined,
  unnamed1662___U1: undefined,
  unnamed1663___U2: undefined,
  sprite___14293: undefined,
  unnamed1664___U4: undefined,
  unnamed1665___U5: undefined,
  arg0: undefined,
} }





function Sprite_destroy__P2166(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1370;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1370]) return breakpoint(s, 6, 1370, r0);
  case 6:
    r0 = s.arg0.fields["flags"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 & 2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1371;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1371]) return breakpoint(s, 7, 1371, r0);
  case 7:
    { step = 5; continue; }
  case 1:
  case 2:
    s.lastBrkId = 1372;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1372]) return breakpoint(s, 8, 1372, r0);
  case 8:
    s.tmp_2 = r0 = s.arg0;
    r0 = s.tmp_2.fields["flags"];
    s.tmp_4 = r0;
    r0 = (s.tmp_4 | 2);
    s.tmp_3 = r0;
    r0 = (s.tmp_2).fields["flags"] = (s.tmp_3);
    s.lastBrkId = 1373;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1373]) return breakpoint(s, 9, 1373, r0);
  case 9:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1374;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1374]) return breakpoint(s, 10, 1374, r0);
  case 10:
    s.tmp_0 = effects_ParticleEffect_destroy__P2870_mk(s);
    s.tmp_0.arg0 = s.arg1;
    s.tmp_0.arg1 = s.arg0;
    s.tmp_0.arg2 = s.arg2;
    s.tmp_0.arg3 = undefined;
    s.callLocIdx = 430; s.pc = 11; return s.tmp_0;
  case 11:
    r0 = s.retval;
    { step = 4; continue; }
  case 3:
    s.lastBrkId = 1375;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1375]) return breakpoint(s, 12, 1375, r0);
  case 12:
    s.tmp_0 = Sprite__destroyCore__P2167_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 431; s.pc = 13; return s.tmp_0;
  case 13:
    r0 = s.retval;
  case 4:
  case 5:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite_destroy__P2166.info = {"start":25184,"length":293,"line":802,"column":4,"endLine":811,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"destroy","argumentNames":["this","effect","duration"]}

function Sprite_destroy__P2166_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_destroy__P2166, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function effects_ParticleEffect_destroy__P2870(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, effects_ParticleEffect__C2867_VT)) failedCast(r0);
    s.lastBrkId = 3527;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3527]) return breakpoint(s, 3, 3527, r0);
  case 3:
    s.tmp_0 = Sprite_setFlag__P2158_mk(s);
    s.tmp_0.arg0 = s.arg1;
    s.tmp_0.arg1 = 7168;
    s.tmp_0.arg2 = true;
    s.callLocIdx = 1567; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.lastBrkId = 3528;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3528]) return breakpoint(s, 5, 3528, r0);
  case 5:
    s.tmp_0 = effects_ParticleEffect_start__P2869_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.tmp_0.arg2 = s.arg3;
    s.tmp_0.arg3 = null;
    r0 = s.arg1.fields["flags"];
    s.tmp_5 = r0;
    r0 = (s.tmp_5 & 512);
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    s.tmp_3 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0.arg4 = r0;
    s.callLocIdx = 1568; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    s.lastBrkId = 3529;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3529]) return breakpoint(s, 7, 3529, r0);
  case 7:
    r0 = pxsim_numops_toBoolDecr(s.arg2);
    if (!r0) { step = 1; continue; }
    r0 = s.arg2;
    { step = 2; continue; }
  case 1:
    r0 = s.arg0.fields["defaultLifespan"];
    s.tmp_0 = r0;
    r0 = (s.tmp_0 >> 2);
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = (s.arg1).fields["lifespan"] = (s.tmp_1);
    s.lastBrkId = 3530;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3530]) return breakpoint(s, 8, 3530, r0);
  case 8:
    s.tmp_0 = effects_ImageEffect_applyTo__P2896_mk(s);
    s.tmp_0.arg0 = globals.dissolve___2899;
    s.tmp_0.arg1 = s.arg1;
    s.callLocIdx = 1569; s.pc = 9; return s.tmp_0;
  case 9:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
effects_ParticleEffect_destroy__P2870.info = {"start":1736,"length":368,"line":41,"column":8,"endLine":46,"endColumn":9,"fileName":"pxt_modules/game/particleeffects.ts","functionName":"destroy","argumentNames":["this","anchor","duration","particlesPerSecond"]}

function effects_ParticleEffect_destroy__P2870_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: effects_ParticleEffect_destroy__P2870, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function effects_ImageEffect_applyTo__P2896(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.clonedImage___16338 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, effects_ImageEffect__C2894_VT)) failedCast(r0);
    s.lastBrkId = 3560;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3560]) return breakpoint(s, 6, 3560, r0);
  case 6:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    s.tmp_4 = Sprite_image__P2131_mk(s);
    s.tmp_4.arg0 = s.arg1;
    s.callLocIdx = 1586; s.pc = 7; return s.tmp_4;
  case 7:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
  case 2:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_5);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 3561;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3561]) return breakpoint(s, 8, 3561, r0);
  case 8:
    { step = 5; continue; }
  case 3:
  case 4:
    s.lastBrkId = 3562;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3562]) return breakpoint(s, 9, 3562, r0);
  case 9:
    s.tmp_7 = Sprite_image__P2131_mk(s);
    s.tmp_7.arg0 = s.arg1;
    s.callLocIdx = 1587; s.pc = 10; return s.tmp_7;
  case 10:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = pxsim_ImageMethods.clone(s.tmp_6);
    s.clonedImage___16338 = (r0);
    s.lastBrkId = 3563;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3563]) return breakpoint(s, 11, 3563, r0);
  case 11:
    s.tmp_0 = effects_ImageEffect_change__P2897_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.clonedImage___16338;
    s.callLocIdx = 1588; s.pc = 12; return s.tmp_0;
  case 12:
    r0 = s.retval;
    s.lastBrkId = 3564;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3564]) return breakpoint(s, 13, 3564, r0);
  case 13:
    s.tmp_0 = Sprite_setImage__P2132_mk(s);
    s.tmp_0.arg0 = s.arg1;
    s.tmp_0.arg1 = s.clonedImage___16338;
    s.callLocIdx = 1589; s.pc = 14; return s.tmp_0;
  case 14:
    r0 = s.retval;
  case 5:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
effects_ImageEffect_applyTo__P2896.info = {"start":823,"length":218,"line":21,"column":8,"endLine":26,"endColumn":9,"fileName":"pxt_modules/game/effects.ts","functionName":"applyTo","argumentNames":["this","sprite"]}

function effects_ImageEffect_applyTo__P2896_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: effects_ImageEffect_applyTo__P2896, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  clonedImage___16338: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function effects_ImageEffect_change__P2897(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, effects_ImageEffect__C2894_VT)) failedCast(r0);
    s.lastBrkId = 3565;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3565]) return breakpoint(s, 1, 3565, r0);
  case 1:
    s.tmp_0 = if_effect_3_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    r0 = s.arg0.fields["fastRandom"];
    s.tmp_0.arg2 = r0;
    if (!s.tmp_0.arg0.vtable.iface) {
      setupLambda(s.tmp_0, pxsim_pxtrt.mapGetByString(s.tmp_0.arg0, "effect"), 3);
      s.callLocIdx = 1590; s.pc = 2; return s.tmp_0;
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["effect"];
      if (s.tmp_0.fn == null) { setupLambda(s.tmp_0, s.tmp_0.arg0.fields["effect"], 3); s.callLocIdx = 1590; s.pc = 2; return s.tmp_0; }
      else if (s.tmp_0.fn.isGetter) { s.tmp_0.stage2Call = true; s.callLocIdx = 1590; s.pc = 2; return s.tmp_0;; }
     else { s.callLocIdx = 1590; s.pc = 2; return s.tmp_0; }
    }
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
effects_ImageEffect_change__P2897.info = {"start":1151,"length":81,"line":32,"column":8,"endLine":34,"endColumn":9,"fileName":"pxt_modules/game/effects.ts","functionName":"change","argumentNames":["this","input"]}

function effects_ImageEffect_change__P2897_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: effects_ImageEffect_change__P2897, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function effects_ParticleEffect_start__P2869(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.src___16362 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, effects_ParticleEffect__C2867_VT)) failedCast(r0);
    s.lastBrkId = 3521;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3521]) return breakpoint(s, 10, 3521, r0);
  case 10:
    r0 = s.arg0.fields["sourceFactory"];
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3522;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3522]) return breakpoint(s, 11, 3522, r0);
  case 11:
    { step = 9; continue; }
  case 1:
  case 2:
    s.lastBrkId = 3523;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3523]) return breakpoint(s, 12, 3523, r0);
  case 12:
    r0 = pxsim_numops_toBoolDecr(s.arg3);
    if (!r0) { step = 3; continue; }
    r0 = s.arg3;
    { step = 4; continue; }
  case 3:
    r0 = s.arg0.fields["defaultRate"];
  case 4:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    s.tmp_4 = if_sourceFactory_3_mk(s);
    s.tmp_4.arg0 = s.arg0;
    s.tmp_4.arg1 = s.arg1;
    s.tmp_4.arg2 = s.tmp_3;
    if (!s.tmp_4.arg0.vtable.iface) {
      setupLambda(s.tmp_4, pxsim_pxtrt.mapGetByString(s.tmp_4.arg0, "sourceFactory"), 3);
      s.callLocIdx = 1565; s.pc = 13; return s.tmp_4;
    } else {
      s.tmp_4.fn = s.tmp_4.arg0.vtable.iface["sourceFactory"];
      if (s.tmp_4.fn == null) { setupLambda(s.tmp_4, s.tmp_4.arg0.fields["sourceFactory"], 3); s.callLocIdx = 1565; s.pc = 13; return s.tmp_4; }
      else if (s.tmp_4.fn.isGetter) { s.tmp_4.stage2Call = true; s.callLocIdx = 1565; s.pc = 13; return s.tmp_4;; }
     else { s.callLocIdx = 1565; s.pc = 13; return s.tmp_4; }
    }
  case 13:
    r0 = s.retval;
    s.src___16362 = (r0);
    s.lastBrkId = 3524;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3524]) return breakpoint(s, 14, 3524, r0);
  case 14:
    s.tmp_0 = particles_ParticleSource_setRelativeToCamera__P2767_mk(s);
    s.tmp_0.arg0 = s.src___16362;
    r0 = pxsim_numops_toBoolDecr(s.arg4);
    s.tmp_3 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1566; s.pc = 15; return s.tmp_0;
  case 15:
    r0 = s.retval;
    s.lastBrkId = 3525;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3525]) return breakpoint(s, 16, 3525, r0);
  case 16:
    r0 = pxsim_numops_toBoolDecr(s.arg2);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 3526;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3526]) return breakpoint(s, 17, 3526, r0);
  case 17:
    r0 = (s.arg2 > 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    r0 = s.arg2;
    { step = 6; continue; }
  case 5:
    r0 = s.arg0.fields["defaultLifespan"];
  case 6:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = (s.src___16362).fields["lifespan"] = (s.tmp_1);
  case 7:
  case 8:
  case 9:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
effects_ParticleEffect_start__P2869.info = {"start":967,"length":452,"line":26,"column":8,"endLine":32,"endColumn":9,"fileName":"pxt_modules/game/particleeffects.ts","functionName":"start","argumentNames":["this","anchor","duration","particlesPerSecond","relativeToCamera"]}

function effects_ParticleEffect_start__P2869_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: effects_ParticleEffect_start__P2869, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  src___16362: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
} }





function particles_ParticleSource_setRelativeToCamera__P2767(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_ParticleSource__C2756_VT)) failedCast(r0);
    s.lastBrkId = 3377;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3377]) return breakpoint(s, 3, 3377, r0);
  case 3:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3378;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3378]) return breakpoint(s, 4, 3378, r0);
  case 4:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["pFlags"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 | 4);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["pFlags"] = (s.tmp_1);
    { step = 2; continue; }
  case 1:
    s.lastBrkId = 3379;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3379]) return breakpoint(s, 5, 3379, r0);
  case 5:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.arg0.fields["pFlags"];
    s.tmp_4 = r0;
    r0 = (~ s.tmp_4);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 | 4);
    s.tmp_2 = r0;
    r0 = (~ s.tmp_2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["pFlags"] = (s.tmp_1);
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_ParticleSource_setRelativeToCamera__P2767.info = {"start":6439,"length":173,"line":211,"column":8,"endLine":214,"endColumn":9,"fileName":"pxt_modules/game/particles.ts","functionName":"setRelativeToCamera","argumentNames":["this","on"]}

function particles_ParticleSource_setRelativeToCamera__P2767_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_ParticleSource_setRelativeToCamera__P2767, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Sprite__destroyCore__P2167(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.scene___16240 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1376;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1376]) return breakpoint(s, 7, 1376, r0);
  case 7:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["flags"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 | 2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["flags"] = (s.tmp_1);
    s.lastBrkId = 1377;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1377]) return breakpoint(s, 8, 1377, r0);
  case 8:
    s.tmp_0 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 432; s.pc = 9; return s.tmp_0;
  case 9:
    r0 = s.retval;
    s.scene___16240 = (r0);
    s.lastBrkId = 1378;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1378]) return breakpoint(s, 10, 1378, r0);
  case 10:
    r0 = s.scene___16240.fields["allSprites"];
    s.tmp_0 = r0;
    r0 = pxsim_Array_.removeElement(s.tmp_0, s.arg0);
    s.lastBrkId = 1379;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1379]) return breakpoint(s, 11, 1379, r0);
  case 11:
    s.tmp_2 = Sprite_kind__P2146_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 433; s.pc = 12; return s.tmp_2;
  case 12:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 >= 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = s.scene___16240.fields["spritesByKind"];
    s.tmp_3 = r0;
    s.tmp_5 = Sprite_kind__P2146_mk(s);
    s.tmp_5.arg0 = s.arg0;
    s.callLocIdx = 434; s.pc = 13; return s.tmp_5;
  case 13:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_pxtrt.mapGetGeneric(s.tmp_3, s.tmp_4);
  case 2:
    // jmp value (already in r0)
    s.tmp_6 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_6);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1380;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1380]) return breakpoint(s, 14, 1380, r0);
  case 14:
    s.tmp_7 = sprites_SpriteSet_remove__P2197_mk(s);
    r0 = s.scene___16240.fields["spritesByKind"];
    s.tmp_8 = r0;
    s.tmp_10 = Sprite_kind__P2146_mk(s);
    s.tmp_10.arg0 = s.arg0;
    s.callLocIdx = 435; s.pc = 16; return s.tmp_10;
  case 16:
    r0 = s.retval;
    s.tmp_9 = r0;
    r0 = pxsim_pxtrt.mapGetGeneric(s.tmp_8, s.tmp_9);
    s.tmp_7.arg0 = r0;
    s.tmp_7.arg1 = s.arg0;
    s.callLocIdx = 436; s.pc = 15; return s.tmp_7;
  case 15:
    r0 = s.retval;
  case 3:
  case 4:
    s.lastBrkId = 1381;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1381]) return breakpoint(s, 17, 1381, r0);
  case 17:
    s.tmp_0 = PhysicsEngine__C2238_v1_2_mk(s);
    r0 = s.scene___16240.fields["physicsEngine"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = s.arg0;
    if (!checkSubtype(s.tmp_0.arg0, PhysicsEngine__C2238_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.removeSprite;
    s.pc = 18; return s.tmp_0;
  case 18:
    r0 = s.retval;
    s.lastBrkId = 1382;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1382]) return breakpoint(s, 19, 1382, r0);
  case 19:
    r0 = s.arg0.fields["destroyHandler"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 1383;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1383]) return breakpoint(s, 20, 1383, r0);
  case 20:
    s.tmp_1 = if_destroyHandler_1_mk(s);
    s.tmp_1.arg0 = s.arg0;
    if (!s.tmp_1.arg0.vtable.iface) {
      setupLambda(s.tmp_1, pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "destroyHandler"), 1);
      s.callLocIdx = 437; s.pc = 21; return s.tmp_1;
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["destroyHandler"];
      if (s.tmp_1.fn == null) { setupLambda(s.tmp_1, s.tmp_1.arg0.fields["destroyHandler"], 1); s.callLocIdx = 437; s.pc = 21; return s.tmp_1; }
      else if (s.tmp_1.fn.isGetter) { s.tmp_1.stage2Call = true; s.callLocIdx = 437; s.pc = 21; return s.tmp_1;; }
     else { s.callLocIdx = 437; s.pc = 21; return s.tmp_1; }
    }
  case 21:
    r0 = s.retval;
  case 5:
  case 6:
    s.lastBrkId = 1384;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1384]) return breakpoint(s, 22, 1384, r0);
  case 22:
    r0 = pxsim_pxtcore_mkAction(1, forEach_inline__P16269);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    r0 = pxsim_pxtcore_mkAction(1, Sprite__destroyCore_inline__P16275);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_1, 0, s.arg0);
    s.tmp_2 = helpers_arrayForEach__P109_mk(s);
    s.tmp_3 = helpers_arrayFilter__P110_mk(s);
    r0 = s.scene___16240.fields["destroyedHandlers"];
    s.tmp_3.arg0 = r0;
    s.tmp_3.arg1 = s.tmp_0;
    s.callLocIdx = 439; s.pc = 24; return s.tmp_3;
  case 24:
    r0 = s.retval;
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = s.tmp_1;
    s.callLocIdx = 441; s.pc = 23; return s.tmp_2;
  case 23:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite__destroyCore__P2167.info = {"start":25483,"length":522,"line":813,"column":4,"endLine":825,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"_destroyCore","argumentNames":["this"]}

function Sprite__destroyCore__P2167_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite__destroyCore__P2167, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  scene___16240: undefined,
  arg0: undefined,
} }





function forEach_inline__P16269(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0.fields["kind"];
    s.tmp_0 = r0;
    s.tmp_2 = Sprite_kind__P2146_mk(s);
    s.tmp_2.arg0 = s.caps[0];
    s.callLocIdx = 438; s.pc = 1; return s.tmp_2;
  case 1:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0 == s.tmp_1);
    return leave(s, r0)
  default: oops()
} } }
forEach_inline__P16269.info = {"start":25928,"length":26,"line":823,"column":20,"endLine":823,"endColumn":46,"fileName":"pxt_modules/game/sprite.ts","functionName":"inline","argumentNames":["h"]}

function forEach_inline__P16269_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: forEach_inline__P16269, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function Sprite__destroyCore_inline__P16275(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = if_handler_2_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.caps[0];
    if (!s.tmp_0.arg0.vtable.iface) {
      setupLambda(s.tmp_0, pxsim_pxtrt.mapGetByString(s.tmp_0.arg0, "handler"), 2);
      s.callLocIdx = 440; s.pc = 1; return s.tmp_0;
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["handler"];
      if (s.tmp_0.fn == null) { setupLambda(s.tmp_0, s.tmp_0.arg0.fields["handler"], 2); s.callLocIdx = 440; s.pc = 1; return s.tmp_0; }
      else if (s.tmp_0.fn.isGetter) { s.tmp_0.stage2Call = true; s.callLocIdx = 440; s.pc = 1; return s.tmp_0;; }
     else { s.callLocIdx = 440; s.pc = 1; return s.tmp_0; }
    }
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite__destroyCore_inline__P16275.info = {"start":25977,"length":20,"line":824,"column":21,"endLine":824,"endColumn":41,"fileName":"pxt_modules/game/sprite.ts","functionName":"inline","argumentNames":["h"]}

function Sprite__destroyCore_inline__P16275_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite__destroyCore_inline__P16275, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function PhysicsEngine_removeSprite__P2241(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, PhysicsEngine__C2238_VT)) failedCast(r0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
PhysicsEngine_removeSprite__P2241.info = {"start":159,"length":32,"line":10,"column":4,"endLine":10,"endColumn":36,"fileName":"pxt_modules/game/physics.ts","functionName":"removeSprite","argumentNames":["this","sprite"]}

function PhysicsEngine_removeSprite__P2241_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: PhysicsEngine_removeSprite__P2241, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
} }





function Sprite_kind__P2146(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1270;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1270]) return breakpoint(s, 1, 1270, r0);
  case 1:
    r0 = s.arg0.fields["_kind"];
    return leave(s, r0)
  default: oops()
} } }
Sprite_kind__P2146.info = {"start":10899,"length":41,"line":393,"column":4,"endLine":395,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"kind","argumentNames":["this"]}

function Sprite_kind__P2146_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_kind__P2146, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function sprites_allOfKind__P2045(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.spritesByKind___16402 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 1188;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1188]) return breakpoint(s, 6, 1188, r0);
  case 6:
    s.tmp_0 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 274; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    r0 = r0.fields["spritesByKind"];
    s.spritesByKind___16402 = (r0);
    s.lastBrkId = 1189;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1189]) return breakpoint(s, 8, 1189, r0);
  case 8:
    r0 = (s.arg0 >= 0);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = pxsim_pxtrt.mapGetGeneric(s.spritesByKind___16402, s.arg0);
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    s.tmp_3 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_3);
  case 2:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_5);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1190;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1190]) return breakpoint(s, 9, 1190, r0);
  case 9:
    r0 = pxsim_Array__mk();
    { step = 5; continue; }
    { step = 4; continue; }
  case 3:
    s.lastBrkId = 1191;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1191]) return breakpoint(s, 10, 1191, r0);
  case 10:
    s.tmp_6 = sprites_SpriteSet_sprites__P2194_mk(s);
    r0 = pxsim_pxtrt.mapGetGeneric(s.spritesByKind___16402, s.arg0);
    s.tmp_6.arg0 = r0;
    s.callLocIdx = 275; s.pc = 11; return s.tmp_6;
  case 11:
    r0 = s.retval;
    { step = 5; continue; }
  case 4:
    r0 = undefined;
  case 5:
    return leave(s, r0)
  default: oops()
} } }
sprites_allOfKind__P2045.info = {"start":1936,"length":234,"line":68,"column":4,"endLine":72,"endColumn":5,"fileName":"pxt_modules/game/sprites.ts","functionName":"allOfKind","argumentNames":["kind"]}

function sprites_allOfKind__P2045_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_allOfKind__P2045, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  spritesByKind___16402: undefined,
  arg0: undefined,
} }





function sprites_SpriteSet_sprites__P2194(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_SpriteSet__C2190_VT)) failedCast(r0);
    s.lastBrkId = 1460;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1460]) return breakpoint(s, 1, 1460, r0);
  case 1:
    s.tmp_0 = helpers_arrayFilter__P110_mk(s);
    r0 = s.arg0.fields["_sprites"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = sprites_SpriteSet_sprites_inline__P16423;
    s.callLocIdx = 486; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leave(s, r0)
  default: oops()
} } }
sprites_SpriteSet_sprites__P2194.info = {"start":784,"length":104,"line":33,"column":8,"endLine":35,"endColumn":9,"fileName":"pxt_modules/game/spriteset.ts","functionName":"sprites","argumentNames":["this"]}

function sprites_SpriteSet_sprites__P2194_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_SpriteSet_sprites__P2194, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function sprites_SpriteSet_sprites_inline__P16423(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0.fields["flags"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 & 2);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_0);
    return leave(s, r0)
  default: oops()
} } }
sprites_SpriteSet_sprites_inline__P16423.info = {"start":836,"length":40,"line":34,"column":40,"endLine":34,"endColumn":80,"fileName":"pxt_modules/game/spriteset.ts","functionName":"inline","argumentNames":["s"]}

function sprites_SpriteSet_sprites_inline__P16423_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_SpriteSet_sprites_inline__P16423, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function buildSplashScreen__P62542(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    r0 = pxsim_pxtcore_mkClassInstance(SplashScreens__C3959_VT);
    s.tmp_0 = r0;
    s.tmp_1 = SplashScreens_constructor__P3960_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = globals.TEXT_TITLES___62536;
    s.tmp_1.arg2 = 5;
    s.tmp_1.arg3 = globals.TEXT_HEADLINES___62528;
    s.tmp_1.arg4 = 14;
    s.tmp_1.arg5 = globals.TEXT_ACTIONS___62533;
    s.tmp_1.arg6 = 9;
    s.tmp_1.arg7 = undefined;
    s.tmp_1.arg8 = undefined;
    s.callLocIdx = 63; s.pc = 1; return s.tmp_1;
  case 1:
    r0 = s.retval;
    globals.g_splashScreen___62541 = (s.tmp_0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
buildSplashScreen__P62542.info = {"start":497,"length":189,"line":22,"column":0,"endLine":27,"endColumn":1,"fileName":"attract.ts","functionName":"buildSplashScreen","argumentNames":[]}

function buildSplashScreen__P62542_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: buildSplashScreen__P62542, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
} }





function SplashScreens_constructor__P3960(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.arg5 = (s.lambdaArgs[5]);
      s.arg6 = (s.lambdaArgs[6]);
      s.arg7 = (s.lambdaArgs[7]);
      s.arg8 = (s.lambdaArgs[8]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, SplashScreens__C3959_VT)) failedCast(r0);
    s.lastBrkId = 3836;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3836]) return breakpoint(s, 1, 3836, r0);
  case 1:
    s.tmp_0 = RotatingScreens_constructor__P3927_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.tmp_0.arg2 = s.arg2;
    s.tmp_0.arg3 = s.arg3;
    s.tmp_0.arg4 = s.arg4;
    s.tmp_0.arg5 = globals.DEFAULT_TEXT_FOOTER_SPLASH___3893;
    s.tmp_0.arg6 = 1;
    s.tmp_0.arg7 = s.arg5;
    s.tmp_0.arg8 = s.arg6;
    s.tmp_0.arg9 = s.arg7;
    s.tmp_0.arg10 = s.arg8;
    s.callLocIdx = 1774; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
SplashScreens_constructor__P3960.info = {"start":28806,"length":487,"line":842,"column":4,"endLine":856,"endColumn":5,"fileName":"pxt_modules/pxt-arcade-info-screens/info-screens.ts","functionName":"inline","argumentNames":["this","titles","titlesColor","headlines","headlinesColor","instructions","instructionsColor","backColor","delay"]}

function SplashScreens_constructor__P3960_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: SplashScreens_constructor__P3960, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
  arg5: undefined,
  arg6: undefined,
  arg7: undefined,
  arg8: undefined,
} }





function RotatingScreens_constructor__P3927(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.arg5 = (s.lambdaArgs[5]);
      s.arg6 = (s.lambdaArgs[6]);
      s.arg7 = (s.lambdaArgs[7]);
      s.arg8 = (s.lambdaArgs[8]);
      s.arg9 = (s.lambdaArgs[9]);
      s.arg10 = (s.lambdaArgs[10]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, RotatingScreens__C3926_VT)) failedCast(r0);
    s.lastBrkId = 3694;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3694]) return breakpoint(s, 23, 3694, r0);
  case 23:
    r0 = (s.arg0).fields["_currScreen"] = (-1);
    s.lastBrkId = 3695;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3695]) return breakpoint(s, 24, 3695, r0);
  case 24:
    r0 = (s.arg0).fields["_currSprite"] = (-1);
    s.lastBrkId = 3696;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3696]) return breakpoint(s, 25, 3696, r0);
  case 25:
    r0 = pxsim_numops_toBoolDecr(s.arg9);
    if (!r0) { step = 1; continue; }
    r0 = s.arg9;
    { step = 2; continue; }
  case 1:
    r0 = 15;
  case 2:
    // jmp value (already in r0)
    s.tmp_0 = r0;
    r0 = (s.arg0).fields["_backColor"] = (s.tmp_0);
    s.lastBrkId = 3697;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3697]) return breakpoint(s, 26, 3697, r0);
  case 26:
    r0 = (s.arg0).fields["_backImage"] = (null);
    s.lastBrkId = 3698;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3698]) return breakpoint(s, 27, 3698, r0);
  case 27:
    r0 = pxsim_numops_toBoolDecr(s.arg10);
    if (!r0) { step = 3; continue; }
    r0 = s.arg10;
    { step = 4; continue; }
  case 3:
    r0 = 5000;
  case 4:
    // jmp value (already in r0)
    s.tmp_0 = r0;
    r0 = (s.arg0).fields["_interval"] = (s.tmp_0);
    s.lastBrkId = 3699;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3699]) return breakpoint(s, 28, 3699, r0);
  case 28:
    r0 = (s.arg0).fields["_movingSpritesSequential"] = (true);
    s.lastBrkId = 3700;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3700]) return breakpoint(s, 29, 3700, r0);
  case 29:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_staticSprites"] = (s.tmp_1);
    s.lastBrkId = 3701;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3701]) return breakpoint(s, 30, 3701, r0);
  case 30:
    r0 = pxsim_numops_toBoolDecr(s.arg5);
    if (!r0) { step = 5; continue; }
    r0 = s.arg5;
    { step = 6; continue; }
  case 5:
    r0 = pxsim_String_.mkEmpty();
  case 6:
    // jmp value (already in r0)
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt.mkMap();
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_1, "data", s.tmp_0);
    r0 = pxsim_numops_toBoolDecr(s.arg6);
    if (!r0) { step = 7; continue; }
    r0 = s.arg6;
    { step = 8; continue; }
  case 7:
    r0 = 1;
  case 8:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_1, "color", s.tmp_2);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_1, "font", globals.DEFAULT_FONT_FOOTER___3886);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_1, "y", 0);
    r0 = (s.arg0).fields["_footer"] = (s.tmp_1);
    s.lastBrkId = 3702;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3702]) return breakpoint(s, 31, 3702, r0);
  case 31:
    r0 = pxsim_numops_toBoolDecr(s.arg3);
    if (!r0) { step = 9; continue; }
    r0 = s.arg3;
    { step = 10; continue; }
  case 9:
    r0 = pxsim_Array__mk();
  case 10:
    // jmp value (already in r0)
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt.mkMap();
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_1, "data", s.tmp_0);
    r0 = pxsim_numops_toBoolDecr(s.arg4);
    if (!r0) { step = 11; continue; }
    r0 = s.arg4;
    { step = 12; continue; }
  case 11:
    r0 = 14;
  case 12:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_1, "color", s.tmp_2);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_1, "font", globals.DEFAULT_FONT_HEADLINE___3887);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_1, "y", 0);
    r0 = (s.arg0).fields["_headlines"] = (s.tmp_1);
    s.lastBrkId = 3703;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3703]) return breakpoint(s, 32, 3703, r0);
  case 32:
    r0 = pxsim_numops_toBoolDecr(s.arg7);
    if (!r0) { step = 13; continue; }
    r0 = s.arg7;
    { step = 14; continue; }
  case 13:
    r0 = pxsim_Array__mk();
  case 14:
    // jmp value (already in r0)
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt.mkMap();
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_1, "data", s.tmp_0);
    r0 = pxsim_numops_toBoolDecr(s.arg8);
    if (!r0) { step = 15; continue; }
    r0 = s.arg8;
    { step = 16; continue; }
  case 15:
    r0 = 9;
  case 16:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_1, "color", s.tmp_2);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_1, "font", globals.DEFAULT_FONT_MID_TEXT___3888);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_1, "y", 0);
    r0 = (s.arg0).fields["_midText"] = (s.tmp_1);
    s.lastBrkId = 3704;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3704]) return breakpoint(s, 33, 3704, r0);
  case 33:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    if (!r0) { step = 17; continue; }
    r0 = s.arg1;
    { step = 18; continue; }
  case 17:
    r0 = pxsim_Array__mk();
  case 18:
    // jmp value (already in r0)
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt.mkMap();
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_1, "data", s.tmp_0);
    r0 = pxsim_numops_toBoolDecr(s.arg2);
    if (!r0) { step = 19; continue; }
    r0 = s.arg2;
    { step = 20; continue; }
  case 19:
    r0 = 5;
  case 20:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_1, "color", s.tmp_2);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_1, "font", globals.DEFAULT_FONT_TITLE___3890);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_1, "y", 2);
    r0 = (s.arg0).fields["_titles"] = (s.tmp_1);
    s.lastBrkId = 3705;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3705]) return breakpoint(s, 34, 3705, r0);
  case 34:
    r0 = pxsim_pxtrt.mkMap();
    s.tmp_0 = r0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "imgs", s.tmp_1);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "dir", 0);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "mode", 1);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "speed", 100);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "y", 0);
    r0 = (s.arg0).fields["_movingSprites"] = (s.tmp_0);
    s.lastBrkId = 3706;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3706]) return breakpoint(s, 35, 3706, r0);
  case 35:
    r0 = pxsim_numops_toBoolDecr(globals.RotatingScreens__base___6606);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 21; continue; }
    s.lastBrkId = 3707;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3707]) return breakpoint(s, 36, 3707, r0);
  case 36:
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_2 = r0;
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_3 = r0;
    r0 = pxsim.image.create(s.tmp_2, s.tmp_3);
    globals.RotatingScreens__base___6606 = (r0);
  case 21:
  case 22:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
RotatingScreens_constructor__P3927.info = {"start":6108,"length":1759,"line":231,"column":4,"endLine":280,"endColumn":5,"fileName":"pxt_modules/pxt-arcade-info-screens/info-screens.ts","functionName":"inline","argumentNames":["this","titles","titlesColor","headlines","headlinesColor","footer","footerColor","midText","midTextColor","backColor","delay"]}

function RotatingScreens_constructor__P3927_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: RotatingScreens_constructor__P3927, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
  arg5: undefined,
  arg6: undefined,
  arg7: undefined,
  arg8: undefined,
  arg9: undefined,
  arg10: undefined,
} }





function helpers_stringTrim__P123(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.start___17818 = undefined;
    s.end___17819 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 235;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[235]) return breakpoint(s, 9, 235, r0);
  case 9:
    s.start___17818 = (0);
    s.lastBrkId = 236;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[236]) return breakpoint(s, 10, 236, r0);
  case 10:
    r0 = pxsim_String_.length(s.arg0);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 - 1);
    s.end___17819 = (r0);
    s.lastBrkId = 237;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[237]) return breakpoint(s, 11, 237, r0);
  case 11:
  case 1:
    s.lastBrkId = 238;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[238]) return breakpoint(s, 12, 238, r0);
  case 12:
    r0 = (s.start___17818 <= s.end___17819);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 2; continue; }
    r0 = s.tmp_0;
    { step = 3; continue; }
  case 2:
    s.tmp_1 = helpers_isWhitespace__P124_mk(s);
    r0 = pxsim_String_.charCodeAt(s.arg0, s.start___17818);
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 17; s.pc = 13; return s.tmp_1;
  case 13:
    r0 = s.retval;
  case 3:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 239;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[239]) return breakpoint(s, 14, 239, r0);
  case 14:
    r0 = (s.start___17818 + 1);
    s.start___17818 = (r0);
    { step = 1; continue; }
  case 4:
    s.lastBrkId = 240;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[240]) return breakpoint(s, 15, 240, r0);
  case 15:
  case 5:
    s.lastBrkId = 241;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[241]) return breakpoint(s, 16, 241, r0);
  case 16:
    r0 = (s.end___17819 > s.start___17818);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 6; continue; }
    r0 = s.tmp_0;
    { step = 7; continue; }
  case 6:
    s.tmp_1 = helpers_isWhitespace__P124_mk(s);
    r0 = pxsim_String_.charCodeAt(s.arg0, s.end___17819);
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 18; s.pc = 17; return s.tmp_1;
  case 17:
    r0 = s.retval;
  case 7:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 8; continue; }
    s.lastBrkId = 242;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[242]) return breakpoint(s, 18, 242, r0);
  case 18:
    r0 = (s.end___17819 - 1);
    s.end___17819 = (r0);
    { step = 5; continue; }
  case 8:
    s.lastBrkId = 243;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[243]) return breakpoint(s, 19, 243, r0);
  case 19:
    s.tmp_0 = helpers_stringSlice__P119_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.start___17818;
    r0 = (s.end___17819 + 1);
    s.tmp_0.arg2 = r0;
    s.callLocIdx = 19; s.pc = 20; return s.tmp_0;
  case 20:
    r0 = s.retval;
    return leave(s, r0)
  default: oops()
} } }
helpers_stringTrim__P123.info = {"start":14539,"length":319,"line":491,"column":4,"endLine":501,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"stringTrim","argumentNames":["s"]}

function helpers_stringTrim__P123_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_stringTrim__P123, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  start___17818: undefined,
  end___17819: undefined,
  arg0: undefined,
} }





function helpers__registerFactory__P2935(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3600;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3600]) return breakpoint(s, 3, 3600, r0);
  case 3:
    r0 = pxsim_numops_toBoolDecr(globals.factories___4973);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3601;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3601]) return breakpoint(s, 4, 3601, r0);
  case 4:
    r0 = pxsim_Array__mk();
    globals.factories___4973 = (r0);
  case 1:
  case 2:
    s.lastBrkId = 3602;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3602]) return breakpoint(s, 5, 3602, r0);
  case 5:
    r0 = pxsim_pxtrt.mkMap();
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "kind", s.arg0);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "factory", s.arg1);
    r0 = pxsim_Array__push(globals.factories___4973, s.tmp_0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
helpers__registerFactory__P2935.info = {"start":1690,"length":201,"line":50,"column":4,"endLine":56,"endColumn":5,"fileName":"pxt_modules/game/assetTemplates.ts","functionName":"_registerFactory","argumentNames":["kind","factory"]}

function helpers__registerFactory__P2935_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers__registerFactory__P2935, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Stats_reset__P55115(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Stats__C55116_VT)) failedCast(r0);
    r0 = (s.arg0).fields["wins"] = (0);
    r0 = (s.arg0).fields["streak"] = (0);
    r0 = (s.arg0).fields["games"] = (0);
    r0 = pxsim_Array__mk();
    s.tmp_0 = r0;
    r0 = pxsim_Array__push(s.tmp_0, 0);
    r0 = pxsim_Array__push(s.tmp_0, 0);
    r0 = pxsim_Array__push(s.tmp_0, 0);
    r0 = pxsim_Array__push(s.tmp_0, 0);
    r0 = pxsim_Array__push(s.tmp_0, 0);
    r0 = pxsim_Array__push(s.tmp_0, 0);
    r0 = (s.arg0).fields["guesses"] = (s.tmp_0);
    s.tmp_0 = Stats_save__P55120_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 98; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Stats_reset__P55115.info = {"start":860,"length":159,"line":33,"column":4,"endLine":39,"endColumn":5,"fileName":"stats.ts","functionName":"reset","argumentNames":["this"]}

function Stats_reset__P55115_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Stats_reset__P55115, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function game_ask__P2660(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.answer___17883 = undefined;
    s.aNotHeld___17885 = undefined;
    s.bNotHeld___17886 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3032;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3032]) return breakpoint(s, 3, 3032, r0);
  case 3:
    s.tmp_0 = controller__setUserEventsEnabled__P1986_mk(s);
    s.tmp_0.arg0 = false;
    s.callLocIdx = 1274; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.lastBrkId = 3033;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3033]) return breakpoint(s, 5, 3033, r0);
  case 5:
    s.tmp_0 = game_eventContext__P2612_mk(s);
    s.callLocIdx = 1275; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    s.lastBrkId = 3034;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3034]) return breakpoint(s, 7, 3034, r0);
  case 7:
    s.tmp_0 = control_pushEventContext__P407_mk(s);
    s.callLocIdx = 1276; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
    s.lastBrkId = 3035;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3035]) return breakpoint(s, 9, 3035, r0);
  case 9:
    s.tmp_0 = console_inspect__P380_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 20;
    s.callLocIdx = 1277; s.pc = 10; return s.tmp_0;
  case 10:
    r0 = s.retval;
    s.arg0 = (r0);
    s.lastBrkId = 3036;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3036]) return breakpoint(s, 11, 3036, r0);
  case 11:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    if (!r0) { step = 1; continue; }
    s.tmp_0 = console_inspect__P380_mk(s);
    s.tmp_0.arg0 = s.arg1;
    s.tmp_0.arg1 = 20;
    s.callLocIdx = 1278; s.pc = 12; return s.tmp_0;
  case 12:
    r0 = s.retval;
    { step = 2; continue; }
  case 1:
    r0 = s.arg1;
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    s.arg1 = (s.tmp_1);
    s.lastBrkId = 3037;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3037]) return breakpoint(s, 13, 3037, r0);
  case 13:
    s.tmp_0 = game_showDialog__P2615_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.tmp_0.arg2 = "A = OK, B = CANCEL";
    s.callLocIdx = 1279; s.pc = 14; return s.tmp_0;
  case 14:
    r0 = s.retval;
    s.lastBrkId = 3038;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3038]) return breakpoint(s, 15, 3038, r0);
  case 15:
    s.tmp_0 = pause__P411_mk(s);
    s.tmp_0.arg0 = 500;
    s.callLocIdx = 1280; s.pc = 16; return s.tmp_0;
  case 16:
    r0 = s.retval;
    r0 = pxsim_pxtrt.mklocRef();
    s.answer___17883 = (r0);
    s.lastBrkId = 3039;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3039]) return breakpoint(s, 17, 3039, r0);
  case 17:
    r0 = pxsim_pxtrt_stlocRef(s.answer___17883, null);
    r0 = pxsim_pxtrt.mklocRef();
    s.aNotHeld___17885 = (r0);
    s.lastBrkId = 3040;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3040]) return breakpoint(s, 18, 3040, r0);
  case 18:
    r0 = pxsim_pxtrt_stlocRef(s.aNotHeld___17885, false);
    r0 = pxsim_pxtrt.mklocRef();
    s.bNotHeld___17886 = (r0);
    s.lastBrkId = 3041;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3041]) return breakpoint(s, 19, 3041, r0);
  case 19:
    r0 = pxsim_pxtrt_stlocRef(s.bNotHeld___17886, false);
    s.lastBrkId = 3042;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3042]) return breakpoint(s, 20, 3042, r0);
  case 20:
    r0 = pxsim_pxtcore_mkAction(3, game_ask_inline__P17889);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.aNotHeld___17885);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 1, s.bNotHeld___17886);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 2, s.answer___17883);
    s.tmp_1 = pauseUntil__P365_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = undefined;
    s.callLocIdx = 1281; s.pc = 21; return s.tmp_1;
  case 21:
    r0 = s.retval;
    s.lastBrkId = 3050;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3050]) return breakpoint(s, 22, 3050, r0);
  case 22:
    s.tmp_0 = control_popEventContext__P408_mk(s);
    s.callLocIdx = 1282; s.pc = 23; return s.tmp_0;
  case 23:
    r0 = s.retval;
    s.lastBrkId = 3051;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3051]) return breakpoint(s, 24, 3051, r0);
  case 24:
    s.tmp_0 = controller__setUserEventsEnabled__P1986_mk(s);
    s.tmp_0.arg0 = true;
    s.callLocIdx = 1283; s.pc = 25; return s.tmp_0;
  case 25:
    r0 = s.retval;
    s.lastBrkId = 3052;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3052]) return breakpoint(s, 26, 3052, r0);
  case 26:
    r0 = pxsim_pxtrt_ldlocRef(s.answer___17883);
    return leave(s, r0)
  default: oops()
} } }
game_ask__P2660.info = {"start":316,"length":1058,"line":12,"column":4,"endLine":40,"endColumn":5,"fileName":"pxt_modules/game/ask.ts","functionName":"ask","argumentNames":["title","subtitle"]}

function game_ask__P2660_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_ask__P2660, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  answer___17883: undefined,
  aNotHeld___17885: undefined,
  bNotHeld___17886: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function game_ask_inline__P17889(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 3043;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3043]) return breakpoint(s, 13, 3043, r0);
  case 13:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[0]);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    s.tmp_3 = controller_Button__C1971_v0_1_mk(s);
    s.tmp_3.arg0 = globals.A___1905;
    if (!checkSubtype(s.tmp_3.arg0, controller_Button__C1971_VT)) failedCast(s.tmp_3.arg0);
    s.tmp_3.fn = s.tmp_3.arg0.vtable.methods.isPressed;
    s.pc = 14; return s.tmp_3;
  case 14:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
  case 2:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.caps[0], s.tmp_4);
    s.lastBrkId = 3044;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3044]) return breakpoint(s, 15, 3044, r0);
  case 15:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 3; continue; }
    r0 = s.tmp_0;
    { step = 4; continue; }
  case 3:
    s.tmp_3 = controller_Button__C1971_v0_1_mk(s);
    s.tmp_3.arg0 = globals.B___1906;
    if (!checkSubtype(s.tmp_3.arg0, controller_Button__C1971_VT)) failedCast(s.tmp_3.arg0);
    s.tmp_3.fn = s.tmp_3.arg0.vtable.methods.isPressed;
    s.pc = 16; return s.tmp_3;
  case 16:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
  case 4:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.caps[1], s.tmp_4);
    s.lastBrkId = 3045;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3045]) return breakpoint(s, 17, 3045, r0);
  case 17:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[0]);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 5; continue; }
    r0 = s.tmp_0;
    { step = 6; continue; }
  case 5:
    s.tmp_1 = controller_Button__C1971_v0_1_mk(s);
    s.tmp_1.arg0 = globals.A___1905;
    if (!checkSubtype(s.tmp_1.arg0, controller_Button__C1971_VT)) failedCast(s.tmp_1.arg0);
    s.tmp_1.fn = s.tmp_1.arg0.vtable.methods.isPressed;
    s.pc = 18; return s.tmp_1;
  case 18:
    r0 = s.retval;
  case 6:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 3046;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3046]) return breakpoint(s, 19, 3046, r0);
  case 19:
    r0 = pxsim_pxtrt_stlocRef(s.caps[2], true);
    { step = 12; continue; }
  case 7:
    s.lastBrkId = 3047;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3047]) return breakpoint(s, 20, 3047, r0);
  case 20:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 8; continue; }
    r0 = s.tmp_0;
    { step = 9; continue; }
  case 8:
    s.tmp_1 = controller_Button__C1971_v0_1_mk(s);
    s.tmp_1.arg0 = globals.B___1906;
    if (!checkSubtype(s.tmp_1.arg0, controller_Button__C1971_VT)) failedCast(s.tmp_1.arg0);
    s.tmp_1.fn = s.tmp_1.arg0.vtable.methods.isPressed;
    s.pc = 21; return s.tmp_1;
  case 21:
    r0 = s.retval;
  case 9:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 10; continue; }
    s.lastBrkId = 3048;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3048]) return breakpoint(s, 22, 3048, r0);
  case 22:
    r0 = pxsim_pxtrt_stlocRef(s.caps[2], false);
  case 10:
  case 11:
  case 12:
    s.lastBrkId = 3049;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3049]) return breakpoint(s, 23, 3049, r0);
  case 23:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[2]);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 !== null);
    return leave(s, r0)
  default: oops()
} } }
game_ask_inline__P17889.info = {"start":885,"length":374,"line":25,"column":19,"endLine":35,"endColumn":9,"fileName":"pxt_modules/game/ask.ts","functionName":"inline","argumentNames":[]}

function game_ask_inline__P17889_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_ask_inline__P17889, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
} }





function game_showDialog__P2615(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.titleFont___17925 = undefined;
    s.subFont___17930 = undefined;
    s.footerFont___17935 = undefined;
    s.h___17940 = undefined;
    s.top___17959 = undefined;
    s.y___17963 = undefined;
    s.footerTop___18000 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 2712;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2712]) return breakpoint(s, 21, 2712, r0);
  case 21:
    s.tmp_0 = game_init__P4564_mk(s);
    s.tmp_0.arg0 = undefined;
    s.callLocIdx = 1103; s.pc = 22; return s.tmp_0;
  case 22:
    r0 = s.retval;
    s.lastBrkId = 2713;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2713]) return breakpoint(s, 23, 2713, r0);
  case 23:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = pxsim_String_.mkEmpty();
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    s.tmp_2 = image_getFontForText__P1772_mk(s);
    s.tmp_2.arg0 = s.tmp_1;
    s.callLocIdx = 1104; s.pc = 24; return s.tmp_2;
  case 24:
    r0 = s.retval;
    s.titleFont___17925 = (r0);
    s.lastBrkId = 2714;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2714]) return breakpoint(s, 25, 2714, r0);
  case 25:
    s.tmp_0 = r0 = s.arg1;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 3; continue; }
    r0 = s.tmp_0;
    { step = 4; continue; }
  case 3:
    r0 = pxsim_String_.mkEmpty();
  case 4:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    s.tmp_2 = image_getFontForText__P1772_mk(s);
    s.tmp_2.arg0 = s.tmp_1;
    s.callLocIdx = 1105; s.pc = 26; return s.tmp_2;
  case 26:
    r0 = s.retval;
    s.subFont___17930 = (r0);
    s.lastBrkId = 2715;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2715]) return breakpoint(s, 27, 2715, r0);
  case 27:
    s.tmp_0 = r0 = s.arg2;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 5; continue; }
    r0 = s.tmp_0;
    { step = 6; continue; }
  case 5:
    r0 = pxsim_String_.mkEmpty();
  case 6:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    s.tmp_2 = image_getFontForText__P1772_mk(s);
    s.tmp_2.arg0 = s.tmp_1;
    s.callLocIdx = 1106; s.pc = 28; return s.tmp_2;
  case 28:
    r0 = s.retval;
    s.footerFont___17935 = (r0);
    s.lastBrkId = 2716;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2716]) return breakpoint(s, 29, 2716, r0);
  case 29:
    s.h___17940 = (8);
    s.lastBrkId = 2717;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2717]) return breakpoint(s, 30, 2717, r0);
  case 30:
    r0 = pxsim_numops_toBoolDecr(s.arg0);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 2718;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2718]) return breakpoint(s, 31, 2718, r0);
  case 31:
    s.tmp_0 = r0 = s.h___17940;
    s.tmp_2 = if_charHeight_1_mk(s);
    s.tmp_2.arg0 = s.titleFont___17925;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "charHeight");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["charHeight"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["charHeight"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1107; s.pc = 32; return s.tmp_2; }
    }
  case 32:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0 + s.tmp_1);
    s.h___17940 = (r0);
  case 7:
  case 8:
    s.lastBrkId = 2719;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2719]) return breakpoint(s, 33, 2719, r0);
  case 33:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 2720;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2720]) return breakpoint(s, 34, 2720, r0);
  case 34:
    s.tmp_0 = r0 = s.h___17940;
    s.tmp_3 = if_charHeight_1_mk(s);
    s.tmp_3.arg0 = s.subFont___17930;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "charHeight");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["charHeight"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["charHeight"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1108; s.pc = 35; return s.tmp_3; }
    }
  case 35:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (2 + s.tmp_2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 + s.tmp_1);
    s.h___17940 = (r0);
  case 9:
  case 10:
    s.lastBrkId = 2721;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2721]) return breakpoint(s, 36, 2721, r0);
  case 36:
    r0 = (s.h___17940 + 8);
    s.h___17940 = (r0);
    s.lastBrkId = 2722;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2722]) return breakpoint(s, 37, 2722, r0);
  case 37:
    s.tmp_0 = game_showDialogBackground__P4565_mk(s);
    s.tmp_0.arg0 = s.h___17940;
    s.tmp_0.arg1 = 9;
    s.callLocIdx = 1109; s.pc = 38; return s.tmp_0;
  case 38:
    r0 = s.retval;
    s.top___17959 = (r0);
    s.lastBrkId = 2723;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2723]) return breakpoint(s, 39, 2723, r0);
  case 39:
    r0 = (s.top___17959 + 8);
    s.y___17963 = (r0);
    s.lastBrkId = 2724;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2724]) return breakpoint(s, 40, 2724, r0);
  case 40:
    r0 = pxsim_numops_toBoolDecr(s.arg0);
    if (!r0) { step = 13; continue; }
    s.lastBrkId = 2725;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2725]) return breakpoint(s, 41, 2725, r0);
  case 41:
    r0 = pxsim_ImageMethods.isMono(globals.screen___1827);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 11; continue; }
    r0 = 1;
    { step = 12; continue; }
  case 11:
    r0 = 7;
  case 12:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    s.tmp_2 = helpers_imagePrint__P1785_mk(s);
    s.tmp_2.arg0 = globals.screen___1827;
    s.tmp_2.arg1 = s.arg0;
    s.tmp_2.arg2 = 8;
    s.tmp_2.arg3 = s.y___17963;
    s.tmp_2.arg4 = s.tmp_1;
    s.tmp_2.arg5 = s.titleFont___17925;
    s.tmp_2.arg6 = undefined;
    s.callLocIdx = 1110; s.pc = 42; return s.tmp_2;
  case 42:
    r0 = s.retval;
    s.lastBrkId = 2726;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2726]) return breakpoint(s, 43, 2726, r0);
  case 43:
    s.tmp_0 = r0 = s.y___17963;
    s.tmp_3 = if_charHeight_1_mk(s);
    s.tmp_3.arg0 = s.titleFont___17925;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "charHeight");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["charHeight"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["charHeight"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1111; s.pc = 44; return s.tmp_3; }
    }
  case 44:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + 2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 + s.tmp_1);
    s.y___17963 = (r0);
  case 13:
  case 14:
    s.lastBrkId = 2727;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2727]) return breakpoint(s, 45, 2727, r0);
  case 45:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    if (!r0) { step = 17; continue; }
    s.lastBrkId = 2728;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2728]) return breakpoint(s, 46, 2728, r0);
  case 46:
    r0 = pxsim_ImageMethods.isMono(globals.screen___1827);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 15; continue; }
    r0 = 1;
    { step = 16; continue; }
  case 15:
    r0 = 6;
  case 16:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    s.tmp_2 = helpers_imagePrint__P1785_mk(s);
    s.tmp_2.arg0 = globals.screen___1827;
    s.tmp_2.arg1 = s.arg1;
    s.tmp_2.arg2 = 8;
    s.tmp_2.arg3 = s.y___17963;
    s.tmp_2.arg4 = s.tmp_1;
    s.tmp_2.arg5 = s.subFont___17930;
    s.tmp_2.arg6 = undefined;
    s.callLocIdx = 1112; s.pc = 47; return s.tmp_2;
  case 47:
    r0 = s.retval;
    s.lastBrkId = 2729;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2729]) return breakpoint(s, 48, 2729, r0);
  case 48:
    s.tmp_0 = r0 = s.y___17963;
    s.tmp_3 = if_charHeight_1_mk(s);
    s.tmp_3.arg0 = s.subFont___17930;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "charHeight");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["charHeight"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["charHeight"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1113; s.pc = 49; return s.tmp_3; }
    }
  case 49:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + 2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 + s.tmp_1);
    s.y___17963 = (r0);
  case 17:
  case 18:
    s.lastBrkId = 2730;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2730]) return breakpoint(s, 50, 2730, r0);
  case 50:
    r0 = pxsim_numops_toBoolDecr(s.arg2);
    if (!r0) { step = 19; continue; }
    s.lastBrkId = 2731;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2731]) return breakpoint(s, 51, 2731, r0);
  case 51:
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_1 = r0;
    s.tmp_3 = if_charHeight_1_mk(s);
    s.tmp_3.arg0 = s.footerFont___17935;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "charHeight");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["charHeight"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["charHeight"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1114; s.pc = 52; return s.tmp_3; }
    }
  case 52:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1 - s.tmp_2);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 - 4);
    s.footerTop___18000 = (r0);
    s.lastBrkId = 2732;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2732]) return breakpoint(s, 53, 2732, r0);
  case 53:
    s.tmp_0 = helpers_imageFillRect__P1753_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_0.arg1 = 0;
    s.tmp_0.arg2 = s.footerTop___18000;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_0.arg3 = r0;
    s.tmp_2 = if_charHeight_1_mk(s);
    s.tmp_2.arg0 = s.footerFont___17935;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "charHeight");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["charHeight"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["charHeight"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1115; s.pc = 55; return s.tmp_2; }
    }
  case 55:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 + 4);
    s.tmp_0.arg4 = r0;
    s.tmp_0.arg5 = 0;
    s.callLocIdx = 1116; s.pc = 54; return s.tmp_0;
  case 54:
    r0 = s.retval;
    s.lastBrkId = 2733;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2733]) return breakpoint(s, 56, 2733, r0);
  case 56:
    s.tmp_0 = helpers_imageDrawLine__P1755_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_0.arg1 = 0;
    s.tmp_0.arg2 = s.footerTop___18000;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_0.arg3 = r0;
    s.tmp_0.arg4 = s.footerTop___18000;
    s.tmp_0.arg5 = 1;
    s.callLocIdx = 1117; s.pc = 57; return s.tmp_0;
  case 57:
    r0 = s.retval;
    s.lastBrkId = 2734;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2734]) return breakpoint(s, 58, 2734, r0);
  case 58:
    s.tmp_0 = helpers_imagePrint__P1785_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_0.arg1 = s.arg2;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_2 = r0;
    r0 = pxsim_String_.length(s.arg2);
    s.tmp_4 = r0;
    s.tmp_6 = if_charWidth_1_mk(s);
    s.tmp_6.arg0 = s.footerFont___17935;
    if (!s.tmp_6.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_6.arg0, "charWidth");
    } else {
      s.tmp_6.fn = s.tmp_6.arg0.vtable.iface["charWidth"];
      if (s.tmp_6.fn == null) { s.retval = s.tmp_6.arg0.fields["charWidth"]; }
      else if (!s.tmp_6.fn.isGetter) { s.retval = bind(s.tmp_6); }
     else { s.callLocIdx = 1118; s.pc = 60; return s.tmp_6; }
    }
  case 60:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = (s.tmp_4 * s.tmp_5);
    s.tmp_3 = r0;
    r0 = (s.tmp_2 - s.tmp_3);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - 8);
    s.tmp_0.arg2 = r0;
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_8 = r0;
    s.tmp_10 = if_charHeight_1_mk(s);
    s.tmp_10.arg0 = s.footerFont___17935;
    if (!s.tmp_10.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_10.arg0, "charHeight");
    } else {
      s.tmp_10.fn = s.tmp_10.arg0.vtable.iface["charHeight"];
      if (s.tmp_10.fn == null) { s.retval = s.tmp_10.arg0.fields["charHeight"]; }
      else if (!s.tmp_10.fn.isGetter) { s.retval = bind(s.tmp_10); }
     else { s.callLocIdx = 1119; s.pc = 61; return s.tmp_10; }
    }
  case 61:
    r0 = s.retval;
    s.tmp_9 = r0;
    r0 = (s.tmp_8 - s.tmp_9);
    s.tmp_7 = r0;
    r0 = (s.tmp_7 - 2);
    s.tmp_0.arg3 = r0;
    s.tmp_0.arg4 = 1;
    s.tmp_0.arg5 = s.footerFont___17935;
    s.tmp_0.arg6 = undefined;
    s.callLocIdx = 1120; s.pc = 59; return s.tmp_0;
  case 59:
    r0 = s.retval;
  case 19:
  case 20:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_showDialog__P2615.info = {"start":2895,"length":1313,"line":104,"column":4,"endLine":137,"endColumn":5,"fileName":"pxt_modules/game/game.ts","functionName":"showDialog","argumentNames":["title","subtitle","footer"]}

function game_showDialog__P2615_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_showDialog__P2615, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  titleFont___17925: undefined,
  subFont___17930: undefined,
  footerFont___17935: undefined,
  h___17940: undefined,
  top___17959: undefined,
  y___17963: undefined,
  footerTop___18000: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function game_showDialogBackground__P4565(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.top___18044 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 2707;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2707]) return breakpoint(s, 1, 2707, r0);
  case 1:
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - s.arg0);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 >> 1);
    s.top___18044 = (r0);
    s.lastBrkId = 2708;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2708]) return breakpoint(s, 2, 2708, r0);
  case 2:
    s.tmp_0 = helpers_imageFillRect__P1753_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_0.arg1 = 0;
    s.tmp_0.arg2 = s.top___18044;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_0.arg3 = r0;
    s.tmp_0.arg4 = s.arg0;
    s.tmp_0.arg5 = 0;
    s.callLocIdx = 1100; s.pc = 3; return s.tmp_0;
  case 3:
    r0 = s.retval;
    s.lastBrkId = 2709;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2709]) return breakpoint(s, 4, 2709, r0);
  case 4:
    s.tmp_0 = helpers_imageDrawLine__P1755_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_0.arg1 = 0;
    s.tmp_0.arg2 = s.top___18044;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_0.arg3 = r0;
    s.tmp_0.arg4 = s.top___18044;
    s.tmp_0.arg5 = 1;
    s.callLocIdx = 1101; s.pc = 5; return s.tmp_0;
  case 5:
    r0 = s.retval;
    s.lastBrkId = 2710;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2710]) return breakpoint(s, 6, 2710, r0);
  case 6:
    s.tmp_0 = helpers_imageDrawLine__P1755_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_0.arg1 = 0;
    r0 = (s.top___18044 + s.arg0);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - 1);
    s.tmp_0.arg2 = r0;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_0.arg3 = r0;
    r0 = (s.top___18044 + s.arg0);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - 1);
    s.tmp_0.arg4 = r0;
    s.tmp_0.arg5 = 1;
    s.callLocIdx = 1102; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    s.lastBrkId = 2711;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2711]) return breakpoint(s, 8, 2711, r0);
  case 8:
    r0 = s.top___18044;
    return leave(s, r0)
  default: oops()
} } }
game_showDialogBackground__P4565.info = {"start":2587,"length":302,"line":95,"column":4,"endLine":102,"endColumn":5,"fileName":"pxt_modules/game/game.ts","functionName":"showDialogBackground","argumentNames":["h","c"]}

function game_showDialogBackground__P4565_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_showDialogBackground__P4565, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  top___18044: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Stats_show__P55111(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.message___55197 = undefined;
    s.i___55262 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Stats__C55116_VT)) failedCast(r0);
    r0 = s.arg0.fields["wins"];
    s.tmp_15 = r0;
    if ((s.tmp_15) && (s.tmp_15).vtable) {
    setupResume(s, 5);
    pxsim_String__stringConv(s.tmp_15);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_15) + ""; }
  case 5:
    r0 = s.retval;
    s.tmp_14 = r0;
    r0 = pxsim_String__concat("Wins: ", s.tmp_14);
    s.tmp_13 = r0;
    if ((s.tmp_13) && (s.tmp_13).vtable) {
    setupResume(s, 6);
    pxsim_String__stringConv(s.tmp_13);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_13) + ""; }
  case 6:
    r0 = s.retval;
    s.tmp_12 = r0;
    r0 = pxsim_String__concat(s.tmp_12, "\n");
    s.tmp_11 = r0;
    if ((s.tmp_11) && (s.tmp_11).vtable) {
    setupResume(s, 7);
    pxsim_String__stringConv(s.tmp_11);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_11) + ""; }
  case 7:
    r0 = s.retval;
    s.tmp_10 = r0;
    r0 = pxsim_String__concat(s.tmp_10, "Win streak: ");
    s.tmp_9 = r0;
    if ((s.tmp_9) && (s.tmp_9).vtable) {
    setupResume(s, 8);
    pxsim_String__stringConv(s.tmp_9);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_9) + ""; }
  case 8:
    r0 = s.retval;
    s.tmp_8 = r0;
    r0 = s.arg0.fields["streak"];
    s.tmp_17 = r0;
    if ((s.tmp_17) && (s.tmp_17).vtable) {
    setupResume(s, 9);
    pxsim_String__stringConv(s.tmp_17);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_17) + ""; }
  case 9:
    r0 = s.retval;
    s.tmp_16 = r0;
    r0 = pxsim_String__concat(s.tmp_8, s.tmp_16);
    s.tmp_7 = r0;
    if ((s.tmp_7) && (s.tmp_7).vtable) {
    setupResume(s, 10);
    pxsim_String__stringConv(s.tmp_7);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_7) + ""; }
  case 10:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = pxsim_String__concat(s.tmp_6, "\n");
    s.tmp_5 = r0;
    if ((s.tmp_5) && (s.tmp_5).vtable) {
    setupResume(s, 11);
    pxsim_String__stringConv(s.tmp_5);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_5) + ""; }
  case 11:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_String__concat(s.tmp_4, "Games: ");
    s.tmp_3 = r0;
    if ((s.tmp_3) && (s.tmp_3).vtable) {
    setupResume(s, 12);
    pxsim_String__stringConv(s.tmp_3);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_3) + ""; }
  case 12:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = s.arg0.fields["games"];
    s.tmp_19 = r0;
    if ((s.tmp_19) && (s.tmp_19).vtable) {
    setupResume(s, 13);
    pxsim_String__stringConv(s.tmp_19);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_19) + ""; }
  case 13:
    r0 = s.retval;
    s.tmp_18 = r0;
    r0 = pxsim_String__concat(s.tmp_2, s.tmp_18);
    s.tmp_1 = r0;
    if ((s.tmp_1) && (s.tmp_1).vtable) {
    setupResume(s, 14);
    pxsim_String__stringConv(s.tmp_1);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_1) + ""; }
  case 14:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_String__concat(s.tmp_0, "\n");
    s.message___55197 = (r0);
    r0 = s.arg0.fields["games"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    if ((s.message___55197) && (s.message___55197).vtable) {
    setupResume(s, 15);
    pxsim_String__stringConv(s.message___55197);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.message___55197) + ""; }
  case 15:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = s.arg0.fields["wins"];
    s.tmp_13 = r0;
    r0 = s.arg0.fields["games"];
    s.tmp_14 = r0;
    r0 = (s.tmp_13 / s.tmp_14);
    s.tmp_12 = r0;
    r0 = (s.tmp_12 * 100);
    s.tmp_11 = r0;
    r0 = pxsim.Math_.round(s.tmp_11);
    s.tmp_10 = r0;
    if ((s.tmp_10) && (s.tmp_10).vtable) {
    setupResume(s, 16);
    pxsim_String__stringConv(s.tmp_10);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_10) + ""; }
  case 16:
    r0 = s.retval;
    s.tmp_9 = r0;
    r0 = pxsim_String__concat("Win %: ", s.tmp_9);
    s.tmp_8 = r0;
    if ((s.tmp_8) && (s.tmp_8).vtable) {
    setupResume(s, 17);
    pxsim_String__stringConv(s.tmp_8);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_8) + ""; }
  case 17:
    r0 = s.retval;
    s.tmp_7 = r0;
    r0 = pxsim_String__concat(s.tmp_7, "%\n");
    s.tmp_6 = r0;
    if ((s.tmp_6) && (s.tmp_6).vtable) {
    setupResume(s, 18);
    pxsim_String__stringConv(s.tmp_6);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_6) + ""; }
  case 18:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = pxsim_String__concat(s.tmp_5, "Guesses:\n");
    s.tmp_4 = r0;
    if ((s.tmp_4) && (s.tmp_4).vtable) {
    setupResume(s, 19);
    pxsim_String__stringConv(s.tmp_4);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_4) + ""; }
  case 19:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = pxsim_String__concat(s.tmp_2, s.tmp_3);
    s.message___55197 = (r0);
    s.i___55262 = (0);
  case 1:
    r0 = (s.i___55262 < 6);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    if ((s.message___55197) && (s.message___55197).vtable) {
    setupResume(s, 20);
    pxsim_String__stringConv(s.message___55197);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.message___55197) + ""; }
  case 20:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.i___55262 + 1);
    s.tmp_13 = r0;
    if ((s.tmp_13) && (s.tmp_13).vtable) {
    setupResume(s, 21);
    pxsim_String__stringConv(s.tmp_13);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_13) + ""; }
  case 21:
    r0 = s.retval;
    s.tmp_12 = r0;
    r0 = pxsim_String__concat(s.tmp_12, ": ");
    s.tmp_11 = r0;
    if ((s.tmp_11) && (s.tmp_11).vtable) {
    setupResume(s, 22);
    pxsim_String__stringConv(s.tmp_11);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_11) + ""; }
  case 22:
    r0 = s.retval;
    s.tmp_10 = r0;
    r0 = s.arg0.fields["guesses"];
    s.tmp_16 = r0;
    r0 = pxsim_Array__getAt(s.tmp_16, s.i___55262);
    s.tmp_15 = r0;
    if ((s.tmp_15) && (s.tmp_15).vtable) {
    setupResume(s, 23);
    pxsim_String__stringConv(s.tmp_15);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_15) + ""; }
  case 23:
    r0 = s.retval;
    s.tmp_14 = r0;
    r0 = pxsim_String__concat(s.tmp_10, s.tmp_14);
    s.tmp_9 = r0;
    if ((s.tmp_9) && (s.tmp_9).vtable) {
    setupResume(s, 24);
    pxsim_String__stringConv(s.tmp_9);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_9) + ""; }
  case 24:
    r0 = s.retval;
    s.tmp_8 = r0;
    r0 = pxsim_String__concat(s.tmp_8, "(");
    s.tmp_7 = r0;
    if ((s.tmp_7) && (s.tmp_7).vtable) {
    setupResume(s, 25);
    pxsim_String__stringConv(s.tmp_7);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_7) + ""; }
  case 25:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = s.arg0.fields["guesses"];
    s.tmp_22 = r0;
    r0 = pxsim_Array__getAt(s.tmp_22, s.i___55262);
    s.tmp_21 = r0;
    r0 = s.arg0.fields["games"];
    s.tmp_23 = r0;
    r0 = (s.tmp_21 / s.tmp_23);
    s.tmp_20 = r0;
    r0 = (s.tmp_20 * 100);
    s.tmp_19 = r0;
    r0 = pxsim.Math_.round(s.tmp_19);
    s.tmp_18 = r0;
    if ((s.tmp_18) && (s.tmp_18).vtable) {
    setupResume(s, 26);
    pxsim_String__stringConv(s.tmp_18);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_18) + ""; }
  case 26:
    r0 = s.retval;
    s.tmp_17 = r0;
    r0 = pxsim_String__concat(s.tmp_6, s.tmp_17);
    s.tmp_5 = r0;
    if ((s.tmp_5) && (s.tmp_5).vtable) {
    setupResume(s, 27);
    pxsim_String__stringConv(s.tmp_5);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_5) + ""; }
  case 27:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_String__concat(s.tmp_4, "%)\n");
    s.tmp_3 = r0;
    if ((s.tmp_3) && (s.tmp_3).vtable) {
    setupResume(s, 28);
    pxsim_String__stringConv(s.tmp_3);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_3) + ""; }
  case 28:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_String__concat(s.tmp_1, s.tmp_2);
    s.message___55197 = (r0);
    r0 = (s.i___55262 + 1);
    s.i___55262 = (r0);
    { step = 1; continue; }
  case 2:
  case 3:
  case 4:
    s.tmp_0 = game_showLongText__P2598_mk(s);
    s.tmp_0.arg0 = s.message___55197;
    s.tmp_0.arg1 = 5;
    s.callLocIdx = 104; s.pc = 29; return s.tmp_0;
  case 29:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Stats_show__P55111.info = {"start":1308,"length":643,"line":49,"column":4,"endLine":64,"endColumn":5,"fileName":"stats.ts","functionName":"show","argumentNames":["this"]}

function Stats_show__P55111_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Stats_show__P55111, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  tmp_12: undefined,
  tmp_13: undefined,
  tmp_14: undefined,
  tmp_15: undefined,
  tmp_16: undefined,
  tmp_17: undefined,
  tmp_18: undefined,
  tmp_19: undefined,
  tmp_20: undefined,
  tmp_21: undefined,
  tmp_22: undefined,
  tmp_23: undefined,
  message___55197: undefined,
  i___55262: undefined,
  arg0: undefined,
} }





function game_showLongText__P2598(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.width___17035 = undefined;
    s.height___17036 = undefined;
    s.top___17037 = undefined;
    s.left___17038 = undefined;
    s.dialog___17149 = undefined;
    s.s___17157 = undefined;
    s.pressed___17173 = undefined;
    s.done___17174 = undefined;
    s.upPressed___17175 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 2523;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2523]) return breakpoint(s, 8, 2523, r0);
  case 8:
    s.tmp_0 = console_inspect__P380_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 20;
    s.callLocIdx = 1035; s.pc = 9; return s.tmp_0;
  case 9:
    r0 = s.retval;
    s.arg0 = (r0);
    s.lastBrkId = 2524;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2524]) return breakpoint(s, 10, 2524, r0);
  case 10:
    s.tmp_0 = controller__setUserEventsEnabled__P1986_mk(s);
    s.tmp_0.arg0 = false;
    s.callLocIdx = 1036; s.pc = 11; return s.tmp_0;
  case 11:
    r0 = s.retval;
    s.lastBrkId = 2525;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2525]) return breakpoint(s, 12, 2525, r0);
  case 12:
    s.tmp_0 = game_pushScene__P2613_mk(s);
    s.callLocIdx = 1037; s.pc = 13; return s.tmp_0;
  case 13:
    r0 = s.retval;
    s.lastBrkId = 2526;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2526]) return breakpoint(s, 14, 2526, r0);
  case 14:
    s.tmp_1 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 1038; s.pc = 15; return s.tmp_1;
  case 15:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = s.tmp_0.fields["flags"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 | 2);
    s.tmp_2 = r0;
    r0 = (s.tmp_0).fields["flags"] = (s.tmp_2);
    s.lastBrkId = 2527;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2527]) return breakpoint(s, 16, 2527, r0);
  case 16:
    s.tmp_0 = r0 = s.arg1;
    r0 = pxsim_pxtcore.switch_eq(0, s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = pxsim_pxtcore.switch_eq(3, s.tmp_0);
    if (r0) { step = 2; continue; }
    r0 = pxsim_pxtcore.switch_eq(1, s.tmp_0);
    if (r0) { step = 3; continue; }
    r0 = pxsim_pxtcore.switch_eq(2, s.tmp_0);
    if (r0) { step = 4; continue; }
    r0 = pxsim_pxtcore.switch_eq(4, s.tmp_0);
    if (r0) { step = 5; continue; }
    r0 = pxsim_pxtcore.switch_eq(5, s.tmp_0);
    if (r0) { step = 6; continue; }
    r0 = s.tmp_0;
    { step = 7; continue; }
  case 1:
    s.lastBrkId = 2528;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2528]) return breakpoint(s, 17, 2528, r0);
  case 17:
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - 4);
    s.width___17035 = (r0);
    s.lastBrkId = 2529;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2529]) return breakpoint(s, 18, 2529, r0);
  case 18:
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_1 = r0;
    r0 = pxsim.Math_.idiv(s.tmp_1, 3);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 + 5);
    s.height___17036 = (r0);
    s.lastBrkId = 2530;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2530]) return breakpoint(s, 19, 2530, r0);
  case 19:
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 - s.height___17036);
    s.top___17037 = (r0);
    s.lastBrkId = 2531;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2531]) return breakpoint(s, 20, 2531, r0);
  case 20:
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - s.width___17035);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 >> 1);
    s.left___17038 = (r0);
    s.lastBrkId = 2532;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2532]) return breakpoint(s, 21, 2532, r0);
  case 21:
    { step = 7; continue; }
  case 2:
    s.lastBrkId = 2533;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2533]) return breakpoint(s, 22, 2533, r0);
  case 22:
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 - 4);
    s.width___17035 = (r0);
    s.lastBrkId = 2534;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2534]) return breakpoint(s, 23, 2534, r0);
  case 23:
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_1 = r0;
    r0 = pxsim.Math_.idiv(s.tmp_1, 3);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 + 5);
    s.height___17036 = (r0);
    s.lastBrkId = 2535;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2535]) return breakpoint(s, 24, 2535, r0);
  case 24:
    s.top___17037 = (0);
    s.lastBrkId = 2536;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2536]) return breakpoint(s, 25, 2536, r0);
  case 25:
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - s.width___17035);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 >> 1);
    s.left___17038 = (r0);
    s.lastBrkId = 2537;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2537]) return breakpoint(s, 26, 2537, r0);
  case 26:
    { step = 7; continue; }
  case 3:
    s.lastBrkId = 2538;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2538]) return breakpoint(s, 27, 2538, r0);
  case 27:
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_1 = r0;
    r0 = pxsim.Math_.idiv(s.tmp_1, 3);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 + 5);
    s.width___17035 = (r0);
    s.lastBrkId = 2539;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2539]) return breakpoint(s, 28, 2539, r0);
  case 28:
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.height___17036 = (r0);
    s.lastBrkId = 2540;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2540]) return breakpoint(s, 29, 2540, r0);
  case 29:
    s.top___17037 = (0);
    s.lastBrkId = 2541;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2541]) return breakpoint(s, 30, 2541, r0);
  case 30:
    s.left___17038 = (0);
    s.lastBrkId = 2542;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2542]) return breakpoint(s, 31, 2542, r0);
  case 31:
    { step = 7; continue; }
  case 4:
    s.lastBrkId = 2543;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2543]) return breakpoint(s, 32, 2543, r0);
  case 32:
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_1 = r0;
    r0 = pxsim.Math_.idiv(s.tmp_1, 3);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 + 5);
    s.width___17035 = (r0);
    s.lastBrkId = 2544;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2544]) return breakpoint(s, 33, 2544, r0);
  case 33:
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.height___17036 = (r0);
    s.lastBrkId = 2545;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2545]) return breakpoint(s, 34, 2545, r0);
  case 34:
    s.top___17037 = (0);
    s.lastBrkId = 2546;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2546]) return breakpoint(s, 35, 2546, r0);
  case 35:
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 - s.width___17035);
    s.left___17038 = (r0);
    s.lastBrkId = 2547;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2547]) return breakpoint(s, 36, 2547, r0);
  case 36:
    { step = 7; continue; }
  case 5:
    s.lastBrkId = 2548;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2548]) return breakpoint(s, 37, 2548, r0);
  case 37:
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 << 1);
    s.tmp_0 = r0;
    r0 = pxsim.Math_.idiv(s.tmp_0, 3);
    s.width___17035 = (r0);
    s.lastBrkId = 2549;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2549]) return breakpoint(s, 38, 2549, r0);
  case 38:
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 << 1);
    s.tmp_0 = r0;
    r0 = pxsim.Math_.idiv(s.tmp_0, 3);
    s.height___17036 = (r0);
    s.lastBrkId = 2550;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2550]) return breakpoint(s, 39, 2550, r0);
  case 39:
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - s.height___17036);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 >> 1);
    s.top___17037 = (r0);
    s.lastBrkId = 2551;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2551]) return breakpoint(s, 40, 2551, r0);
  case 40:
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - s.width___17035);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 >> 1);
    s.left___17038 = (r0);
    s.lastBrkId = 2552;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2552]) return breakpoint(s, 41, 2552, r0);
  case 41:
    { step = 7; continue; }
  case 6:
    s.lastBrkId = 2553;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2553]) return breakpoint(s, 42, 2553, r0);
  case 42:
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.width___17035 = (r0);
    s.lastBrkId = 2554;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2554]) return breakpoint(s, 43, 2554, r0);
  case 43:
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.height___17036 = (r0);
    s.lastBrkId = 2555;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2555]) return breakpoint(s, 44, 2555, r0);
  case 44:
    s.top___17037 = (0);
    s.lastBrkId = 2556;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2556]) return breakpoint(s, 45, 2556, r0);
  case 45:
    s.left___17038 = (0);
    s.lastBrkId = 2557;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2557]) return breakpoint(s, 46, 2557, r0);
  case 46:
  case 7:
    s.lastBrkId = 2558;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2558]) return breakpoint(s, 47, 2558, r0);
  case 47:
    r0 = pxsim_pxtcore_mkClassInstance(game_Dialog__C2571_VT);
    s.tmp_0 = r0;
    s.tmp_1 = game_Dialog_constructor__P2574_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = s.width___17035;
    s.tmp_1.arg2 = s.height___17036;
    s.tmp_1.arg3 = undefined;
    s.tmp_1.arg4 = undefined;
    s.tmp_1.arg5 = undefined;
    s.callLocIdx = 1039; s.pc = 48; return s.tmp_1;
  case 48:
    r0 = s.retval;
    s.dialog___17149 = (s.tmp_0);
    s.lastBrkId = 2559;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2559]) return breakpoint(s, 49, 2559, r0);
  case 49:
    s.tmp_0 = sprites_create__P2043_mk(s);
    r0 = s.dialog___17149.fields["image"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = -1;
    s.callLocIdx = 1040; s.pc = 50; return s.tmp_0;
  case 50:
    r0 = s.retval;
    s.s___17157 = (r0);
    s.lastBrkId = 2560;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2560]) return breakpoint(s, 51, 2560, r0);
  case 51:
    s.tmp_0 = Sprite_top__P2143_mk(s);
    s.tmp_0.arg0 = s.s___17157;
    s.tmp_0.arg1 = s.top___17037;
    s.callLocIdx = 1041; s.pc = 52; return s.tmp_0;
  case 52:
    r0 = s.retval;
    s.lastBrkId = 2561;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2561]) return breakpoint(s, 53, 2561, r0);
  case 53:
    s.tmp_0 = Sprite_left__P2139_mk(s);
    s.tmp_0.arg0 = s.s___17157;
    s.tmp_0.arg1 = s.left___17038;
    s.callLocIdx = 1042; s.pc = 54; return s.tmp_0;
  case 54:
    r0 = s.retval;
    s.lastBrkId = 2562;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2562]) return breakpoint(s, 55, 2562, r0);
  case 55:
    s.tmp_0 = game_Dialog__C2571_v1_2_mk(s);
    s.tmp_0.arg0 = s.dialog___17149;
    s.tmp_0.arg1 = s.arg0;
    if (!checkSubtype(s.tmp_0.arg0, game_Dialog__C2571_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.setText;
    s.pc = 56; return s.tmp_0;
  case 56:
    r0 = s.retval;
    r0 = pxsim_pxtrt.mklocRef();
    s.pressed___17173 = (r0);
    s.lastBrkId = 2563;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2563]) return breakpoint(s, 57, 2563, r0);
  case 57:
    r0 = pxsim_pxtrt_stlocRef(s.pressed___17173, true);
    r0 = pxsim_pxtrt.mklocRef();
    s.done___17174 = (r0);
    s.lastBrkId = 2564;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2564]) return breakpoint(s, 58, 2564, r0);
  case 58:
    r0 = pxsim_pxtrt_stlocRef(s.done___17174, false);
    r0 = pxsim_pxtrt.mklocRef();
    s.upPressed___17175 = (r0);
    s.lastBrkId = 2565;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2565]) return breakpoint(s, 59, 2565, r0);
  case 59:
    r0 = pxsim_pxtrt_stlocRef(s.upPressed___17175, true);
    s.lastBrkId = 2566;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2566]) return breakpoint(s, 60, 2566, r0);
  case 60:
    r0 = pxsim_pxtcore_mkAction(4, game_showLongText_inline__P17177);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.dialog___17149);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 1, s.pressed___17173);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 2, s.done___17174);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 3, s.upPressed___17175);
    s.tmp_1 = game_onUpdate__P2628_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.callLocIdx = 1049; s.pc = 61; return s.tmp_1;
  case 61:
    r0 = s.retval;
    s.lastBrkId = 2585;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2585]) return breakpoint(s, 62, 2585, r0);
  case 62:
    r0 = pxsim_pxtcore_mkAction(1, game_showLongText_inline__P17225);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.done___17174);
    s.tmp_1 = pauseUntil__P365_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = undefined;
    s.callLocIdx = 1050; s.pc = 63; return s.tmp_1;
  case 63:
    r0 = s.retval;
    s.lastBrkId = 2586;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2586]) return breakpoint(s, 64, 2586, r0);
  case 64:
    s.tmp_0 = controller__setUserEventsEnabled__P1986_mk(s);
    s.tmp_0.arg0 = true;
    s.callLocIdx = 1051; s.pc = 65; return s.tmp_0;
  case 65:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_showLongText__P2598.info = {"start":13437,"length":3072,"line":414,"column":4,"endLine":507,"endColumn":5,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"showLongText","argumentNames":["str","layout"]}

function game_showLongText__P2598_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_showLongText__P2598, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  width___17035: undefined,
  height___17036: undefined,
  top___17037: undefined,
  left___17038: undefined,
  dialog___17149: undefined,
  s___17157: undefined,
  pressed___17173: undefined,
  done___17174: undefined,
  upPressed___17175: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function game_showLongText_inline__P17177(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.currentState___17180 = undefined;
    s.moveBack___17205 = undefined;
    s.lastBrkId = 2567;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2567]) return breakpoint(s, 23, 2567, r0);
  case 23:
    s.tmp_0 = game_BaseDialog__C2554_v0_1_mk(s);
    s.tmp_0.arg0 = s.caps[0];
    if (!checkSubtype(s.tmp_0.arg0, game_BaseDialog__C2554_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.update;
    s.pc = 24; return s.tmp_0;
  case 24:
    r0 = s.retval;
    s.lastBrkId = 2568;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2568]) return breakpoint(s, 25, 2568, r0);
  case 25:
    s.tmp_1 = controller_Button__C1971_v0_1_mk(s);
    s.tmp_1.arg0 = globals.A___1905;
    if (!checkSubtype(s.tmp_1.arg0, controller_Button__C1971_VT)) failedCast(s.tmp_1.arg0);
    s.tmp_1.fn = s.tmp_1.arg0.vtable.methods.isPressed;
    s.pc = 26; return s.tmp_1;
  case 26:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    s.tmp_2 = controller_Button__C1971_v0_1_mk(s);
    s.tmp_2.arg0 = globals.down___1910;
    if (!checkSubtype(s.tmp_2.arg0, controller_Button__C1971_VT)) failedCast(s.tmp_2.arg0);
    s.tmp_2.fn = s.tmp_2.arg0.vtable.methods.isPressed;
    s.pc = 27; return s.tmp_2;
  case 27:
    r0 = s.retval;
  case 2:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    s.currentState___17180 = (s.tmp_3);
    s.lastBrkId = 2569;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2569]) return breakpoint(s, 28, 2569, r0);
  case 28:
    s.tmp_0 = r0 = s.currentState___17180;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 3; continue; }
    r0 = s.tmp_0;
    { step = 4; continue; }
  case 3:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
  case 4:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 2570;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2570]) return breakpoint(s, 29, 2570, r0);
  case 29:
    r0 = pxsim_pxtrt_stlocRef(s.caps[1], true);
    s.lastBrkId = 2571;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2571]) return breakpoint(s, 30, 2571, r0);
  case 30:
    s.tmp_1 = game_Dialog_hasNext__P2575_mk(s);
    s.tmp_1.arg0 = s.caps[0];
    s.callLocIdx = 1043; s.pc = 31; return s.tmp_1;
  case 31:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 2572;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2572]) return breakpoint(s, 32, 2572, r0);
  case 32:
    s.tmp_2 = game_Dialog_nextPage__P2577_mk(s);
    s.tmp_2.arg0 = s.caps[0];
    s.callLocIdx = 1044; s.pc = 33; return s.tmp_2;
  case 33:
    r0 = s.retval;
    { step = 6; continue; }
  case 5:
    s.lastBrkId = 2573;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2573]) return breakpoint(s, 34, 2573, r0);
  case 34:
    s.tmp_0 = scene_setBackgroundImage__P2536_mk(s);
    s.tmp_0.arg0 = null;
    s.callLocIdx = 1045; s.pc = 35; return s.tmp_0;
  case 35:
    r0 = s.retval;
    s.lastBrkId = 2574;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2574]) return breakpoint(s, 36, 2574, r0);
  case 36:
    s.tmp_0 = game_popScene__P2614_mk(s);
    s.callLocIdx = 1046; s.pc = 37; return s.tmp_0;
  case 37:
    r0 = s.retval;
    s.lastBrkId = 2575;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2575]) return breakpoint(s, 38, 2575, r0);
  case 38:
    r0 = pxsim_pxtrt_stlocRef(s.caps[2], true);
  case 6:
    { step = 12; continue; }
  case 7:
    s.lastBrkId = 2576;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2576]) return breakpoint(s, 39, 2576, r0);
  case 39:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 8; continue; }
    r0 = s.tmp_0;
    { step = 9; continue; }
  case 8:
    r0 = pxsim_numops_toBoolDecr(s.currentState___17180);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
  case 9:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 10; continue; }
    s.lastBrkId = 2577;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2577]) return breakpoint(s, 40, 2577, r0);
  case 40:
    r0 = pxsim_pxtrt_stlocRef(s.caps[1], false);
  case 10:
  case 11:
  case 12:
    s.lastBrkId = 2578;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2578]) return breakpoint(s, 41, 2578, r0);
  case 41:
    s.tmp_0 = controller_Button__C1971_v0_1_mk(s);
    s.tmp_0.arg0 = globals.up___1908;
    if (!checkSubtype(s.tmp_0.arg0, controller_Button__C1971_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.isPressed;
    s.pc = 42; return s.tmp_0;
  case 42:
    r0 = s.retval;
    s.moveBack___17205 = (r0);
    s.lastBrkId = 2579;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2579]) return breakpoint(s, 43, 2579, r0);
  case 43:
    s.tmp_0 = r0 = s.moveBack___17205;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 13; continue; }
    r0 = s.tmp_0;
    { step = 14; continue; }
  case 13:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[3]);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
  case 14:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 17; continue; }
    s.lastBrkId = 2580;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2580]) return breakpoint(s, 44, 2580, r0);
  case 44:
    r0 = pxsim_pxtrt_stlocRef(s.caps[3], true);
    s.lastBrkId = 2581;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2581]) return breakpoint(s, 45, 2581, r0);
  case 45:
    s.tmp_1 = game_Dialog_hasPrev__P2576_mk(s);
    s.tmp_1.arg0 = s.caps[0];
    s.callLocIdx = 1047; s.pc = 46; return s.tmp_1;
  case 46:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 15; continue; }
    s.lastBrkId = 2582;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2582]) return breakpoint(s, 47, 2582, r0);
  case 47:
    s.tmp_2 = game_Dialog_prevPage__P2578_mk(s);
    s.tmp_2.arg0 = s.caps[0];
    s.callLocIdx = 1048; s.pc = 48; return s.tmp_2;
  case 48:
    r0 = s.retval;
  case 15:
  case 16:
    { step = 22; continue; }
  case 17:
    s.lastBrkId = 2583;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2583]) return breakpoint(s, 49, 2583, r0);
  case 49:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[3]);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 18; continue; }
    r0 = s.tmp_0;
    { step = 19; continue; }
  case 18:
    r0 = pxsim_numops_toBoolDecr(s.moveBack___17205);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
  case 19:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 20; continue; }
    s.lastBrkId = 2584;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2584]) return breakpoint(s, 50, 2584, r0);
  case 50:
    r0 = pxsim_pxtrt_stlocRef(s.caps[3], false);
  case 20:
  case 21:
  case 22:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_showLongText_inline__P17177.info = {"start":15490,"length":931,"line":475,"column":22,"endLine":503,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"inline","argumentNames":[]}

function game_showLongText_inline__P17177_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_showLongText_inline__P17177, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  currentState___17180: undefined,
  moveBack___17205: undefined,
} }





function game_showLongText_inline__P17225(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    r0 = pxsim_pxtrt_ldlocRef(s.caps[0]);
    return leave(s, r0)
  default: oops()
} } }
game_showLongText_inline__P17225.info = {"start":16443,"length":10,"line":505,"column":19,"endLine":505,"endColumn":29,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"inline","argumentNames":[]}

function game_showLongText_inline__P17225_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_showLongText_inline__P17225, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
} }





function game_Dialog_setText__P2580(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Dialog__C2571_VT)) failedCast(r0);
    s.lastBrkId = 2454;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2454]) return breakpoint(s, 1, 2454, r0);
  case 1:
    s.tmp_0 = game_BaseDialog_setFont__P4537_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_1 = image_getFontForText__P1772_mk(s);
    s.tmp_1.arg0 = s.arg1;
    s.callLocIdx = 994; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 995; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 2455;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2455]) return breakpoint(s, 4, 2455, r0);
  case 4:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = game_Dialog_chunkText__P2579_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.tmp_2.arg1 = s.arg1;
    s.callLocIdx = 996; s.pc = 5; return s.tmp_2;
  case 5:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["chunks"] = (s.tmp_1);
    s.lastBrkId = 2456;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2456]) return breakpoint(s, 6, 2456, r0);
  case 6:
    r0 = (s.arg0).fields["chunkIndex"] = (0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Dialog_setText__P2580.info = {"start":7073,"length":183,"line":228,"column":8,"endLine":232,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"setText","argumentNames":["this","rawString"]}

function game_Dialog_setText__P2580_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Dialog_setText__P2580, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function game_Dialog_chunkText__P2579(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.charactersPerRow___17279 = undefined;
    s.charactersPerCursorRow___17288 = undefined;
    s.rowsOfCharacters___17300 = undefined;
    s.rowsWithCursor___17307 = undefined;
    s.lineLengths___17315 = undefined;
    s.i___17317 = undefined;
    s.i___17330 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Dialog__C2571_VT)) failedCast(r0);
    s.lastBrkId = 2438;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2438]) return breakpoint(s, 5, 2438, r0);
  case 5:
    s.tmp_2 = game_BaseDialog_textAreaWidth__P4535_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 987; s.pc = 6; return s.tmp_2;
  case 6:
    r0 = s.retval;
    s.tmp_1 = r0;
    s.tmp_4 = if_charWidth_1_mk(s);
    r0 = s.arg0.fields["font"];
    s.tmp_4.arg0 = r0;
    if (!s.tmp_4.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_4.arg0, "charWidth");
    } else {
      s.tmp_4.fn = s.tmp_4.arg0.vtable.iface["charWidth"];
      if (s.tmp_4.fn == null) { s.retval = s.tmp_4.arg0.fields["charWidth"]; }
      else if (!s.tmp_4.fn.isGetter) { s.retval = bind(s.tmp_4); }
     else { s.callLocIdx = 988; s.pc = 7; return s.tmp_4; }
    }
  case 7:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_1 / s.tmp_3);
    s.tmp_0 = r0;
    r0 = pxsim.Math_.floor(s.tmp_0);
    s.charactersPerRow___17279 = (r0);
    s.lastBrkId = 2439;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2439]) return breakpoint(s, 8, 2439, r0);
  case 8:
    s.tmp_1 = r0 = s.charactersPerRow___17279;
    r0 = s.arg0.fields["cursor"];
    s.tmp_4 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_4);
    s.tmp_3 = r0;
    s.tmp_6 = if_charWidth_1_mk(s);
    r0 = s.arg0.fields["font"];
    s.tmp_6.arg0 = r0;
    if (!s.tmp_6.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_6.arg0, "charWidth");
    } else {
      s.tmp_6.fn = s.tmp_6.arg0.vtable.iface["charWidth"];
      if (s.tmp_6.fn == null) { s.retval = s.tmp_6.arg0.fields["charWidth"]; }
      else if (!s.tmp_6.fn.isGetter) { s.retval = bind(s.tmp_6); }
     else { s.callLocIdx = 989; s.pc = 9; return s.tmp_6; }
    }
  case 9:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = (s.tmp_3 / s.tmp_5);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 - s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim.Math_.floor(s.tmp_0);
    s.charactersPerCursorRow___17288 = (r0);
    s.lastBrkId = 2440;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2440]) return breakpoint(s, 10, 2440, r0);
  case 10:
    s.tmp_2 = game_BaseDialog_textAreaHeight__P4536_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 990; s.pc = 11; return s.tmp_2;
  case 11:
    r0 = s.retval;
    s.tmp_1 = r0;
    s.tmp_4 = game_BaseDialog_rowHeight__P4534_mk(s);
    s.tmp_4.arg0 = s.arg0;
    s.callLocIdx = 991; s.pc = 12; return s.tmp_4;
  case 12:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_1 / s.tmp_3);
    s.tmp_0 = r0;
    r0 = pxsim.Math_.floor(s.tmp_0);
    s.rowsOfCharacters___17300 = (r0);
    s.lastBrkId = 2441;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2441]) return breakpoint(s, 13, 2441, r0);
  case 13:
    r0 = s.arg0.fields["cursor"];
    s.tmp_2 = r0;
    r0 = pxsim_ImageMethods.height(s.tmp_2);
    s.tmp_1 = r0;
    s.tmp_4 = game_BaseDialog_rowHeight__P4534_mk(s);
    s.tmp_4.arg0 = s.arg0;
    s.callLocIdx = 992; s.pc = 14; return s.tmp_4;
  case 14:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_1 / s.tmp_3);
    s.tmp_0 = r0;
    r0 = pxsim.Math_.ceil(s.tmp_0);
    s.rowsWithCursor___17307 = (r0);
    s.lastBrkId = 2442;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2442]) return breakpoint(s, 15, 2442, r0);
  case 15:
    r0 = pxsim_Array__mk();
    s.lineLengths___17315 = (r0);
    s.lastBrkId = 2443;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2443]) return breakpoint(s, 16, 2443, r0);
  case 16:
    s.i___17317 = (0);
    s.lastBrkId = 2444;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2444]) return breakpoint(s, 17, 2444, r0);
  case 17:
  case 1:
    s.lastBrkId = 2445;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2445]) return breakpoint(s, 18, 2445, r0);
  case 18:
    s.tmp_1 = r0 = s.i___17317;
    r0 = (s.rowsOfCharacters___17300 - s.rowsWithCursor___17307);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 2446;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2446]) return breakpoint(s, 19, 2446, r0);
  case 19:
    r0 = pxsim_Array__push(s.lineLengths___17315, s.charactersPerRow___17279);
    s.lastBrkId = 2447;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2447]) return breakpoint(s, 20, 2447, r0);
  case 20:
    r0 = (s.i___17317 + 1);
    s.i___17317 = (r0);
    { step = 1; continue; }
  case 2:
    s.lastBrkId = 2448;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2448]) return breakpoint(s, 21, 2448, r0);
  case 21:
    s.i___17330 = (0);
    s.lastBrkId = 2449;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2449]) return breakpoint(s, 22, 2449, r0);
  case 22:
  case 3:
    s.lastBrkId = 2450;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2450]) return breakpoint(s, 23, 2450, r0);
  case 23:
    r0 = (s.i___17330 < s.rowsWithCursor___17307);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 2451;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2451]) return breakpoint(s, 24, 2451, r0);
  case 24:
    r0 = pxsim_Array__push(s.lineLengths___17315, s.charactersPerCursorRow___17288);
    s.lastBrkId = 2452;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2452]) return breakpoint(s, 25, 2452, r0);
  case 25:
    r0 = (s.i___17330 + 1);
    s.i___17330 = (r0);
    { step = 3; continue; }
  case 4:
    s.lastBrkId = 2453;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2453]) return breakpoint(s, 26, 2453, r0);
  case 26:
    s.tmp_0 = game_breakIntoPages__P4546_mk(s);
    s.tmp_0.arg0 = s.arg1;
    s.tmp_0.arg1 = s.lineLengths___17315;
    s.callLocIdx = 993; s.pc = 27; return s.tmp_0;
  case 27:
    r0 = s.retval;
    return leave(s, r0)
  default: oops()
} } }
game_Dialog_chunkText__P2579.info = {"start":6328,"length":735,"line":214,"column":8,"endLine":226,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"chunkText","argumentNames":["this","str"]}

function game_Dialog_chunkText__P2579_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Dialog_chunkText__P2579, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  charactersPerRow___17279: undefined,
  charactersPerCursorRow___17288: undefined,
  rowsOfCharacters___17300: undefined,
  rowsWithCursor___17307: undefined,
  lineLengths___17315: undefined,
  i___17317: undefined,
  i___17330: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function game_breakIntoPages__P4546(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.result___17346 = undefined;
    s.currentPage___17348 = undefined;
    s.lastBreakLocation___17350 = undefined;
    s.lastBreak___17351 = undefined;
    s.line___17352 = undefined;
    s.lineLength___17353 = undefined;
    s.nextLine___17356 = undefined;
    s.index___17362 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 2615;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2615]) return breakpoint(s, 23, 2615, r0);
  case 23:
    r0 = pxsim_Array__mk();
    s.result___17346 = (r0);
    s.lastBrkId = 2616;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2616]) return breakpoint(s, 24, 2616, r0);
  case 24:
    r0 = pxsim_Array__mk();
    s.currentPage___17348 = (r0);
    s.lastBrkId = 2617;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2617]) return breakpoint(s, 25, 2617, r0);
  case 25:
    s.lastBreakLocation___17350 = (0);
    s.lastBrkId = 2618;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2618]) return breakpoint(s, 26, 2618, r0);
  case 26:
    s.lastBreak___17351 = (0);
    r0 = pxsim_pxtrt.mklocRef();
    s.line___17352 = (r0);
    s.lastBrkId = 2619;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2619]) return breakpoint(s, 27, 2619, r0);
  case 27:
    r0 = pxsim_pxtrt_stlocRef(s.line___17352, 0);
    r0 = pxsim_pxtrt.mklocRef();
    s.lineLength___17353 = (r0);
    s.lastBrkId = 2620;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2620]) return breakpoint(s, 28, 2620, r0);
  case 28:
    s.tmp_0 = r0 = s.lineLength___17353;
    s.tmp_2 = r0 = s.arg1;
    r0 = pxsim_pxtrt_ldlocRef(s.line___17352);
    s.tmp_3 = r0;
    r0 = pxsim_Array__getAt(s.tmp_2, s.tmp_3);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.tmp_1);
    r0 = pxsim_pxtcore_mkAction(3, nextLine__P17356);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.line___17352);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 1, s.lineLength___17353);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 2, s.arg1);
    s.nextLine___17356 = (s.tmp_0);
    s.lastBrkId = 2623;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2623]) return breakpoint(s, 29, 2623, r0);
  case 29:
    s.index___17362 = (0);
    s.lastBrkId = 2624;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2624]) return breakpoint(s, 30, 2624, r0);
  case 30:
  case 1:
    s.lastBrkId = 2625;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2625]) return breakpoint(s, 31, 2625, r0);
  case 31:
    s.tmp_1 = r0 = s.index___17362;
    r0 = pxsim_String_.length(s.arg0);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 18; continue; }
    s.lastBrkId = 2626;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2626]) return breakpoint(s, 32, 2626, r0);
  case 32:
    r0 = pxsim_String_.charAt(s.arg0, s.index___17362);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 === "\n");
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 2627;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2627]) return breakpoint(s, 33, 2627, r0);
  case 33:
    s.tmp_5 = r0 = s.currentPage___17348;
    s.tmp_7 = game_formatLine__P4547_mk(s);
    s.tmp_8 = helpers_stringSubstr__P118_mk(s);
    s.tmp_8.arg0 = s.arg0;
    s.tmp_8.arg1 = s.lastBreak___17351;
    r0 = (s.index___17362 - s.lastBreak___17351);
    s.tmp_8.arg2 = r0;
    s.callLocIdx = 1065; s.pc = 35; return s.tmp_8;
  case 35:
    r0 = s.retval;
    s.tmp_7.arg0 = r0;
    s.callLocIdx = 1066; s.pc = 34; return s.tmp_7;
  case 34:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = pxsim_Array__push(s.tmp_5, s.tmp_6);
    s.lastBrkId = 2628;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2628]) return breakpoint(s, 36, 2628, r0);
  case 36:
    r0 = (s.index___17362 + 1);
    s.index___17362 = (r0);
    s.lastBrkId = 2629;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2629]) return breakpoint(s, 37, 2629, r0);
  case 37:
    s.lastBreak___17351 = (s.index___17362);
    s.lastBrkId = 2630;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2630]) return breakpoint(s, 38, 2630, r0);
  case 38:
    s.tmp_0 = lambda_1_mk(s);
    s.tmp_0.argL = s.nextLine___17356;
    setupLambda(s.tmp_0, s.tmp_0.argL);
    s.callLocIdx = 1067; s.pc = 39; return s.tmp_0;
  case 39:
    r0 = s.retval;
    { step = 9; continue; }
  case 2:
    s.lastBrkId = 2631;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2631]) return breakpoint(s, 40, 2631, r0);
  case 40:
    r0 = pxsim_String_.charAt(s.arg0, s.index___17362);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 === "\\");
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 3; continue; }
    r0 = s.tmp_0;
    { step = 4; continue; }
  case 3:
    s.tmp_3 = r0 = s.arg0;
    r0 = (s.index___17362 + 1);
    s.tmp_4 = r0;
    r0 = pxsim_String_.charAt(s.tmp_3, s.tmp_4);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 === "n");
  case 4:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_5);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 2632;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2632]) return breakpoint(s, 41, 2632, r0);
  case 41:
    s.tmp_6 = r0 = s.currentPage___17348;
    s.tmp_8 = game_formatLine__P4547_mk(s);
    s.tmp_9 = helpers_stringSubstr__P118_mk(s);
    s.tmp_9.arg0 = s.arg0;
    s.tmp_9.arg1 = s.lastBreak___17351;
    r0 = (s.index___17362 - s.lastBreak___17351);
    s.tmp_9.arg2 = r0;
    s.callLocIdx = 1068; s.pc = 43; return s.tmp_9;
  case 43:
    r0 = s.retval;
    s.tmp_8.arg0 = r0;
    s.callLocIdx = 1069; s.pc = 42; return s.tmp_8;
  case 42:
    r0 = s.retval;
    s.tmp_7 = r0;
    r0 = pxsim_Array__push(s.tmp_6, s.tmp_7);
    s.lastBrkId = 2633;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2633]) return breakpoint(s, 44, 2633, r0);
  case 44:
    r0 = (s.index___17362 + 2);
    s.index___17362 = (r0);
    s.lastBrkId = 2634;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2634]) return breakpoint(s, 45, 2634, r0);
  case 45:
    s.lastBreak___17351 = (s.index___17362);
    s.lastBrkId = 2635;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2635]) return breakpoint(s, 46, 2635, r0);
  case 46:
    s.tmp_0 = lambda_1_mk(s);
    s.tmp_0.argL = s.nextLine___17356;
    setupLambda(s.tmp_0, s.tmp_0.argL);
    s.callLocIdx = 1070; s.pc = 47; return s.tmp_0;
  case 47:
    r0 = s.retval;
    { step = 8; continue; }
  case 5:
    s.lastBrkId = 2636;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2636]) return breakpoint(s, 48, 2636, r0);
  case 48:
    s.tmp_1 = game_isBreakCharacter__P4545_mk(s);
    r0 = pxsim_String_.charCodeAt(s.arg0, s.index___17362);
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 1071; s.pc = 49; return s.tmp_1;
  case 49:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 6; continue; }
    s.lastBrkId = 2637;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2637]) return breakpoint(s, 50, 2637, r0);
  case 50:
    s.lastBreakLocation___17350 = (s.index___17362);
  case 6:
  case 7:
  case 8:
  case 9:
    s.lastBrkId = 2638;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2638]) return breakpoint(s, 51, 2638, r0);
  case 51:
    r0 = (s.index___17362 - s.lastBreak___17351);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_ldlocRef(s.lineLength___17353);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 === s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 14; continue; }
    s.lastBrkId = 2639;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2639]) return breakpoint(s, 52, 2639, r0);
  case 52:
    r0 = (s.lastBreakLocation___17350 === s.index___17362);
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBool(s.tmp_3);
    if (!r0) { step = 10; continue; }
    r0 = s.tmp_3;
    { step = 11; continue; }
  case 10:
    r0 = (s.lastBreakLocation___17350 < s.lastBreak___17351);
  case 11:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    if (!r0) { step = 12; continue; }
    s.lastBrkId = 2640;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2640]) return breakpoint(s, 53, 2640, r0);
  case 53:
    s.tmp_5 = r0 = s.currentPage___17348;
    s.tmp_7 = game_formatLine__P4547_mk(s);
    s.tmp_8 = helpers_stringSubstr__P118_mk(s);
    s.tmp_8.arg0 = s.arg0;
    s.tmp_8.arg1 = s.lastBreak___17351;
    r0 = pxsim_pxtrt_ldlocRef(s.lineLength___17353);
    s.tmp_8.arg2 = r0;
    s.callLocIdx = 1072; s.pc = 55; return s.tmp_8;
  case 55:
    r0 = s.retval;
    s.tmp_7.arg0 = r0;
    s.callLocIdx = 1073; s.pc = 54; return s.tmp_7;
  case 54:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = pxsim_Array__push(s.tmp_5, s.tmp_6);
    s.lastBrkId = 2641;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2641]) return breakpoint(s, 56, 2641, r0);
  case 56:
    s.lastBreak___17351 = (s.index___17362);
    s.lastBrkId = 2642;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2642]) return breakpoint(s, 57, 2642, r0);
  case 57:
    s.tmp_0 = lambda_1_mk(s);
    s.tmp_0.argL = s.nextLine___17356;
    setupLambda(s.tmp_0, s.tmp_0.argL);
    s.callLocIdx = 1074; s.pc = 58; return s.tmp_0;
  case 58:
    r0 = s.retval;
    { step = 13; continue; }
  case 12:
    s.lastBrkId = 2643;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2643]) return breakpoint(s, 59, 2643, r0);
  case 59:
    s.tmp_0 = r0 = s.currentPage___17348;
    s.tmp_2 = game_formatLine__P4547_mk(s);
    s.tmp_3 = helpers_stringSubstr__P118_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.tmp_3.arg1 = s.lastBreak___17351;
    r0 = (s.lastBreakLocation___17350 - s.lastBreak___17351);
    s.tmp_3.arg2 = r0;
    s.callLocIdx = 1075; s.pc = 61; return s.tmp_3;
  case 61:
    r0 = s.retval;
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 1076; s.pc = 60; return s.tmp_2;
  case 60:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_Array__push(s.tmp_0, s.tmp_1);
    s.lastBrkId = 2644;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2644]) return breakpoint(s, 62, 2644, r0);
  case 62:
    s.lastBreak___17351 = (s.lastBreakLocation___17350);
    s.lastBrkId = 2645;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2645]) return breakpoint(s, 63, 2645, r0);
  case 63:
    s.tmp_0 = lambda_1_mk(s);
    s.tmp_0.argL = s.nextLine___17356;
    setupLambda(s.tmp_0, s.tmp_0.argL);
    s.callLocIdx = 1077; s.pc = 64; return s.tmp_0;
  case 64:
    r0 = s.retval;
  case 13:
  case 14:
  case 15:
    s.lastBrkId = 2646;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2646]) return breakpoint(s, 65, 2646, r0);
  case 65:
    r0 = pxsim_pxtrt_ldlocRef(s.line___17352);
    s.tmp_1 = r0;
    r0 = pxsim_Array__length(s.arg1);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 >= s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 16; continue; }
    s.lastBrkId = 2647;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2647]) return breakpoint(s, 66, 2647, r0);
  case 66:
    r0 = pxsim_pxtrt_stlocRef(s.line___17352, 0);
    s.lastBrkId = 2648;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2648]) return breakpoint(s, 67, 2648, r0);
  case 67:
    s.tmp_0 = r0 = s.lineLength___17353;
    s.tmp_2 = r0 = s.arg1;
    r0 = pxsim_pxtrt_ldlocRef(s.line___17352);
    s.tmp_3 = r0;
    r0 = pxsim_Array__getAt(s.tmp_2, s.tmp_3);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.tmp_1);
    s.lastBrkId = 2649;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2649]) return breakpoint(s, 68, 2649, r0);
  case 68:
    r0 = pxsim_Array__push(s.result___17346, s.currentPage___17348);
    s.lastBrkId = 2650;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2650]) return breakpoint(s, 69, 2650, r0);
  case 69:
    r0 = pxsim_Array__mk();
    s.currentPage___17348 = (r0);
  case 16:
  case 17:
    s.lastBrkId = 2651;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2651]) return breakpoint(s, 70, 2651, r0);
  case 70:
    r0 = (s.index___17362 + 1);
    s.index___17362 = (r0);
    { step = 1; continue; }
  case 18:
    s.lastBrkId = 2652;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2652]) return breakpoint(s, 71, 2652, r0);
  case 71:
    s.tmp_0 = r0 = s.currentPage___17348;
    s.tmp_2 = game_formatLine__P4547_mk(s);
    s.tmp_3 = helpers_stringSubstr__P118_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.tmp_3.arg1 = s.lastBreak___17351;
    r0 = pxsim_String_.length(s.arg0);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 - s.lastBreak___17351);
    s.tmp_3.arg2 = r0;
    s.callLocIdx = 1078; s.pc = 73; return s.tmp_3;
  case 73:
    r0 = s.retval;
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 1079; s.pc = 72; return s.tmp_2;
  case 72:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_Array__push(s.tmp_0, s.tmp_1);
    s.lastBrkId = 2653;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2653]) return breakpoint(s, 74, 2653, r0);
  case 74:
    r0 = pxsim_Array__length(s.currentPage___17348);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > 1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 19; continue; }
    r0 = s.tmp_0;
    { step = 20; continue; }
  case 19:
    r0 = pxsim_Array__getAt(s.currentPage___17348, 0);
    s.tmp_2 = r0;
    r0 = pxsim_String_.mkEmpty();
    s.tmp_3 = r0;
    r0 = (s.tmp_2 !== s.tmp_3);
  case 20:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    if (!r0) { step = 21; continue; }
    s.lastBrkId = 2654;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2654]) return breakpoint(s, 75, 2654, r0);
  case 75:
    r0 = pxsim_Array__push(s.result___17346, s.currentPage___17348);
  case 21:
  case 22:
    s.lastBrkId = 2655;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2655]) return breakpoint(s, 76, 2655, r0);
  case 76:
    r0 = s.result___17346;
    return leave(s, r0)
  default: oops()
} } }
game_breakIntoPages__P4546.info = {"start":21243,"length":2187,"line":673,"column":4,"endLine":734,"endColumn":5,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"breakIntoPages","argumentNames":["text","lineLengths"]}

function game_breakIntoPages__P4546_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_breakIntoPages__P4546, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  result___17346: undefined,
  currentPage___17348: undefined,
  lastBreakLocation___17350: undefined,
  lastBreak___17351: undefined,
  line___17352: undefined,
  lineLength___17353: undefined,
  nextLine___17356: undefined,
  index___17362: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function nextLine__P17356(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 2621;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2621]) return breakpoint(s, 1, 2621, r0);
  case 1:
    s.tmp_0 = r0 = s.caps[0];
    r0 = pxsim_pxtrt_ldlocRef(s.caps[0]);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + 1);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.tmp_1);
    s.lastBrkId = 2622;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2622]) return breakpoint(s, 2, 2622, r0);
  case 2:
    s.tmp_0 = r0 = s.caps[1];
    s.tmp_2 = r0 = s.caps[2];
    r0 = pxsim_pxtrt_ldlocRef(s.caps[0]);
    s.tmp_3 = r0;
    r0 = pxsim_Array__getAt(s.tmp_2, s.tmp_3);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
nextLine__P17356.info = {"start":21536,"length":95,"line":683,"column":8,"endLine":686,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"nextLine","argumentNames":[]}

function nextLine__P17356_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: nextLine__P17356, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
} }





function game_formatLine__P4547(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.i___17534 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 2656;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2656]) return breakpoint(s, 3, 2656, r0);
  case 3:
    s.i___17534 = (0);
    s.lastBrkId = 2657;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2657]) return breakpoint(s, 4, 2657, r0);
  case 4:
  case 1:
    s.lastBrkId = 2658;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2658]) return breakpoint(s, 5, 2658, r0);
  case 5:
    r0 = pxsim_String_.charAt(s.arg0, s.i___17534);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 === " ");
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 2659;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2659]) return breakpoint(s, 6, 2659, r0);
  case 6:
    r0 = (s.i___17534 + 1);
    s.i___17534 = (r0);
    { step = 1; continue; }
  case 2:
    s.lastBrkId = 2660;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2660]) return breakpoint(s, 7, 2660, r0);
  case 7:
    s.tmp_0 = helpers_stringSubstr__P118_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.i___17534;
    r0 = pxsim_String_.length(s.arg0);
    s.tmp_0.arg2 = r0;
    s.callLocIdx = 1080; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
    return leave(s, r0)
  default: oops()
} } }
game_formatLine__P4547.info = {"start":23436,"length":148,"line":736,"column":4,"endLine":740,"endColumn":5,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"formatLine","argumentNames":["text"]}

function game_formatLine__P4547_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_formatLine__P4547, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  i___17534: undefined,
  arg0: undefined,
} }





function game_isBreakCharacter__P4545(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 2614;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2614]) return breakpoint(s, 21, 2614, r0);
  case 21:
    r0 = (s.arg0 <= 32);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 4; continue; }
  case 1:
    r0 = (s.arg0 >= 58);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBool(s.tmp_1);
    if (r0) { step = 2; continue; }
    r0 = s.tmp_1;
    { step = 3; continue; }
  case 2:
    r0 = (s.arg0 <= 64);
  case 3:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = s.tmp_2;
  case 4:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBool(s.tmp_3);
    if (!r0) { step = 5; continue; }
    r0 = s.tmp_3;
    { step = 8; continue; }
  case 5:
    r0 = (s.arg0 >= 91);
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBool(s.tmp_4);
    if (r0) { step = 6; continue; }
    r0 = s.tmp_4;
    { step = 7; continue; }
  case 6:
    r0 = (s.arg0 <= 96);
  case 7:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    r0 = s.tmp_5;
  case 8:
    // jmp value (already in r0)
    s.tmp_6 = r0;
    r0 = pxsim_numops_toBool(s.tmp_6);
    if (!r0) { step = 9; continue; }
    r0 = s.tmp_6;
    { step = 12; continue; }
  case 9:
    r0 = (s.arg0 >= 123);
    s.tmp_7 = r0;
    r0 = pxsim_numops_toBool(s.tmp_7);
    if (r0) { step = 10; continue; }
    r0 = s.tmp_7;
    { step = 11; continue; }
  case 10:
    r0 = (s.arg0 <= 126);
  case 11:
    // jmp value (already in r0)
    s.tmp_8 = r0;
    r0 = s.tmp_8;
  case 12:
    // jmp value (already in r0)
    s.tmp_9 = r0;
    r0 = pxsim_numops_toBool(s.tmp_9);
    if (!r0) { step = 13; continue; }
    r0 = s.tmp_9;
    { step = 16; continue; }
  case 13:
    r0 = (s.arg0 >= 19968);
    s.tmp_10 = r0;
    r0 = pxsim_numops_toBool(s.tmp_10);
    if (r0) { step = 14; continue; }
    r0 = s.tmp_10;
    { step = 15; continue; }
  case 14:
    r0 = (s.arg0 <= 40869);
  case 15:
    // jmp value (already in r0)
    s.tmp_11 = r0;
    r0 = s.tmp_11;
  case 16:
    // jmp value (already in r0)
    s.tmp_12 = r0;
    r0 = pxsim_numops_toBool(s.tmp_12);
    if (!r0) { step = 17; continue; }
    r0 = s.tmp_12;
    { step = 18; continue; }
  case 17:
    r0 = (s.arg0 == 12290);
  case 18:
    // jmp value (already in r0)
    s.tmp_13 = r0;
    r0 = pxsim_numops_toBool(s.tmp_13);
    if (!r0) { step = 19; continue; }
    r0 = s.tmp_13;
    { step = 20; continue; }
  case 19:
    r0 = (s.arg0 == 65292);
  case 20:
    // jmp value (already in r0)
    s.tmp_14 = r0;
    r0 = s.tmp_14;
    return leave(s, r0)
  default: oops()
} } }
game_isBreakCharacter__P4545.info = {"start":20879,"length":358,"line":663,"column":4,"endLine":671,"endColumn":5,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"isBreakCharacter","argumentNames":["charCode"]}

function game_isBreakCharacter__P4545_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_isBreakCharacter__P4545, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  tmp_12: undefined,
  tmp_13: undefined,
  tmp_14: undefined,
  arg0: undefined,
} }





function helpers_stringSubstr__P118(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 162;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[162]) return breakpoint(s, 5, 162, r0);
  case 5:
    r0 = (s.arg2 === undefined);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = pxsim_String_.length(s.arg0);
    { step = 4; continue; }
  case 1:
    s.tmp_1 = r0 = s.arg2;
    r0 = pxsim_numops_toBool(s.tmp_1);
    if (!r0) { step = 2; continue; }
    r0 = s.tmp_1;
    { step = 3; continue; }
  case 2:
    r0 = 0;
  case 3:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = s.tmp_2;
  case 4:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    s.arg2 = (s.tmp_3);
    s.lastBrkId = 163;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[163]) return breakpoint(s, 6, 163, r0);
  case 6:
    r0 = pxsim_String_.substr(s.arg0, s.arg1, s.arg2);
    return leave(s, r0)
  default: oops()
} } }
helpers_stringSubstr__P118.info = {"start":11286,"length":204,"line":379,"column":4,"endLine":382,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"stringSubstr","argumentNames":["s","start","length"]}

function helpers_stringSubstr__P118_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_stringSubstr__P118, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function game_BaseDialog_rowHeight__P4534(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_BaseDialog__C2554_VT)) failedCast(r0);
    s.lastBrkId = 2422;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2422]) return breakpoint(s, 1, 2422, r0);
  case 1:
    s.tmp_1 = if_charHeight_1_mk(s);
    r0 = s.arg0.fields["font"];
    s.tmp_1.arg0 = r0;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "charHeight");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["charHeight"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["charHeight"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 981; s.pc = 2; return s.tmp_1; }
    }
  case 2:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = (s.tmp_0 + 1);
    return leave(s, r0)
  default: oops()
} } }
game_BaseDialog_rowHeight__P4534.info = {"start":5000,"length":78,"line":165,"column":8,"endLine":167,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"rowHeight","argumentNames":["this"]}

function game_BaseDialog_rowHeight__P4534_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_BaseDialog_rowHeight__P4534, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function game_Dialog_prevPage__P2578(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Dialog__C2571_VT)) failedCast(r0);
    s.lastBrkId = 2436;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2436]) return breakpoint(s, 3, 2436, r0);
  case 3:
    s.tmp_1 = game_Dialog_hasPrev__P2576_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.callLocIdx = 986; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2437;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2437]) return breakpoint(s, 5, 2437, r0);
  case 5:
    s.tmp_2 = r0 = s.arg0;
    r0 = s.tmp_2.fields["chunkIndex"];
    s.tmp_4 = r0;
    r0 = (s.tmp_4 - 1);
    s.tmp_3 = r0;
    r0 = (s.tmp_2).fields["chunkIndex"] = (s.tmp_3);
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Dialog_prevPage__P2578.info = {"start":6213,"length":105,"line":208,"column":8,"endLine":212,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"prevPage","argumentNames":["this"]}

function game_Dialog_prevPage__P2578_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Dialog_prevPage__P2578, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }





function game_Dialog_nextPage__P2577(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Dialog__C2571_VT)) failedCast(r0);
    s.lastBrkId = 2434;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2434]) return breakpoint(s, 3, 2434, r0);
  case 3:
    s.tmp_1 = game_Dialog_hasNext__P2575_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.callLocIdx = 985; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2435;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2435]) return breakpoint(s, 5, 2435, r0);
  case 5:
    s.tmp_2 = r0 = s.arg0;
    r0 = s.tmp_2.fields["chunkIndex"];
    s.tmp_4 = r0;
    r0 = (s.tmp_4 + 1);
    s.tmp_3 = r0;
    r0 = (s.tmp_2).fields["chunkIndex"] = (s.tmp_3);
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Dialog_nextPage__P2577.info = {"start":6098,"length":105,"line":202,"column":8,"endLine":206,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"nextPage","argumentNames":["this"]}

function game_Dialog_nextPage__P2577_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Dialog_nextPage__P2577, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }





function game_Dialog_hasPrev__P2576(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Dialog__C2571_VT)) failedCast(r0);
    s.lastBrkId = 2431;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2431]) return breakpoint(s, 6, 2431, r0);
  case 6:
    r0 = s.arg0.fields["chunks"];
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = s.arg0.fields["chunks"];
    s.tmp_4 = r0;
    r0 = pxsim_Array__length(s.tmp_4);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 === 0);
  case 2:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_5);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2432;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2432]) return breakpoint(s, 7, 2432, r0);
  case 7:
    r0 = false;
    { step = 5; continue; }
  case 3:
  case 4:
    s.lastBrkId = 2433;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2433]) return breakpoint(s, 8, 2433, r0);
  case 8:
    r0 = s.arg0.fields["chunkIndex"];
    s.tmp_6 = r0;
    r0 = (s.tmp_6 > 0);
  case 5:
    return leave(s, r0)
  default: oops()
} } }
game_Dialog_hasPrev__P2576.info = {"start":5955,"length":133,"line":197,"column":8,"endLine":200,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"hasPrev","argumentNames":["this"]}

function game_Dialog_hasPrev__P2576_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Dialog_hasPrev__P2576, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  arg0: undefined,
} }





function game_Dialog_hasNext__P2575(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Dialog__C2571_VT)) failedCast(r0);
    s.lastBrkId = 2428;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2428]) return breakpoint(s, 6, 2428, r0);
  case 6:
    r0 = s.arg0.fields["chunks"];
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = s.arg0.fields["chunks"];
    s.tmp_4 = r0;
    r0 = pxsim_Array__length(s.tmp_4);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 === 0);
  case 2:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_5);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2429;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2429]) return breakpoint(s, 7, 2429, r0);
  case 7:
    r0 = false;
    { step = 5; continue; }
  case 3:
  case 4:
    s.lastBrkId = 2430;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2430]) return breakpoint(s, 8, 2430, r0);
  case 8:
    r0 = s.arg0.fields["chunkIndex"];
    s.tmp_6 = r0;
    r0 = s.arg0.fields["chunks"];
    s.tmp_9 = r0;
    r0 = pxsim_Array__length(s.tmp_9);
    s.tmp_8 = r0;
    r0 = (s.tmp_8 - 1);
    s.tmp_7 = r0;
    r0 = (s.tmp_6 < s.tmp_7);
  case 5:
    return leave(s, r0)
  default: oops()
} } }
game_Dialog_hasNext__P2575.info = {"start":5791,"length":154,"line":192,"column":8,"endLine":195,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"hasNext","argumentNames":["this"]}

function game_Dialog_hasNext__P2575_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Dialog_hasNext__P2575, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  arg0: undefined,
} }





function game_Dialog_constructor__P2574(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.arg5 = (s.lambdaArgs[5]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Dialog__C2571_VT)) failedCast(r0);
    s.lastBrkId = 2426;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2426]) return breakpoint(s, 1, 2426, r0);
  case 1:
    s.tmp_0 = game_BaseDialog_constructor__P2566_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.tmp_0.arg2 = s.arg2;
    s.tmp_0.arg3 = s.arg3;
    s.tmp_0.arg4 = s.arg4;
    s.tmp_0.arg5 = s.arg5;
    s.callLocIdx = 984; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 2427;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2427]) return breakpoint(s, 3, 2427, r0);
  case 3:
    r0 = (s.arg0).fields["chunkIndex"] = (0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Dialog_constructor__P2574.info = {"start":5588,"length":193,"line":186,"column":8,"endLine":190,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"inline","argumentNames":["this","width","height","frame","font","cursor"]}

function game_Dialog_constructor__P2574_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Dialog_constructor__P2574, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
  arg5: undefined,
} }





function controller_combos_attachCombo__P4023(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.s___18079 = undefined;
    s.c___18084 = undefined;
    s.move___18088 = undefined;
    s.unnamed1674___U3 = undefined;
    s.unnamed1675___U4 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3912;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3912]) return breakpoint(s, 8, 3912, r0);
  case 8:
    s.tmp_0 = controller_combos_init__P6627_mk(s);
    s.callLocIdx = 1831; s.pc = 9; return s.tmp_0;
  case 9:
    r0 = s.retval;
    s.lastBrkId = 3913;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3913]) return breakpoint(s, 10, 3913, r0);
  case 10:
    s.tmp_0 = controller_combos_getComboState__P6633_mk(s);
    s.callLocIdx = 1832; s.pc = 11; return s.tmp_0;
  case 11:
    r0 = s.retval;
    s.s___18079 = (r0);
    s.lastBrkId = 3914;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3914]) return breakpoint(s, 12, 3914, r0);
  case 12:
    r0 = pxsim_numops_toBoolDecr(s.arg0);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3915;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3915]) return breakpoint(s, 13, 3915, r0);
  case 13:
    { step = 7; continue; }
  case 1:
  case 2:
    s.lastBrkId = 3916;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3916]) return breakpoint(s, 14, 3916, r0);
  case 14:
    s.tmp_2 = controller_combos_toArray__P6631_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 1833; s.pc = 15; return s.tmp_2;
  case 15:
    r0 = s.retval;
    s.c___18084 = (r0);
    s.lastBrkId = 3917;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3917]) return breakpoint(s, 16, 3917, r0);
  case 16:
    s.move___18088 = (undefined);
    s.tmp_0 = if_combinations_1_mk(s);
    s.tmp_0.arg0 = s.s___18079;
    if (!s.tmp_0.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_0.arg0, "combinations");
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["combinations"];
      if (s.tmp_0.fn == null) { s.retval = s.tmp_0.arg0.fields["combinations"]; }
      else if (!s.tmp_0.fn.isGetter) { s.retval = bind(s.tmp_0); }
     else { s.callLocIdx = 1834; s.pc = 17; return s.tmp_0; }
    }
  case 17:
    r0 = s.retval;
    s.unnamed1674___U3 = (r0);
    s.unnamed1675___U4 = (0);
    s.lastBrkId = 3918;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3918]) return breakpoint(s, 18, 3918, r0);
  case 18:
  case 3:
    s.tmp_0 = r0 = s.unnamed1675___U4;
    r0 = pxsim_Array__length(s.unnamed1674___U3);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 6; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1674___U3, s.unnamed1675___U4);
    s.move___18088 = (r0);
    s.lastBrkId = 3919;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3919]) return breakpoint(s, 19, 3919, r0);
  case 19:
    s.tmp_3 = controller_combos_checkMove__P6630_mk(s);
    s.tmp_4 = if_c_1_mk(s);
    s.tmp_4.arg0 = s.move___18088;
    if (!s.tmp_4.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_4.arg0, "c");
    } else {
      s.tmp_4.fn = s.tmp_4.arg0.vtable.iface["c"];
      if (s.tmp_4.fn == null) { s.retval = s.tmp_4.arg0.fields["c"]; }
      else if (!s.tmp_4.fn.isGetter) { s.retval = bind(s.tmp_4); }
     else { s.callLocIdx = 1835; s.pc = 21; return s.tmp_4; }
    }
  case 21:
    r0 = s.retval;
    s.tmp_3.arg0 = r0;
    s.tmp_3.arg1 = s.c___18084;
    s.tmp_3.arg2 = true;
    s.callLocIdx = 1836; s.pc = 20; return s.tmp_3;
  case 20:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 3920;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3920]) return breakpoint(s, 22, 3920, r0);
  case 22:
    s.tmp_5 = if_h_2_mk(s);
    s.tmp_5.arg0 = s.move___18088;
    s.tmp_5.arg1 = s.arg1;
    if (!s.tmp_5.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapSetByString(s.tmp_5.arg0, "h", s.tmp_5.arg1);
    } else {
      s.tmp_5.fn = s.tmp_5.arg0.vtable.iface["set/h"];
      if (s.tmp_5.fn === null) { s.tmp_5.arg0.fields["h"] = s.tmp_5.arg1; }
      else if (s.tmp_5.fn === undefined) { failedCast(s.tmp_5.arg0) } 
     else { s.callLocIdx = 1837; s.pc = 23; return s.tmp_5; }
    }
  case 23:
    r0 = s.retval;
    s.lastBrkId = 3921;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3921]) return breakpoint(s, 24, 3921, r0);
  case 24:
    { step = 7; continue; }
  case 4:
  case 5:
    r0 = (s.unnamed1675___U4 + 1);
    s.unnamed1675___U4 = (r0);
    { step = 3; continue; }
  case 6:
    s.unnamed1674___U3 = (undefined);
    s.lastBrkId = 3922;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3922]) return breakpoint(s, 25, 3922, r0);
  case 25:
    s.tmp_0 = if_maxCombo_2_mk(s);
    s.tmp_0.arg0 = s.s___18079;
    s.tmp_1 = Math_max__P130_mk(s);
    r0 = pxsim_String_.length(s.arg0);
    s.tmp_1.arg0 = r0;
    s.tmp_2 = if_maxCombo_1_mk(s);
    s.tmp_2.arg0 = s.s___18079;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "maxCombo");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["maxCombo"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["maxCombo"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1838; s.pc = 28; return s.tmp_2; }
    }
  case 28:
    r0 = s.retval;
    s.tmp_1.arg1 = r0;
    s.callLocIdx = 1839; s.pc = 27; return s.tmp_1;
  case 27:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    if (!s.tmp_0.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapSetByString(s.tmp_0.arg0, "maxCombo", s.tmp_0.arg1);
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["set/maxCombo"];
      if (s.tmp_0.fn === null) { s.tmp_0.arg0.fields["maxCombo"] = s.tmp_0.arg1; }
      else if (s.tmp_0.fn === undefined) { failedCast(s.tmp_0.arg0) } 
     else { s.callLocIdx = 1840; s.pc = 26; return s.tmp_0; }
    }
  case 26:
    r0 = s.retval;
    s.lastBrkId = 3923;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3923]) return breakpoint(s, 29, 3923, r0);
  case 29:
    r0 = pxsim_pxtrt.mkMap();
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "c", s.c___18084);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "h", s.arg1);
    s.tmp_2 = if_combinations_1_mk(s);
    s.tmp_2.arg0 = s.s___18079;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "combinations");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["combinations"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["combinations"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1841; s.pc = 30; return s.tmp_2; }
    }
  case 30:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_Array__push(s.tmp_1, s.tmp_0);
  case 7:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller_combos_attachCombo__P4023.info = {"start":8121,"length":540,"line":273,"column":4,"endLine":294,"endColumn":5,"fileName":"pxt_modules/pxt-button-combos/combos.ts","functionName":"attachCombo","argumentNames":["combo","handler"]}

function controller_combos_attachCombo__P4023_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_combos_attachCombo__P4023, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  s___18079: undefined,
  c___18084: undefined,
  move___18088: undefined,
  unnamed1674___U3: undefined,
  unnamed1675___U4: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function controller_combos_getComboState__P6633(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 3924;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3924]) return breakpoint(s, 1, 3924, r0);
  case 1:
    s.tmp_0 = if_buttonComboState_1_mk(s);
    s.tmp_1 = scene_Scene_data__P2519_mk(s);
    s.tmp_2 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 1842; s.pc = 4; return s.tmp_2;
  case 4:
    r0 = s.retval;
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 1843; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    if (!s.tmp_0.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_0.arg0, "buttonComboState");
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["buttonComboState"];
      if (s.tmp_0.fn == null) { s.retval = s.tmp_0.arg0.fields["buttonComboState"]; }
      else if (!s.tmp_0.fn.isGetter) { s.retval = bind(s.tmp_0); }
     else { s.callLocIdx = 1844; s.pc = 2; return s.tmp_0; }
    }
  case 2:
    r0 = s.retval;
    return leave(s, r0)
  default: oops()
} } }
controller_combos_getComboState__P6633.info = {"start":11325,"length":104,"line":382,"column":4,"endLine":384,"endColumn":5,"fileName":"pxt_modules/pxt-button-combos/combos.ts","functionName":"getComboState","argumentNames":[]}

function controller_combos_getComboState__P6633_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_combos_getComboState__P6633, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
} }





function scene_Scene_data__P2519(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_Scene__C2496_VT)) failedCast(r0);
    s.lastBrkId = 2303;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2303]) return breakpoint(s, 1, 2303, r0);
  case 1:
    r0 = s.arg0.fields["_data"];
    return leaveAccessor(s, r0)
  default: oops()
} } }
scene_Scene_data__P2519.info = {"start":6655,"length":53,"line":182,"column":8,"endLine":184,"endColumn":9,"fileName":"pxt_modules/game/scene.ts","functionName":"data","argumentNames":["this"]}
scene_Scene_data__P2519.isGetter = true;

function scene_Scene_data__P2519_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Scene_data__P2519, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function controller_combos_toArray__P6631(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.output___18151 = undefined;
    s.combine___18153 = undefined;
    s.i___18154 = undefined;
    s.curr___18160 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3888;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3888]) return breakpoint(s, 9, 3888, r0);
  case 9:
    r0 = pxsim_Array__mk();
    s.output___18151 = (r0);
    s.lastBrkId = 3889;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3889]) return breakpoint(s, 10, 3889, r0);
  case 10:
    s.combine___18153 = (false);
    s.lastBrkId = 3890;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3890]) return breakpoint(s, 11, 3890, r0);
  case 11:
    s.i___18154 = (0);
    s.lastBrkId = 3891;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3891]) return breakpoint(s, 12, 3891, r0);
  case 12:
  case 1:
    s.lastBrkId = 3892;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3892]) return breakpoint(s, 13, 3892, r0);
  case 13:
    s.tmp_1 = r0 = s.i___18154;
    r0 = pxsim_String_.length(s.arg0);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 8; continue; }
    s.lastBrkId = 3893;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3893]) return breakpoint(s, 14, 3893, r0);
  case 14:
    s.tmp_3 = controller_combos_charToId__P6632_mk(s);
    r0 = pxsim_String_.charAt(s.arg0, s.i___18154);
    s.tmp_3.arg0 = r0;
    s.callLocIdx = 1830; s.pc = 15; return s.tmp_3;
  case 15:
    r0 = s.retval;
    s.curr___18160 = (r0);
    s.lastBrkId = 3894;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3894]) return breakpoint(s, 16, 3894, r0);
  case 16:
    r0 = (s.curr___18160 === -1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 3895;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3895]) return breakpoint(s, 17, 3895, r0);
  case 17:
    s.combine___18153 = (true);
    { step = 7; continue; }
  case 2:
    s.lastBrkId = 3896;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3896]) return breakpoint(s, 18, 3896, r0);
  case 18:
    r0 = pxsim_numops_toBoolDecr(s.curr___18160);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 3897;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3897]) return breakpoint(s, 19, 3897, r0);
  case 19:
    r0 = pxsim_numops_toBoolDecr(s.combine___18153);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 3898;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3898]) return breakpoint(s, 20, 3898, r0);
  case 20:
    s.tmp_0 = r0 = s.output___18151;
    r0 = pxsim_Array__length(s.output___18151);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - 1);
    s.tmp_1 = r0;
    r0 = pxsim_Array__length(s.output___18151);
    s.tmp_6 = r0;
    r0 = (s.tmp_6 - 1);
    s.tmp_5 = r0;
    r0 = pxsim_Array__getAt(s.tmp_0, s.tmp_5);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 | s.curr___18160);
    s.tmp_3 = r0;
    r0 = pxsim_Array_.setAt(s.tmp_0, s.tmp_1, s.tmp_3);
    s.lastBrkId = 3899;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3899]) return breakpoint(s, 21, 3899, r0);
  case 21:
    s.combine___18153 = (false);
    { step = 4; continue; }
  case 3:
    s.lastBrkId = 3900;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3900]) return breakpoint(s, 22, 3900, r0);
  case 22:
    r0 = pxsim_Array__push(s.output___18151, s.curr___18160);
  case 4:
  case 5:
  case 6:
  case 7:
    s.lastBrkId = 3901;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3901]) return breakpoint(s, 23, 3901, r0);
  case 23:
    r0 = (s.i___18154 + 1);
    s.i___18154 = (r0);
    { step = 1; continue; }
  case 8:
    s.lastBrkId = 3902;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3902]) return breakpoint(s, 24, 3902, r0);
  case 24:
    r0 = s.output___18151;
    return leave(s, r0)
  default: oops()
} } }
controller_combos_toArray__P6631.info = {"start":4257,"length":565,"line":153,"column":4,"endLine":172,"endColumn":5,"fileName":"pxt_modules/pxt-button-combos/combos.ts","functionName":"toArray","argumentNames":["combo"]}

function controller_combos_toArray__P6631_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_combos_toArray__P6631, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  output___18151: undefined,
  combine___18153: undefined,
  i___18154: undefined,
  curr___18160: undefined,
  arg0: undefined,
} }





function controller_combos_charToId__P6632(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3903;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3903]) return breakpoint(s, 20, 3903, r0);
  case 20:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_pxtcore.switch_eq("u", s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = pxsim_pxtcore.switch_eq("U", s.tmp_0);
    if (r0) { step = 2; continue; }
    r0 = pxsim_pxtcore.switch_eq("↑", s.tmp_0);
    if (r0) { step = 3; continue; }
    r0 = pxsim_pxtcore.switch_eq("d", s.tmp_0);
    if (r0) { step = 4; continue; }
    r0 = pxsim_pxtcore.switch_eq("D", s.tmp_0);
    if (r0) { step = 5; continue; }
    r0 = pxsim_pxtcore.switch_eq("↓", s.tmp_0);
    if (r0) { step = 6; continue; }
    r0 = pxsim_pxtcore.switch_eq("l", s.tmp_0);
    if (r0) { step = 7; continue; }
    r0 = pxsim_pxtcore.switch_eq("L", s.tmp_0);
    if (r0) { step = 8; continue; }
    r0 = pxsim_pxtcore.switch_eq("←", s.tmp_0);
    if (r0) { step = 9; continue; }
    r0 = pxsim_pxtcore.switch_eq("r", s.tmp_0);
    if (r0) { step = 10; continue; }
    r0 = pxsim_pxtcore.switch_eq("R", s.tmp_0);
    if (r0) { step = 11; continue; }
    r0 = pxsim_pxtcore.switch_eq("→", s.tmp_0);
    if (r0) { step = 12; continue; }
    r0 = pxsim_pxtcore.switch_eq("a", s.tmp_0);
    if (r0) { step = 13; continue; }
    r0 = pxsim_pxtcore.switch_eq("A", s.tmp_0);
    if (r0) { step = 14; continue; }
    r0 = pxsim_pxtcore.switch_eq("b", s.tmp_0);
    if (r0) { step = 15; continue; }
    r0 = pxsim_pxtcore.switch_eq("B", s.tmp_0);
    if (r0) { step = 16; continue; }
    r0 = pxsim_pxtcore.switch_eq("+", s.tmp_0);
    if (r0) { step = 17; continue; }
    r0 = s.tmp_0;
    { step = 18; continue; }
  case 1:
  case 2:
  case 3:
    s.lastBrkId = 3904;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3904]) return breakpoint(s, 21, 3904, r0);
  case 21:
    r0 = 1;
    { step = 19; continue; }
  case 4:
  case 5:
  case 6:
    s.lastBrkId = 3905;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3905]) return breakpoint(s, 22, 3905, r0);
  case 22:
    r0 = 2;
    { step = 19; continue; }
  case 7:
  case 8:
  case 9:
    s.lastBrkId = 3906;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3906]) return breakpoint(s, 23, 3906, r0);
  case 23:
    r0 = 4;
    { step = 19; continue; }
  case 10:
  case 11:
  case 12:
    s.lastBrkId = 3907;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3907]) return breakpoint(s, 24, 3907, r0);
  case 24:
    r0 = 8;
    { step = 19; continue; }
  case 13:
  case 14:
    s.lastBrkId = 3908;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3908]) return breakpoint(s, 25, 3908, r0);
  case 25:
    r0 = 16;
    { step = 19; continue; }
  case 15:
  case 16:
    s.lastBrkId = 3909;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3909]) return breakpoint(s, 26, 3909, r0);
  case 26:
    r0 = 32;
    { step = 19; continue; }
  case 17:
    s.lastBrkId = 3910;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3910]) return breakpoint(s, 27, 3910, r0);
  case 27:
    r0 = -1;
    { step = 19; continue; }
  case 18:
    s.lastBrkId = 3911;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3911]) return breakpoint(s, 28, 3911, r0);
  case 28:
    r0 = 0;
    { step = 19; continue; }
    r0 = undefined;
  case 19:
    return leave(s, r0)
  default: oops()
} } }
controller_combos_charToId__P6632.info = {"start":4828,"length":599,"line":174,"column":4,"endLine":193,"endColumn":5,"fileName":"pxt_modules/pxt-button-combos/combos.ts","functionName":"charToId","argumentNames":["letter"]}

function controller_combos_charToId__P6632_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_combos_charToId__P6632, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function controller_combos_checkMove__P6630(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.offset___18118 = undefined;
    s.i___18134 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3878;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3878]) return breakpoint(s, 12, 3878, r0);
  case 12:
    r0 = pxsim_Array__length(s.arg1);
    s.tmp_0 = r0;
    r0 = pxsim_Array__length(s.arg0);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 - s.tmp_1);
    s.offset___18118 = (r0);
    s.lastBrkId = 3879;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3879]) return breakpoint(s, 13, 3879, r0);
  case 13:
    r0 = (s.offset___18118 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 4; continue; }
  case 1:
    s.tmp_1 = r0 = s.arg2;
    r0 = pxsim_numops_toBool(s.tmp_1);
    if (r0) { step = 2; continue; }
    r0 = s.tmp_1;
    { step = 3; continue; }
  case 2:
    r0 = pxsim_Array__length(s.arg0);
    s.tmp_2 = r0;
    r0 = pxsim_Array__length(s.arg1);
    s.tmp_3 = r0;
    r0 = (s.tmp_2 != s.tmp_3);
  case 3:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    r0 = s.tmp_4;
  case 4:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_5);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 3880;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3880]) return breakpoint(s, 14, 3880, r0);
  case 14:
    r0 = false;
    { step = 11; continue; }
  case 5:
  case 6:
    s.lastBrkId = 3881;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3881]) return breakpoint(s, 15, 3881, r0);
  case 15:
    s.i___18134 = (0);
    s.lastBrkId = 3882;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3882]) return breakpoint(s, 16, 3882, r0);
  case 16:
  case 7:
    s.lastBrkId = 3883;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3883]) return breakpoint(s, 17, 3883, r0);
  case 17:
    s.tmp_1 = r0 = s.i___18134;
    r0 = pxsim_Array__length(s.arg0);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 10; continue; }
    s.lastBrkId = 3884;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3884]) return breakpoint(s, 18, 3884, r0);
  case 18:
    r0 = pxsim_Array__getAt(s.arg0, s.i___18134);
    s.tmp_4 = r0;
    s.tmp_6 = r0 = s.arg1;
    r0 = (s.i___18134 + s.offset___18118);
    s.tmp_7 = r0;
    r0 = pxsim_Array__getAt(s.tmp_6, s.tmp_7);
    s.tmp_5 = r0;
    r0 = (s.tmp_4 != s.tmp_5);
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 8; continue; }
    s.lastBrkId = 3885;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3885]) return breakpoint(s, 19, 3885, r0);
  case 19:
    r0 = false;
    { step = 11; continue; }
  case 8:
  case 9:
    s.lastBrkId = 3886;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3886]) return breakpoint(s, 20, 3886, r0);
  case 20:
    r0 = (s.i___18134 + 1);
    s.i___18134 = (r0);
    { step = 7; continue; }
  case 10:
    s.lastBrkId = 3887;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3887]) return breakpoint(s, 21, 3887, r0);
  case 21:
    r0 = true;
  case 11:
    return leave(s, r0)
  default: oops()
} } }
controller_combos_checkMove__P6630.info = {"start":3846,"length":405,"line":139,"column":4,"endLine":151,"endColumn":5,"fileName":"pxt_modules/pxt-button-combos/combos.ts","functionName":"checkMove","argumentNames":["move","actual","exact"]}

function controller_combos_checkMove__P6630_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_combos_checkMove__P6630, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  offset___18118: undefined,
  i___18134: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function controller_combos_init__P6627(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.comboState___18205 = undefined;
    s.lastBrkId = 3837;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3837]) return breakpoint(s, 4, 3837, r0);
  case 4:
    s.tmp_0 = controller_combos_getComboState__P6633_mk(s);
    s.callLocIdx = 1775; s.pc = 5; return s.tmp_0;
  case 5:
    r0 = s.retval;
    s.comboState___18205 = (r0);
    s.lastBrkId = 3838;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3838]) return breakpoint(s, 6, 3838, r0);
  case 6:
    r0 = pxsim_numops_toBoolDecr(s.comboState___18205);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3839;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3839]) return breakpoint(s, 7, 3839, r0);
  case 7:
    { step = 3; continue; }
  case 1:
  case 2:
    s.lastBrkId = 3840;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3840]) return breakpoint(s, 8, 3840, r0);
  case 8:
    r0 = pxsim_pxtrt.mkMap();
    s.tmp_0 = r0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "combinations", s.tmp_1);
    r0 = pxsim_Array__mk();
    s.tmp_2 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "currState", s.tmp_2);
    r0 = pxsim_Array__mk();
    s.tmp_3 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "state", s.tmp_3);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "maxCombo", 0);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "extendedCombos", false);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "timeout", 0);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "countAsOne", 60);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "triggerOn", 0);
    s.tmp_5 = game_runtime__P2630_mk(s);
    s.callLocIdx = 1776; s.pc = 9; return s.tmp_5;
  case 9:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "lastPressed", s.tmp_4);
    s.tmp_6 = controller_combos_setComboState__P6634_mk(s);
    s.tmp_6.arg0 = s.tmp_0;
    s.callLocIdx = 1777; s.pc = 10; return s.tmp_6;
  case 10:
    r0 = s.retval;
    s.lastBrkId = 3841;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3841]) return breakpoint(s, 11, 3841, r0);
  case 11:
    s.tmp_0 = game_onUpdate__P2628_mk(s);
    s.tmp_0.arg0 = controller_combos_init_inline__P18216;
    s.callLocIdx = 1811; s.pc = 12; return s.tmp_0;
  case 12:
    r0 = s.retval;
  case 3:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller_combos_init__P6627.info = {"start":1039,"length":1950,"line":49,"column":4,"endLine":106,"endColumn":5,"fileName":"pxt_modules/pxt-button-combos/combos.ts","functionName":"init","argumentNames":[]}

function controller_combos_init__P6627_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_combos_init__P6627, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  comboState___18205: undefined,
} }





function controller_combos_init_inline__P18216(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.s___18217 = undefined;
    s.newButtonPressed___18252 = undefined;
    s.pressed___18253 = undefined;
    s.lastBrkId = 3842;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3842]) return breakpoint(s, 23, 3842, r0);
  case 23:
    s.tmp_0 = controller_combos_getComboState__P6633_mk(s);
    s.callLocIdx = 1778; s.pc = 24; return s.tmp_0;
  case 24:
    r0 = s.retval;
    s.s___18217 = (r0);
    s.lastBrkId = 3843;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3843]) return breakpoint(s, 25, 3843, r0);
  case 25:
    s.tmp_2 = if_timeout_1_mk(s);
    s.tmp_2.arg0 = s.s___18217;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "timeout");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["timeout"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["timeout"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1779; s.pc = 26; return s.tmp_2; }
    }
  case 26:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    s.tmp_5 = game_runtime__P2630_mk(s);
    s.callLocIdx = 1780; s.pc = 27; return s.tmp_5;
  case 27:
    r0 = s.retval;
    s.tmp_4 = r0;
    s.tmp_7 = if_lastPressed_1_mk(s);
    s.tmp_7.arg0 = s.s___18217;
    if (!s.tmp_7.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_7.arg0, "lastPressed");
    } else {
      s.tmp_7.fn = s.tmp_7.arg0.vtable.iface["lastPressed"];
      if (s.tmp_7.fn == null) { s.retval = s.tmp_7.arg0.fields["lastPressed"]; }
      else if (!s.tmp_7.fn.isGetter) { s.retval = bind(s.tmp_7); }
     else { s.callLocIdx = 1781; s.pc = 28; return s.tmp_7; }
    }
  case 28:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = (s.tmp_4 - s.tmp_6);
    s.tmp_3 = r0;
    s.tmp_9 = if_timeout_1_mk(s);
    s.tmp_9.arg0 = s.s___18217;
    if (!s.tmp_9.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_9.arg0, "timeout");
    } else {
      s.tmp_9.fn = s.tmp_9.arg0.vtable.iface["timeout"];
      if (s.tmp_9.fn == null) { s.retval = s.tmp_9.arg0.fields["timeout"]; }
      else if (!s.tmp_9.fn.isGetter) { s.retval = bind(s.tmp_9); }
     else { s.callLocIdx = 1782; s.pc = 29; return s.tmp_9; }
    }
  case 29:
    r0 = s.retval;
    s.tmp_8 = r0;
    r0 = (s.tmp_3 > s.tmp_8);
  case 2:
    // jmp value (already in r0)
    s.tmp_10 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_10);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 3844;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3844]) return breakpoint(s, 30, 3844, r0);
  case 30:
    s.tmp_13 = if_triggerOn_1_mk(s);
    s.tmp_13.arg0 = s.s___18217;
    if (!s.tmp_13.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_13.arg0, "triggerOn");
    } else {
      s.tmp_13.fn = s.tmp_13.arg0.vtable.iface["triggerOn"];
      if (s.tmp_13.fn == null) { s.retval = s.tmp_13.arg0.fields["triggerOn"]; }
      else if (!s.tmp_13.fn.isGetter) { s.retval = bind(s.tmp_13); }
     else { s.callLocIdx = 1783; s.pc = 31; return s.tmp_13; }
    }
  case 31:
    r0 = s.retval;
    s.tmp_12 = r0;
    r0 = (s.tmp_12 === 2);
    s.tmp_11 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_11);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 3845;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3845]) return breakpoint(s, 32, 3845, r0);
  case 32:
    s.tmp_14 = controller_combos_inputMove__P6628_mk(s);
    s.callLocIdx = 1784; s.pc = 33; return s.tmp_14;
  case 33:
    r0 = s.retval;
  case 3:
  case 4:
    s.lastBrkId = 3846;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3846]) return breakpoint(s, 34, 3846, r0);
  case 34:
    s.tmp_0 = if_state_2_mk(s);
    s.tmp_0.arg0 = s.s___18217;
    r0 = pxsim_Array__mk();
    s.tmp_0.arg1 = r0;
    if (!s.tmp_0.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapSetByString(s.tmp_0.arg0, "state", s.tmp_0.arg1);
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["set/state"];
      if (s.tmp_0.fn === null) { s.tmp_0.arg0.fields["state"] = s.tmp_0.arg1; }
      else if (s.tmp_0.fn === undefined) { failedCast(s.tmp_0.arg0) } 
     else { s.callLocIdx = 1785; s.pc = 35; return s.tmp_0; }
    }
  case 35:
    r0 = s.retval;
  case 5:
  case 6:
    s.lastBrkId = 3847;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3847]) return breakpoint(s, 36, 3847, r0);
  case 36:
    s.tmp_2 = if_triggerOn_1_mk(s);
    s.tmp_2.arg0 = s.s___18217;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "triggerOn");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["triggerOn"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["triggerOn"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1786; s.pc = 37; return s.tmp_2; }
    }
  case 37:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 === 1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 7; continue; }
    r0 = s.tmp_0;
    { step = 8; continue; }
  case 7:
    s.tmp_3 = controller_Button__C1971_v0_1_mk(s);
    s.tmp_3.arg0 = globals.menu___1911;
    if (!checkSubtype(s.tmp_3.arg0, controller_Button__C1971_VT)) failedCast(s.tmp_3.arg0);
    s.tmp_3.fn = s.tmp_3.arg0.vtable.methods.isPressed;
    s.pc = 38; return s.tmp_3;
  case 38:
    r0 = s.retval;
  case 8:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 3848;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3848]) return breakpoint(s, 39, 3848, r0);
  case 39:
    s.tmp_5 = controller_combos_inputMove__P6628_mk(s);
    s.callLocIdx = 1787; s.pc = 40; return s.tmp_5;
  case 40:
    r0 = s.retval;
  case 9:
  case 10:
    s.lastBrkId = 3849;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3849]) return breakpoint(s, 41, 3849, r0);
  case 41:
    s.newButtonPressed___18252 = (false);
    s.lastBrkId = 3850;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3850]) return breakpoint(s, 42, 3850, r0);
  case 42:
    s.tmp_5 = controller_combos_checkButton__P6629_mk(s);
    s.tmp_5.arg0 = globals.up___1908;
    s.tmp_5.arg1 = 1;
    s.callLocIdx = 1788; s.pc = 43; return s.tmp_5;
  case 43:
    r0 = s.retval;
    s.tmp_4 = r0;
    s.tmp_7 = controller_combos_checkButton__P6629_mk(s);
    s.tmp_7.arg0 = globals.down___1910;
    s.tmp_7.arg1 = 2;
    s.callLocIdx = 1789; s.pc = 44; return s.tmp_7;
  case 44:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = (s.tmp_4 | s.tmp_6);
    s.tmp_3 = r0;
    s.tmp_9 = controller_combos_checkButton__P6629_mk(s);
    s.tmp_9.arg0 = globals.left___1907;
    s.tmp_9.arg1 = 4;
    s.callLocIdx = 1790; s.pc = 45; return s.tmp_9;
  case 45:
    r0 = s.retval;
    s.tmp_8 = r0;
    r0 = (s.tmp_3 | s.tmp_8);
    s.tmp_2 = r0;
    s.tmp_11 = controller_combos_checkButton__P6629_mk(s);
    s.tmp_11.arg0 = globals.right___1909;
    s.tmp_11.arg1 = 8;
    s.callLocIdx = 1791; s.pc = 46; return s.tmp_11;
  case 46:
    r0 = s.retval;
    s.tmp_10 = r0;
    r0 = (s.tmp_2 | s.tmp_10);
    s.tmp_1 = r0;
    s.tmp_13 = controller_combos_checkButton__P6629_mk(s);
    s.tmp_13.arg0 = globals.A___1905;
    s.tmp_13.arg1 = 16;
    s.callLocIdx = 1792; s.pc = 47; return s.tmp_13;
  case 47:
    r0 = s.retval;
    s.tmp_12 = r0;
    r0 = (s.tmp_1 | s.tmp_12);
    s.tmp_0 = r0;
    s.tmp_15 = controller_combos_checkButton__P6629_mk(s);
    s.tmp_15.arg0 = globals.B___1906;
    s.tmp_15.arg1 = 32;
    s.callLocIdx = 1793; s.pc = 48; return s.tmp_15;
  case 48:
    r0 = s.retval;
    s.tmp_14 = r0;
    r0 = (s.tmp_0 | s.tmp_14);
    s.pressed___18253 = (r0);
    s.lastBrkId = 3851;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3851]) return breakpoint(s, 49, 3851, r0);
  case 49:
    r0 = pxsim_numops_toBoolDecr(s.pressed___18253);
    if (!r0) { step = 15; continue; }
    s.lastBrkId = 3852;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3852]) return breakpoint(s, 50, 3852, r0);
  case 50:
    s.tmp_3 = game_runtime__P2630_mk(s);
    s.callLocIdx = 1794; s.pc = 51; return s.tmp_3;
  case 51:
    r0 = s.retval;
    s.tmp_2 = r0;
    s.tmp_5 = if_lastPressed_1_mk(s);
    s.tmp_5.arg0 = s.s___18217;
    if (!s.tmp_5.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_5.arg0, "lastPressed");
    } else {
      s.tmp_5.fn = s.tmp_5.arg0.vtable.iface["lastPressed"];
      if (s.tmp_5.fn == null) { s.retval = s.tmp_5.arg0.fields["lastPressed"]; }
      else if (!s.tmp_5.fn.isGetter) { s.retval = bind(s.tmp_5); }
     else { s.callLocIdx = 1795; s.pc = 52; return s.tmp_5; }
    }
  case 52:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = (s.tmp_2 - s.tmp_4);
    s.tmp_1 = r0;
    s.tmp_7 = if_countAsOne_1_mk(s);
    s.tmp_7.arg0 = s.s___18217;
    if (!s.tmp_7.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_7.arg0, "countAsOne");
    } else {
      s.tmp_7.fn = s.tmp_7.arg0.vtable.iface["countAsOne"];
      if (s.tmp_7.fn == null) { s.retval = s.tmp_7.arg0.fields["countAsOne"]; }
      else if (!s.tmp_7.fn.isGetter) { s.retval = bind(s.tmp_7); }
     else { s.callLocIdx = 1796; s.pc = 53; return s.tmp_7; }
    }
  case 53:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = (s.tmp_1 <= s.tmp_6);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 13; continue; }
    s.lastBrkId = 3853;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3853]) return breakpoint(s, 54, 3853, r0);
  case 54:
    s.tmp_13 = if_state_1_mk(s);
    s.tmp_13.arg0 = s.s___18217;
    if (!s.tmp_13.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_13.arg0, "state");
    } else {
      s.tmp_13.fn = s.tmp_13.arg0.vtable.iface["state"];
      if (s.tmp_13.fn == null) { s.retval = s.tmp_13.arg0.fields["state"]; }
      else if (!s.tmp_13.fn.isGetter) { s.retval = bind(s.tmp_13); }
     else { s.callLocIdx = 1797; s.pc = 55; return s.tmp_13; }
    }
  case 55:
    r0 = s.retval;
    s.tmp_12 = r0;
    s.tmp_17 = if_state_1_mk(s);
    s.tmp_17.arg0 = s.s___18217;
    if (!s.tmp_17.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_17.arg0, "state");
    } else {
      s.tmp_17.fn = s.tmp_17.arg0.vtable.iface["state"];
      if (s.tmp_17.fn == null) { s.retval = s.tmp_17.arg0.fields["state"]; }
      else if (!s.tmp_17.fn.isGetter) { s.retval = bind(s.tmp_17); }
     else { s.callLocIdx = 1798; s.pc = 56; return s.tmp_17; }
    }
  case 56:
    r0 = s.retval;
    s.tmp_16 = r0;
    r0 = pxsim_Array__length(s.tmp_16);
    s.tmp_15 = r0;
    r0 = (s.tmp_15 - 1);
    s.tmp_14 = r0;
    r0 = pxsim_Array__getAt(s.tmp_12, s.tmp_14);
    s.tmp_11 = r0;
    r0 = (s.tmp_11 & s.pressed___18253);
    s.tmp_10 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_10);
    s.tmp_9 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_9);
    s.tmp_8 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_8);
    if (!r0) { step = 11; continue; }
    s.lastBrkId = 3854;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3854]) return breakpoint(s, 57, 3854, r0);
  case 57:
    s.tmp_19 = if_state_1_mk(s);
    s.tmp_19.arg0 = s.s___18217;
    if (!s.tmp_19.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_19.arg0, "state");
    } else {
      s.tmp_19.fn = s.tmp_19.arg0.vtable.iface["state"];
      if (s.tmp_19.fn == null) { s.retval = s.tmp_19.arg0.fields["state"]; }
      else if (!s.tmp_19.fn.isGetter) { s.retval = bind(s.tmp_19); }
     else { s.callLocIdx = 1799; s.pc = 58; return s.tmp_19; }
    }
  case 58:
    r0 = s.retval;
    s.tmp_18 = r0;
    s.tmp_23 = if_state_1_mk(s);
    s.tmp_23.arg0 = s.s___18217;
    if (!s.tmp_23.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_23.arg0, "state");
    } else {
      s.tmp_23.fn = s.tmp_23.arg0.vtable.iface["state"];
      if (s.tmp_23.fn == null) { s.retval = s.tmp_23.arg0.fields["state"]; }
      else if (!s.tmp_23.fn.isGetter) { s.retval = bind(s.tmp_23); }
     else { s.callLocIdx = 1801; s.pc = 59; return s.tmp_23; }
    }
  case 59:
    r0 = s.retval;
    s.tmp_22 = r0;
    r0 = pxsim_Array__length(s.tmp_22);
    s.tmp_21 = r0;
    r0 = (s.tmp_21 - 1);
    s.tmp_20 = r0;
    s.tmp_29 = if_state_1_mk(s);
    s.tmp_29.arg0 = s.s___18217;
    if (!s.tmp_29.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_29.arg0, "state");
    } else {
      s.tmp_29.fn = s.tmp_29.arg0.vtable.iface["state"];
      if (s.tmp_29.fn == null) { s.retval = s.tmp_29.arg0.fields["state"]; }
      else if (!s.tmp_29.fn.isGetter) { s.retval = bind(s.tmp_29); }
     else { s.callLocIdx = 1800; s.pc = 60; return s.tmp_29; }
    }
  case 60:
    r0 = s.retval;
    s.tmp_28 = r0;
    r0 = pxsim_Array__length(s.tmp_28);
    s.tmp_27 = r0;
    r0 = (s.tmp_27 - 1);
    s.tmp_26 = r0;
    r0 = pxsim_Array__getAt(s.tmp_18, s.tmp_26);
    s.tmp_25 = r0;
    r0 = (s.tmp_25 | s.pressed___18253);
    s.tmp_24 = r0;
    r0 = pxsim_Array_.setAt(s.tmp_18, s.tmp_20, s.tmp_24);
    s.lastBrkId = 3855;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3855]) return breakpoint(s, 61, 3855, r0);
  case 61:
    s.newButtonPressed___18252 = (true);
  case 11:
  case 12:
    { step = 14; continue; }
  case 13:
    s.lastBrkId = 3856;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3856]) return breakpoint(s, 62, 3856, r0);
  case 62:
    s.tmp_1 = if_state_1_mk(s);
    s.tmp_1.arg0 = s.s___18217;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "state");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["state"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["state"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 1802; s.pc = 63; return s.tmp_1; }
    }
  case 63:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_Array__push(s.tmp_0, s.pressed___18253);
    s.lastBrkId = 3857;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3857]) return breakpoint(s, 64, 3857, r0);
  case 64:
    s.tmp_0 = if_lastPressed_2_mk(s);
    s.tmp_0.arg0 = s.s___18217;
    s.tmp_1 = game_runtime__P2630_mk(s);
    s.callLocIdx = 1803; s.pc = 66; return s.tmp_1;
  case 66:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    if (!s.tmp_0.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapSetByString(s.tmp_0.arg0, "lastPressed", s.tmp_0.arg1);
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["set/lastPressed"];
      if (s.tmp_0.fn === null) { s.tmp_0.arg0.fields["lastPressed"] = s.tmp_0.arg1; }
      else if (s.tmp_0.fn === undefined) { failedCast(s.tmp_0.arg0) } 
     else { s.callLocIdx = 1804; s.pc = 65; return s.tmp_0; }
    }
  case 65:
    r0 = s.retval;
    s.lastBrkId = 3858;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3858]) return breakpoint(s, 67, 3858, r0);
  case 67:
    s.newButtonPressed___18252 = (true);
  case 14:
  case 15:
  case 16:
    s.lastBrkId = 3859;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3859]) return breakpoint(s, 68, 3859, r0);
  case 68:
    s.tmp_3 = if_state_1_mk(s);
    s.tmp_3.arg0 = s.s___18217;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "state");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["state"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["state"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1805; s.pc = 69; return s.tmp_3; }
    }
  case 69:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_Array__length(s.tmp_2);
    s.tmp_1 = r0;
    s.tmp_5 = if_maxCombo_1_mk(s);
    s.tmp_5.arg0 = s.s___18217;
    if (!s.tmp_5.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_5.arg0, "maxCombo");
    } else {
      s.tmp_5.fn = s.tmp_5.arg0.vtable.iface["maxCombo"];
      if (s.tmp_5.fn == null) { s.retval = s.tmp_5.arg0.fields["maxCombo"]; }
      else if (!s.tmp_5.fn.isGetter) { s.retval = bind(s.tmp_5); }
     else { s.callLocIdx = 1806; s.pc = 70; return s.tmp_5; }
    }
  case 70:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = (s.tmp_1 > s.tmp_4);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 17; continue; }
    s.lastBrkId = 3860;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3860]) return breakpoint(s, 71, 3860, r0);
  case 71:
    s.tmp_6 = helpers_arrayShift__P102_mk(s);
    s.tmp_7 = if_state_1_mk(s);
    s.tmp_7.arg0 = s.s___18217;
    if (!s.tmp_7.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_7.arg0, "state");
    } else {
      s.tmp_7.fn = s.tmp_7.arg0.vtable.iface["state"];
      if (s.tmp_7.fn == null) { s.retval = s.tmp_7.arg0.fields["state"]; }
      else if (!s.tmp_7.fn.isGetter) { s.retval = bind(s.tmp_7); }
     else { s.callLocIdx = 1807; s.pc = 73; return s.tmp_7; }
    }
  case 73:
    r0 = s.retval;
    s.tmp_6.arg0 = r0;
    s.callLocIdx = 1808; s.pc = 72; return s.tmp_6;
  case 72:
    r0 = s.retval;
  case 17:
  case 18:
    s.lastBrkId = 3861;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3861]) return breakpoint(s, 74, 3861, r0);
  case 74:
    s.tmp_2 = if_triggerOn_1_mk(s);
    s.tmp_2.arg0 = s.s___18217;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "triggerOn");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["triggerOn"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["triggerOn"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1809; s.pc = 75; return s.tmp_2; }
    }
  case 75:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 === 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 19; continue; }
    r0 = s.tmp_0;
    { step = 20; continue; }
  case 19:
    r0 = s.newButtonPressed___18252;
  case 20:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 21; continue; }
    s.lastBrkId = 3862;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3862]) return breakpoint(s, 76, 3862, r0);
  case 76:
    s.tmp_4 = controller_combos_inputMove__P6628_mk(s);
    s.callLocIdx = 1810; s.pc = 77; return s.tmp_4;
  case 77:
    r0 = s.retval;
  case 21:
  case 22:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller_combos_init_inline__P18216.info = {"start":1472,"length":1510,"line":65,"column":22,"endLine":105,"endColumn":9,"fileName":"pxt_modules/pxt-button-combos/combos.ts","functionName":"inline","argumentNames":[]}

function controller_combos_init_inline__P18216_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_combos_init_inline__P18216, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  tmp_12: undefined,
  tmp_13: undefined,
  tmp_14: undefined,
  tmp_15: undefined,
  tmp_16: undefined,
  tmp_17: undefined,
  tmp_18: undefined,
  tmp_19: undefined,
  tmp_20: undefined,
  tmp_21: undefined,
  tmp_22: undefined,
  tmp_23: undefined,
  tmp_24: undefined,
  tmp_25: undefined,
  tmp_26: undefined,
  tmp_27: undefined,
  tmp_28: undefined,
  tmp_29: undefined,
  s___18217: undefined,
  newButtonPressed___18252: undefined,
  pressed___18253: undefined,
} }





function controller_combos_setComboState__P6634(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3925;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3925]) return breakpoint(s, 1, 3925, r0);
  case 1:
    s.tmp_0 = if_buttonComboState_2_mk(s);
    s.tmp_1 = scene_Scene_data__P2519_mk(s);
    s.tmp_2 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 1845; s.pc = 4; return s.tmp_2;
  case 4:
    r0 = s.retval;
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 1846; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = s.arg0;
    if (!s.tmp_0.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapSetByString(s.tmp_0.arg0, "buttonComboState", s.tmp_0.arg1);
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["set/buttonComboState"];
      if (s.tmp_0.fn === null) { s.tmp_0.arg0.fields["buttonComboState"] = s.tmp_0.arg1; }
      else if (s.tmp_0.fn === undefined) { failedCast(s.tmp_0.arg0) } 
     else { s.callLocIdx = 1847; s.pc = 2; return s.tmp_0; }
    }
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller_combos_setComboState__P6634.info = {"start":11435,"length":108,"line":386,"column":4,"endLine":388,"endColumn":5,"fileName":"pxt_modules/pxt-button-combos/combos.ts","functionName":"setComboState","argumentNames":["state"]}

function controller_combos_setComboState__P6634_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_combos_setComboState__P6634, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function controller_combos_checkButton__P6629(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.s___18337 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3871;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3871]) return breakpoint(s, 6, 3871, r0);
  case 6:
    s.tmp_0 = controller_combos_getComboState__P6633_mk(s);
    s.callLocIdx = 1826; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    s.s___18337 = (r0);
    s.lastBrkId = 3872;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3872]) return breakpoint(s, 8, 3872, r0);
  case 8:
    s.tmp_1 = controller_Button__C1971_v0_1_mk(s);
    s.tmp_1.arg0 = s.arg0;
    if (!checkSubtype(s.tmp_1.arg0, controller_Button__C1971_VT)) failedCast(s.tmp_1.arg0);
    s.tmp_1.fn = s.tmp_1.arg0.vtable.methods.isPressed;
    s.pc = 9; return s.tmp_1;
  case 9:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 3873;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3873]) return breakpoint(s, 10, 3873, r0);
  case 10:
    s.tmp_6 = if_currState_1_mk(s);
    s.tmp_6.arg0 = s.s___18337;
    if (!s.tmp_6.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_6.arg0, "currState");
    } else {
      s.tmp_6.fn = s.tmp_6.arg0.vtable.iface["currState"];
      if (s.tmp_6.fn == null) { s.retval = s.tmp_6.arg0.fields["currState"]; }
      else if (!s.tmp_6.fn.isGetter) { s.retval = bind(s.tmp_6); }
     else { s.callLocIdx = 1827; s.pc = 11; return s.tmp_6; }
    }
  case 11:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = s.arg0.fields["id"];
    s.tmp_7 = r0;
    r0 = pxsim_Array__getAt(s.tmp_5, s.tmp_7);
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    s.tmp_3 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3874;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3874]) return breakpoint(s, 12, 3874, r0);
  case 12:
    s.tmp_9 = if_currState_1_mk(s);
    s.tmp_9.arg0 = s.s___18337;
    if (!s.tmp_9.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_9.arg0, "currState");
    } else {
      s.tmp_9.fn = s.tmp_9.arg0.vtable.iface["currState"];
      if (s.tmp_9.fn == null) { s.retval = s.tmp_9.arg0.fields["currState"]; }
      else if (!s.tmp_9.fn.isGetter) { s.retval = bind(s.tmp_9); }
     else { s.callLocIdx = 1828; s.pc = 13; return s.tmp_9; }
    }
  case 13:
    r0 = s.retval;
    s.tmp_8 = r0;
    r0 = s.arg0.fields["id"];
    s.tmp_10 = r0;
    r0 = pxsim_Array_.setAt(s.tmp_8, s.tmp_10, true);
    s.lastBrkId = 3875;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3875]) return breakpoint(s, 14, 3875, r0);
  case 14:
    r0 = s.arg1;
    { step = 5; continue; }
  case 1:
  case 2:
    { step = 4; continue; }
  case 3:
    s.lastBrkId = 3876;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3876]) return breakpoint(s, 15, 3876, r0);
  case 15:
    s.tmp_1 = if_currState_1_mk(s);
    s.tmp_1.arg0 = s.s___18337;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "currState");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["currState"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["currState"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 1829; s.pc = 16; return s.tmp_1; }
    }
  case 16:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = s.arg0.fields["id"];
    s.tmp_2 = r0;
    r0 = pxsim_Array_.setAt(s.tmp_0, s.tmp_2, false);
  case 4:
    s.lastBrkId = 3877;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3877]) return breakpoint(s, 17, 3877, r0);
  case 17:
    r0 = 0;
  case 5:
    return leave(s, r0)
  default: oops()
} } }
controller_combos_checkButton__P6629.info = {"start":3501,"length":339,"line":126,"column":4,"endLine":137,"endColumn":5,"fileName":"pxt_modules/pxt-button-combos/combos.ts","functionName":"checkButton","argumentNames":["b","id"]}

function controller_combos_checkButton__P6629_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_combos_checkButton__P6629, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  s___18337: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function controller_combos_inputMove__P6628(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.s___18360 = undefined;
    s.validMoves___18363 = undefined;
    s.move___18395 = undefined;
    s.lastBrkId = 3863;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3863]) return breakpoint(s, 5, 3863, r0);
  case 5:
    s.tmp_0 = controller_combos_getComboState__P6633_mk(s);
    s.callLocIdx = 1812; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    s.s___18360 = (r0);
    s.lastBrkId = 3864;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3864]) return breakpoint(s, 7, 3864, r0);
  case 7:
    r0 = pxsim_pxtcore_mkAction(1, sort_inline__P18368);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.s___18360);
    s.tmp_1 = helpers_arraySort__P105_mk(s);
    s.tmp_2 = helpers_arrayFilter__P110_mk(s);
    s.tmp_3 = if_combinations_1_mk(s);
    s.tmp_3.arg0 = s.s___18360;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "combinations");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["combinations"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["combinations"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1813; s.pc = 10; return s.tmp_3; }
    }
  case 10:
    r0 = s.retval;
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = s.tmp_0;
    s.callLocIdx = 1817; s.pc = 9; return s.tmp_2;
  case 9:
    r0 = s.retval;
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = validMoves_inline__P18376;
    s.callLocIdx = 1820; s.pc = 8; return s.tmp_1;
  case 8:
    r0 = s.retval;
    s.validMoves___18363 = (r0);
    s.lastBrkId = 3865;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3865]) return breakpoint(s, 11, 3865, r0);
  case 11:
    s.tmp_1 = if_extendedCombos_1_mk(s);
    s.tmp_1.arg0 = s.s___18360;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "extendedCombos");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["extendedCombos"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["extendedCombos"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 1821; s.pc = 12; return s.tmp_1; }
    }
  case 12:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3866;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3866]) return breakpoint(s, 13, 3866, r0);
  case 13:
    s.tmp_2 = helpers_arrayForEach__P109_mk(s);
    s.tmp_2.arg0 = s.validMoves___18363;
    s.tmp_2.arg1 = controller_combos_inputMove_inline__P18391;
    s.callLocIdx = 1823; s.pc = 14; return s.tmp_2;
  case 14:
    r0 = s.retval;
    { step = 4; continue; }
  case 1:
    s.lastBrkId = 3867;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3867]) return breakpoint(s, 15, 3867, r0);
  case 15:
    r0 = pxsim_Array__getAt(s.validMoves___18363, 0);
    s.move___18395 = (r0);
    s.lastBrkId = 3868;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3868]) return breakpoint(s, 16, 3868, r0);
  case 16:
    r0 = pxsim_numops_toBoolDecr(s.move___18395);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 3869;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3869]) return breakpoint(s, 17, 3869, r0);
  case 17:
    s.tmp_0 = if_state_2_mk(s);
    s.tmp_0.arg0 = s.s___18360;
    r0 = pxsim_Array__mk();
    s.tmp_0.arg1 = r0;
    if (!s.tmp_0.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapSetByString(s.tmp_0.arg0, "state", s.tmp_0.arg1);
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["set/state"];
      if (s.tmp_0.fn === null) { s.tmp_0.arg0.fields["state"] = s.tmp_0.arg1; }
      else if (s.tmp_0.fn === undefined) { failedCast(s.tmp_0.arg0) } 
     else { s.callLocIdx = 1824; s.pc = 18; return s.tmp_0; }
    }
  case 18:
    r0 = s.retval;
    s.lastBrkId = 3870;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3870]) return breakpoint(s, 19, 3870, r0);
  case 19:
    s.tmp_0 = if_h_1_mk(s);
    s.tmp_0.arg0 = s.move___18395;
    if (!s.tmp_0.arg0.vtable.iface) {
      setupLambda(s.tmp_0, pxsim_pxtrt.mapGetByString(s.tmp_0.arg0, "h"), 1);
      s.callLocIdx = 1825; s.pc = 20; return s.tmp_0;
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["h"];
      if (s.tmp_0.fn == null) { setupLambda(s.tmp_0, s.tmp_0.arg0.fields["h"], 1); s.callLocIdx = 1825; s.pc = 20; return s.tmp_0; }
      else if (s.tmp_0.fn.isGetter) { s.tmp_0.stage2Call = true; s.callLocIdx = 1825; s.pc = 20; return s.tmp_0;; }
     else { s.callLocIdx = 1825; s.pc = 20; return s.tmp_0; }
    }
  case 20:
    r0 = s.retval;
  case 2:
  case 3:
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller_combos_inputMove__P6628.info = {"start":2995,"length":500,"line":108,"column":4,"endLine":124,"endColumn":5,"fileName":"pxt_modules/pxt-button-combos/combos.ts","functionName":"inputMove","argumentNames":[]}

function controller_combos_inputMove__P6628_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_combos_inputMove__P6628, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  s___18360: undefined,
  validMoves___18363: undefined,
  move___18395: undefined,
} }





function sort_inline__P18368(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = controller_combos_checkMove__P6630_mk(s);
    s.tmp_1 = if_c_1_mk(s);
    s.tmp_1.arg0 = s.arg0;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "c");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["c"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["c"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 1814; s.pc = 2; return s.tmp_1; }
    }
  case 2:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.tmp_2 = if_state_1_mk(s);
    s.tmp_2.arg0 = s.caps[0];
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "state");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["state"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["state"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1815; s.pc = 3; return s.tmp_2; }
    }
  case 3:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = undefined;
    s.callLocIdx = 1816; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    return leave(s, r0)
  default: oops()
} } }
sort_inline__P18368.info = {"start":3128,"length":34,"line":111,"column":20,"endLine":111,"endColumn":54,"fileName":"pxt_modules/pxt-button-combos/combos.ts","functionName":"inline","argumentNames":["move"]}

function sort_inline__P18368_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sort_inline__P18368, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function validMoves_inline__P18376(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.tmp_2 = if_c_1_mk(s);
    s.tmp_2.arg0 = s.arg1;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "c");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["c"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["c"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1818; s.pc = 1; return s.tmp_2; }
    }
  case 1:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_Array__length(s.tmp_1);
    s.tmp_0 = r0;
    s.tmp_5 = if_c_1_mk(s);
    s.tmp_5.arg0 = s.arg0;
    if (!s.tmp_5.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_5.arg0, "c");
    } else {
      s.tmp_5.fn = s.tmp_5.arg0.vtable.iface["c"];
      if (s.tmp_5.fn == null) { s.retval = s.tmp_5.arg0.fields["c"]; }
      else if (!s.tmp_5.fn.isGetter) { s.retval = bind(s.tmp_5); }
     else { s.callLocIdx = 1819; s.pc = 2; return s.tmp_5; }
    }
  case 2:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_Array__length(s.tmp_4);
    s.tmp_3 = r0;
    r0 = (s.tmp_0 - s.tmp_3);
    return leave(s, r0)
  default: oops()
} } }
validMoves_inline__P18376.info = {"start":3182,"length":41,"line":112,"column":18,"endLine":112,"endColumn":59,"fileName":"pxt_modules/pxt-button-combos/combos.ts","functionName":"inline","argumentNames":["one","two"]}

function validMoves_inline__P18376_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: validMoves_inline__P18376, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function controller_combos_inputMove_inline__P18391(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = if_h_1_mk(s);
    s.tmp_0.arg0 = s.arg0;
    if (!s.tmp_0.arg0.vtable.iface) {
      setupLambda(s.tmp_0, pxsim_pxtrt.mapGetByString(s.tmp_0.arg0, "h"), 1);
      s.callLocIdx = 1822; s.pc = 1; return s.tmp_0;
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["h"];
      if (s.tmp_0.fn == null) { setupLambda(s.tmp_0, s.tmp_0.arg0.fields["h"], 1); s.callLocIdx = 1822; s.pc = 1; return s.tmp_0; }
      else if (s.tmp_0.fn.isGetter) { s.tmp_0.stage2Call = true; s.callLocIdx = 1822; s.pc = 1; return s.tmp_0;; }
     else { s.callLocIdx = 1822; s.pc = 1; return s.tmp_0; }
    }
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller_combos_inputMove_inline__P18391.info = {"start":3307,"length":16,"line":116,"column":25,"endLine":116,"endColumn":41,"fileName":"pxt_modules/pxt-button-combos/combos.ts","functionName":"inline","argumentNames":["move"]}

function controller_combos_inputMove_inline__P18391_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_combos_inputMove_inline__P18391, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function MainGame_revealPuzzle__P82304(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, MainGame__C82383_VT)) failedCast(r0);
    s.tmp_0 = game_splash__P2603_mk(s);
    r0 = s.arg0.fields["puzzleWord"];
    s.tmp_4 = r0;
    if ((s.tmp_4) && (s.tmp_4).vtable) {
    setupResume(s, 2);
    pxsim_String__stringConv(s.tmp_4);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_4) + ""; }
  case 2:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = pxsim_String__concat("[Whispers] The password is ", s.tmp_3);
    s.tmp_2 = r0;
    if ((s.tmp_2) && (s.tmp_2).vtable) {
    setupResume(s, 3);
    pxsim_String__stringConv(s.tmp_2);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_2) + ""; }
  case 3:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_String__concat(s.tmp_1, ".");
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = undefined;
    s.callLocIdx = 160; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
MainGame_revealPuzzle__P82304.info = {"start":3114,"length":110,"line":94,"column":4,"endLine":96,"endColumn":5,"fileName":"game.ts","functionName":"revealPuzzle","argumentNames":["this"]}

function MainGame_revealPuzzle__P82304_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: MainGame_revealPuzzle__P82304, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }





function getGuess__P62572(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    globals.g_gameMode___62539 = (3);
    s.tmp_0 = MainGame_getGuess__P82385_mk(s);
    s.tmp_0.arg0 = globals.g_game___62752;
    s.callLocIdx = 186; s.pc = 3; return s.tmp_0;
  case 3:
    r0 = s.retval;
    r0 = globals.g_game___62752.fields["resetRequested"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.tmp_1 = startNextGuess__P62796_mk(s);
    s.callLocIdx = 187; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
    { step = 2; continue; }
  case 1:
    globals.g_gameMode___62539 = (5);
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
getGuess__P62572.info = {"start":1803,"length":203,"line":82,"column":0,"endLine":90,"endColumn":1,"fileName":"main.ts","functionName":"getGuess","argumentNames":[]}

function getGuess__P62572_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: getGuess__P62572, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
} }





function MainGame_getGuess__P82385(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.message___82428 = undefined;
    s.playerInput___82443 = undefined;
    s.validation___82444 = undefined;
    s.reset___82447 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, MainGame__C82383_VT)) failedCast(r0);
    s.tmp_0 = GameBoard_hideGiveUpPrompt__P67280_mk(s);
    r0 = s.arg0.fields["board"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 148; s.pc = 14; return s.tmp_0;
  case 14:
    r0 = s.retval;
    s.tmp_0 = GameBoard_hideWordPrompt__P67281_mk(s);
    r0 = s.arg0.fields["board"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 149; s.pc = 15; return s.tmp_0;
  case 15:
    r0 = s.retval;
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["guessCount"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["guessCount"] = (s.tmp_1);
    r0 = s.arg0.fields["guessCount"];
    s.tmp_5 = r0;
    if ((s.tmp_5) && (s.tmp_5).vtable) {
    setupResume(s, 16);
    pxsim_String__stringConv(s.tmp_5);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_5) + ""; }
  case 16:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_String__concat("Guess ", s.tmp_4);
    s.tmp_3 = r0;
    if ((s.tmp_3) && (s.tmp_3).vtable) {
    setupResume(s, 17);
    pxsim_String__stringConv(s.tmp_3);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_3) + ""; }
  case 17:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_String__concat(s.tmp_2, " of ");
    s.tmp_1 = r0;
    if ((s.tmp_1) && (s.tmp_1).vtable) {
    setupResume(s, 18);
    pxsim_String__stringConv(s.tmp_1);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_1) + ""; }
  case 18:
    r0 = s.retval;
    s.tmp_0 = r0;
    if ((6) && (6).vtable) {
    setupResume(s, 19);
    pxsim_String__stringConv(6);
    checkResumeConsumed();
    return;
    } else { s.retval = (6) + ""; }
  case 19:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = pxsim_String__concat(s.tmp_0, s.tmp_6);
    s.message___82428 = (r0);
    r0 = pxsim_String_.mkEmpty();
    s.playerInput___82443 = (r0);
    s.tmp_0 = MainGame_validateInput__P82389_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.playerInput___82443;
    s.callLocIdx = 150; s.pc = 20; return s.tmp_0;
  case 20:
    r0 = s.retval;
    s.validation___82444 = (r0);
    s.reset___82447 = (false);
  case 1:
    r0 = (s.validation___82444 != 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 2; continue; }
    r0 = s.tmp_0;
    { step = 3; continue; }
  case 2:
    r0 = pxsim_numops_toBoolDecr(s.reset___82447);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
  case 3:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 11; continue; }
    s.tmp_5 = game_askForString__P2642_mk(s);
    s.tmp_5.arg0 = s.message___82428;
    s.tmp_5.arg1 = 5;
    s.callLocIdx = 151; s.pc = 21; return s.tmp_5;
  case 21:
    r0 = s.retval;
    s.tmp_4 = r0;
    if ((s.tmp_4) && (s.tmp_4).vtable) {
    setupResume(s, 22);
    pxsim_String__stringConv(s.tmp_4);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_4) + ""; }
  case 22:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = pxsim_String_.mkEmpty();
    s.tmp_6 = r0;
    r0 = pxsim_String__concat(s.tmp_3, s.tmp_6);
    s.playerInput___82443 = (r0);
    r0 = (s.playerInput___82443 == "undefined");
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 4; continue; }
    r0 = s.tmp_0;
    { step = 5; continue; }
  case 4:
    r0 = pxsim_String_.length(s.playerInput___82443);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 == 0);
  case 5:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 6; continue; }
    s.reset___82447 = (true);
    { step = 10; continue; }
  case 6:
    s.tmp_0 = MainGame_validateInput__P82389_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.playerInput___82443;
    s.callLocIdx = 152; s.pc = 23; return s.tmp_0;
  case 23:
    r0 = s.retval;
    s.validation___82444 = (r0);
    s.tmp_0 = r0 = s.validation___82444;
    r0 = pxsim_pxtcore.switch_eq(1, s.tmp_0);
    if (r0) { step = 7; continue; }
    r0 = pxsim_pxtcore.switch_eq(2, s.tmp_0);
    if (r0) { step = 8; continue; }
    r0 = s.tmp_0;
    { step = 9; continue; }
  case 7:
    s.tmp_1 = game_splash__P2603_mk(s);
    if ((5) && (5).vtable) {
    setupResume(s, 25);
    pxsim_String__stringConv(5);
    checkResumeConsumed();
    return;
    } else { s.retval = (5) + ""; }
  case 25:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_String__concat("Guess must be ", s.tmp_4);
    s.tmp_3 = r0;
    if ((s.tmp_3) && (s.tmp_3).vtable) {
    setupResume(s, 26);
    pxsim_String__stringConv(s.tmp_3);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_3) + ""; }
  case 26:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_String__concat(s.tmp_2, " characters.");
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = undefined;
    s.callLocIdx = 153; s.pc = 24; return s.tmp_1;
  case 24:
    r0 = s.retval;
    { step = 9; continue; }
  case 8:
    s.tmp_0 = game_splash__P2603_mk(s);
    s.tmp_3 = helpers_stringToUpperCase__P120_mk(s);
    s.tmp_3.arg0 = s.playerInput___82443;
    s.callLocIdx = 154; s.pc = 28; return s.tmp_3;
  case 28:
    r0 = s.retval;
    s.tmp_2 = r0;
    if ((s.tmp_2) && (s.tmp_2).vtable) {
    setupResume(s, 29);
    pxsim_String__stringConv(s.tmp_2);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_2) + ""; }
  case 29:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_String__concat(s.tmp_1, " not found in dictionary.");
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = undefined;
    s.callLocIdx = 155; s.pc = 27; return s.tmp_0;
  case 27:
    r0 = s.retval;
  case 9:
  case 10:
    { step = 1; continue; }
  case 11:
    r0 = pxsim_numops_toBoolDecr(s.reset___82447);
    if (!r0) { step = 12; continue; }
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["guessCount"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["guessCount"] = (s.tmp_1);
    r0 = (s.arg0).fields["resetRequested"] = (true);
    { step = 13; continue; }
  case 12:
    r0 = (s.arg0).fields["resetRequested"] = (false);
    r0 = pxsim_pxtcore_mkClassInstance(Guess__C54996_VT);
    s.tmp_0 = r0;
    s.tmp_1 = Guess_constructor__P54998_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = s.playerInput___82443;
    r0 = s.arg0.fields["puzzleWord"];
    s.tmp_1.arg2 = r0;
    s.callLocIdx = 156; s.pc = 30; return s.tmp_1;
  case 30:
    r0 = s.retval;
    r0 = (s.arg0).fields["guess"] = (s.tmp_0);
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = game_runtime__P2630_mk(s);
    s.callLocIdx = 157; s.pc = 31; return s.tmp_2;
  case 31:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["nextReveal"] = (s.tmp_1);
    r0 = (s.arg0).fields["lastRevealed"] = (-1);
    r0 = (s.arg0).fields["revealFinished"] = (false);
  case 13:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
MainGame_getGuess__P82385.info = {"start":869,"length":1615,"line":36,"column":4,"endLine":73,"endColumn":5,"fileName":"game.ts","functionName":"getGuess","argumentNames":["this"]}

function MainGame_getGuess__P82385_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: MainGame_getGuess__P82385, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  message___82428: undefined,
  playerInput___82443: undefined,
  validation___82444: undefined,
  reset___82447: undefined,
  arg0: undefined,
} }





function Guess_constructor__P54998(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Guess__C54996_VT)) failedCast(r0);
    r0 = (s.arg0).fields["guess"] = (s.arg1);
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["matches"] = (s.tmp_1);
    r0 = (s.arg0).fields["numMatches"] = (0);
    s.tmp_0 = Guess_buildMatches__P54997_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg2;
    s.callLocIdx = 61; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Guess_constructor__P54998.info = {"start":224,"length":165,"line":15,"column":4,"endLine":20,"endColumn":5,"fileName":"guess.ts","functionName":"inline","argumentNames":["this","guess","puzzle"]}

function Guess_constructor__P54998_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Guess_constructor__P54998, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function Guess_buildMatches__P54997(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.theLetters___55017 = undefined;
    s.i___55019 = undefined;
    s.upperGuess___55041 = undefined;
    s.i___55045 = undefined;
    s.i___55071 = undefined;
    s.j___55082 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Guess__C54996_VT)) failedCast(r0);
    r0 = pxsim_Array__mk();
    s.theLetters___55017 = (r0);
    s.i___55019 = (0);
  case 1:
    r0 = (s.i___55019 < 5);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    r0 = s.arg0.fields["matches"];
    s.tmp_1 = r0;
    r0 = pxsim_Array_.setAt(s.tmp_1, s.i___55019, 2);
    s.tmp_0 = r0 = s.theLetters___55017;
    s.tmp_1 = r0 = s.i___55019;
    r0 = pxsim_String_.charAt(s.arg1, s.i___55019);
    s.tmp_2 = r0;
    r0 = pxsim_Array_.setAt(s.tmp_0, s.tmp_1, s.tmp_2);
    r0 = (s.i___55019 + 1);
    s.i___55019 = (r0);
    { step = 1; continue; }
  case 2:
    s.tmp_0 = helpers_stringToUpperCase__P120_mk(s);
    r0 = s.arg0.fields["guess"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 62; s.pc = 15; return s.tmp_0;
  case 15:
    r0 = s.retval;
    s.upperGuess___55041 = (r0);
    s.i___55045 = (0);
  case 3:
    r0 = (s.i___55045 < 5);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 6; continue; }
    r0 = pxsim_String_.charAt(s.upperGuess___55041, s.i___55045);
    s.tmp_2 = r0;
    r0 = pxsim_Array__getAt(s.theLetters___55017, s.i___55045);
    s.tmp_3 = r0;
    r0 = (s.tmp_2 == s.tmp_3);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 4; continue; }
    r0 = s.arg0.fields["matches"];
    s.tmp_4 = r0;
    r0 = pxsim_Array_.setAt(s.tmp_4, s.i___55045, 0);
    r0 = pxsim_Array_.setAt(s.theLetters___55017, s.i___55045, " ");
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["numMatches"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["numMatches"] = (s.tmp_1);
  case 4:
  case 5:
    r0 = (s.i___55045 + 1);
    s.i___55045 = (r0);
    { step = 3; continue; }
  case 6:
    s.i___55071 = (0);
  case 7:
    r0 = (s.i___55071 < 5);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 14; continue; }
    r0 = s.arg0.fields["matches"];
    s.tmp_3 = r0;
    r0 = pxsim_Array__getAt(s.tmp_3, s.i___55071);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 == 2);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 12; continue; }
    s.j___55082 = (0);
  case 8:
    r0 = (s.j___55082 < 5);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 11; continue; }
    r0 = pxsim_String_.charAt(s.upperGuess___55041, s.i___55071);
    s.tmp_2 = r0;
    r0 = pxsim_Array__getAt(s.theLetters___55017, s.j___55082);
    s.tmp_3 = r0;
    r0 = (s.tmp_2 == s.tmp_3);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 9; continue; }
    r0 = s.arg0.fields["matches"];
    s.tmp_4 = r0;
    r0 = pxsim_Array_.setAt(s.tmp_4, s.i___55071, 1);
    r0 = pxsim_Array_.setAt(s.theLetters___55017, s.j___55082, " ");
    { step = 11; continue; }
  case 9:
  case 10:
    r0 = (s.j___55082 + 1);
    s.j___55082 = (r0);
    { step = 8; continue; }
  case 11:
  case 12:
  case 13:
    r0 = (s.i___55071 + 1);
    s.i___55071 = (r0);
    { step = 7; continue; }
  case 14:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Guess_buildMatches__P54997.info = {"start":395,"length":1153,"line":22,"column":4,"endLine":53,"endColumn":5,"fileName":"guess.ts","functionName":"buildMatches","argumentNames":["this","puzzle"]}

function Guess_buildMatches__P54997_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Guess_buildMatches__P54997, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  theLetters___55017: undefined,
  i___55019: undefined,
  upperGuess___55041: undefined,
  i___55045: undefined,
  i___55071: undefined,
  j___55082: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function game_askForString__P2642(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.p___15088 = undefined;
    s.result___15092 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 2790;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2790]) return breakpoint(s, 1, 2790, r0);
  case 1:
    r0 = pxsim_pxtcore_mkClassInstance(game_Prompt__C2643_VT);
    s.tmp_0 = r0;
    s.tmp_1 = game_Prompt_constructor__P2648_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = undefined;
    s.callLocIdx = 1150; s.pc = 2; return s.tmp_1;
  case 2:
    r0 = s.retval;
    s.p___15088 = (s.tmp_0);
    s.lastBrkId = 2791;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2791]) return breakpoint(s, 3, 2791, r0);
  case 3:
    s.tmp_0 = game_Prompt_show__P2649_mk(s);
    s.tmp_0.arg0 = s.p___15088;
    s.tmp_1 = console_inspect__P380_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.tmp_1.arg1 = 20;
    s.callLocIdx = 1151; s.pc = 5; return s.tmp_1;
  case 5:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = s.arg1;
    s.callLocIdx = 1152; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.result___15092 = (r0);
    s.lastBrkId = 2792;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2792]) return breakpoint(s, 6, 2792, r0);
  case 6:
    r0 = s.result___15092;
    return leave(s, r0)
  default: oops()
} } }
game_askForString__P2642.info = {"start":898,"length":198,"line":27,"column":4,"endLine":31,"endColumn":5,"fileName":"pxt_modules/game/prompt.ts","functionName":"askForString","argumentNames":["message","answerLength"]}

function game_askForString__P2642_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_askForString__P2642, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  p___15088: undefined,
  result___15092: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function game_Prompt_show__P2649(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Prompt__C2643_VT)) failedCast(r0);
    s.lastBrkId = 2824;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2824]) return breakpoint(s, 1, 2824, r0);
  case 1:
    r0 = (s.arg0).fields["message"] = (s.arg1);
    s.lastBrkId = 2825;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2825]) return breakpoint(s, 2, 2825, r0);
  case 2:
    r0 = (s.arg0).fields["answerLength"] = (s.arg2);
    s.lastBrkId = 2826;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2826]) return breakpoint(s, 3, 2826, r0);
  case 3:
    r0 = (s.arg0).fields["inputIndex"] = (0);
    s.lastBrkId = 2827;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2827]) return breakpoint(s, 4, 2827, r0);
  case 4:
    s.tmp_0 = controller__setUserEventsEnabled__P1986_mk(s);
    s.tmp_0.arg0 = false;
    s.callLocIdx = 1159; s.pc = 5; return s.tmp_0;
  case 5:
    r0 = s.retval;
    s.lastBrkId = 2828;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2828]) return breakpoint(s, 6, 2828, r0);
  case 6:
    s.tmp_0 = game_pushScene__P2613_mk(s);
    s.callLocIdx = 1160; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    s.lastBrkId = 2829;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2829]) return breakpoint(s, 8, 2829, r0);
  case 8:
    s.tmp_0 = game_Prompt_draw__P4672_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1161; s.pc = 9; return s.tmp_0;
  case 9:
    r0 = s.retval;
    s.lastBrkId = 2830;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2830]) return breakpoint(s, 10, 2830, r0);
  case 10:
    s.tmp_0 = game_Prompt_registerHandlers__P4682_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1162; s.pc = 11; return s.tmp_0;
  case 11:
    r0 = s.retval;
    s.lastBrkId = 2831;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2831]) return breakpoint(s, 12, 2831, r0);
  case 12:
    r0 = (s.arg0).fields["confirmPressed"] = (false);
    s.lastBrkId = 2832;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2832]) return breakpoint(s, 13, 2832, r0);
  case 13:
    r0 = pxsim_pxtcore_mkAction(1, game_Prompt_show_inline__P15121);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    s.tmp_1 = pauseUntil__P365_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = undefined;
    s.callLocIdx = 1163; s.pc = 14; return s.tmp_1;
  case 14:
    r0 = s.retval;
    s.lastBrkId = 2833;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2833]) return breakpoint(s, 15, 2833, r0);
  case 15:
    s.tmp_0 = game_popScene__P2614_mk(s);
    s.callLocIdx = 1164; s.pc = 16; return s.tmp_0;
  case 16:
    r0 = s.retval;
    s.lastBrkId = 2834;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2834]) return breakpoint(s, 17, 2834, r0);
  case 17:
    s.tmp_0 = controller__setUserEventsEnabled__P1986_mk(s);
    s.tmp_0.arg0 = true;
    s.callLocIdx = 1165; s.pc = 18; return s.tmp_0;
  case 18:
    r0 = s.retval;
    s.lastBrkId = 2835;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2835]) return breakpoint(s, 19, 2835, r0);
  case 19:
    r0 = s.arg0.fields["result"];
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_show__P2649.info = {"start":5259,"length":524,"line":162,"column":8,"endLine":180,"endColumn":9,"fileName":"pxt_modules/game/prompt.ts","functionName":"show","argumentNames":["this","message","answerLength"]}

function game_Prompt_show__P2649_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_show__P2649, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function game_Prompt_show_inline__P15121(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    r0 = s.caps[0].fields["confirmPressed"];
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_show_inline__P15121.info = {"start":5631,"length":25,"line":174,"column":23,"endLine":174,"endColumn":48,"fileName":"pxt_modules/game/prompt.ts","functionName":"inline","argumentNames":[]}

function game_Prompt_show_inline__P15121_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_show_inline__P15121, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
} }





function game_Prompt_registerHandlers__P4682(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Prompt__C2643_VT)) failedCast(r0);
    s.lastBrkId = 2920;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2920]) return breakpoint(s, 1, 2920, r0);
  case 1:
    r0 = pxsim_pxtcore_mkAction(1, game_Prompt_registerHandlers_inline__P15132);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    s.tmp_1 = controller_Button_onEvent__P1978_mk(s);
    s.tmp_1.arg0 = globals.up___1908;
    s.tmp_1.arg1 = 2053;
    s.tmp_1.arg2 = s.tmp_0;
    s.callLocIdx = 1234; s.pc = 2; return s.tmp_1;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 2922;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2922]) return breakpoint(s, 3, 2922, r0);
  case 3:
    r0 = pxsim_pxtcore_mkAction(1, game_Prompt_registerHandlers_inline__P15137);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    s.tmp_1 = controller_Button_onEvent__P1978_mk(s);
    s.tmp_1.arg0 = globals.down___1910;
    s.tmp_1.arg1 = 2053;
    s.tmp_1.arg2 = s.tmp_0;
    s.callLocIdx = 1236; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
    s.lastBrkId = 2924;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2924]) return breakpoint(s, 5, 2924, r0);
  case 5:
    r0 = pxsim_pxtcore_mkAction(1, game_Prompt_registerHandlers_inline__P15142);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    s.tmp_1 = controller_Button_onEvent__P1978_mk(s);
    s.tmp_1.arg0 = globals.right___1909;
    s.tmp_1.arg1 = 2053;
    s.tmp_1.arg2 = s.tmp_0;
    s.callLocIdx = 1238; s.pc = 6; return s.tmp_1;
  case 6:
    r0 = s.retval;
    s.lastBrkId = 2926;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2926]) return breakpoint(s, 7, 2926, r0);
  case 7:
    r0 = pxsim_pxtcore_mkAction(1, game_Prompt_registerHandlers_inline__P15147);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    s.tmp_1 = controller_Button_onEvent__P1978_mk(s);
    s.tmp_1.arg0 = globals.left___1907;
    s.tmp_1.arg1 = 2053;
    s.tmp_1.arg2 = s.tmp_0;
    s.callLocIdx = 1240; s.pc = 8; return s.tmp_1;
  case 8:
    r0 = s.retval;
    s.lastBrkId = 2928;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2928]) return breakpoint(s, 9, 2928, r0);
  case 9:
    r0 = pxsim_pxtcore_mkAction(1, game_Prompt_registerHandlers_inline__P15152);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    s.tmp_1 = controller_Button_onEvent__P1978_mk(s);
    s.tmp_1.arg0 = globals.A___1905;
    s.tmp_1.arg1 = 2053;
    s.tmp_1.arg2 = s.tmp_0;
    s.callLocIdx = 1242; s.pc = 10; return s.tmp_1;
  case 10:
    r0 = s.retval;
    s.lastBrkId = 2930;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2930]) return breakpoint(s, 11, 2930, r0);
  case 11:
    r0 = pxsim_pxtcore_mkAction(1, game_Prompt_registerHandlers_inline__P15157);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    s.tmp_1 = controller_Button_onEvent__P1978_mk(s);
    s.tmp_1.arg0 = globals.B___1906;
    s.tmp_1.arg1 = 2053;
    s.tmp_1.arg2 = s.tmp_0;
    s.callLocIdx = 1244; s.pc = 12; return s.tmp_1;
  case 12:
    r0 = s.retval;
    s.lastBrkId = 2932;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2932]) return breakpoint(s, 13, 2932, r0);
  case 13:
    r0 = (s.arg0).fields["frameCount"] = (0);
    s.lastBrkId = 2933;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2933]) return breakpoint(s, 14, 2933, r0);
  case 14:
    r0 = (s.arg0).fields["blink"] = (true);
    s.lastBrkId = 2934;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2934]) return breakpoint(s, 15, 2934, r0);
  case 15:
    r0 = pxsim_pxtcore_mkAction(1, game_Prompt_registerHandlers_inline__P15166);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    s.tmp_1 = game_onUpdate__P2628_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.callLocIdx = 1246; s.pc = 16; return s.tmp_1;
  case 16:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_registerHandlers__P4682.info = {"start":11271,"length":1066,"line":325,"column":8,"endLine":363,"endColumn":9,"fileName":"pxt_modules/game/prompt.ts","functionName":"registerHandlers","argumentNames":["this"]}

function game_Prompt_registerHandlers__P4682_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_registerHandlers__P4682, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function game_Prompt_registerHandlers_inline__P15132(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 2921;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2921]) return breakpoint(s, 1, 2921, r0);
  case 1:
    s.tmp_0 = game_Prompt_moveVertical__P4683_mk(s);
    s.tmp_0.arg0 = s.caps[0];
    s.tmp_0.arg1 = true;
    s.callLocIdx = 1233; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_registerHandlers_inline__P15132.info = {"start":11351,"length":62,"line":326,"column":51,"endLine":328,"endColumn":13,"fileName":"pxt_modules/game/prompt.ts","functionName":"inline","argumentNames":[]}

function game_Prompt_registerHandlers_inline__P15132_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_registerHandlers_inline__P15132, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
} }





function game_Prompt_registerHandlers_inline__P15137(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 2923;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2923]) return breakpoint(s, 1, 2923, r0);
  case 1:
    s.tmp_0 = game_Prompt_moveVertical__P4683_mk(s);
    s.tmp_0.arg0 = s.caps[0];
    s.tmp_0.arg1 = false;
    s.callLocIdx = 1235; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_registerHandlers_inline__P15137.info = {"start":11469,"length":63,"line":330,"column":53,"endLine":332,"endColumn":13,"fileName":"pxt_modules/game/prompt.ts","functionName":"inline","argumentNames":[]}

function game_Prompt_registerHandlers_inline__P15137_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_registerHandlers_inline__P15137, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
} }





function game_Prompt_registerHandlers_inline__P15142(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 2925;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2925]) return breakpoint(s, 1, 2925, r0);
  case 1:
    s.tmp_0 = game_Prompt_moveHorizontal__P4684_mk(s);
    s.tmp_0.arg0 = s.caps[0];
    s.tmp_0.arg1 = true;
    s.callLocIdx = 1237; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_registerHandlers_inline__P15142.info = {"start":11589,"length":64,"line":334,"column":54,"endLine":336,"endColumn":13,"fileName":"pxt_modules/game/prompt.ts","functionName":"inline","argumentNames":[]}

function game_Prompt_registerHandlers_inline__P15142_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_registerHandlers_inline__P15142, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
} }





function game_Prompt_registerHandlers_inline__P15147(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 2927;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2927]) return breakpoint(s, 1, 2927, r0);
  case 1:
    s.tmp_0 = game_Prompt_moveHorizontal__P4684_mk(s);
    s.tmp_0.arg0 = s.caps[0];
    s.tmp_0.arg1 = false;
    s.callLocIdx = 1239; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_registerHandlers_inline__P15147.info = {"start":11710,"length":65,"line":338,"column":53,"endLine":340,"endColumn":13,"fileName":"pxt_modules/game/prompt.ts","functionName":"inline","argumentNames":[]}

function game_Prompt_registerHandlers_inline__P15147_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_registerHandlers_inline__P15147, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
} }





function game_Prompt_registerHandlers_inline__P15152(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 2929;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2929]) return breakpoint(s, 1, 2929, r0);
  case 1:
    s.tmp_0 = game_Prompt_confirm__P4685_mk(s);
    s.tmp_0.arg0 = s.caps[0];
    s.callLocIdx = 1241; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_registerHandlers_inline__P15152.info = {"start":11829,"length":53,"line":342,"column":50,"endLine":344,"endColumn":13,"fileName":"pxt_modules/game/prompt.ts","functionName":"inline","argumentNames":[]}

function game_Prompt_registerHandlers_inline__P15152_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_registerHandlers_inline__P15152, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
} }





function game_Prompt_registerHandlers_inline__P15157(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 2931;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2931]) return breakpoint(s, 1, 2931, r0);
  case 1:
    s.tmp_0 = game_Prompt_delete__P4686_mk(s);
    s.tmp_0.arg0 = s.caps[0];
    s.callLocIdx = 1243; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_registerHandlers_inline__P15157.info = {"start":11936,"length":52,"line":346,"column":50,"endLine":348,"endColumn":13,"fileName":"pxt_modules/game/prompt.ts","functionName":"inline","argumentNames":[]}

function game_Prompt_registerHandlers_inline__P15157_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_registerHandlers_inline__P15157, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
} }





function game_Prompt_registerHandlers_inline__P15166(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 2935;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2935]) return breakpoint(s, 3, 2935, r0);
  case 3:
    s.tmp_0 = r0 = s.caps[0];
    r0 = s.caps[0].fields["frameCount"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 + 1);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 % 30);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["frameCount"] = (s.tmp_1);
    s.lastBrkId = 2936;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2936]) return breakpoint(s, 4, 2936, r0);
  case 4:
    r0 = s.caps[0].fields["frameCount"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 === 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2937;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2937]) return breakpoint(s, 5, 2937, r0);
  case 5:
    s.tmp_2 = r0 = s.caps[0];
    r0 = s.caps[0].fields["blink"];
    s.tmp_5 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_5);
    s.tmp_4 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_4);
    s.tmp_3 = r0;
    r0 = (s.tmp_2).fields["blink"] = (s.tmp_3);
    s.lastBrkId = 2938;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2938]) return breakpoint(s, 6, 2938, r0);
  case 6:
    s.tmp_0 = game_Prompt_updateSelectedInput__P4679_mk(s);
    s.tmp_0.arg0 = s.caps[0];
    s.callLocIdx = 1245; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_registerHandlers_inline__P15166.info = {"start":12084,"length":242,"line":354,"column":26,"endLine":362,"endColumn":13,"fileName":"pxt_modules/game/prompt.ts","functionName":"inline","argumentNames":[]}

function game_Prompt_registerHandlers_inline__P15166_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_registerHandlers_inline__P15166, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
} }





function game_Prompt_delete__P4686(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Prompt__C2643_VT)) failedCast(r0);
    s.lastBrkId = 2972;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2972]) return breakpoint(s, 6, 2972, r0);
  case 6:
    r0 = s.arg0.fields["inputIndex"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 <= 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2973;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2973]) return breakpoint(s, 7, 2973, r0);
  case 7:
    { step = 5; continue; }
  case 1:
  case 2:
    s.lastBrkId = 2974;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2974]) return breakpoint(s, 8, 2974, r0);
  case 8:
    r0 = s.arg0.fields["inputIndex"];
    s.tmp_3 = r0;
    r0 = s.arg0.fields["answerLength"];
    s.tmp_4 = r0;
    r0 = (s.tmp_3 < s.tmp_4);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2975;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2975]) return breakpoint(s, 9, 2975, r0);
  case 9:
    s.tmp_5 = game_Prompt_drawInput__P4681_mk(s);
    s.tmp_5.arg0 = s.arg0;
    s.tmp_6 = Sprite_image__P2131_mk(s);
    r0 = s.arg0.fields["inputs"];
    s.tmp_7 = r0;
    r0 = s.arg0.fields["inputIndex"];
    s.tmp_8 = r0;
    r0 = pxsim_Array__getAt(s.tmp_7, s.tmp_8);
    s.tmp_6.arg0 = r0;
    s.callLocIdx = 1261; s.pc = 11; return s.tmp_6;
  case 11:
    r0 = s.retval;
    s.tmp_5.arg1 = r0;
    r0 = pxsim_String_.mkEmpty();
    s.tmp_5.arg2 = r0;
    s.tmp_9 = if_colorInput_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_9.arg0 = r0;
    if (!s.tmp_9.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_9.arg0, "colorInput");
    } else {
      s.tmp_9.fn = s.tmp_9.arg0.vtable.iface["colorInput"];
      if (s.tmp_9.fn == null) { s.retval = s.tmp_9.arg0.fields["colorInput"]; }
      else if (!s.tmp_9.fn.isGetter) { s.retval = bind(s.tmp_9); }
     else { s.callLocIdx = 1262; s.pc = 12; return s.tmp_9; }
    }
  case 12:
    r0 = s.retval;
    s.tmp_5.arg3 = r0;
    s.callLocIdx = 1263; s.pc = 10; return s.tmp_5;
  case 10:
    r0 = s.retval;
  case 3:
  case 4:
    s.lastBrkId = 2976;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2976]) return breakpoint(s, 13, 2976, r0);
  case 13:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = helpers_stringSubstr__P118_mk(s);
    r0 = s.arg0.fields["result"];
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = 0;
    r0 = s.arg0.fields["result"];
    s.tmp_4 = r0;
    r0 = pxsim_String_.length(s.tmp_4);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 - 1);
    s.tmp_2.arg2 = r0;
    s.callLocIdx = 1264; s.pc = 14; return s.tmp_2;
  case 14:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["result"] = (s.tmp_1);
    s.lastBrkId = 2977;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2977]) return breakpoint(s, 15, 2977, r0);
  case 15:
    s.tmp_0 = game_Prompt_changeInputIndex__P4687_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = -1;
    s.callLocIdx = 1265; s.pc = 16; return s.tmp_0;
  case 16:
    r0 = s.retval;
  case 5:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_delete__P4686.info = {"start":14658,"length":353,"line":437,"column":8,"endLine":447,"endColumn":9,"fileName":"pxt_modules/game/prompt.ts","functionName":"delete","argumentNames":["this"]}

function game_Prompt_delete__P4686_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_delete__P4686, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  arg0: undefined,
} }





function game_Prompt_changeInputIndex__P4687(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Prompt__C2643_VT)) failedCast(r0);
    s.lastBrkId = 2978;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2978]) return breakpoint(s, 1, 2978, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["inputIndex"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + s.arg1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["inputIndex"] = (s.tmp_1);
    s.lastBrkId = 2979;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2979]) return breakpoint(s, 2, 2979, r0);
  case 2:
    r0 = (s.arg0).fields["frameCount"] = (0);
    s.lastBrkId = 2980;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2980]) return breakpoint(s, 3, 2980, r0);
  case 3:
    r0 = (s.arg0).fields["blink"] = (false);
    s.lastBrkId = 2981;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2981]) return breakpoint(s, 4, 2981, r0);
  case 4:
    s.tmp_0 = game_Prompt_updateSelectedInput__P4679_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1266; s.pc = 5; return s.tmp_0;
  case 5:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_changeInputIndex__P4687.info = {"start":15021,"length":193,"line":449,"column":8,"endLine":454,"endColumn":9,"fileName":"pxt_modules/game/prompt.ts","functionName":"changeInputIndex","argumentNames":["this","delta"]}

function game_Prompt_changeInputIndex__P4687_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_changeInputIndex__P4687, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function game_Prompt_drawInput__P4681(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Prompt__C2643_VT)) failedCast(r0);
    s.lastBrkId = 2916;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2916]) return breakpoint(s, 3, 2916, r0);
  case 3:
    r0 = pxsim_ImageMethods.fill(s.arg1, 0);
    s.lastBrkId = 2917;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2917]) return breakpoint(s, 4, 2917, r0);
  case 4:
    s.tmp_0 = helpers_imageFillRect__P1753_mk(s);
    s.tmp_0.arg0 = s.arg1;
    s.tmp_0.arg1 = 1;
    r0 = (globals.CELL_HEIGHT___4598 - 1);
    s.tmp_0.arg2 = r0;
    r0 = (globals.CELL_WIDTH___4596 - 2);
    s.tmp_0.arg3 = r0;
    s.tmp_0.arg4 = 1;
    s.tmp_0.arg5 = s.arg3;
    s.callLocIdx = 1230; s.pc = 5; return s.tmp_0;
  case 5:
    r0 = s.retval;
    s.lastBrkId = 2918;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2918]) return breakpoint(s, 6, 2918, r0);
  case 6:
    r0 = pxsim_numops_toBoolDecr(s.arg2);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2919;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2919]) return breakpoint(s, 7, 2919, r0);
  case 7:
    s.tmp_0 = helpers_imagePrint__P1785_mk(s);
    s.tmp_0.arg0 = s.arg1;
    s.tmp_0.arg1 = s.arg2;
    s.tmp_0.arg2 = globals.LETTER_OFFSET_X___4602;
    s.tmp_0.arg3 = globals.LETTER_OFFSET_Y___4606;
    s.tmp_1 = if_colorInputText_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_1.arg0 = r0;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "colorInputText");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["colorInputText"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["colorInputText"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 1231; s.pc = 9; return s.tmp_1; }
    }
  case 9:
    r0 = s.retval;
    s.tmp_0.arg4 = r0;
    s.tmp_0.arg5 = globals.font___4569;
    s.tmp_0.arg6 = undefined;
    s.callLocIdx = 1232; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_drawInput__P4681.info = {"start":10928,"length":333,"line":316,"column":8,"endLine":323,"endColumn":9,"fileName":"pxt_modules/game/prompt.ts","functionName":"drawInput","argumentNames":["this","img","char","color"]}

function game_Prompt_drawInput__P4681_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_drawInput__P4681, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function game_Prompt_confirm__P4685(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.index___15338 = undefined;
    s.letter___15346 = undefined;
    s.sprite___15365 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Prompt__C2643_VT)) failedCast(r0);
    s.lastBrkId = 2956;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2956]) return breakpoint(s, 10, 2956, r0);
  case 10:
    r0 = s.arg0.fields["cursorRow"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 === 3);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2957;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2957]) return breakpoint(s, 11, 2957, r0);
  case 11:
    r0 = s.arg0.fields["cursorColumn"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 % 2);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2958;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2958]) return breakpoint(s, 12, 2958, r0);
  case 12:
    r0 = (s.arg0).fields["confirmPressed"] = (true);
    { step = 2; continue; }
  case 1:
    s.lastBrkId = 2959;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2959]) return breakpoint(s, 13, 2959, r0);
  case 13:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.arg0.fields["upper"];
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["upper"] = (s.tmp_1);
    s.lastBrkId = 2960;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2960]) return breakpoint(s, 14, 2960, r0);
  case 14:
    s.tmp_0 = game_Prompt_updateKeyboard__P4680_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1254; s.pc = 15; return s.tmp_0;
  case 15:
    r0 = s.retval;
    s.lastBrkId = 2961;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2961]) return breakpoint(s, 16, 2961, r0);
  case 16:
    s.tmp_0 = game_Prompt_updateButtons__P4677_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1255; s.pc = 17; return s.tmp_0;
  case 17:
    r0 = s.retval;
  case 2:
    { step = 8; continue; }
  case 3:
    s.lastBrkId = 2962;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2962]) return breakpoint(s, 18, 2962, r0);
  case 18:
    r0 = s.arg0.fields["inputIndex"];
    s.tmp_1 = r0;
    r0 = s.arg0.fields["answerLength"];
    s.tmp_2 = r0;
    r0 = (s.tmp_1 >= s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 2963;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2963]) return breakpoint(s, 19, 2963, r0);
  case 19:
    { step = 9; continue; }
  case 4:
  case 5:
    s.lastBrkId = 2964;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2964]) return breakpoint(s, 20, 2964, r0);
  case 20:
    r0 = s.arg0.fields["cursorColumn"];
    s.tmp_3 = r0;
    r0 = s.arg0.fields["cursorRow"];
    s.tmp_5 = r0;
    r0 = (s.tmp_5 * 12);
    s.tmp_4 = r0;
    r0 = (s.tmp_3 + s.tmp_4);
    s.index___15338 = (r0);
    s.lastBrkId = 2965;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2965]) return breakpoint(s, 21, 2965, r0);
  case 21:
    s.tmp_0 = game_getCharForIndex__P4689_mk(s);
    s.tmp_0.arg0 = s.index___15338;
    r0 = s.arg0.fields["upper"];
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1256; s.pc = 22; return s.tmp_0;
  case 22:
    r0 = s.retval;
    s.letter___15346 = (r0);
    s.lastBrkId = 2966;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2966]) return breakpoint(s, 23, 2966, r0);
  case 23:
    r0 = s.arg0.fields["result"];
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 6; continue; }
    s.lastBrkId = 2967;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2967]) return breakpoint(s, 24, 2967, r0);
  case 24:
    r0 = (s.arg0).fields["result"] = (s.letter___15346);
    { step = 7; continue; }
  case 6:
    s.lastBrkId = 2968;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2968]) return breakpoint(s, 25, 2968, r0);
  case 25:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["result"];
    s.tmp_3 = r0;
    if ((s.tmp_3) && (s.tmp_3).vtable) {
    setupResume(s, 26);
    pxsim_String__stringConv(s.tmp_3);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_3) + ""; }
  case 26:
    r0 = s.retval;
    s.tmp_2 = r0;
    if ((s.letter___15346) && (s.letter___15346).vtable) {
    setupResume(s, 27);
    pxsim_String__stringConv(s.letter___15346);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.letter___15346) + ""; }
  case 27:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_String__concat(s.tmp_2, s.tmp_4);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["result"] = (s.tmp_1);
  case 7:
    s.lastBrkId = 2969;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2969]) return breakpoint(s, 28, 2969, r0);
  case 28:
    r0 = s.arg0.fields["inputs"];
    s.tmp_0 = r0;
    r0 = s.arg0.fields["inputIndex"];
    s.tmp_1 = r0;
    r0 = pxsim_Array__getAt(s.tmp_0, s.tmp_1);
    s.sprite___15365 = (r0);
    s.lastBrkId = 2970;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2970]) return breakpoint(s, 29, 2970, r0);
  case 29:
    s.tmp_0 = game_Prompt_changeInputIndex__P4687_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 1;
    s.callLocIdx = 1257; s.pc = 30; return s.tmp_0;
  case 30:
    r0 = s.retval;
    s.lastBrkId = 2971;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2971]) return breakpoint(s, 31, 2971, r0);
  case 31:
    s.tmp_0 = game_Prompt_drawInput__P4681_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_1 = Sprite_image__P2131_mk(s);
    s.tmp_1.arg0 = s.sprite___15365;
    s.callLocIdx = 1258; s.pc = 33; return s.tmp_1;
  case 33:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = s.letter___15346;
    s.tmp_2 = if_colorInput_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "colorInput");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["colorInput"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["colorInput"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1259; s.pc = 34; return s.tmp_2; }
    }
  case 34:
    r0 = s.retval;
    s.tmp_0.arg3 = r0;
    s.callLocIdx = 1260; s.pc = 32; return s.tmp_0;
  case 32:
    r0 = s.retval;
  case 8:
  case 9:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_confirm__P4685.info = {"start":13666,"length":982,"line":407,"column":8,"endLine":435,"endColumn":9,"fileName":"pxt_modules/game/prompt.ts","functionName":"confirm","argumentNames":["this"]}

function game_Prompt_confirm__P4685_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_confirm__P4685, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  index___15338: undefined,
  letter___15346: undefined,
  sprite___15365: undefined,
  arg0: undefined,
} }





function game_getCharForIndex__P4689(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3027;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3027]) return breakpoint(s, 8, 3027, r0);
  case 8:
    r0 = (s.arg0 < 26);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 3028;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3028]) return breakpoint(s, 9, 3028, r0);
  case 9:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    if (!r0) { step = 1; continue; }
    r0 = 65;
    { step = 2; continue; }
  case 1:
    r0 = 97;
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = (s.arg0 + s.tmp_1);
    s.tmp_2 = r0;
    r0 = pxsim_String_.fromCharCode(s.tmp_2);
    { step = 7; continue; }
    { step = 6; continue; }
  case 3:
    s.lastBrkId = 3029;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3029]) return breakpoint(s, 10, 3029, r0);
  case 10:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 3030;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3030]) return breakpoint(s, 11, 3030, r0);
  case 11:
    s.tmp_3 = r0 = globals.digitsUpper___4670;
    r0 = (s.arg0 - 26);
    s.tmp_4 = r0;
    r0 = pxsim_Array__getAt(s.tmp_3, s.tmp_4);
    { step = 7; continue; }
    { step = 5; continue; }
  case 4:
    s.lastBrkId = 3031;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3031]) return breakpoint(s, 12, 3031, r0);
  case 12:
    r0 = pxsim_String_.mkEmpty();
    s.tmp_5 = r0;
    r0 = (s.arg0 - 26);
    s.tmp_7 = r0;
    if ((s.tmp_7) && (s.tmp_7).vtable) {
    setupResume(s, 13);
    pxsim_String__stringConv(s.tmp_7);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_7) + ""; }
  case 13:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = pxsim_String__concat(s.tmp_5, s.tmp_6);
    { step = 7; continue; }
  case 5:
  case 6:
    r0 = undefined;
  case 7:
    return leave(s, r0)
  default: oops()
} } }
game_getCharForIndex__P4689.info = {"start":17088,"length":353,"line":529,"column":4,"endLine":541,"endColumn":5,"fileName":"pxt_modules/game/prompt.ts","functionName":"getCharForIndex","argumentNames":["index","upper"]}

function game_getCharForIndex__P4689_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_getCharForIndex__P4689, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function game_Prompt_updateKeyboard__P4680(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.len___15502 = undefined;
    s.k___15507 = undefined;
    s.img___15512 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Prompt__C2643_VT)) failedCast(r0);
    s.lastBrkId = 2908;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2908]) return breakpoint(s, 3, 2908, r0);
  case 3:
    r0 = s.arg0.fields["letters"];
    s.tmp_0 = r0;
    r0 = pxsim_Array__length(s.tmp_0);
    s.len___15502 = (r0);
    s.lastBrkId = 2909;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2909]) return breakpoint(s, 4, 2909, r0);
  case 4:
    s.k___15507 = (0);
    s.lastBrkId = 2910;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2910]) return breakpoint(s, 5, 2910, r0);
  case 5:
  case 1:
    s.lastBrkId = 2911;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2911]) return breakpoint(s, 6, 2911, r0);
  case 6:
    r0 = (s.k___15507 < s.len___15502);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 2912;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2912]) return breakpoint(s, 7, 2912, r0);
  case 7:
    s.tmp_1 = Sprite_image__P2131_mk(s);
    r0 = s.arg0.fields["letters"];
    s.tmp_2 = r0;
    r0 = pxsim_Array__getAt(s.tmp_2, s.k___15507);
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 1227; s.pc = 8; return s.tmp_1;
  case 8:
    r0 = s.retval;
    s.img___15512 = (r0);
    s.lastBrkId = 2913;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2913]) return breakpoint(s, 9, 2913, r0);
  case 9:
    r0 = pxsim_ImageMethods.fill(s.img___15512, 0);
    s.lastBrkId = 2914;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2914]) return breakpoint(s, 10, 2914, r0);
  case 10:
    s.tmp_0 = helpers_imagePrint__P1785_mk(s);
    s.tmp_0.arg0 = s.img___15512;
    s.tmp_1 = game_getCharForIndex__P4689_mk(s);
    s.tmp_1.arg0 = s.k___15507;
    r0 = s.arg0.fields["upper"];
    s.tmp_1.arg1 = r0;
    s.callLocIdx = 1228; s.pc = 12; return s.tmp_1;
  case 12:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = globals.LETTER_OFFSET_X___4602;
    s.tmp_0.arg3 = globals.LETTER_OFFSET_Y___4606;
    s.tmp_0.arg4 = undefined;
    s.tmp_0.arg5 = undefined;
    s.tmp_0.arg6 = undefined;
    s.callLocIdx = 1229; s.pc = 11; return s.tmp_0;
  case 11:
    r0 = s.retval;
    s.lastBrkId = 2915;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2915]) return breakpoint(s, 13, 2915, r0);
  case 13:
    r0 = (s.k___15507 + 1);
    s.k___15507 = (r0);
    { step = 1; continue; }
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_updateKeyboard__P4680.info = {"start":10606,"length":312,"line":307,"column":8,"endLine":314,"endColumn":9,"fileName":"pxt_modules/game/prompt.ts","functionName":"updateKeyboard","argumentNames":["this"]}

function game_Prompt_updateKeyboard__P4680_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_updateKeyboard__P4680, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  len___15502: undefined,
  k___15507: undefined,
  img___15512: undefined,
  arg0: undefined,
} }





function game_Prompt_updateButtons__P4677(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Prompt__C2643_VT)) failedCast(r0);
    s.lastBrkId = 2888;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2888]) return breakpoint(s, 11, 2888, r0);
  case 11:
    r0 = s.arg0.fields["cursorRow"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 === 3);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = s.arg0.fields["cursorColumn"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 % 2);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 !== 1);
  case 2:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2889;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2889]) return breakpoint(s, 12, 2889, r0);
  case 12:
    s.tmp_6 = Sprite_image__P2131_mk(s);
    r0 = s.arg0.fields["shiftButton"];
    s.tmp_6.arg0 = r0;
    s.callLocIdx = 1203; s.pc = 13; return s.tmp_6;
  case 13:
    r0 = s.retval;
    s.tmp_5 = r0;
    s.tmp_8 = if_colorCursor_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_8.arg0 = r0;
    if (!s.tmp_8.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_8.arg0, "colorCursor");
    } else {
      s.tmp_8.fn = s.tmp_8.arg0.vtable.iface["colorCursor"];
      if (s.tmp_8.fn == null) { s.retval = s.tmp_8.arg0.fields["colorCursor"]; }
      else if (!s.tmp_8.fn.isGetter) { s.retval = bind(s.tmp_8); }
     else { s.callLocIdx = 1204; s.pc = 14; return s.tmp_8; }
    }
  case 14:
    r0 = s.retval;
    s.tmp_7 = r0;
    r0 = pxsim_ImageMethods.fill(s.tmp_5, s.tmp_7);
    { step = 4; continue; }
  case 3:
    s.lastBrkId = 2890;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2890]) return breakpoint(s, 15, 2890, r0);
  case 15:
    s.tmp_1 = Sprite_image__P2131_mk(s);
    r0 = s.arg0.fields["shiftButton"];
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 1205; s.pc = 16; return s.tmp_1;
  case 16:
    r0 = s.retval;
    s.tmp_0 = r0;
    s.tmp_3 = if_colorBottomBackground_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_3.arg0 = r0;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "colorBottomBackground");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["colorBottomBackground"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["colorBottomBackground"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1206; s.pc = 17; return s.tmp_3; }
    }
  case 17:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_ImageMethods.fill(s.tmp_0, s.tmp_2);
  case 4:
    s.lastBrkId = 2891;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2891]) return breakpoint(s, 18, 2891, r0);
  case 18:
    r0 = s.arg0.fields["upper"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 2892;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2892]) return breakpoint(s, 19, 2892, r0);
  case 19:
    s.tmp_1 = helpers_imagePrint__P1785_mk(s);
    s.tmp_2 = Sprite_image__P2131_mk(s);
    r0 = s.arg0.fields["shiftButton"];
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 1207; s.pc = 21; return s.tmp_2;
  case 21:
    r0 = s.retval;
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = globals.upperShiftText___4669;
    s.tmp_1.arg2 = globals.BOTTOM_BAR_SHIFT_X___4638;
    s.tmp_1.arg3 = globals.BOTTOM_BAR_TEXT_Y___4635;
    s.tmp_1.arg4 = undefined;
    s.tmp_1.arg5 = undefined;
    s.tmp_1.arg6 = undefined;
    s.callLocIdx = 1208; s.pc = 20; return s.tmp_1;
  case 20:
    r0 = s.retval;
    { step = 6; continue; }
  case 5:
    s.lastBrkId = 2893;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2893]) return breakpoint(s, 22, 2893, r0);
  case 22:
    s.tmp_0 = helpers_imagePrint__P1785_mk(s);
    s.tmp_1 = Sprite_image__P2131_mk(s);
    r0 = s.arg0.fields["shiftButton"];
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 1209; s.pc = 24; return s.tmp_1;
  case 24:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = globals.lowerShiftText___4668;
    s.tmp_0.arg2 = globals.BOTTOM_BAR_SHIFT_X___4638;
    s.tmp_0.arg3 = globals.BOTTOM_BAR_TEXT_Y___4635;
    s.tmp_0.arg4 = undefined;
    s.tmp_0.arg5 = undefined;
    s.tmp_0.arg6 = undefined;
    s.callLocIdx = 1210; s.pc = 23; return s.tmp_0;
  case 23:
    r0 = s.retval;
  case 6:
    s.lastBrkId = 2894;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2894]) return breakpoint(s, 25, 2894, r0);
  case 25:
    r0 = s.arg0.fields["cursorRow"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 === 3);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 7; continue; }
    r0 = s.tmp_0;
    { step = 8; continue; }
  case 7:
    r0 = s.arg0.fields["cursorColumn"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 % 2);
  case 8:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 2895;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2895]) return breakpoint(s, 26, 2895, r0);
  case 26:
    s.tmp_5 = Sprite_image__P2131_mk(s);
    r0 = s.arg0.fields["confirmButton"];
    s.tmp_5.arg0 = r0;
    s.callLocIdx = 1211; s.pc = 27; return s.tmp_5;
  case 27:
    r0 = s.retval;
    s.tmp_4 = r0;
    s.tmp_7 = if_colorCursor_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_7.arg0 = r0;
    if (!s.tmp_7.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_7.arg0, "colorCursor");
    } else {
      s.tmp_7.fn = s.tmp_7.arg0.vtable.iface["colorCursor"];
      if (s.tmp_7.fn == null) { s.retval = s.tmp_7.arg0.fields["colorCursor"]; }
      else if (!s.tmp_7.fn.isGetter) { s.retval = bind(s.tmp_7); }
     else { s.callLocIdx = 1212; s.pc = 28; return s.tmp_7; }
    }
  case 28:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = pxsim_ImageMethods.fill(s.tmp_4, s.tmp_6);
    { step = 10; continue; }
  case 9:
    s.lastBrkId = 2896;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2896]) return breakpoint(s, 29, 2896, r0);
  case 29:
    s.tmp_1 = Sprite_image__P2131_mk(s);
    r0 = s.arg0.fields["confirmButton"];
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 1213; s.pc = 30; return s.tmp_1;
  case 30:
    r0 = s.retval;
    s.tmp_0 = r0;
    s.tmp_3 = if_colorBottomBackground_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_3.arg0 = r0;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "colorBottomBackground");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["colorBottomBackground"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["colorBottomBackground"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1214; s.pc = 31; return s.tmp_3; }
    }
  case 31:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_ImageMethods.fill(s.tmp_0, s.tmp_2);
  case 10:
    s.lastBrkId = 2897;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2897]) return breakpoint(s, 32, 2897, r0);
  case 32:
    s.tmp_0 = helpers_imagePrint__P1785_mk(s);
    s.tmp_1 = Sprite_image__P2131_mk(s);
    r0 = s.arg0.fields["confirmButton"];
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 1215; s.pc = 34; return s.tmp_1;
  case 34:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = globals.confirmText___4671;
    s.tmp_0.arg2 = globals.BOTTOM_BAR_CONFIRM_X___4641;
    s.tmp_0.arg3 = globals.BOTTOM_BAR_TEXT_Y___4635;
    s.tmp_0.arg4 = undefined;
    s.tmp_0.arg5 = undefined;
    s.tmp_0.arg6 = undefined;
    s.callLocIdx = 1216; s.pc = 33; return s.tmp_0;
  case 33:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_updateButtons__P4677.info = {"start":8863,"length":946,"line":258,"column":8,"endLine":282,"endColumn":9,"fileName":"pxt_modules/game/prompt.ts","functionName":"updateButtons","argumentNames":["this"]}

function game_Prompt_updateButtons__P4677_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_updateButtons__P4677, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  arg0: undefined,
} }





function game_Prompt_moveHorizontal__P4684(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Prompt__C2643_VT)) failedCast(r0);
    s.lastBrkId = 2952;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2952]) return breakpoint(s, 3, 2952, r0);
  case 3:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2953;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2953]) return breakpoint(s, 4, 2953, r0);
  case 4:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.arg0.fields["cursorColumn"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 + 1);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 % 12);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["cursorColumn"] = (s.tmp_1);
    { step = 2; continue; }
  case 1:
    s.lastBrkId = 2954;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2954]) return breakpoint(s, 5, 2954, r0);
  case 5:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.arg0.fields["cursorColumn"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 + 11);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 % 12);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["cursorColumn"] = (s.tmp_1);
  case 2:
    s.lastBrkId = 2955;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2955]) return breakpoint(s, 6, 2955, r0);
  case 6:
    s.tmp_0 = game_Prompt_updateCursor__P4678_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1253; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_moveHorizontal__P4684.info = {"start":13310,"length":346,"line":396,"column":8,"endLine":405,"endColumn":9,"fileName":"pxt_modules/game/prompt.ts","functionName":"moveHorizontal","argumentNames":["this","right"]}

function game_Prompt_moveHorizontal__P4684_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_moveHorizontal__P4684, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function game_Prompt_updateCursor__P4678(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Prompt__C2643_VT)) failedCast(r0);
    s.lastBrkId = 2898;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2898]) return breakpoint(s, 3, 2898, r0);
  case 3:
    r0 = s.arg0.fields["cursorRow"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 === 3);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2899;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2899]) return breakpoint(s, 4, 2899, r0);
  case 4:
    s.tmp_3 = Sprite_image__P2131_mk(s);
    r0 = s.arg0.fields["cursor"];
    s.tmp_3.arg0 = r0;
    s.callLocIdx = 1217; s.pc = 5; return s.tmp_3;
  case 5:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_ImageMethods.fill(s.tmp_2, 0);
    s.lastBrkId = 2900;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2900]) return breakpoint(s, 6, 2900, r0);
  case 6:
    s.tmp_0 = game_Prompt_updateButtons__P4677_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1218; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    { step = 2; continue; }
  case 1:
    s.lastBrkId = 2901;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2901]) return breakpoint(s, 8, 2901, r0);
  case 8:
    s.tmp_0 = Sprite_x__P2102_mk(s);
    r0 = s.arg0.fields["cursor"];
    s.tmp_0.arg0 = r0;
    s.tmp_1 = r0 = globals.ROW_LEFT___4614;
    r0 = s.arg0.fields["cursorColumn"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 * globals.CELL_WIDTH___4596);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 + s.tmp_2);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1219; s.pc = 9; return s.tmp_0;
  case 9:
    r0 = s.retval;
    s.lastBrkId = 2902;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2902]) return breakpoint(s, 10, 2902, r0);
  case 10:
    s.tmp_0 = Sprite_y__P2104_mk(s);
    r0 = s.arg0.fields["cursor"];
    s.tmp_0.arg0 = r0;
    s.tmp_1 = r0 = globals.ALPHABET_TOP___4654;
    r0 = s.arg0.fields["cursorRow"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 * globals.CELL_HEIGHT___4598);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 + s.tmp_2);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1220; s.pc = 11; return s.tmp_0;
  case 11:
    r0 = s.retval;
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_updateCursor__P4678.info = {"start":9819,"length":354,"line":284,"column":8,"endLine":293,"endColumn":9,"fileName":"pxt_modules/game/prompt.ts","functionName":"updateCursor","argumentNames":["this"]}

function game_Prompt_updateCursor__P4678_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_updateCursor__P4678, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
} }





function game_Prompt_moveVertical__P4683(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Prompt__C2643_VT)) failedCast(r0);
    s.lastBrkId = 2939;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2939]) return breakpoint(s, 11, 2939, r0);
  case 11:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 2940;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2940]) return breakpoint(s, 12, 2940, r0);
  case 12:
    r0 = s.arg0.fields["cursorRow"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 === 3);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2941;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2941]) return breakpoint(s, 13, 2941, r0);
  case 13:
    s.tmp_3 = Sprite_image__P2131_mk(s);
    r0 = s.arg0.fields["cursor"];
    s.tmp_3.arg0 = r0;
    s.callLocIdx = 1247; s.pc = 14; return s.tmp_3;
  case 14:
    r0 = s.retval;
    s.tmp_2 = r0;
    s.tmp_5 = if_colorCursor_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_5.arg0 = r0;
    if (!s.tmp_5.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_5.arg0, "colorCursor");
    } else {
      s.tmp_5.fn = s.tmp_5.arg0.vtable.iface["colorCursor"];
      if (s.tmp_5.fn == null) { s.retval = s.tmp_5.arg0.fields["colorCursor"]; }
      else if (!s.tmp_5.fn.isGetter) { s.retval = bind(s.tmp_5); }
     else { s.callLocIdx = 1248; s.pc = 15; return s.tmp_5; }
    }
  case 15:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_ImageMethods.fill(s.tmp_2, s.tmp_4);
    s.lastBrkId = 2942;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2942]) return breakpoint(s, 16, 2942, r0);
  case 16:
    r0 = (s.arg0).fields["cursorRow"] = (2);
    s.lastBrkId = 2943;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2943]) return breakpoint(s, 17, 2943, r0);
  case 17:
    r0 = s.arg0.fields["cursorColumn"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 % 2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2944;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2944]) return breakpoint(s, 18, 2944, r0);
  case 18:
    r0 = (s.arg0).fields["cursorColumn"] = (11);
    { step = 2; continue; }
  case 1:
    s.lastBrkId = 2945;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2945]) return breakpoint(s, 19, 2945, r0);
  case 19:
    r0 = (s.arg0).fields["cursorColumn"] = (0);
  case 2:
    s.lastBrkId = 2946;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2946]) return breakpoint(s, 20, 2946, r0);
  case 20:
    s.tmp_0 = game_Prompt_updateButtons__P4677_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1249; s.pc = 21; return s.tmp_0;
  case 21:
    r0 = s.retval;
    { step = 4; continue; }
  case 3:
    s.lastBrkId = 2947;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2947]) return breakpoint(s, 22, 2947, r0);
  case 22:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Math_max__P130_mk(s);
    s.tmp_2.arg0 = 0;
    r0 = s.arg0.fields["cursorRow"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 - 1);
    s.tmp_2.arg1 = r0;
    s.callLocIdx = 1250; s.pc = 23; return s.tmp_2;
  case 23:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["cursorRow"] = (s.tmp_1);
  case 4:
    { step = 10; continue; }
  case 5:
    s.lastBrkId = 2948;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2948]) return breakpoint(s, 24, 2948, r0);
  case 24:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Math_min__P131_mk(s);
    s.tmp_2.arg0 = 3;
    r0 = s.arg0.fields["cursorRow"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 + 1);
    s.tmp_2.arg1 = r0;
    s.callLocIdx = 1251; s.pc = 25; return s.tmp_2;
  case 25:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["cursorRow"] = (s.tmp_1);
    s.lastBrkId = 2949;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2949]) return breakpoint(s, 26, 2949, r0);
  case 26:
    r0 = s.arg0.fields["cursorRow"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 === 3);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 8; continue; }
    s.lastBrkId = 2950;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2950]) return breakpoint(s, 27, 2950, r0);
  case 27:
    r0 = s.arg0.fields["cursorColumn"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 > 5);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 6; continue; }
    r0 = 1;
    { step = 7; continue; }
  case 6:
    r0 = 0;
  case 7:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    r0 = (s.arg0).fields["cursorColumn"] = (s.tmp_4);
  case 8:
  case 9:
  case 10:
    s.lastBrkId = 2951;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2951]) return breakpoint(s, 28, 2951, r0);
  case 28:
    s.tmp_0 = game_Prompt_updateCursor__P4678_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1252; s.pc = 29; return s.tmp_0;
  case 29:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_moveVertical__P4683.info = {"start":12347,"length":953,"line":365,"column":8,"endLine":394,"endColumn":9,"fileName":"pxt_modules/game/prompt.ts","functionName":"moveVertical","argumentNames":["this","up"]}

function game_Prompt_moveVertical__P4683_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_moveVertical__P4683, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function game_Prompt_updateSelectedInput__P4679(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.u___15190 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Prompt__C2643_VT)) failedCast(r0);
    s.lastBrkId = 2903;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2903]) return breakpoint(s, 5, 2903, r0);
  case 5:
    r0 = s.arg0.fields["inputIndex"];
    s.tmp_1 = r0;
    r0 = s.arg0.fields["answerLength"];
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2904;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2904]) return breakpoint(s, 6, 2904, r0);
  case 6:
    r0 = s.arg0.fields["inputs"];
    s.tmp_3 = r0;
    r0 = s.arg0.fields["inputIndex"];
    s.tmp_4 = r0;
    r0 = pxsim_Array__getAt(s.tmp_3, s.tmp_4);
    s.u___15190 = (r0);
    s.lastBrkId = 2905;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2905]) return breakpoint(s, 7, 2905, r0);
  case 7:
    r0 = s.arg0.fields["blink"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2906;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2906]) return breakpoint(s, 8, 2906, r0);
  case 8:
    s.tmp_1 = game_Prompt_drawInput__P4681_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.tmp_2 = Sprite_image__P2131_mk(s);
    s.tmp_2.arg0 = s.u___15190;
    s.callLocIdx = 1221; s.pc = 10; return s.tmp_2;
  case 10:
    r0 = s.retval;
    s.tmp_1.arg1 = r0;
    r0 = pxsim_String_.mkEmpty();
    s.tmp_1.arg2 = r0;
    s.tmp_3 = if_colorInput_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_3.arg0 = r0;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "colorInput");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["colorInput"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["colorInput"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1222; s.pc = 11; return s.tmp_3; }
    }
  case 11:
    r0 = s.retval;
    s.tmp_1.arg3 = r0;
    s.callLocIdx = 1223; s.pc = 9; return s.tmp_1;
  case 9:
    r0 = s.retval;
    { step = 2; continue; }
  case 1:
    s.lastBrkId = 2907;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2907]) return breakpoint(s, 12, 2907, r0);
  case 12:
    s.tmp_0 = game_Prompt_drawInput__P4681_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_1 = Sprite_image__P2131_mk(s);
    s.tmp_1.arg0 = s.u___15190;
    s.callLocIdx = 1224; s.pc = 14; return s.tmp_1;
  case 14:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    r0 = pxsim_String_.mkEmpty();
    s.tmp_0.arg2 = r0;
    s.tmp_2 = if_colorInputHighlighted_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "colorInputHighlighted");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["colorInputHighlighted"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["colorInputHighlighted"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1225; s.pc = 15; return s.tmp_2; }
    }
  case 15:
    r0 = s.retval;
    s.tmp_0.arg3 = r0;
    s.callLocIdx = 1226; s.pc = 13; return s.tmp_0;
  case 13:
    r0 = s.retval;
  case 2:
  case 3:
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_updateSelectedInput__P4679.info = {"start":10183,"length":413,"line":295,"column":8,"endLine":305,"endColumn":9,"fileName":"pxt_modules/game/prompt.ts","functionName":"updateSelectedInput","argumentNames":["this"]}

function game_Prompt_updateSelectedInput__P4679_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_updateSelectedInput__P4679, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  u___15190: undefined,
  arg0: undefined,
} }





function game_Prompt_draw__P4672(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Prompt__C2643_VT)) failedCast(r0);
    s.lastBrkId = 2836;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2836]) return breakpoint(s, 1, 2836, r0);
  case 1:
    s.tmp_0 = game_Prompt_drawPromptText__P4673_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1166; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 2837;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2837]) return breakpoint(s, 3, 2837, r0);
  case 3:
    s.tmp_0 = game_Prompt_drawKeyboard__P4675_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1167; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.lastBrkId = 2838;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2838]) return breakpoint(s, 5, 2838, r0);
  case 5:
    s.tmp_0 = game_Prompt_drawInputarea__P4674_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1168; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    s.lastBrkId = 2839;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2839]) return breakpoint(s, 7, 2839, r0);
  case 7:
    s.tmp_0 = game_Prompt_drawBottomBar__P4676_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1169; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_draw__P4672.info = {"start":5793,"length":162,"line":182,"column":8,"endLine":187,"endColumn":9,"fileName":"pxt_modules/game/prompt.ts","functionName":"draw","argumentNames":["this"]}

function game_Prompt_draw__P4672_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_draw__P4672, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function game_Prompt_drawBottomBar__P4676(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.bg___15715 = undefined;
    s.bgSprite___15727 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Prompt__C2643_VT)) failedCast(r0);
    s.lastBrkId = 2875;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2875]) return breakpoint(s, 1, 2875, r0);
  case 1:
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_0 = r0;
    r0 = pxsim.image.create(s.tmp_0, globals.BOTTOM_BAR_HEIGHT___4622);
    s.bg___15715 = (r0);
    s.lastBrkId = 2876;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2876]) return breakpoint(s, 2, 2876, r0);
  case 2:
    s.tmp_0 = r0 = s.bg___15715;
    s.tmp_2 = if_colorBottomBackground_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "colorBottomBackground");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["colorBottomBackground"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["colorBottomBackground"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1191; s.pc = 3; return s.tmp_2; }
    }
  case 3:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_ImageMethods.fill(s.tmp_0, s.tmp_1);
    s.lastBrkId = 2877;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2877]) return breakpoint(s, 4, 2877, r0);
  case 4:
    s.tmp_0 = sprites_create__P2043_mk(s);
    s.tmp_0.arg0 = s.bg___15715;
    s.tmp_0.arg1 = -1;
    s.callLocIdx = 1192; s.pc = 5; return s.tmp_0;
  case 5:
    r0 = s.retval;
    s.bgSprite___15727 = (r0);
    s.lastBrkId = 2878;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2878]) return breakpoint(s, 6, 2878, r0);
  case 6:
    s.tmp_0 = Sprite_x__P2102_mk(s);
    s.tmp_0.arg0 = s.bgSprite___15727;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 / 2);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1193; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    s.lastBrkId = 2879;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2879]) return breakpoint(s, 8, 2879, r0);
  case 8:
    s.tmp_0 = Sprite_y__P2104_mk(s);
    s.tmp_0.arg0 = s.bgSprite___15727;
    s.tmp_1 = r0 = globals.BOTTOM_BAR_TOP___4625;
    r0 = (globals.BOTTOM_BAR_HEIGHT___4622 / 2);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 + s.tmp_2);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1194; s.pc = 9; return s.tmp_0;
  case 9:
    r0 = s.retval;
    s.lastBrkId = 2880;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2880]) return breakpoint(s, 10, 2880, r0);
  case 10:
    s.tmp_0 = if_z_2_mk(s);
    s.tmp_0.arg0 = s.bgSprite___15727;
    s.tmp_0.arg1 = -1;
    if (!s.tmp_0.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapSetByString(s.tmp_0.arg0, "z", s.tmp_0.arg1);
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["set/z"];
      if (s.tmp_0.fn === null) { s.tmp_0.arg0.fields["z"] = s.tmp_0.arg1; }
      else if (s.tmp_0.fn === undefined) { failedCast(s.tmp_0.arg0) } 
     else { s.callLocIdx = 1195; s.pc = 11; return s.tmp_0; }
    }
  case 11:
    r0 = s.retval;
    s.lastBrkId = 2881;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2881]) return breakpoint(s, 12, 2881, r0);
  case 12:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = sprites_create__P2043_mk(s);
    r0 = pxsim.image.create(globals.BOTTOM_BAR_BUTTON_WIDTH___4632, globals.BOTTOM_BAR_HEIGHT___4622);
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = -1;
    s.callLocIdx = 1196; s.pc = 13; return s.tmp_2;
  case 13:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["shiftButton"] = (s.tmp_1);
    s.lastBrkId = 2882;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2882]) return breakpoint(s, 14, 2882, r0);
  case 14:
    s.tmp_0 = Sprite_x__P2102_mk(s);
    r0 = s.arg0.fields["shiftButton"];
    s.tmp_0.arg0 = r0;
    r0 = (globals.BOTTOM_BAR_BUTTON_WIDTH___4632 / 2);
    s.tmp_1 = r0;
    r0 = pxsim.Math_.floor(s.tmp_1);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1197; s.pc = 15; return s.tmp_0;
  case 15:
    r0 = s.retval;
    s.lastBrkId = 2883;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2883]) return breakpoint(s, 16, 2883, r0);
  case 16:
    s.tmp_0 = Sprite_y__P2104_mk(s);
    r0 = s.arg0.fields["shiftButton"];
    s.tmp_0.arg0 = r0;
    s.tmp_1 = r0 = globals.BOTTOM_BAR_TOP___4625;
    r0 = (globals.BOTTOM_BAR_HEIGHT___4622 / 2);
    s.tmp_3 = r0;
    r0 = pxsim.Math_.ceil(s.tmp_3);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 + s.tmp_2);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1198; s.pc = 17; return s.tmp_0;
  case 17:
    r0 = s.retval;
    s.lastBrkId = 2884;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2884]) return breakpoint(s, 18, 2884, r0);
  case 18:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = sprites_create__P2043_mk(s);
    r0 = pxsim.image.create(globals.BOTTOM_BAR_BUTTON_WIDTH___4632, globals.BOTTOM_BAR_HEIGHT___4622);
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = -1;
    s.callLocIdx = 1199; s.pc = 19; return s.tmp_2;
  case 19:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["confirmButton"] = (s.tmp_1);
    s.lastBrkId = 2885;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2885]) return breakpoint(s, 20, 2885, r0);
  case 20:
    s.tmp_0 = Sprite_x__P2102_mk(s);
    r0 = s.arg0.fields["confirmButton"];
    s.tmp_0.arg0 = r0;
    s.tmp_1 = r0 = globals.CONFIRM_BUTTON_LEFT___4644;
    r0 = (globals.BOTTOM_BAR_BUTTON_WIDTH___4632 / 2);
    s.tmp_3 = r0;
    r0 = pxsim.Math_.floor(s.tmp_3);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 + s.tmp_2);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1200; s.pc = 21; return s.tmp_0;
  case 21:
    r0 = s.retval;
    s.lastBrkId = 2886;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2886]) return breakpoint(s, 22, 2886, r0);
  case 22:
    s.tmp_0 = Sprite_y__P2104_mk(s);
    r0 = s.arg0.fields["confirmButton"];
    s.tmp_0.arg0 = r0;
    s.tmp_1 = r0 = globals.BOTTOM_BAR_TOP___4625;
    r0 = (globals.BOTTOM_BAR_HEIGHT___4622 / 2);
    s.tmp_3 = r0;
    r0 = pxsim.Math_.ceil(s.tmp_3);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 + s.tmp_2);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1201; s.pc = 23; return s.tmp_0;
  case 23:
    r0 = s.retval;
    s.lastBrkId = 2887;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2887]) return breakpoint(s, 24, 2887, r0);
  case 24:
    s.tmp_0 = game_Prompt_updateButtons__P4677_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1202; s.pc = 25; return s.tmp_0;
  case 25:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_drawBottomBar__P4676.info = {"start":7903,"length":950,"line":238,"column":8,"endLine":256,"endColumn":9,"fileName":"pxt_modules/game/prompt.ts","functionName":"drawBottomBar","argumentNames":["this"]}

function game_Prompt_drawBottomBar__P4676_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_drawBottomBar__P4676, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  bg___15715: undefined,
  bgSprite___15727: undefined,
  arg0: undefined,
} }





function game_Prompt_drawKeyboard__P4675(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.cursorImage___15883 = undefined;
    s.j___15909 = undefined;
    s.letter___15913 = undefined;
    s.col2___15918 = undefined;
    s.row2___15922 = undefined;
    s.t___15928 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Prompt__C2643_VT)) failedCast(r0);
    s.lastBrkId = 2857;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2857]) return breakpoint(s, 3, 2857, r0);
  case 3:
    r0 = pxsim.image.create(globals.CELL_WIDTH___4596, globals.CELL_HEIGHT___4598);
    s.cursorImage___15883 = (r0);
    s.lastBrkId = 2858;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2858]) return breakpoint(s, 4, 2858, r0);
  case 4:
    s.tmp_0 = r0 = s.cursorImage___15883;
    s.tmp_2 = if_colorCursor_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "colorCursor");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["colorCursor"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["colorCursor"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1183; s.pc = 5; return s.tmp_2; }
    }
  case 5:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_ImageMethods.fill(s.tmp_0, s.tmp_1);
    s.lastBrkId = 2859;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2859]) return breakpoint(s, 6, 2859, r0);
  case 6:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = sprites_create__P2043_mk(s);
    s.tmp_2.arg0 = s.cursorImage___15883;
    s.tmp_2.arg1 = -1;
    s.callLocIdx = 1184; s.pc = 7; return s.tmp_2;
  case 7:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["cursor"] = (s.tmp_1);
    s.lastBrkId = 2860;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2860]) return breakpoint(s, 8, 2860, r0);
  case 8:
    s.tmp_0 = if_z_2_mk(s);
    r0 = s.arg0.fields["cursor"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = -1;
    if (!s.tmp_0.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapSetByString(s.tmp_0.arg0, "z", s.tmp_0.arg1);
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["set/z"];
      if (s.tmp_0.fn === null) { s.tmp_0.arg0.fields["z"] = s.tmp_0.arg1; }
      else if (s.tmp_0.fn === undefined) { failedCast(s.tmp_0.arg0) } 
     else { s.callLocIdx = 1185; s.pc = 9; return s.tmp_0; }
    }
  case 9:
    r0 = s.retval;
    s.lastBrkId = 2861;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2861]) return breakpoint(s, 10, 2861, r0);
  case 10:
    s.tmp_0 = game_Prompt_updateCursor__P4678_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1186; s.pc = 11; return s.tmp_0;
  case 11:
    r0 = s.retval;
    s.lastBrkId = 2862;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2862]) return breakpoint(s, 12, 2862, r0);
  case 12:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["letters"] = (s.tmp_1);
    s.lastBrkId = 2863;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2863]) return breakpoint(s, 13, 2863, r0);
  case 13:
    s.j___15909 = (0);
    s.lastBrkId = 2864;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2864]) return breakpoint(s, 14, 2864, r0);
  case 14:
  case 1:
    s.lastBrkId = 2865;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2865]) return breakpoint(s, 15, 2865, r0);
  case 15:
    r0 = (s.j___15909 < 36);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 2866;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2866]) return breakpoint(s, 16, 2866, r0);
  case 16:
    r0 = pxsim.image.create(globals.CELL_WIDTH___4596, globals.CELL_HEIGHT___4598);
    s.letter___15913 = (r0);
    s.lastBrkId = 2867;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2867]) return breakpoint(s, 17, 2867, r0);
  case 17:
    r0 = (s.j___15909 % 12);
    s.col2___15918 = (r0);
    s.lastBrkId = 2868;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2868]) return breakpoint(s, 18, 2868, r0);
  case 18:
    r0 = (s.j___15909 / 12);
    s.tmp_0 = r0;
    r0 = pxsim.Math_.floor(s.tmp_0);
    s.row2___15922 = (r0);
    s.lastBrkId = 2869;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2869]) return breakpoint(s, 19, 2869, r0);
  case 19:
    s.tmp_0 = sprites_create__P2043_mk(s);
    s.tmp_0.arg0 = s.letter___15913;
    s.tmp_0.arg1 = -1;
    s.callLocIdx = 1187; s.pc = 20; return s.tmp_0;
  case 20:
    r0 = s.retval;
    s.t___15928 = (r0);
    s.lastBrkId = 2870;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2870]) return breakpoint(s, 21, 2870, r0);
  case 21:
    s.tmp_0 = Sprite_x__P2102_mk(s);
    s.tmp_0.arg0 = s.t___15928;
    s.tmp_1 = r0 = globals.ROW_LEFT___4614;
    r0 = (s.col2___15918 * globals.CELL_WIDTH___4596);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 + s.tmp_2);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1188; s.pc = 22; return s.tmp_0;
  case 22:
    r0 = s.retval;
    s.lastBrkId = 2871;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2871]) return breakpoint(s, 23, 2871, r0);
  case 23:
    s.tmp_0 = Sprite_y__P2104_mk(s);
    s.tmp_0.arg0 = s.t___15928;
    s.tmp_1 = r0 = globals.ALPHABET_TOP___4654;
    r0 = (s.row2___15922 * globals.CELL_HEIGHT___4598);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 + s.tmp_2);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1189; s.pc = 24; return s.tmp_0;
  case 24:
    r0 = s.retval;
    s.lastBrkId = 2872;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2872]) return breakpoint(s, 25, 2872, r0);
  case 25:
    r0 = s.arg0.fields["letters"];
    s.tmp_0 = r0;
    r0 = pxsim_Array__push(s.tmp_0, s.t___15928);
    s.lastBrkId = 2873;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2873]) return breakpoint(s, 26, 2873, r0);
  case 26:
    r0 = (s.j___15909 + 1);
    s.j___15909 = (r0);
    { step = 1; continue; }
  case 2:
    s.lastBrkId = 2874;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2874]) return breakpoint(s, 27, 2874, r0);
  case 27:
    s.tmp_0 = game_Prompt_updateKeyboard__P4680_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1190; s.pc = 28; return s.tmp_0;
  case 28:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_drawKeyboard__P4675.info = {"start":7092,"length":801,"line":215,"column":8,"endLine":236,"endColumn":9,"fileName":"pxt_modules/game/prompt.ts","functionName":"drawKeyboard","argumentNames":["this"]}

function game_Prompt_drawKeyboard__P4675_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_drawKeyboard__P4675, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  cursorImage___15883: undefined,
  j___15909: undefined,
  letter___15913: undefined,
  col2___15918: undefined,
  row2___15922: undefined,
  t___15928: undefined,
  arg0: undefined,
} }





function game_Prompt_drawInputarea__P4674(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.answerLeft___15806 = undefined;
    s.i___15827 = undefined;
    s.blank___15833 = undefined;
    s.col___15843 = undefined;
    s.row___15847 = undefined;
    s.s___15853 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Prompt__C2643_VT)) failedCast(r0);
    s.lastBrkId = 2843;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2843]) return breakpoint(s, 3, 2843, r0);
  case 3:
    s.tmp_0 = r0 = globals.ROW_LEFT___4614;
    r0 = (globals.CELL_WIDTH___4596 * 12);
    s.tmp_4 = r0;
    s.tmp_6 = r0 = globals.CELL_WIDTH___4596;
    s.tmp_8 = Math_min__P131_mk(s);
    r0 = s.arg0.fields["answerLength"];
    s.tmp_8.arg0 = r0;
    s.tmp_8.arg1 = 12;
    s.callLocIdx = 1177; s.pc = 4; return s.tmp_8;
  case 4:
    r0 = s.retval;
    s.tmp_7 = r0;
    r0 = (s.tmp_6 * s.tmp_7);
    s.tmp_5 = r0;
    r0 = (s.tmp_4 - s.tmp_5);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 / 2);
    s.tmp_2 = r0;
    r0 = pxsim.Math_.floor(s.tmp_2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 + s.tmp_1);
    s.answerLeft___15806 = (r0);
    s.lastBrkId = 2844;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2844]) return breakpoint(s, 5, 2844, r0);
  case 5:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["inputs"] = (s.tmp_1);
    s.lastBrkId = 2845;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2845]) return breakpoint(s, 6, 2845, r0);
  case 6:
    s.i___15827 = (0);
    s.lastBrkId = 2846;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2846]) return breakpoint(s, 7, 2846, r0);
  case 7:
  case 1:
    s.lastBrkId = 2847;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2847]) return breakpoint(s, 8, 2847, r0);
  case 8:
    r0 = s.arg0.fields["answerLength"];
    s.tmp_1 = r0;
    r0 = (s.i___15827 < s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 2848;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2848]) return breakpoint(s, 9, 2848, r0);
  case 9:
    r0 = pxsim.image.create(globals.CELL_WIDTH___4596, globals.CELL_HEIGHT___4598);
    s.blank___15833 = (r0);
    s.lastBrkId = 2849;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2849]) return breakpoint(s, 10, 2849, r0);
  case 10:
    s.tmp_0 = game_Prompt_drawInput__P4681_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.blank___15833;
    r0 = pxsim_String_.mkEmpty();
    s.tmp_0.arg2 = r0;
    s.tmp_1 = if_colorInput_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_1.arg0 = r0;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "colorInput");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["colorInput"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["colorInput"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 1178; s.pc = 12; return s.tmp_1; }
    }
  case 12:
    r0 = s.retval;
    s.tmp_0.arg3 = r0;
    s.callLocIdx = 1179; s.pc = 11; return s.tmp_0;
  case 11:
    r0 = s.retval;
    s.lastBrkId = 2850;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2850]) return breakpoint(s, 13, 2850, r0);
  case 13:
    r0 = (s.i___15827 % 12);
    s.col___15843 = (r0);
    s.lastBrkId = 2851;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2851]) return breakpoint(s, 14, 2851, r0);
  case 14:
    r0 = (s.i___15827 / 12);
    s.tmp_0 = r0;
    r0 = pxsim.Math_.floor(s.tmp_0);
    s.row___15847 = (r0);
    s.lastBrkId = 2852;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2852]) return breakpoint(s, 15, 2852, r0);
  case 15:
    s.tmp_0 = sprites_create__P2043_mk(s);
    s.tmp_0.arg0 = s.blank___15833;
    s.tmp_0.arg1 = -1;
    s.callLocIdx = 1180; s.pc = 16; return s.tmp_0;
  case 16:
    r0 = s.retval;
    s.s___15853 = (r0);
    s.lastBrkId = 2853;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2853]) return breakpoint(s, 17, 2853, r0);
  case 17:
    s.tmp_0 = Sprite_x__P2102_mk(s);
    s.tmp_0.arg0 = s.s___15853;
    s.tmp_1 = r0 = s.answerLeft___15806;
    r0 = (s.col___15843 * globals.CELL_WIDTH___4596);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 + s.tmp_2);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1181; s.pc = 18; return s.tmp_0;
  case 18:
    r0 = s.retval;
    s.lastBrkId = 2854;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2854]) return breakpoint(s, 19, 2854, r0);
  case 19:
    s.tmp_0 = Sprite_y__P2104_mk(s);
    s.tmp_0.arg0 = s.s___15853;
    s.tmp_1 = r0 = globals.INPUT_TOP___4664;
    r0 = (s.row___15847 * globals.CELL_HEIGHT___4598);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 + s.tmp_2);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1182; s.pc = 20; return s.tmp_0;
  case 20:
    r0 = s.retval;
    s.lastBrkId = 2855;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2855]) return breakpoint(s, 21, 2855, r0);
  case 21:
    r0 = s.arg0.fields["inputs"];
    s.tmp_0 = r0;
    r0 = pxsim_Array__push(s.tmp_0, s.s___15853);
    s.lastBrkId = 2856;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2856]) return breakpoint(s, 22, 2856, r0);
  case 22:
    r0 = (s.i___15827 + 1);
    s.i___15827 = (r0);
    { step = 1; continue; }
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_drawInputarea__P4674.info = {"start":6296,"length":786,"line":195,"column":8,"endLine":213,"endColumn":9,"fileName":"pxt_modules/game/prompt.ts","functionName":"drawInputarea","argumentNames":["this"]}

function game_Prompt_drawInputarea__P4674_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_drawInputarea__P4674, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  answerLeft___15806: undefined,
  i___15827: undefined,
  blank___15833: undefined,
  col___15843: undefined,
  row___15847: undefined,
  s___15853: undefined,
  arg0: undefined,
} }





function game_Prompt_drawPromptText__P4673(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.prompt___15957 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Prompt__C2643_VT)) failedCast(r0);
    s.lastBrkId = 2840;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2840]) return breakpoint(s, 1, 2840, r0);
  case 1:
    s.tmp_0 = sprites_create__P2043_mk(s);
    s.tmp_1 = game_layoutText__P4688_mk(s);
    r0 = s.arg0.fields["message"];
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = globals.CONTENT_WIDTH___4587;
    s.tmp_1.arg2 = globals.PROMPT_HEIGHT___4667;
    s.tmp_2 = if_colorPrompt_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "colorPrompt");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["colorPrompt"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["colorPrompt"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1170; s.pc = 4; return s.tmp_2; }
    }
  case 4:
    r0 = s.retval;
    s.tmp_1.arg3 = r0;
    s.callLocIdx = 1171; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = -1;
    s.callLocIdx = 1172; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.prompt___15957 = (r0);
    s.lastBrkId = 2841;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2841]) return breakpoint(s, 5, 2841, r0);
  case 5:
    s.tmp_0 = Sprite_x__P2102_mk(s);
    s.tmp_0.arg0 = s.prompt___15957;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 / 2);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1173; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    s.lastBrkId = 2842;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2842]) return breakpoint(s, 7, 2842, r0);
  case 7:
    s.tmp_0 = Sprite_y__P2104_mk(s);
    s.tmp_0.arg0 = s.prompt___15957;
    s.tmp_5 = r0 = globals.PROMPT_HEIGHT___4667;
    s.tmp_7 = Sprite_height__P2137_mk(s);
    s.tmp_7.arg0 = s.prompt___15957;
    s.callLocIdx = 1174; s.pc = 9; return s.tmp_7;
  case 9:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = (s.tmp_5 - s.tmp_6);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 / 2);
    s.tmp_3 = r0;
    r0 = pxsim.Math_.floor(s.tmp_3);
    s.tmp_2 = r0;
    r0 = (4 + s.tmp_2);
    s.tmp_1 = r0;
    s.tmp_11 = Sprite_height__P2137_mk(s);
    s.tmp_11.arg0 = s.prompt___15957;
    s.callLocIdx = 1175; s.pc = 10; return s.tmp_11;
  case 10:
    r0 = s.retval;
    s.tmp_10 = r0;
    r0 = (s.tmp_10 / 2);
    s.tmp_9 = r0;
    r0 = pxsim.Math_.floor(s.tmp_9);
    s.tmp_8 = r0;
    r0 = (s.tmp_1 + s.tmp_8);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1176; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_drawPromptText__P4673.info = {"start":5965,"length":321,"line":189,"column":8,"endLine":193,"endColumn":9,"fileName":"pxt_modules/game/prompt.ts","functionName":"drawPromptText","argumentNames":["this"]}

function game_Prompt_drawPromptText__P4673_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_drawPromptText__P4673, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  prompt___15957: undefined,
  arg0: undefined,
} }





function game_layoutText__P4688(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lineHeight___16002 = undefined;
    s.lineLength___16007 = undefined;
    s.numLines___16014 = undefined;
    s.lines___16020 = undefined;
    s.word___16022 = undefined;
    s.line___16023 = undefined;
    s.pushWord___16024 = undefined;
    s.l___16056 = undefined;
    s.char___16062 = undefined;
    s.maxLineWidth___16091 = undefined;
    s.m___16092 = undefined;
    s.actualWidth___16106 = undefined;
    s.actualHeight___16111 = undefined;
    s.res___16116 = undefined;
    s.n___16121 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 2982;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2982]) return breakpoint(s, 19, 2982, r0);
  case 19:
    s.tmp_1 = if_charHeight_1_mk(s);
    s.tmp_1.arg0 = globals.font___4569;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "charHeight");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["charHeight"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["charHeight"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 1267; s.pc = 20; return s.tmp_1; }
    }
  case 20:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = (s.tmp_0 + 2);
    s.lineHeight___16002 = (r0);
    s.lastBrkId = 2983;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2983]) return breakpoint(s, 21, 2983, r0);
  case 21:
    s.tmp_1 = r0 = s.arg1;
    s.tmp_3 = if_charWidth_1_mk(s);
    s.tmp_3.arg0 = globals.font___4569;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "charWidth");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["charWidth"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["charWidth"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1268; s.pc = 22; return s.tmp_3; }
    }
  case 22:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1 / s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim.Math_.floor(s.tmp_0);
    s.lineLength___16007 = (r0);
    s.lastBrkId = 2984;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2984]) return breakpoint(s, 23, 2984, r0);
  case 23:
    r0 = (s.arg2 / s.lineHeight___16002);
    s.tmp_0 = r0;
    r0 = pxsim.Math_.floor(s.tmp_0);
    s.numLines___16014 = (r0);
    s.lastBrkId = 2985;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2985]) return breakpoint(s, 24, 2985, r0);
  case 24:
    r0 = pxsim_Array__mk();
    s.lines___16020 = (r0);
    r0 = pxsim_pxtrt.mklocRef();
    s.word___16022 = (r0);
    r0 = pxsim_pxtrt.mklocRef();
    s.line___16023 = (r0);
    s.lastBrkId = 2986;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2986]) return breakpoint(s, 25, 2986, r0);
  case 25:
    r0 = pxsim_pxtcore_mkAction(4, pushWord_inline__P16025);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.line___16023);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 1, s.word___16022);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 2, s.lineLength___16007);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 3, s.lines___16020);
    s.pushWord___16024 = (s.tmp_0);
    s.lastBrkId = 2994;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2994]) return breakpoint(s, 26, 2994, r0);
  case 26:
    s.l___16056 = (0);
    s.lastBrkId = 2995;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2995]) return breakpoint(s, 27, 2995, r0);
  case 27:
  case 1:
    s.lastBrkId = 2996;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2996]) return breakpoint(s, 28, 2996, r0);
  case 28:
    s.tmp_1 = r0 = s.l___16056;
    r0 = pxsim_String_.length(s.arg0);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 8; continue; }
    s.lastBrkId = 2997;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2997]) return breakpoint(s, 29, 2997, r0);
  case 29:
    r0 = pxsim_String_.charAt(s.arg0, s.l___16056);
    s.char___16062 = (r0);
    s.lastBrkId = 2998;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2998]) return breakpoint(s, 30, 2998, r0);
  case 30:
    r0 = (s.char___16062 === " ");
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 2999;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2999]) return breakpoint(s, 31, 2999, r0);
  case 31:
    r0 = pxsim_pxtrt_ldlocRef(s.word___16022);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 3000;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3000]) return breakpoint(s, 32, 3000, r0);
  case 32:
    s.tmp_2 = lambda_1_mk(s);
    s.tmp_2.argL = s.pushWord___16024;
    setupLambda(s.tmp_2, s.tmp_2.argL);
    s.callLocIdx = 1269; s.pc = 33; return s.tmp_2;
  case 33:
    r0 = s.retval;
    { step = 3; continue; }
  case 2:
    s.lastBrkId = 3001;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3001]) return breakpoint(s, 34, 3001, r0);
  case 34:
    r0 = pxsim_pxtrt_stlocRef(s.word___16022, " ");
  case 3:
    { step = 7; continue; }
  case 4:
    s.lastBrkId = 3002;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3002]) return breakpoint(s, 35, 3002, r0);
  case 35:
    r0 = pxsim_pxtrt_ldlocRef(s.word___16022);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 3003;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3003]) return breakpoint(s, 36, 3003, r0);
  case 36:
    r0 = pxsim_pxtrt_stlocRef(s.word___16022, s.char___16062);
    { step = 6; continue; }
  case 5:
    s.lastBrkId = 3004;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3004]) return breakpoint(s, 37, 3004, r0);
  case 37:
    s.tmp_0 = r0 = s.word___16022;
    r0 = pxsim_pxtrt_ldlocRef(s.word___16022);
    s.tmp_3 = r0;
    if ((s.tmp_3) && (s.tmp_3).vtable) {
    setupResume(s, 38);
    pxsim_String__stringConv(s.tmp_3);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_3) + ""; }
  case 38:
    r0 = s.retval;
    s.tmp_2 = r0;
    if ((s.char___16062) && (s.char___16062).vtable) {
    setupResume(s, 39);
    pxsim_String__stringConv(s.char___16062);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.char___16062) + ""; }
  case 39:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_String__concat(s.tmp_2, s.tmp_4);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.tmp_1);
  case 6:
  case 7:
    s.lastBrkId = 3005;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3005]) return breakpoint(s, 40, 3005, r0);
  case 40:
    r0 = (s.l___16056 + 1);
    s.l___16056 = (r0);
    { step = 1; continue; }
  case 8:
    s.lastBrkId = 3006;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3006]) return breakpoint(s, 41, 3006, r0);
  case 41:
    r0 = pxsim_pxtrt_ldlocRef(s.word___16022);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 3007;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3007]) return breakpoint(s, 42, 3007, r0);
  case 42:
    s.tmp_1 = lambda_1_mk(s);
    s.tmp_1.argL = s.pushWord___16024;
    setupLambda(s.tmp_1, s.tmp_1.argL);
    s.callLocIdx = 1270; s.pc = 43; return s.tmp_1;
  case 43:
    r0 = s.retval;
  case 9:
  case 10:
    s.lastBrkId = 3008;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3008]) return breakpoint(s, 44, 3008, r0);
  case 44:
    r0 = pxsim_pxtrt_ldlocRef(s.line___16023);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 11; continue; }
    s.lastBrkId = 3009;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3009]) return breakpoint(s, 45, 3009, r0);
  case 45:
    s.tmp_1 = r0 = s.lines___16020;
    r0 = pxsim_pxtrt_ldlocRef(s.line___16023);
    s.tmp_2 = r0;
    r0 = pxsim_Array__push(s.tmp_1, s.tmp_2);
  case 11:
  case 12:
    s.lastBrkId = 3010;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3010]) return breakpoint(s, 46, 3010, r0);
  case 46:
    s.maxLineWidth___16091 = (0);
    s.lastBrkId = 3011;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3011]) return breakpoint(s, 47, 3011, r0);
  case 47:
    s.m___16092 = (0);
    s.lastBrkId = 3012;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3012]) return breakpoint(s, 48, 3012, r0);
  case 48:
  case 13:
    s.lastBrkId = 3013;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3013]) return breakpoint(s, 49, 3013, r0);
  case 49:
    s.tmp_1 = r0 = s.m___16092;
    r0 = pxsim_Array__length(s.lines___16020);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 14; continue; }
    s.lastBrkId = 3014;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3014]) return breakpoint(s, 50, 3014, r0);
  case 50:
    s.tmp_3 = Math_max__P130_mk(s);
    s.tmp_3.arg0 = s.maxLineWidth___16091;
    r0 = pxsim_Array__getAt(s.lines___16020, s.m___16092);
    s.tmp_4 = r0;
    r0 = pxsim_String_.length(s.tmp_4);
    s.tmp_3.arg1 = r0;
    s.callLocIdx = 1271; s.pc = 51; return s.tmp_3;
  case 51:
    r0 = s.retval;
    s.maxLineWidth___16091 = (r0);
    s.lastBrkId = 3015;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3015]) return breakpoint(s, 52, 3015, r0);
  case 52:
    r0 = (s.m___16092 + 1);
    s.m___16092 = (r0);
    { step = 13; continue; }
  case 14:
    s.lastBrkId = 3016;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3016]) return breakpoint(s, 53, 3016, r0);
  case 53:
    s.tmp_0 = r0 = s.maxLineWidth___16091;
    s.tmp_2 = if_charWidth_1_mk(s);
    s.tmp_2.arg0 = globals.font___4569;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "charWidth");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["charWidth"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["charWidth"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1272; s.pc = 54; return s.tmp_2; }
    }
  case 54:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0 * s.tmp_1);
    s.actualWidth___16106 = (r0);
    s.lastBrkId = 3017;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3017]) return breakpoint(s, 55, 3017, r0);
  case 55:
    r0 = pxsim_Array__length(s.lines___16020);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 * s.lineHeight___16002);
    s.actualHeight___16111 = (r0);
    s.lastBrkId = 3018;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3018]) return breakpoint(s, 56, 3018, r0);
  case 56:
    r0 = pxsim.image.create(s.actualWidth___16106, s.actualHeight___16111);
    s.res___16116 = (r0);
    s.lastBrkId = 3019;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3019]) return breakpoint(s, 57, 3019, r0);
  case 57:
    s.n___16121 = (0);
    s.lastBrkId = 3020;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3020]) return breakpoint(s, 58, 3020, r0);
  case 58:
  case 15:
    s.lastBrkId = 3021;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3021]) return breakpoint(s, 59, 3021, r0);
  case 59:
    s.tmp_1 = r0 = s.n___16121;
    r0 = pxsim_Array__length(s.lines___16020);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 18; continue; }
    s.lastBrkId = 3022;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3022]) return breakpoint(s, 60, 3022, r0);
  case 60:
    r0 = (s.n___16121 + 1);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 > s.numLines___16014);
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 16; continue; }
    s.lastBrkId = 3023;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3023]) return breakpoint(s, 61, 3023, r0);
  case 61:
    { step = 18; continue; }
  case 16:
  case 17:
    s.lastBrkId = 3024;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3024]) return breakpoint(s, 62, 3024, r0);
  case 62:
    s.tmp_5 = helpers_imagePrint__P1785_mk(s);
    s.tmp_5.arg0 = s.res___16116;
    r0 = pxsim_Array__getAt(s.lines___16020, s.n___16121);
    s.tmp_5.arg1 = r0;
    s.tmp_5.arg2 = 0;
    r0 = (s.n___16121 * s.lineHeight___16002);
    s.tmp_5.arg3 = r0;
    s.tmp_5.arg4 = s.arg3;
    s.tmp_5.arg5 = globals.font___4569;
    s.tmp_5.arg6 = undefined;
    s.callLocIdx = 1273; s.pc = 63; return s.tmp_5;
  case 63:
    r0 = s.retval;
    s.lastBrkId = 3025;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3025]) return breakpoint(s, 64, 3025, r0);
  case 64:
    r0 = (s.n___16121 + 1);
    s.n___16121 = (r0);
    { step = 15; continue; }
  case 18:
    s.lastBrkId = 3026;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3026]) return breakpoint(s, 65, 3026, r0);
  case 65:
    r0 = s.res___16116;
    return leave(s, r0)
  default: oops()
} } }
game_layoutText__P4688.info = {"start":15226,"length":1856,"line":457,"column":4,"endLine":527,"endColumn":5,"fileName":"pxt_modules/game/prompt.ts","functionName":"layoutText","argumentNames":["message","width","height","color"]}

function game_layoutText__P4688_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_layoutText__P4688, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  lineHeight___16002: undefined,
  lineLength___16007: undefined,
  numLines___16014: undefined,
  lines___16020: undefined,
  word___16022: undefined,
  line___16023: undefined,
  pushWord___16024: undefined,
  l___16056: undefined,
  char___16062: undefined,
  maxLineWidth___16091: undefined,
  m___16092: undefined,
  actualWidth___16106: undefined,
  actualHeight___16111: undefined,
  res___16116: undefined,
  n___16121: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function pushWord_inline__P16025(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 2987;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2987]) return breakpoint(s, 5, 2987, r0);
  case 5:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[0]);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2988;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2988]) return breakpoint(s, 6, 2988, r0);
  case 6:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[0]);
    s.tmp_5 = r0;
    r0 = pxsim_String_.length(s.tmp_5);
    s.tmp_4 = r0;
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.tmp_7 = r0;
    r0 = pxsim_String_.length(s.tmp_7);
    s.tmp_6 = r0;
    r0 = (s.tmp_4 + s.tmp_6);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 + 1);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 > s.caps[2]);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2989;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2989]) return breakpoint(s, 7, 2989, r0);
  case 7:
    s.tmp_8 = r0 = s.caps[3];
    r0 = pxsim_pxtrt_ldlocRef(s.caps[0]);
    s.tmp_9 = r0;
    r0 = pxsim_Array__push(s.tmp_8, s.tmp_9);
    s.lastBrkId = 2990;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2990]) return breakpoint(s, 8, 2990, r0);
  case 8:
    s.tmp_0 = r0 = s.caps[0];
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.tmp_1);
    { step = 2; continue; }
  case 1:
    s.lastBrkId = 2991;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2991]) return breakpoint(s, 9, 2991, r0);
  case 9:
    s.tmp_0 = r0 = s.caps[0];
    r0 = pxsim_pxtrt_ldlocRef(s.caps[0]);
    s.tmp_5 = r0;
    if ((s.tmp_5) && (s.tmp_5).vtable) {
    setupResume(s, 10);
    pxsim_String__stringConv(s.tmp_5);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_5) + ""; }
  case 10:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_String__concat(s.tmp_4, " ");
    s.tmp_3 = r0;
    if ((s.tmp_3) && (s.tmp_3).vtable) {
    setupResume(s, 11);
    pxsim_String__stringConv(s.tmp_3);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_3) + ""; }
  case 11:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.tmp_7 = r0;
    if ((s.tmp_7) && (s.tmp_7).vtable) {
    setupResume(s, 12);
    pxsim_String__stringConv(s.tmp_7);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_7) + ""; }
  case 12:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = pxsim_String__concat(s.tmp_2, s.tmp_6);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.tmp_1);
  case 2:
    { step = 4; continue; }
  case 3:
    s.lastBrkId = 2992;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2992]) return breakpoint(s, 13, 2992, r0);
  case 13:
    s.tmp_0 = r0 = s.caps[0];
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.tmp_1);
  case 4:
    s.lastBrkId = 2993;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2993]) return breakpoint(s, 14, 2993, r0);
  case 14:
    r0 = pxsim_pxtrt_stlocRef(s.caps[1], null);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
pushWord_inline__P16025.info = {"start":15610,"length":385,"line":467,"column":23,"endLine":482,"endColumn":9,"fileName":"pxt_modules/game/prompt.ts","functionName":"inline","argumentNames":[]}

function pushWord_inline__P16025_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: pushWord_inline__P16025, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
} }





function Sprite_height__P2137(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1259;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1259]) return breakpoint(s, 1, 1259, r0);
  case 1:
    r0 = s.arg0.fields["_image"];
    s.tmp_0 = r0;
    r0 = pxsim_ImageMethods.height(s.tmp_0);
    return leaveAccessor(s, r0)
  default: oops()
} } }
Sprite_height__P2137.info = {"start":8934,"length":54,"line":320,"column":4,"endLine":322,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"height","argumentNames":["this"]}
Sprite_height__P2137.isGetter = true;

function Sprite_height__P2137_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_height__P2137, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function game_Prompt_constructor__P2648(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Prompt__C2643_VT)) failedCast(r0);
    s.lastBrkId = 2817;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2817]) return breakpoint(s, 3, 2817, r0);
  case 3:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2818;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2818]) return breakpoint(s, 4, 2818, r0);
  case 4:
    r0 = (s.arg0).fields["theme"] = (s.arg1);
    { step = 2; continue; }
  case 1:
    s.lastBrkId = 2819;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2819]) return breakpoint(s, 5, 2819, r0);
  case 5:
    r0 = pxsim_pxtrt.mkMap();
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "colorPrompt", 1);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "colorInput", 3);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "colorInputHighlighted", 5);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "colorInputText", 1);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "colorAlphabet", 1);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "colorCursor", 7);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "colorBackground", 15);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "colorBottomBackground", 3);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "colorBottomText", 1);
    r0 = (s.arg0).fields["theme"] = (s.tmp_0);
  case 2:
    s.lastBrkId = 2820;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2820]) return breakpoint(s, 6, 2820, r0);
  case 6:
    r0 = (s.arg0).fields["cursorRow"] = (0);
    s.lastBrkId = 2821;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2821]) return breakpoint(s, 7, 2821, r0);
  case 7:
    r0 = (s.arg0).fields["cursorColumn"] = (0);
    s.lastBrkId = 2822;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2822]) return breakpoint(s, 8, 2822, r0);
  case 8:
    r0 = (s.arg0).fields["upper"] = (false);
    s.lastBrkId = 2823;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2823]) return breakpoint(s, 9, 2823, r0);
  case 9:
    r0 = (s.arg0).fields["inputIndex"] = (0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Prompt_constructor__P2648.info = {"start":4558,"length":691,"line":139,"column":8,"endLine":160,"endColumn":9,"fileName":"pxt_modules/game/prompt.ts","functionName":"inline","argumentNames":["this","theme"]}

function game_Prompt_constructor__P2648_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Prompt_constructor__P2648, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function MainGame_validateInput__P82389(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, MainGame__C82383_VT)) failedCast(r0);
    r0 = pxsim_String_.length(s.arg1);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 != 5);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = 1;
    { step = 5; continue; }
  case 1:
  case 2:
    s.tmp_5 = MainGame_findInDictionary__P82384_mk(s);
    s.tmp_5.arg0 = s.arg0;
    s.tmp_5.arg1 = s.arg1;
    s.callLocIdx = 163; s.pc = 6; return s.tmp_5;
  case 6:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    s.tmp_3 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 3; continue; }
    r0 = 2;
    { step = 5; continue; }
  case 3:
  case 4:
    r0 = 0;
  case 5:
    return leave(s, r0)
  default: oops()
} } }
MainGame_validateInput__P82389.info = {"start":3448,"length":283,"line":105,"column":4,"endLine":114,"endColumn":5,"fileName":"game.ts","functionName":"validateInput","argumentNames":["this","input"]}

function MainGame_validateInput__P82389_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: MainGame_validateInput__P82389, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function MainGame_findInDictionary__P82384(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.word___82412 = undefined;
    s.unnamed2062___U1 = undefined;
    s.unnamed2063___U2 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, MainGame__C82383_VT)) failedCast(r0);
    s.tmp_0 = helpers_stringToUpperCase__P120_mk(s);
    s.tmp_0.arg0 = s.arg1;
    s.callLocIdx = 147; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    s.arg1 = (r0);
    s.word___82412 = (undefined);
    s.unnamed2062___U1 = (globals.WORDS___4037);
    s.unnamed2063___U2 = (0);
  case 1:
    s.tmp_0 = r0 = s.unnamed2063___U2;
    r0 = pxsim_Array__length(s.unnamed2062___U1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 4; continue; }
    r0 = pxsim_Array__getAt(s.unnamed2062___U1, s.unnamed2063___U2);
    s.word___82412 = (r0);
    r0 = (s.arg1 == s.word___82412);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 2; continue; }
    r0 = true;
    { step = 5; continue; }
  case 2:
  case 3:
    r0 = (s.unnamed2063___U2 + 1);
    s.unnamed2063___U2 = (r0);
    { step = 1; continue; }
  case 4:
    s.unnamed2062___U1 = (undefined);
    r0 = false;
  case 5:
    return leave(s, r0)
  default: oops()
} } }
MainGame_findInDictionary__P82384.info = {"start":572,"length":291,"line":25,"column":4,"endLine":34,"endColumn":5,"fileName":"game.ts","functionName":"findInDictionary","argumentNames":["this","needle"]}

function MainGame_findInDictionary__P82384_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: MainGame_findInDictionary__P82384, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  word___82412: undefined,
  unnamed2062___U1: undefined,
  unnamed2063___U2: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function GameBoard_hideWordPrompt__P67281(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, GameBoard__C67279_VT)) failedCast(r0);
    s.tmp_0 = Sprite_setFlag__P2158_mk(s);
    r0 = s.arg0.fields["promptSprite"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = 128;
    s.tmp_0.arg2 = true;
    s.callLocIdx = 110; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
GameBoard_hideWordPrompt__P67281.info = {"start":601,"length":99,"line":27,"column":4,"endLine":29,"endColumn":5,"fileName":"board.ts","functionName":"hideWordPrompt","argumentNames":["this"]}

function GameBoard_hideWordPrompt__P67281_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: GameBoard_hideWordPrompt__P67281, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function GameBoard_hideGiveUpPrompt__P67280(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, GameBoard__C67279_VT)) failedCast(r0);
    s.tmp_0 = Sprite_setFlag__P2158_mk(s);
    r0 = s.arg0.fields["giveUpSprite"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = 128;
    s.tmp_0.arg2 = true;
    s.callLocIdx = 109; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
GameBoard_hideGiveUpPrompt__P67280.info = {"start":494,"length":101,"line":23,"column":4,"endLine":25,"endColumn":5,"fileName":"board.ts","functionName":"hideGiveUpPrompt","argumentNames":["this"]}

function GameBoard_hideGiveUpPrompt__P67280_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: GameBoard_hideGiveUpPrompt__P67280, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function startGame__P62570(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    globals.g_gameMode___62539 = (3);
    s.tmp_0 = RotatingScreens_release__P3954_mk(s);
    s.tmp_0.arg0 = globals.g_splashScreen___62541;
    s.callLocIdx = 165; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    s.tmp_0 = scene_setBackgroundImage__P2536_mk(s);
    s.tmp_1 = helpers_getImageByName__P2939_mk(s);
    s.tmp_1.arg0 = "bg";
    s.callLocIdx = 166; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 167; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = pxsim_pxtcore_mkClassInstance(Stats__C55116_VT);
    s.tmp_0 = r0;
    s.tmp_1 = Stats_constructor__P55121_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.callLocIdx = 168; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
    globals.g_stats___62622 = (s.tmp_0);
    r0 = pxsim_pxtcore_mkClassInstance(MainGame__C82383_VT);
    s.tmp_0 = r0;
    s.tmp_1 = MainGame_constructor__P82390_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.callLocIdx = 169; s.pc = 5; return s.tmp_1;
  case 5:
    r0 = s.retval;
    globals.g_game___62752 = (s.tmp_0);
    s.tmp_0 = MainGame_startRound__P82388_mk(s);
    s.tmp_0.arg0 = globals.g_game___62752;
    s.callLocIdx = 170; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    globals.g_gameMode___62539 = (2);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
startGame__P62570.info = {"start":401,"length":250,"line":27,"column":0,"endLine":35,"endColumn":1,"fileName":"main.ts","functionName":"startGame","argumentNames":[]}

function startGame__P62570_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: startGame__P62570, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
} }





function MainGame_startRound__P82388(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, MainGame__C82383_VT)) failedCast(r0);
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = helpers_arrayPickRandom__P114_mk(s);
    s.tmp_2.arg0 = globals.WORDS___4037;
    s.callLocIdx = 161; s.pc = 1; return s.tmp_2;
  case 1:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["puzzleWord"] = (s.tmp_1);
    r0 = (s.arg0).fields["guessCount"] = (0);
    s.tmp_0 = GameBoard_reset__P67283_mk(s);
    r0 = s.arg0.fields["board"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 162; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
MainGame_startRound__P82388.info = {"start":3230,"length":212,"line":98,"column":4,"endLine":103,"endColumn":5,"fileName":"game.ts","functionName":"startRound","argumentNames":["this"]}

function MainGame_startRound__P82388_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: MainGame_startRound__P82388, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function GameBoard_reset__P67283(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.word___67400 = undefined;
    s.letter___67405 = undefined;
    s.letterSprite___67410 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, GameBoard__C67279_VT)) failedCast(r0);
    s.word___67400 = (0);
  case 1:
    r0 = (s.word___67400 < 6);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    s.letter___67405 = (0);
  case 2:
    r0 = (s.letter___67405 < 5);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    r0 = s.arg0.fields["gameBoard"];
    s.tmp_2 = r0;
    r0 = pxsim_Array__getAt(s.tmp_2, s.word___67400);
    s.tmp_1 = r0;
    r0 = pxsim_Array__getAt(s.tmp_1, s.letter___67405);
    s.letterSprite___67410 = (r0);
    r0 = (s.letterSprite___67410).fields["text"] = (" ");
    r0 = (s.letterSprite___67410).fields["bg"] = (0);
    s.tmp_0 = TextSprite_update__P3850_mk(s);
    s.tmp_0.arg0 = s.letterSprite___67410;
    s.callLocIdx = 117; s.pc = 5; return s.tmp_0;
  case 5:
    r0 = s.retval;
    r0 = (s.letter___67405 + 1);
    s.letter___67405 = (r0);
    { step = 2; continue; }
  case 3:
    r0 = (s.word___67400 + 1);
    s.word___67400 = (r0);
    { step = 1; continue; }
  case 4:
    s.tmp_0 = GameBoard_showWordPrompt__P67285_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 118; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
GameBoard_reset__P67283.info = {"start":2174,"length":430,"line":69,"column":4,"endLine":79,"endColumn":5,"fileName":"board.ts","functionName":"reset","argumentNames":["this"]}

function GameBoard_reset__P67283_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: GameBoard_reset__P67283, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  word___67400: undefined,
  letter___67405: undefined,
  letterSprite___67410: undefined,
  arg0: undefined,
} }





function helpers_arrayPickRandom__P114(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 141;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[141]) return breakpoint(s, 1, 141, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__length(s.arg0);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 - 1);
    s.tmp_2 = r0;
    r0 = pxsim.Math_.randomRange(0, s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Array__getAt(s.tmp_0, s.tmp_1);
    return leave(s, r0)
  default: oops()
} } }
helpers_arrayPickRandom__P114.info = {"start":8909,"length":112,"line":299,"column":4,"endLine":301,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"arrayPickRandom","argumentNames":["arr"]}

function helpers_arrayPickRandom__P114_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_arrayPickRandom__P114, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
} }





function MainGame_constructor__P82390(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, MainGame__C82383_VT)) failedCast(r0);
    r0 = pxsim_pxtcore_mkClassInstance(GameBoard__C67279_VT);
    s.tmp_0 = r0;
    s.tmp_1 = GameBoard_constructor__P67292_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.callLocIdx = 146; s.pc = 1; return s.tmp_1;
  case 1:
    r0 = s.retval;
    r0 = (s.arg0).fields["board"] = (s.tmp_0);
    r0 = (s.arg0).fields["nextReveal"] = (0);
    r0 = (s.arg0).fields["resetRequested"] = (false);
    r0 = (s.arg0).fields["revealFinished"] = (true);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
MainGame_constructor__P82390.info = {"start":402,"length":164,"line":18,"column":4,"endLine":23,"endColumn":5,"fileName":"game.ts","functionName":"inline","argumentNames":["this"]}

function MainGame_constructor__P82390_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: MainGame_constructor__P82390, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function GameBoard_constructor__P67292(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, GameBoard__C67279_VT)) failedCast(r0);
    s.tmp_0 = GameBoard_delete__P67289_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 105; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["gameBoard"] = (s.tmp_1);
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["letterBoard"] = (s.tmp_1);
    s.tmp_0 = GameBoard_createTitles__P67288_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 106; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.tmp_0 = GameBoard_createGameBoard__P67286_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 107; s.pc = 3; return s.tmp_0;
  case 3:
    r0 = s.retval;
    s.tmp_0 = GameBoard_createLetterBoard__P67287_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 108; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
GameBoard_constructor__P67292.info = {"start":287,"length":201,"line":13,"column":4,"endLine":21,"endColumn":5,"fileName":"board.ts","functionName":"inline","argumentNames":["this"]}

function GameBoard_constructor__P67292_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: GameBoard_constructor__P67292, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function GameBoard_createLetterBoard__P67287(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.x___67514 = undefined;
    s.y___67515 = undefined;
    s.lbHead___67516 = undefined;
    s.i___67551 = undefined;
    s.letterSprite___67563 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, GameBoard__C67279_VT)) failedCast(r0);
    s.x___67514 = (140);
    s.y___67515 = (20);
    r0 = pxsim_pxtcore_mkClassInstance(TextSprite__C3848_VT);
    s.tmp_0 = r0;
    s.tmp_1 = TextSprite_constructor__P3849_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = "Letter";
    s.tmp_1.arg2 = 0;
    s.tmp_1.arg3 = 5;
    s.tmp_1.arg4 = 5;
    s.tmp_1.arg5 = 0;
    s.tmp_1.arg6 = 0;
    s.tmp_1.arg7 = 0;
    s.tmp_1.arg8 = 0;
    s.tmp_1.arg9 = 0;
    s.tmp_1.arg10 = null;
    s.callLocIdx = 125; s.pc = 5; return s.tmp_1;
  case 5:
    r0 = s.retval;
    s.lbHead___67516 = (s.tmp_0);
    s.tmp_0 = Sprite_setKind__P2147_mk(s);
    s.tmp_0.arg0 = s.lbHead___67516;
    s.tmp_0.arg1 = globals.Player___2207;
    s.callLocIdx = 126; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    s.tmp_0 = Sprite_setPosition__P2148_mk(s);
    s.tmp_0.arg0 = s.lbHead___67516;
    s.tmp_0.arg1 = s.x___67514;
    s.tmp_0.arg2 = s.y___67515;
    s.callLocIdx = 127; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    s.tmp_0 = Sprite_setFlag__P2158_mk(s);
    s.tmp_0.arg0 = s.lbHead___67516;
    s.tmp_0.arg1 = 7168;
    s.tmp_0.arg2 = true;
    s.callLocIdx = 128; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
    r0 = (s.y___67515 + 6);
    s.y___67515 = (r0);
    r0 = pxsim_pxtcore_mkClassInstance(TextSprite__C3848_VT);
    s.tmp_0 = r0;
    s.tmp_1 = TextSprite_constructor__P3849_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = "Board";
    s.tmp_1.arg2 = 0;
    s.tmp_1.arg3 = 5;
    s.tmp_1.arg4 = 5;
    s.tmp_1.arg5 = 0;
    s.tmp_1.arg6 = 0;
    s.tmp_1.arg7 = 0;
    s.tmp_1.arg8 = 0;
    s.tmp_1.arg9 = 0;
    s.tmp_1.arg10 = null;
    s.callLocIdx = 129; s.pc = 9; return s.tmp_1;
  case 9:
    r0 = s.retval;
    s.lbHead___67516 = (s.tmp_0);
    s.tmp_0 = Sprite_setKind__P2147_mk(s);
    s.tmp_0.arg0 = s.lbHead___67516;
    s.tmp_0.arg1 = globals.Player___2207;
    s.callLocIdx = 130; s.pc = 10; return s.tmp_0;
  case 10:
    r0 = s.retval;
    s.tmp_0 = Sprite_setPosition__P2148_mk(s);
    s.tmp_0.arg0 = s.lbHead___67516;
    s.tmp_0.arg1 = s.x___67514;
    s.tmp_0.arg2 = s.y___67515;
    s.callLocIdx = 131; s.pc = 11; return s.tmp_0;
  case 11:
    r0 = s.retval;
    s.tmp_0 = Sprite_setFlag__P2158_mk(s);
    s.tmp_0.arg0 = s.lbHead___67516;
    s.tmp_0.arg1 = 7168;
    s.tmp_0.arg2 = true;
    s.callLocIdx = 132; s.pc = 12; return s.tmp_0;
  case 12:
    r0 = s.retval;
    s.x___67514 = (126);
    s.i___67551 = (0);
  case 1:
    r0 = (s.i___67551 < 26);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    r0 = (s.i___67551 % 5);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 == 0);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 2; continue; }
    s.x___67514 = (126);
    r0 = (s.y___67515 + 7);
    s.y___67515 = (r0);
  case 2:
  case 3:
    r0 = pxsim_pxtcore_mkClassInstance(TextSprite__C3848_VT);
    s.tmp_0 = r0;
    s.tmp_1 = TextSprite_constructor__P3849_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    r0 = pxsim_String_.charCodeAt("A", 0);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 + s.i___67551);
    s.tmp_2 = r0;
    r0 = pxsim_String_.fromCharCode(s.tmp_2);
    s.tmp_1.arg1 = r0;
    s.tmp_1.arg2 = 0;
    s.tmp_1.arg3 = 1;
    s.tmp_1.arg4 = 5;
    s.tmp_1.arg5 = 0;
    s.tmp_1.arg6 = 0;
    s.tmp_1.arg7 = 1;
    s.tmp_1.arg8 = 0;
    s.tmp_1.arg9 = 0;
    s.tmp_1.arg10 = null;
    s.callLocIdx = 133; s.pc = 13; return s.tmp_1;
  case 13:
    r0 = s.retval;
    s.letterSprite___67563 = (s.tmp_0);
    s.tmp_0 = Sprite_setKind__P2147_mk(s);
    s.tmp_0.arg0 = s.letterSprite___67563;
    s.tmp_0.arg1 = globals.Player___2207;
    s.callLocIdx = 134; s.pc = 14; return s.tmp_0;
  case 14:
    r0 = s.retval;
    s.tmp_0 = Sprite_setPosition__P2148_mk(s);
    s.tmp_0.arg0 = s.letterSprite___67563;
    s.tmp_0.arg1 = s.x___67514;
    s.tmp_0.arg2 = s.y___67515;
    s.callLocIdx = 135; s.pc = 15; return s.tmp_0;
  case 15:
    r0 = s.retval;
    s.tmp_0 = Sprite_setFlag__P2158_mk(s);
    s.tmp_0.arg0 = s.letterSprite___67563;
    s.tmp_0.arg1 = 7168;
    s.tmp_0.arg2 = true;
    s.callLocIdx = 136; s.pc = 16; return s.tmp_0;
  case 16:
    r0 = s.retval;
    r0 = s.arg0.fields["letterBoard"];
    s.tmp_0 = r0;
    r0 = pxsim_Array__push(s.tmp_0, s.letterSprite___67563);
    r0 = (s.x___67514 + 7);
    s.x___67514 = (r0);
    r0 = (s.i___67551 + 1);
    s.i___67551 = (r0);
    { step = 1; continue; }
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
GameBoard_createLetterBoard__P67287.info = {"start":3895,"length":1122,"line":115,"column":4,"endLine":146,"endColumn":5,"fileName":"board.ts","functionName":"createLetterBoard","argumentNames":["this"]}

function GameBoard_createLetterBoard__P67287_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: GameBoard_createLetterBoard__P67287, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  x___67514: undefined,
  y___67515: undefined,
  lbHead___67516: undefined,
  i___67551: undefined,
  letterSprite___67563: undefined,
  arg0: undefined,
} }





function Sprite_setPosition__P2148(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.physics___16434 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1285;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1285]) return breakpoint(s, 1, 1285, r0);
  case 1:
    s.tmp_0 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 345; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = r0.fields["physicsEngine"];
    s.physics___16434 = (r0);
    s.lastBrkId = 1286;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1286]) return breakpoint(s, 3, 1286, r0);
  case 3:
    s.tmp_0 = PhysicsEngine__C2238_v2_4_mk(s);
    s.tmp_0.arg0 = s.physics___16434;
    s.tmp_0.arg1 = s.arg0;
    s.tmp_1 = Fx8__P149_mk(s);
    s.tmp_2 = r0 = s.arg1;
    s.tmp_4 = Sprite_x__P2101_mk(s);
    s.tmp_4.arg0 = s.arg0;
    s.callLocIdx = 346; s.pc = 6; return s.tmp_4;
  case 6:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_2 - s.tmp_3);
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 347; s.pc = 5; return s.tmp_1;
  case 5:
    r0 = s.retval;
    s.tmp_0.arg2 = r0;
    s.tmp_5 = Fx8__P149_mk(s);
    s.tmp_6 = r0 = s.arg2;
    s.tmp_8 = Sprite_y__P2103_mk(s);
    s.tmp_8.arg0 = s.arg0;
    s.callLocIdx = 348; s.pc = 8; return s.tmp_8;
  case 8:
    r0 = s.retval;
    s.tmp_7 = r0;
    r0 = (s.tmp_6 - s.tmp_7);
    s.tmp_5.arg0 = r0;
    s.callLocIdx = 349; s.pc = 7; return s.tmp_5;
  case 7:
    r0 = s.retval;
    s.tmp_0.arg3 = r0;
    if (!checkSubtype(s.tmp_0.arg0, PhysicsEngine__C2238_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.moveSprite;
    s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite_setPosition__P2148.info = {"start":12257,"length":220,"line":436,"column":4,"endLine":443,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"setPosition","argumentNames":["this","x","y"]}

function Sprite_setPosition__P2148_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_setPosition__P2148, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  physics___16434: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function TextSprite_constructor__P3849(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.arg5 = (s.lambdaArgs[5]);
      s.arg6 = (s.lambdaArgs[6]);
      s.arg7 = (s.lambdaArgs[7]);
      s.arg8 = (s.lambdaArgs[8]);
      s.arg9 = (s.lambdaArgs[9]);
      s.arg10 = (s.lambdaArgs[10]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, TextSprite__C3848_VT)) failedCast(r0);
    r0 = (s.arg0).fields["text"] = (s.arg1);
    r0 = (s.arg0).fields["bg"] = (s.arg2);
    r0 = (s.arg0).fields["fg"] = (s.arg3);
    r0 = (s.arg0).fields["maxFontHeight"] = (s.arg4);
    r0 = (s.arg0).fields["borderWidth"] = (s.arg5);
    r0 = (s.arg0).fields["borderColor"] = (s.arg6);
    r0 = (s.arg0).fields["padding"] = (s.arg7);
    r0 = (s.arg0).fields["outlineWidth"] = (s.arg8);
    r0 = (s.arg0).fields["outlineColor"] = (s.arg9);
    r0 = (s.arg0).fields["icon"] = (s.arg10);
    s.lastBrkId = 3615;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3615]) return breakpoint(s, 1, 3615, r0);
  case 1:
    s.tmp_0 = Sprite_constructor__P2129_mk(s);
    s.tmp_0.arg0 = s.arg0;
    r0 = pxsim.image.create(0, 0);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1611; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 3616;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3616]) return breakpoint(s, 3, 3616, r0);
  case 3:
    s.tmp_0 = Sprite_setKind__P2147_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = globals.Text___3847;
    s.callLocIdx = 1612; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.lastBrkId = 3617;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3617]) return breakpoint(s, 5, 3617, r0);
  case 5:
    s.tmp_0 = Sprite_setFlag__P2158_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 7168;
    s.tmp_0.arg2 = true;
    s.callLocIdx = 1613; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    s.lastBrkId = 3618;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3618]) return breakpoint(s, 7, 3618, r0);
  case 7:
    s.tmp_0 = TextSprite_update__P3850_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1614; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
TextSprite_constructor__P3849.info = {"start":171,"length":501,"line":8,"column":4,"endLine":24,"endColumn":5,"fileName":"pxt_modules/arcade-text/text.ts","functionName":"inline","argumentNames":["this","text","bg","fg","maxFontHeight","borderWidth","borderColor","padding","outlineWidth","outlineColor","icon"]}

function TextSprite_constructor__P3849_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: TextSprite_constructor__P3849, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
  arg5: undefined,
  arg6: undefined,
  arg7: undefined,
  arg8: undefined,
  arg9: undefined,
  arg10: undefined,
} }





function GameBoard_createGameBoard__P67286(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.y___67438 = undefined;
    s.x___67439 = undefined;
    s.letterCode___67440 = undefined;
    s.word___67443 = undefined;
    s.wordSprites___67448 = undefined;
    s.letter___67459 = undefined;
    s.letterSprite___67464 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, GameBoard__C67279_VT)) failedCast(r0);
    s.y___67438 = (20);
    s.x___67439 = (0);
    r0 = pxsim_String_.charCodeAt("A", 0);
    s.letterCode___67440 = (r0);
    s.word___67443 = (0);
  case 1:
    r0 = (s.word___67443 < 6);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 6; continue; }
    r0 = pxsim_Array__mk();
    s.wordSprites___67448 = (r0);
    r0 = (6 * 4);
    s.tmp_0 = r0;
    r0 = (80 - s.tmp_0);
    s.x___67439 = (r0);
    s.letter___67459 = (0);
  case 2:
    r0 = (s.letter___67459 < 5);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    r0 = pxsim_pxtcore_mkClassInstance(TextSprite__C3848_VT);
    s.tmp_1 = r0;
    s.tmp_2 = TextSprite_constructor__P3849_mk(s);
    s.tmp_2.arg0 = s.tmp_1;
    r0 = pxsim_String_.fromCharCode(s.letterCode___67440);
    s.tmp_2.arg1 = r0;
    s.tmp_2.arg2 = 0;
    s.tmp_2.arg3 = 1;
    s.tmp_2.arg4 = 8;
    s.tmp_2.arg5 = 1;
    s.tmp_2.arg6 = 1;
    s.tmp_2.arg7 = 1;
    s.tmp_2.arg8 = 0;
    s.tmp_2.arg9 = 0;
    s.tmp_2.arg10 = null;
    s.callLocIdx = 121; s.pc = 7; return s.tmp_2;
  case 7:
    r0 = s.retval;
    s.letterSprite___67464 = (s.tmp_1);
    s.tmp_0 = Sprite_setKind__P2147_mk(s);
    s.tmp_0.arg0 = s.letterSprite___67464;
    s.tmp_0.arg1 = globals.Player___2207;
    s.callLocIdx = 122; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
    s.tmp_0 = Sprite_setPosition__P2148_mk(s);
    s.tmp_0.arg0 = s.letterSprite___67464;
    s.tmp_0.arg1 = s.x___67439;
    s.tmp_0.arg2 = s.y___67438;
    s.callLocIdx = 123; s.pc = 9; return s.tmp_0;
  case 9:
    r0 = s.retval;
    s.tmp_0 = Sprite_setFlag__P2158_mk(s);
    s.tmp_0.arg0 = s.letterSprite___67464;
    s.tmp_0.arg1 = 7168;
    s.tmp_0.arg2 = true;
    s.callLocIdx = 124; s.pc = 10; return s.tmp_0;
  case 10:
    r0 = s.retval;
    r0 = pxsim_Array__push(s.wordSprites___67448, s.letterSprite___67464);
    r0 = (s.x___67439 + 12);
    s.x___67439 = (r0);
    r0 = (s.letterCode___67440 + 1);
    s.letterCode___67440 = (r0);
    s.tmp_1 = r0 = s.letterCode___67440;
    r0 = pxsim_String_.charCodeAt("Z", 0);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 > s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    r0 = pxsim_String_.charCodeAt("A", 0);
    s.letterCode___67440 = (r0);
  case 3:
  case 4:
    r0 = (s.letter___67459 + 1);
    s.letter___67459 = (r0);
    { step = 2; continue; }
  case 5:
    r0 = s.arg0.fields["gameBoard"];
    s.tmp_0 = r0;
    r0 = pxsim_Array__push(s.tmp_0, s.wordSprites___67448);
    r0 = (s.y___67438 + 14);
    s.y___67438 = (r0);
    r0 = (s.word___67443 + 1);
    s.word___67443 = (r0);
    { step = 1; continue; }
  case 6:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
GameBoard_createGameBoard__P67286.info = {"start":2824,"length":1065,"line":89,"column":4,"endLine":113,"endColumn":5,"fileName":"board.ts","functionName":"createGameBoard","argumentNames":["this"]}

function GameBoard_createGameBoard__P67286_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: GameBoard_createGameBoard__P67286, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  y___67438: undefined,
  x___67439: undefined,
  letterCode___67440: undefined,
  word___67443: undefined,
  wordSprites___67448: undefined,
  letter___67459: undefined,
  letterSprite___67464: undefined,
  arg0: undefined,
} }





function GameBoard_createTitles__P67288(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, GameBoard__C67279_VT)) failedCast(r0);
    r0 = pxsim_pxtcore_mkClassInstance(TextSprite__C3848_VT);
    s.tmp_0 = r0;
    s.tmp_1 = TextSprite_constructor__P3849_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = "What's My Word?";
    s.tmp_1.arg2 = 0;
    s.tmp_1.arg3 = 5;
    s.tmp_1.arg4 = 8;
    s.tmp_1.arg5 = 1;
    s.tmp_1.arg6 = 1;
    s.tmp_1.arg7 = 1;
    s.tmp_1.arg8 = 0;
    s.tmp_1.arg9 = 0;
    s.tmp_1.arg10 = null;
    s.callLocIdx = 137; s.pc = 1; return s.tmp_1;
  case 1:
    r0 = s.retval;
    r0 = (s.arg0).fields["titleSprite"] = (s.tmp_0);
    s.tmp_0 = Sprite_setPosition__P2148_mk(s);
    r0 = s.arg0.fields["titleSprite"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = 80;
    s.tmp_0.arg2 = 6;
    s.callLocIdx = 138; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = pxsim_pxtcore_mkClassInstance(TextSprite__C3848_VT);
    s.tmp_0 = r0;
    s.tmp_1 = TextSprite_constructor__P3849_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = "Press A to make a guess.";
    s.tmp_1.arg2 = 0;
    s.tmp_1.arg3 = 5;
    s.tmp_1.arg4 = 8;
    s.tmp_1.arg5 = 0;
    s.tmp_1.arg6 = 0;
    s.tmp_1.arg7 = 0;
    s.tmp_1.arg8 = 0;
    s.tmp_1.arg9 = 0;
    s.tmp_1.arg10 = null;
    s.callLocIdx = 139; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    r0 = (s.arg0).fields["promptSprite"] = (s.tmp_0);
    s.tmp_0 = Sprite_setPosition__P2148_mk(s);
    r0 = s.arg0.fields["promptSprite"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = 80;
    s.tmp_0.arg2 = 114;
    s.callLocIdx = 140; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    r0 = pxsim_pxtcore_mkClassInstance(TextSprite__C3848_VT);
    s.tmp_0 = r0;
    s.tmp_1 = TextSprite_constructor__P3849_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = "Press B to reveal word.";
    s.tmp_1.arg2 = 0;
    s.tmp_1.arg3 = 5;
    s.tmp_1.arg4 = 0;
    s.tmp_1.arg5 = 0;
    s.tmp_1.arg6 = 0;
    s.tmp_1.arg7 = 0;
    s.tmp_1.arg8 = 0;
    s.tmp_1.arg9 = 0;
    s.tmp_1.arg10 = null;
    s.callLocIdx = 141; s.pc = 5; return s.tmp_1;
  case 5:
    r0 = s.retval;
    r0 = (s.arg0).fields["giveUpSprite"] = (s.tmp_0);
    s.tmp_0 = Sprite_setPosition__P2148_mk(s);
    r0 = s.arg0.fields["giveUpSprite"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = 80;
    s.tmp_0.arg2 = 104;
    s.callLocIdx = 142; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    s.tmp_0 = Sprite_setFlag__P2158_mk(s);
    r0 = s.arg0.fields["giveUpSprite"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = 128;
    s.tmp_0.arg2 = true;
    s.callLocIdx = 143; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
GameBoard_createTitles__P67288.info = {"start":5023,"length":609,"line":148,"column":4,"endLine":161,"endColumn":5,"fileName":"board.ts","functionName":"createTitles","argumentNames":["this"]}

function GameBoard_createTitles__P67288_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: GameBoard_createTitles__P67288, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function GameBoard_delete__P67289(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.oldSprite___67632 = undefined;
    s.unnamed2060___U1 = undefined;
    s.unnamed2061___U2 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, GameBoard__C67279_VT)) failedCast(r0);
    s.oldSprite___67632 = (undefined);
    s.tmp_0 = sprites_allOfKind__P2045_mk(s);
    s.tmp_0.arg0 = globals.Text___3847;
    s.callLocIdx = 144; s.pc = 3; return s.tmp_0;
  case 3:
    r0 = s.retval;
    s.unnamed2060___U1 = (r0);
    s.unnamed2061___U2 = (0);
  case 1:
    s.tmp_0 = r0 = s.unnamed2061___U2;
    r0 = pxsim_Array__length(s.unnamed2060___U1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 2; continue; }
    r0 = pxsim_Array__getAt(s.unnamed2060___U1, s.unnamed2061___U2);
    s.oldSprite___67632 = (r0);
    s.tmp_2 = Sprite_destroy__P2166_mk(s);
    s.tmp_2.arg0 = s.oldSprite___67632;
    s.tmp_2.arg1 = undefined;
    s.tmp_2.arg2 = undefined;
    s.callLocIdx = 145; s.pc = 4; return s.tmp_2;
  case 4:
    r0 = s.retval;
    r0 = (s.unnamed2061___U2 + 1);
    s.unnamed2061___U2 = (r0);
    { step = 1; continue; }
  case 2:
    s.unnamed2060___U1 = (undefined);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
GameBoard_delete__P67289.info = {"start":5638,"length":167,"line":163,"column":4,"endLine":168,"endColumn":5,"fileName":"board.ts","functionName":"delete","argumentNames":["this"]}

function GameBoard_delete__P67289_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: GameBoard_delete__P67289, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  oldSprite___67632: undefined,
  unnamed2060___U1: undefined,
  unnamed2061___U2: undefined,
  arg0: undefined,
} }





function Stats_constructor__P55121(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Stats__C55116_VT)) failedCast(r0);
    s.tmp_0 = Stats_load__P55119_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 87; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Stats_constructor__P55121.info = {"start":123,"length":48,"line":6,"column":4,"endLine":8,"endColumn":5,"fileName":"stats.ts","functionName":"inline","argumentNames":["this"]}

function Stats_constructor__P55121_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Stats_constructor__P55121, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function Stats_load__P55119(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Stats__C55116_VT)) failedCast(r0);
    s.tmp_1 = settings_exists__P1865_mk(s);
    s.tmp_1.arg0 = "saved";
    s.callLocIdx = 90; s.pc = 9; return s.tmp_1;
  case 9:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.tmp_2 = settings_readNumber__P1861_mk(s);
    s.tmp_2.arg0 = "wins";
    s.callLocIdx = 91; s.pc = 10; return s.tmp_2;
  case 10:
    r0 = s.retval;
    { step = 2; continue; }
  case 1:
    r0 = 0;
  case 2:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = (s.arg0).fields["wins"] = (s.tmp_3);
    s.tmp_1 = settings_exists__P1865_mk(s);
    s.tmp_1.arg0 = "saved";
    s.callLocIdx = 92; s.pc = 11; return s.tmp_1;
  case 11:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.tmp_2 = settings_readNumber__P1861_mk(s);
    s.tmp_2.arg0 = "streak";
    s.callLocIdx = 93; s.pc = 12; return s.tmp_2;
  case 12:
    r0 = s.retval;
    { step = 4; continue; }
  case 3:
    r0 = 0;
  case 4:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = (s.arg0).fields["streak"] = (s.tmp_3);
    s.tmp_1 = settings_exists__P1865_mk(s);
    s.tmp_1.arg0 = "saved";
    s.callLocIdx = 94; s.pc = 13; return s.tmp_1;
  case 13:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.tmp_2 = settings_readNumber__P1861_mk(s);
    s.tmp_2.arg0 = "games";
    s.callLocIdx = 95; s.pc = 14; return s.tmp_2;
  case 14:
    r0 = s.retval;
    { step = 6; continue; }
  case 5:
    r0 = 0;
  case 6:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = (s.arg0).fields["games"] = (s.tmp_3);
    s.tmp_1 = settings_exists__P1865_mk(s);
    s.tmp_1.arg0 = "saved";
    s.callLocIdx = 96; s.pc = 15; return s.tmp_1;
  case 15:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 7; continue; }
    s.tmp_2 = settings_readNumberArray__P1862_mk(s);
    s.tmp_2.arg0 = "guesses";
    s.callLocIdx = 97; s.pc = 16; return s.tmp_2;
  case 16:
    r0 = s.retval;
    { step = 8; continue; }
  case 7:
    r0 = pxsim_Array__mk();
    s.tmp_3 = r0;
    r0 = pxsim_Array__push(s.tmp_3, 0);
    r0 = pxsim_Array__push(s.tmp_3, 0);
    r0 = pxsim_Array__push(s.tmp_3, 0);
    r0 = pxsim_Array__push(s.tmp_3, 0);
    r0 = pxsim_Array__push(s.tmp_3, 0);
    r0 = pxsim_Array__push(s.tmp_3, 0);
    r0 = s.tmp_3;
  case 8:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    r0 = (s.arg0).fields["guesses"] = (s.tmp_4);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Stats_load__P55119.info = {"start":453,"length":401,"line":24,"column":4,"endLine":31,"endColumn":5,"fileName":"stats.ts","functionName":"load","argumentNames":["this"]}

function Stats_load__P55119_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Stats_load__P55119, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }





function settings_readNumberArray__P1862(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.buf___17722 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 981;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[981]) return breakpoint(s, 4, 981, r0);
  case 4:
    s.tmp_0 = settings_readBuffer__P1858_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 176; s.pc = 5; return s.tmp_0;
  case 5:
    r0 = s.retval;
    s.buf___17722 = (r0);
    s.lastBrkId = 982;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[982]) return breakpoint(s, 6, 982, r0);
  case 6:
    r0 = pxsim_numops_toBoolDecr(s.buf___17722);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 983;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[983]) return breakpoint(s, 7, 983, r0);
  case 7:
    r0 = undefined;
    { step = 3; continue; }
    { step = 2; continue; }
  case 1:
    s.lastBrkId = 984;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[984]) return breakpoint(s, 8, 984, r0);
  case 8:
    s.tmp_2 = msgpack_unpackNumberArray__P181_mk(s);
    s.tmp_2.arg0 = s.buf___17722;
    s.tmp_2.arg1 = 0;
    s.callLocIdx = 177; s.pc = 9; return s.tmp_2;
  case 9:
    r0 = s.retval;
    { step = 3; continue; }
  case 2:
    r0 = undefined;
  case 3:
    return leave(s, r0)
  default: oops()
} } }
settings_readNumberArray__P1862.info = {"start":3657,"length":198,"line":146,"column":4,"endLine":152,"endColumn":5,"fileName":"pxt_modules/settings/settings.ts","functionName":"readNumberArray","argumentNames":["key"]}

function settings_readNumberArray__P1862_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: settings_readNumberArray__P1862, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  buf___17722: undefined,
  arg0: undefined,
} }





function settings_exists__P1865(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 985;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[985]) return breakpoint(s, 1, 985, r0);
  case 1:
    r0 = pxsim.settings._exists(s.arg0);
    return leave(s, r0)
  default: oops()
} } }
settings_exists__P1865.info = {"start":4224,"length":71,"line":172,"column":4,"endLine":174,"endColumn":5,"fileName":"pxt_modules/settings/settings.ts","functionName":"exists","argumentNames":["key"]}

function settings_exists__P1865_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: settings_exists__P1865, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function helpers_getImageByName__P2939(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3611;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3611]) return breakpoint(s, 1, 3611, r0);
  case 1:
    s.tmp_0 = helpers__getFactoryInstance__P2936_mk(s);
    s.tmp_0.arg0 = "image";
    s.tmp_0.arg1 = s.arg0;
    s.callLocIdx = 1607; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leave(s, r0)
  default: oops()
} } }
helpers_getImageByName__P2939.info = {"start":2552,"length":103,"line":79,"column":4,"endLine":81,"endColumn":5,"fileName":"pxt_modules/game/assetTemplates.ts","functionName":"getImageByName","argumentNames":["name"]}

function helpers_getImageByName__P2939_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_getImageByName__P2939, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function helpers__getFactoryInstance__P2936(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.factory___14233 = undefined;
    s.unnamed1660___U1 = undefined;
    s.unnamed1661___U2 = undefined;
    s.data___14240 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3603;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3603]) return breakpoint(s, 10, 3603, r0);
  case 10:
    r0 = pxsim_numops_toBoolDecr(globals.factories___4973);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 3604;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3604]) return breakpoint(s, 11, 3604, r0);
  case 11:
    s.factory___14233 = (undefined);
    s.unnamed1660___U1 = (globals.factories___4973);
    s.unnamed1661___U2 = (0);
    s.lastBrkId = 3605;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3605]) return breakpoint(s, 12, 3605, r0);
  case 12:
  case 1:
    s.tmp_0 = r0 = s.unnamed1661___U2;
    r0 = pxsim_Array__length(s.unnamed1660___U1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 6; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1660___U1, s.unnamed1661___U2);
    s.factory___14233 = (r0);
    s.lastBrkId = 3606;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3606]) return breakpoint(s, 13, 3606, r0);
  case 13:
    s.tmp_4 = if_kind_1_mk(s);
    s.tmp_4.arg0 = s.factory___14233;
    if (!s.tmp_4.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_4.arg0, "kind");
    } else {
      s.tmp_4.fn = s.tmp_4.arg0.vtable.iface["kind"];
      if (s.tmp_4.fn == null) { s.retval = s.tmp_4.arg0.fields["kind"]; }
      else if (!s.tmp_4.fn.isGetter) { s.retval = bind(s.tmp_4); }
     else { s.callLocIdx = 1605; s.pc = 14; return s.tmp_4; }
    }
  case 14:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_3 === s.arg0);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 3607;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3607]) return breakpoint(s, 15, 3607, r0);
  case 15:
    s.tmp_5 = if_factory_2_mk(s);
    s.tmp_5.arg0 = s.factory___14233;
    s.tmp_5.arg1 = s.arg1;
    if (!s.tmp_5.arg0.vtable.iface) {
      setupLambda(s.tmp_5, pxsim_pxtrt.mapGetByString(s.tmp_5.arg0, "factory"), 2);
      s.callLocIdx = 1606; s.pc = 16; return s.tmp_5;
    } else {
      s.tmp_5.fn = s.tmp_5.arg0.vtable.iface["factory"];
      if (s.tmp_5.fn == null) { setupLambda(s.tmp_5, s.tmp_5.arg0.fields["factory"], 2); s.callLocIdx = 1606; s.pc = 16; return s.tmp_5; }
      else if (s.tmp_5.fn.isGetter) { s.tmp_5.stage2Call = true; s.callLocIdx = 1606; s.pc = 16; return s.tmp_5;; }
     else { s.callLocIdx = 1606; s.pc = 16; return s.tmp_5; }
    }
  case 16:
    r0 = s.retval;
    s.data___14240 = (r0);
    s.lastBrkId = 3608;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3608]) return breakpoint(s, 17, 3608, r0);
  case 17:
    r0 = pxsim_numops_toBoolDecr(s.data___14240);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 3609;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3609]) return breakpoint(s, 18, 3609, r0);
  case 18:
    r0 = s.data___14240;
    { step = 9; continue; }
  case 2:
  case 3:
  case 4:
  case 5:
    r0 = (s.unnamed1661___U2 + 1);
    s.unnamed1661___U2 = (r0);
    { step = 1; continue; }
  case 6:
    s.unnamed1660___U1 = (undefined);
  case 7:
  case 8:
    s.lastBrkId = 3610;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3610]) return breakpoint(s, 19, 3610, r0);
  case 19:
    r0 = null;
  case 9:
    return leave(s, r0)
  default: oops()
} } }
helpers__getFactoryInstance__P2936.info = {"start":1897,"length":348,"line":58,"column":4,"endLine":68,"endColumn":5,"fileName":"pxt_modules/game/assetTemplates.ts","functionName":"_getFactoryInstance","argumentNames":["kind","name"]}

function helpers__getFactoryInstance__P2936_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers__getFactoryInstance__P2936, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  factory___14233: undefined,
  unnamed1660___U1: undefined,
  unnamed1661___U2: undefined,
  data___14240: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function assets_image__P2931(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3599;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3599]) return breakpoint(s, 1, 3599, r0);
  case 1:
    r0 = null;
    return leave(s, r0)
  default: oops()
} } }
assets_image__P2931.info = {"start":845,"length":71,"line":24,"column":4,"endLine":24,"endColumn":75,"fileName":"pxt_modules/game/assetTemplates.ts","functionName":"image","argumentNames":["lits","args"]}

function assets_image__P2931_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: assets_image__P2931, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
} }





function RotatingScreens_release__P3954(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, RotatingScreens__C3926_VT)) failedCast(r0);
    s.lastBrkId = 3729;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3729]) return breakpoint(s, 1, 3729, r0);
  case 1:
    globals.RotatingScreens__base___6606 = (null);
    s.lastBrkId = 3730;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3730]) return breakpoint(s, 2, 3730, r0);
  case 2:
    s.tmp_0 = RotatingScreens__C3926_v1_1_mk(s);
    s.tmp_0.arg0 = s.arg0;
    if (!checkSubtype(s.tmp_0.arg0, RotatingScreens__C3926_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.destroySprites;
    s.pc = 3; return s.tmp_0;
  case 3:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
RotatingScreens_release__P3954.info = {"start":16484,"length":97,"line":557,"column":4,"endLine":560,"endColumn":5,"fileName":"pxt_modules/pxt-arcade-info-screens/info-screens.ts","functionName":"release","argumentNames":["this"]}

function RotatingScreens_release__P3954_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: RotatingScreens_release__P3954, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function controller_Button_onEvent__P1978(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, controller_Button__C1971_VT)) failedCast(r0);
    s.lastBrkId = 1119;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1119]) return breakpoint(s, 1, 1119, r0);
  case 1:
    s.tmp_0 = control_onEvent__P389_mk(s);
    s.tmp_0.arg0 = s.arg1;
    r0 = s.arg0.fields["id"];
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = s.arg2;
    s.tmp_0.arg3 = 16;
    s.callLocIdx = 239; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller_Button_onEvent__P1978.info = {"start":3246,"length":124,"line":104,"column":8,"endLine":106,"endColumn":9,"fileName":"pxt_modules/game/controllerbutton.ts","functionName":"onEvent","argumentNames":["this","event","handler"]}

function controller_Button_onEvent__P1978_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Button_onEvent__P1978, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function image_doubledFont__P1773(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 838;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[838]) return breakpoint(s, 1, 838, r0);
  case 1:
    s.tmp_0 = image_scaledFont__P1774_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 2;
    s.callLocIdx = 135; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leave(s, r0)
  default: oops()
} } }
image_doubledFont__P1773.info = {"start":12008,"length":82,"line":146,"column":4,"endLine":148,"endColumn":5,"fileName":"pxt_modules/screen/text.ts","functionName":"doubledFont","argumentNames":["f"]}

function image_doubledFont__P1773_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: image_doubledFont__P1773, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function game_eventContext__P2612(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 2674;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2674]) return breakpoint(s, 1, 2674, r0);
  case 1:
    s.tmp_0 = game_init__P4564_mk(s);
    s.tmp_0.arg0 = undefined;
    s.callLocIdx = 1084; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 2675;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2675]) return breakpoint(s, 3, 2675, r0);
  case 3:
    r0 = globals._scene___4556.fields["eventContext"];
    return leave(s, r0)
  default: oops()
} } }
game_eventContext__P2612.info = {"start":1084,"length":112,"line":40,"column":4,"endLine":43,"endColumn":5,"fileName":"pxt_modules/game/game.ts","functionName":"eventContext","argumentNames":[]}

function game_eventContext__P2612_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_eventContext__P2612, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
} }





function controller_pauseUntilAnyButtonIsPressed__P1985(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 1145;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1145]) return breakpoint(s, 1, 1145, r0);
  case 1:
    setupResume(s, 2);
    pxsim.control.waitForEvent(2049, 0);
    checkResumeConsumed();
    return;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller_pauseUntilAnyButtonIsPressed__P1985.info = {"start":6288,"length":96,"line":190,"column":4,"endLine":192,"endColumn":5,"fileName":"pxt_modules/game/controllerbutton.ts","functionName":"pauseUntilAnyButtonIsPressed","argumentNames":[]}

function controller_pauseUntilAnyButtonIsPressed__P1985_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_pauseUntilAnyButtonIsPressed__P1985, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
} }





function game_setWaitAnyButton__P2610(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 2670;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2670]) return breakpoint(s, 1, 2670, r0);
  case 1:
    globals.__waitAnyButton___4560 = (s.arg0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_setWaitAnyButton__P2610.info = {"start":878,"length":83,"line":31,"column":4,"endLine":33,"endColumn":5,"fileName":"pxt_modules/game/game.ts","functionName":"setWaitAnyButton","argumentNames":["f"]}

function game_setWaitAnyButton__P2610_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_setWaitAnyButton__P2610, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function Math_FastRandom_constructor__P2666(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Math_FastRandom__C2664_VT)) failedCast(r0);
    s.lastBrkId = 3058;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3058]) return breakpoint(s, 3, 3058, r0);
  case 3:
    r0 = (s.arg1 === undefined);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3059;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3059]) return breakpoint(s, 4, 3059, r0);
  case 4:
    r0 = pxsim.Math_.randomRange(1, 65535);
    s.arg1 = (r0);
  case 1:
  case 2:
    s.lastBrkId = 3060;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3060]) return breakpoint(s, 5, 3060, r0);
  case 5:
    r0 = (s.arg0).fields["seed"] = (s.arg1);
    s.lastBrkId = 3061;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3061]) return breakpoint(s, 6, 3061, r0);
  case 6:
    r0 = (s.arg0).fields["lfsr"] = (s.arg1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Math_FastRandom_constructor__P2666.info = {"start":1425,"length":175,"line":44,"column":8,"endLine":48,"endColumn":9,"fileName":"pxt_modules/game/mathUtil.ts","functionName":"inline","argumentNames":["this","seed"]}

function Math_FastRandom_constructor__P2666_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Math_FastRandom_constructor__P2666, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function game_consoleOverlay_listener__P4889(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3267;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3267]) return breakpoint(s, 8, 3267, r0);
  case 8:
    r0 = pxsim_numops_toBoolDecr(globals.consoleStrings___4854);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
  case 2:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 3268;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3268]) return breakpoint(s, 9, 3268, r0);
  case 9:
    { step = 7; continue; }
  case 3:
  case 4:
    s.lastBrkId = 3269;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3269]) return breakpoint(s, 10, 3269, r0);
  case 10:
    s.tmp_4 = helpers_arrayForEach__P109_mk(s);
    s.tmp_5 = helpers_arrayFilter__P110_mk(s);
    s.tmp_6 = helpers_stringSplit__P122_mk(s);
    s.tmp_6.arg0 = s.arg1;
    s.tmp_6.arg1 = "\n";
    s.tmp_6.arg2 = undefined;
    s.callLocIdx = 1440; s.pc = 13; return s.tmp_6;
  case 13:
    r0 = s.retval;
    s.tmp_5.arg0 = r0;
    s.tmp_5.arg1 = forEach_inline__P19155;
    s.callLocIdx = 1441; s.pc = 12; return s.tmp_5;
  case 12:
    r0 = s.retval;
    s.tmp_4.arg0 = r0;
    s.tmp_4.arg1 = game_consoleOverlay_listener_inline__P19160;
    s.callLocIdx = 1443; s.pc = 11; return s.tmp_4;
  case 11:
    r0 = s.retval;
    s.lastBrkId = 3275;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3275]) return breakpoint(s, 14, 3275, r0);
  case 14:
    r0 = pxsim_Array__length(globals.consoleStrings___4854);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > globals.consoleLines___4867);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 3276;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3276]) return breakpoint(s, 15, 3276, r0);
  case 15:
    s.tmp_2 = helpers_arraySplice__P100_mk(s);
    s.tmp_2.arg0 = globals.consoleStrings___4854;
    s.tmp_2.arg1 = 0;
    r0 = pxsim_Array__length(globals.consoleStrings___4854);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 - globals.consoleLines___4867);
    s.tmp_2.arg2 = r0;
    s.callLocIdx = 1444; s.pc = 16; return s.tmp_2;
  case 16:
    r0 = s.retval;
  case 5:
  case 6:
  case 7:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_consoleOverlay_listener__P4889.info = {"start":787,"length":571,"line":26,"column":4,"endLine":42,"endColumn":5,"fileName":"pxt_modules/game/console.ts","functionName":"listener","argumentNames":["priority","text"]}

function game_consoleOverlay_listener__P4889_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_consoleOverlay_listener__P4889, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function forEach_inline__P19155(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = pxsim_numops_toBoolDecr(s.arg0);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_0);
    return leave(s, r0)
  default: oops()
} } }
forEach_inline__P19155.info = {"start":985,"length":14,"line":32,"column":20,"endLine":32,"endColumn":34,"fileName":"pxt_modules/game/console.ts","functionName":"inline","argumentNames":["line"]}

function forEach_inline__P19155_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: forEach_inline__P19155, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function game_consoleOverlay_listener_inline__P19160(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.j___19162 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3270;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3270]) return breakpoint(s, 3, 3270, r0);
  case 3:
    s.j___19162 = (0);
    s.lastBrkId = 3271;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3271]) return breakpoint(s, 4, 3271, r0);
  case 4:
  case 1:
    s.lastBrkId = 3272;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3272]) return breakpoint(s, 5, 3272, r0);
  case 5:
    s.tmp_1 = r0 = s.j___19162;
    r0 = pxsim_String_.length(s.arg0);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 3273;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3273]) return breakpoint(s, 6, 3273, r0);
  case 6:
    s.tmp_3 = r0 = globals.consoleStrings___4854;
    s.tmp_5 = helpers_stringSlice__P119_mk(s);
    s.tmp_5.arg0 = s.arg0;
    s.tmp_5.arg1 = s.j___19162;
    r0 = (s.j___19162 + globals.consoleColumns___4877);
    s.tmp_5.arg2 = r0;
    s.callLocIdx = 1442; s.pc = 7; return s.tmp_5;
  case 7:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_Array__push(s.tmp_3, s.tmp_4);
    s.lastBrkId = 3274;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3274]) return breakpoint(s, 8, 3274, r0);
  case 8:
    r0 = (s.j___19162 + globals.consoleColumns___4877);
    s.j___19162 = (r0);
    { step = 1; continue; }
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_consoleOverlay_listener_inline__P19160.info = {"start":1022,"length":189,"line":33,"column":21,"endLine":37,"endColumn":13,"fileName":"pxt_modules/game/console.ts","functionName":"inline","argumentNames":["line"]}

function game_consoleOverlay_listener_inline__P19160_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_consoleOverlay_listener_inline__P19160, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  j___19162: undefined,
  arg0: undefined,
} }





function console_addListener__P381(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 414;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[414]) return breakpoint(s, 6, 414, r0);
  case 6:
    r0 = pxsim_numops_toBoolDecr(s.arg0);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = pxsim_Array_.indexOf(globals.listeners___4185, s.arg0, undefined);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 > -1);
  case 2:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 415;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[415]) return breakpoint(s, 7, 415, r0);
  case 7:
    { step = 5; continue; }
  case 3:
  case 4:
    s.lastBrkId = 416;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[416]) return breakpoint(s, 8, 416, r0);
  case 8:
    r0 = pxsim_Array__push(globals.listeners___4185, s.arg0);
  case 5:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
console_addListener__P381.info = {"start":3558,"length":197,"line":121,"column":4,"endLine":124,"endColumn":5,"fileName":"pxt_modules/base/console.ts","functionName":"addListener","argumentNames":["listener"]}

function console_addListener__P381_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: console_addListener__P381, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
} }





function listeners_inline__P4184(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = pxsim.control.__log(s.arg0, s.arg1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
listeners_inline__P4184.info = {"start":534,"length":85,"line":25,"column":8,"endLine":25,"endColumn":93,"fileName":"pxt_modules/base/console.ts","functionName":"inline","argumentNames":["priority","text"]}

function listeners_inline__P4184_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: listeners_inline__P4184, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
} }





function scene_systemMenu_register__P2711(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 3227;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3227]) return breakpoint(s, 4, 3227, r0);
  case 4:
    r0 = pxsim_numops_toBoolDecr(globals.instance___4808);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3228;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3228]) return breakpoint(s, 5, 3228, r0);
  case 5:
    { step = 3; continue; }
  case 1:
  case 2:
    s.lastBrkId = 3229;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3229]) return breakpoint(s, 6, 3229, r0);
  case 6:
    s.tmp_0 = controller_Button_onEvent__P1978_mk(s);
    s.tmp_0.arg0 = globals.menu___1911;
    s.tmp_0.arg1 = 2049;
    s.tmp_0.arg2 = scene_systemMenu_showSystemMenu__P2712;
    s.callLocIdx = 1427; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
  case 3:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_register__P2711.info = {"start":12793,"length":193,"line":382,"column":4,"endLine":386,"endColumn":5,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"register","argumentNames":[]}

function scene_systemMenu_register__P2711_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_register__P2711, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
} }





function scene_systemMenu_showSystemMenu__P2712(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 3230;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3230]) return breakpoint(s, 4, 3230, r0);
  case 4:
    r0 = pxsim_numops_toBoolDecr(globals.instance___4808);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3231;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3231]) return breakpoint(s, 5, 3231, r0);
  case 5:
    { step = 3; continue; }
  case 1:
  case 2:
    s.lastBrkId = 3232;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3232]) return breakpoint(s, 6, 3232, r0);
  case 6:
    s.tmp_0 = game_pushScene__P2613_mk(s);
    s.callLocIdx = 1428; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    s.lastBrkId = 3233;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3233]) return breakpoint(s, 8, 3233, r0);
  case 8:
    r0 = pxsim_pxtcore_mkClassInstance(scene_systemMenu_PauseMenu__C2700_VT);
    s.tmp_0 = r0;
    s.tmp_1 = scene_systemMenu_PauseMenu_constructor__P2701_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = scene_systemMenu_buildOptionList__P2708;
    s.tmp_1.arg2 = undefined;
    s.callLocIdx = 1429; s.pc = 9; return s.tmp_1;
  case 9:
    r0 = s.retval;
    globals.instance___4808 = (s.tmp_0);
    s.lastBrkId = 3234;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3234]) return breakpoint(s, 10, 3234, r0);
  case 10:
    s.tmp_0 = scene_systemMenu_PauseMenu_show__P2702_mk(s);
    s.tmp_0.arg0 = globals.instance___4808;
    s.callLocIdx = 1430; s.pc = 11; return s.tmp_0;
  case 11:
    r0 = s.retval;
  case 3:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_showSystemMenu__P2712.info = {"start":12992,"length":172,"line":388,"column":4,"endLine":393,"endColumn":5,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"showSystemMenu","argumentNames":[]}

function scene_systemMenu_showSystemMenu__P2712_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_showSystemMenu__P2712, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
} }





function scene_systemMenu_buildOptionList__P2708(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.options___19813 = undefined;
    s.lastBrkId = 3210;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3210]) return breakpoint(s, 5, 3210, r0);
  case 5:
    r0 = pxsim_Array__mk();
    s.options___19813 = (r0);
    s.lastBrkId = 3211;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3211]) return breakpoint(s, 6, 3211, r0);
  case 6:
    r0 = pxsim_pxtcore_mkClassInstance(scene_systemMenu_MenuOption__C2692_VT);
    s.tmp_0 = r0;
    s.tmp_1 = scene_systemMenu_MenuOption_constructor__P2693_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = globals.VOLUME_DOWN_ICON___2722;
    s.tmp_1.arg2 = scene_systemMenu_buildOptionList_inline__P19821;
    s.tmp_1.arg3 = scene_systemMenu_volumeDown__P4814;
    s.callLocIdx = 1410; s.pc = 7; return s.tmp_1;
  case 7:
    r0 = s.retval;
    r0 = pxsim_Array__push(s.options___19813, s.tmp_0);
    s.lastBrkId = 3212;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3212]) return breakpoint(s, 8, 3212, r0);
  case 8:
    r0 = pxsim_pxtcore_mkClassInstance(scene_systemMenu_MenuOption__C2692_VT);
    s.tmp_0 = r0;
    s.tmp_1 = scene_systemMenu_MenuOption_constructor__P2693_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = globals.VOLUME_UP_ICON___2719;
    s.tmp_1.arg2 = scene_systemMenu_buildOptionList_inline__P19835;
    s.tmp_1.arg3 = scene_systemMenu_volumeUp__P4813;
    s.callLocIdx = 1412; s.pc = 9; return s.tmp_1;
  case 9:
    r0 = s.retval;
    r0 = pxsim_Array__push(s.options___19813, s.tmp_0);
    s.lastBrkId = 3213;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3213]) return breakpoint(s, 10, 3213, r0);
  case 10:
    s.tmp_1 = scene_systemMenu_setScreenBrightnessSupported__P4821_mk(s);
    s.callLocIdx = 1413; s.pc = 11; return s.tmp_1;
  case 11:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3214;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3214]) return breakpoint(s, 12, 3214, r0);
  case 12:
    r0 = pxsim_pxtcore_mkClassInstance(scene_systemMenu_MenuOption__C2692_VT);
    s.tmp_2 = r0;
    s.tmp_3 = scene_systemMenu_MenuOption_constructor__P2693_mk(s);
    s.tmp_3.arg0 = s.tmp_2;
    s.tmp_3.arg1 = globals.BRIGHTNESS_DOWN_ICON___2720;
    s.tmp_3.arg2 = scene_systemMenu_buildOptionList_inline__P19850;
    s.tmp_3.arg3 = scene_systemMenu_brightnessDown__P4816;
    s.callLocIdx = 1415; s.pc = 13; return s.tmp_3;
  case 13:
    r0 = s.retval;
    r0 = pxsim_Array__push(s.options___19813, s.tmp_2);
    s.lastBrkId = 3215;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3215]) return breakpoint(s, 14, 3215, r0);
  case 14:
    r0 = pxsim_pxtcore_mkClassInstance(scene_systemMenu_MenuOption__C2692_VT);
    s.tmp_0 = r0;
    s.tmp_1 = scene_systemMenu_MenuOption_constructor__P2693_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = globals.BRIGHTNESS_UP_ICON___2725;
    s.tmp_1.arg2 = scene_systemMenu_buildOptionList_inline__P19865;
    s.tmp_1.arg3 = scene_systemMenu_brightnessUp__P4815;
    s.callLocIdx = 1417; s.pc = 15; return s.tmp_1;
  case 15:
    r0 = s.retval;
    r0 = pxsim_Array__push(s.options___19813, s.tmp_0);
  case 1:
  case 2:
    s.lastBrkId = 3216;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3216]) return breakpoint(s, 16, 3216, r0);
  case 16:
    r0 = pxsim_pxtcore_mkClassInstance(scene_systemMenu_MenuOption__C2692_VT);
    s.tmp_0 = r0;
    s.tmp_1 = scene_systemMenu_MenuOption_constructor__P2693_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = globals.STATS_ICON___2726;
    s.tmp_1.arg2 = scene_systemMenu_buildOptionList_inline__P19880;
    s.tmp_1.arg3 = scene_systemMenu_toggleStats__P4818;
    s.callLocIdx = 1418; s.pc = 17; return s.tmp_1;
  case 17:
    r0 = s.retval;
    r0 = pxsim_Array__push(s.options___19813, s.tmp_0);
    s.lastBrkId = 3217;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3217]) return breakpoint(s, 18, 3217, r0);
  case 18:
    r0 = pxsim_pxtcore_mkClassInstance(scene_systemMenu_MenuOption__C2692_VT);
    s.tmp_0 = r0;
    s.tmp_1 = scene_systemMenu_MenuOption_constructor__P2693_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = globals.CONSOLE_ICON___2724;
    s.tmp_1.arg2 = scene_systemMenu_buildOptionList_inline__P19889;
    s.tmp_1.arg3 = scene_systemMenu_toggleConsole__P4819;
    s.callLocIdx = 1420; s.pc = 19; return s.tmp_1;
  case 19:
    r0 = s.retval;
    r0 = pxsim_Array__push(s.options___19813, s.tmp_0);
    s.lastBrkId = 3218;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3218]) return breakpoint(s, 20, 3218, r0);
  case 20:
    r0 = pxsim_pxtcore_mkClassInstance(scene_systemMenu_MenuOption__C2692_VT);
    s.tmp_0 = r0;
    s.tmp_1 = scene_systemMenu_MenuOption_constructor__P2693_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = globals.SLEEP_ICON___2723;
    s.tmp_1.arg2 = scene_systemMenu_buildOptionList_inline__P19898;
    s.tmp_1.arg3 = scene_systemMenu_sleep__P4820;
    s.callLocIdx = 1421; s.pc = 21; return s.tmp_1;
  case 21:
    r0 = s.retval;
    r0 = pxsim_Array__push(s.options___19813, s.tmp_0);
    s.lastBrkId = 3219;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3219]) return breakpoint(s, 22, 3219, r0);
  case 22:
    r0 = pxsim_numops_toBoolDecr(globals.customMenuOptions___4809);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 3220;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3220]) return breakpoint(s, 23, 3220, r0);
  case 23:
    s.tmp_0 = helpers_arrayConcat__P113_mk(s);
    s.tmp_0.arg0 = s.options___19813;
    s.tmp_0.arg1 = globals.customMenuOptions___4809;
    s.callLocIdx = 1422; s.pc = 24; return s.tmp_0;
  case 24:
    r0 = s.retval;
    s.options___19813 = (r0);
  case 3:
  case 4:
    s.lastBrkId = 3221;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3221]) return breakpoint(s, 25, 3221, r0);
  case 25:
    r0 = pxsim_pxtcore_mkClassInstance(scene_systemMenu_MenuOption__C2692_VT);
    s.tmp_0 = r0;
    s.tmp_1 = scene_systemMenu_MenuOption_constructor__P2693_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = globals.CLOSE_MENU_ICON___2721;
    s.tmp_1.arg2 = scene_systemMenu_buildOptionList_inline__P19911;
    s.tmp_1.arg3 = scene_systemMenu_closeMenu__P2707;
    s.callLocIdx = 1423; s.pc = 26; return s.tmp_1;
  case 26:
    r0 = s.retval;
    r0 = pxsim_Array__push(s.options___19813, s.tmp_0);
    s.lastBrkId = 3222;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3222]) return breakpoint(s, 27, 3222, r0);
  case 27:
    r0 = s.options___19813;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_buildOptionList__P2708.info = {"start":10499,"length":1149,"line":334,"column":4,"endLine":354,"endColumn":5,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"buildOptionList","argumentNames":[]}

function scene_systemMenu_buildOptionList__P2708_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_buildOptionList__P2708, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  options___19813: undefined,
} }





function scene_systemMenu_buildOptionList_inline__P19821(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.tmp_3 = music_volume__P1605_mk(s);
    s.callLocIdx = 1409; s.pc = 1; return s.tmp_3;
  case 1:
    r0 = s.retval;
    s.tmp_2 = r0;
    if ((s.tmp_2) && (s.tmp_2).vtable) {
    setupResume(s, 2);
    pxsim_String__stringConv(s.tmp_2);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_2) + ""; }
  case 2:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_String__concat("VOLUME DOWN (", s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_String__concat(s.tmp_0, ")");
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_buildOptionList_inline__P19821.info = {"start":10644,"length":39,"line":337,"column":54,"endLine":337,"endColumn":93,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"inline","argumentNames":[]}

function scene_systemMenu_buildOptionList_inline__P19821_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_buildOptionList_inline__P19821, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
} }





function scene_systemMenu_buildOptionList_inline__P19835(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.tmp_3 = music_volume__P1605_mk(s);
    s.callLocIdx = 1411; s.pc = 1; return s.tmp_3;
  case 1:
    r0 = s.retval;
    s.tmp_2 = r0;
    if ((s.tmp_2) && (s.tmp_2).vtable) {
    setupResume(s, 2);
    pxsim_String__stringConv(s.tmp_2);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_2) + ""; }
  case 2:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_String__concat("VOLUME UP (", s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_String__concat(s.tmp_0, ")");
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_buildOptionList_inline__P19835.info = {"start":10751,"length":37,"line":338,"column":52,"endLine":338,"endColumn":89,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"inline","argumentNames":[]}

function scene_systemMenu_buildOptionList_inline__P19835_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_buildOptionList_inline__P19835, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
} }





function scene_systemMenu_buildOptionList_inline__P19850(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.tmp_3 = helpers_screenBrightness__P1761_mk(s);
    s.tmp_3.arg0 = globals.screen___1827;
    s.callLocIdx = 1414; s.pc = 1; return s.tmp_3;
  case 1:
    r0 = s.retval;
    s.tmp_2 = r0;
    if ((s.tmp_2) && (s.tmp_2).vtable) {
    setupResume(s, 2);
    pxsim_String__stringConv(s.tmp_2);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_2) + ""; }
  case 2:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_String__concat("BRIGHTNESS DOWN (", s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_String__concat(s.tmp_0, ")");
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_buildOptionList_inline__P19850.info = {"start":10910,"length":48,"line":340,"column":62,"endLine":340,"endColumn":110,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"inline","argumentNames":[]}

function scene_systemMenu_buildOptionList_inline__P19850_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_buildOptionList_inline__P19850, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
} }





function scene_systemMenu_buildOptionList_inline__P19865(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.tmp_3 = helpers_screenBrightness__P1761_mk(s);
    s.tmp_3.arg0 = globals.screen___1827;
    s.callLocIdx = 1416; s.pc = 1; return s.tmp_3;
  case 1:
    r0 = s.retval;
    s.tmp_2 = r0;
    if ((s.tmp_2) && (s.tmp_2).vtable) {
    setupResume(s, 2);
    pxsim_String__stringConv(s.tmp_2);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_2) + ""; }
  case 2:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_String__concat("BRIGHTNESS UP (", s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_String__concat(s.tmp_0, ")");
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_buildOptionList_inline__P19865.info = {"start":11038,"length":46,"line":341,"column":60,"endLine":341,"endColumn":106,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"inline","argumentNames":[]}

function scene_systemMenu_buildOptionList_inline__P19865_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_buildOptionList_inline__P19865, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
} }





function scene_systemMenu_buildOptionList_inline__P19880(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    r0 = pxsim_numops_toBoolDecr(globals.stats___2606);
    if (!r0) { step = 1; continue; }
    r0 = "HIDE STATS";
    { step = 2; continue; }
  case 1:
    r0 = "SHOW STATS";
  case 2:
    // jmp value (already in r0)
    s.tmp_0 = r0;
    r0 = s.tmp_0;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_buildOptionList_inline__P19880.info = {"start":11160,"length":46,"line":343,"column":48,"endLine":343,"endColumn":94,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"inline","argumentNames":[]}

function scene_systemMenu_buildOptionList_inline__P19880_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_buildOptionList_inline__P19880, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
} }





function scene_systemMenu_buildOptionList_inline__P19889(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.tmp_1 = game_consoleOverlay_isVisible__P2729_mk(s);
    s.callLocIdx = 1419; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = "HIDE CONSOLE";
    { step = 2; continue; }
  case 1:
    r0 = "SHOW CONSOLE";
  case 2:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = s.tmp_2;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_buildOptionList_inline__P19889.info = {"start":11273,"length":71,"line":344,"column":50,"endLine":344,"endColumn":121,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"inline","argumentNames":[]}

function scene_systemMenu_buildOptionList_inline__P19889_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_buildOptionList_inline__P19889, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
} }





function scene_systemMenu_buildOptionList_inline__P19898(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    r0 = "SLEEP";
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_buildOptionList_inline__P19898.info = {"start":11411,"length":13,"line":345,"column":48,"endLine":345,"endColumn":61,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"inline","argumentNames":[]}

function scene_systemMenu_buildOptionList_inline__P19898_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_buildOptionList_inline__P19898, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
} }





function scene_systemMenu_buildOptionList_inline__P19911(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    r0 = "CLOSE";
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_buildOptionList_inline__P19911.info = {"start":11590,"length":13,"line":351,"column":53,"endLine":351,"endColumn":66,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"inline","argumentNames":[]}

function scene_systemMenu_buildOptionList_inline__P19911_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_buildOptionList_inline__P19911, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
} }





function scene_systemMenu_setScreenBrightnessSupported__P4821(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 3209;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3209]) return breakpoint(s, 1, 3209, r0);
  case 1:
    r0 = 0;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_setScreenBrightnessSupported__P4821.info = {"start":10398,"length":95,"line":330,"column":4,"endLine":332,"endColumn":5,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"setScreenBrightnessSupported","argumentNames":[]}

function scene_systemMenu_setScreenBrightnessSupported__P4821_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_setScreenBrightnessSupported__P4821, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
} }





function scene_systemMenu_sleep__P4820(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 3203;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3203]) return breakpoint(s, 1, 3203, r0);
  case 1:
    r0 = pxsim_pxtcore.deepSleep();
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_sleep__P4820.info = {"start":10072,"length":51,"line":316,"column":4,"endLine":318,"endColumn":5,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"sleep","argumentNames":[]}

function scene_systemMenu_sleep__P4820_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_sleep__P4820, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
} }





function scene_systemMenu_toggleConsole__P4819(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 3199;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3199]) return breakpoint(s, 3, 3199, r0);
  case 3:
    s.tmp_1 = game_consoleOverlay_isVisible__P2729_mk(s);
    s.callLocIdx = 1402; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3200;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3200]) return breakpoint(s, 5, 3200, r0);
  case 5:
    s.tmp_2 = game_consoleOverlay_setVisible__P2731_mk(s);
    s.tmp_2.arg0 = false;
    s.tmp_2.arg1 = undefined;
    s.callLocIdx = 1403; s.pc = 6; return s.tmp_2;
  case 6:
    r0 = s.retval;
    { step = 2; continue; }
  case 1:
    s.lastBrkId = 3201;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3201]) return breakpoint(s, 7, 3201, r0);
  case 7:
    s.tmp_0 = game_consoleOverlay_setVisible__P2731_mk(s);
    s.tmp_0.arg0 = true;
    s.tmp_0.arg1 = undefined;
    s.callLocIdx = 1404; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
    s.lastBrkId = 3202;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3202]) return breakpoint(s, 9, 3202, r0);
  case 9:
    s.tmp_0 = console_log__P378_mk(s);
    s.tmp_0.arg0 = "console";
    s.callLocIdx = 1405; s.pc = 10; return s.tmp_0;
  case 10:
    r0 = s.retval;
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_toggleConsole__P4819.info = {"start":9827,"length":239,"line":307,"column":4,"endLine":314,"endColumn":5,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"toggleConsole","argumentNames":[]}

function scene_systemMenu_toggleConsole__P4819_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_toggleConsole__P4819, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
} }





function game_consoleOverlay_setVisible__P2731(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3263;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3263]) return breakpoint(s, 7, 3263, r0);
  case 7:
    s.tmp_1 = r0 = s.arg0;
    r0 = pxsim_numops_toBoolDecr(globals.consoleStrings___4854);
    s.tmp_5 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_5);
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    s.tmp_3 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_3);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 != s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 3264;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3264]) return breakpoint(s, 8, 3264, r0);
  case 8:
    r0 = pxsim_numops_toBoolDecr(s.arg0);
    if (!r0) { step = 1; continue; }
    r0 = pxsim_Array__mk();
    { step = 2; continue; }
  case 1:
    r0 = undefined;
  case 2:
    // jmp value (already in r0)
    s.tmp_6 = r0;
    globals.consoleStrings___4854 = (s.tmp_6);
  case 3:
  case 4:
    s.lastBrkId = 3265;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3265]) return breakpoint(s, 9, 3265, r0);
  case 9:
    r0 = (s.arg1 !== undefined);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 3266;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3266]) return breakpoint(s, 10, 3266, r0);
  case 10:
    globals.consoleColor___4853 = (s.arg1);
  case 5:
  case 6:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_consoleOverlay_setVisible__P2731.info = {"start":562,"length":219,"line":19,"column":4,"endLine":24,"endColumn":5,"fileName":"pxt_modules/game/console.ts","functionName":"setVisible","argumentNames":["value","col"]}

function game_consoleOverlay_setVisible__P2731_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_consoleOverlay_setVisible__P2731, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function console_log__P378(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 396;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[396]) return breakpoint(s, 1, 396, r0);
  case 1:
    s.tmp_0 = console_add__P374_mk(s);
    s.tmp_0.arg0 = 1;
    s.tmp_0.arg1 = s.arg0;
    s.callLocIdx = 39; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
console_log__P378.info = {"start":1450,"length":86,"line":58,"column":4,"endLine":60,"endColumn":5,"fileName":"pxt_modules/base/console.ts","functionName":"log","argumentNames":["value"]}

function console_log__P378_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: console_log__P378, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function console_add__P374(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.text___15056 = undefined;
    s.i___15065 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 387;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[387]) return breakpoint(s, 6, 387, r0);
  case 6:
    r0 = (s.arg0 < globals.minPriority___373);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 388;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[388]) return breakpoint(s, 7, 388, r0);
  case 7:
    { step = 5; continue; }
  case 1:
  case 2:
    s.lastBrkId = 389;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[389]) return breakpoint(s, 8, 389, r0);
  case 8:
    s.tmp_1 = console_inspect__P380_mk(s);
    s.tmp_1.arg0 = s.arg1;
    s.tmp_1.arg1 = 20;
    s.callLocIdx = 37; s.pc = 9; return s.tmp_1;
  case 9:
    r0 = s.retval;
    s.text___15056 = (r0);
    s.lastBrkId = 390;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[390]) return breakpoint(s, 10, 390, r0);
  case 10:
    if ((s.text___15056) && (s.text___15056).vtable) {
    setupResume(s, 11);
    pxsim_String__stringConv(s.text___15056);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.text___15056) + ""; }
  case 11:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_String__concat(s.tmp_0, "\n");
    s.text___15056 = (r0);
    s.lastBrkId = 391;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[391]) return breakpoint(s, 12, 391, r0);
  case 12:
    s.i___15065 = (0);
    s.lastBrkId = 392;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[392]) return breakpoint(s, 13, 392, r0);
  case 13:
  case 3:
    s.lastBrkId = 393;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[393]) return breakpoint(s, 14, 393, r0);
  case 14:
    s.tmp_1 = r0 = s.i___15065;
    r0 = pxsim_Array__length(globals.listeners___4185);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 394;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[394]) return breakpoint(s, 15, 394, r0);
  case 15:
    s.tmp_3 = lambda_3_mk(s);
    r0 = pxsim_Array__getAt(globals.listeners___4185, s.i___15065);
    s.tmp_3.argL = r0;
    s.tmp_3.arg0 = s.arg0;
    s.tmp_3.arg1 = s.text___15056;
    setupLambda(s.tmp_3, s.tmp_3.argL);
    s.callLocIdx = 38; s.pc = 16; return s.tmp_3;
  case 16:
    r0 = s.retval;
    s.lastBrkId = 395;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[395]) return breakpoint(s, 17, 395, r0);
  case 17:
    r0 = (s.i___15065 + 1);
    s.i___15065 = (r0);
    { step = 3; continue; }
  case 4:
  case 5:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
console_add__P374.info = {"start":632,"length":317,"line":28,"column":4,"endLine":36,"endColumn":5,"fileName":"pxt_modules/base/console.ts","functionName":"add","argumentNames":["priority","message"]}

function console_add__P374_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: console_add__P374, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  text___15056: undefined,
  i___15065: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function scene_systemMenu_toggleStats__P4818(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 3196;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3196]) return breakpoint(s, 5, 3196, r0);
  case 5:
    r0 = pxsim_numops_toBoolDecr(globals.stats___2606);
    s.tmp_0 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_0);
    globals.stats___2606 = (r0);
    s.lastBrkId = 3197;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3197]) return breakpoint(s, 6, 3197, r0);
  case 6:
    r0 = pxsim_numops_toBoolDecr(globals.stats___2606);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = globals.control_EventContext_onStats___396;
  case 2:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 3198;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3198]) return breakpoint(s, 7, 3198, r0);
  case 7:
    s.tmp_3 = lambda_2_mk(s);
    s.tmp_3.argL = globals.control_EventContext_onStats___396;
    r0 = pxsim_String_.mkEmpty();
    s.tmp_3.arg0 = r0;
    setupLambda(s.tmp_3, s.tmp_3.argL);
    s.callLocIdx = 1401; s.pc = 8; return s.tmp_3;
  case 8:
    r0 = s.retval;
  case 3:
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_toggleStats__P4818.info = {"start":9642,"length":179,"line":300,"column":4,"endLine":305,"endColumn":5,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"toggleStats","argumentNames":[]}

function scene_systemMenu_toggleStats__P4818_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_toggleStats__P4818, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
} }





function scene_systemMenu_brightnessDown__P4816(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 3193;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3193]) return breakpoint(s, 1, 3193, r0);
  case 1:
    s.tmp_0 = scene_systemMenu_setScreenBrightness__P4817_mk(s);
    s.tmp_2 = helpers_screenBrightness__P1761_mk(s);
    s.tmp_2.arg0 = globals.screen___1827;
    s.callLocIdx = 1396; s.pc = 3; return s.tmp_2;
  case 3:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - 5);
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 1397; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_brightnessDown__P4816.info = {"start":9198,"length":87,"line":289,"column":4,"endLine":291,"endColumn":5,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"brightnessDown","argumentNames":[]}

function scene_systemMenu_brightnessDown__P4816_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_brightnessDown__P4816, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
} }





function scene_systemMenu_setScreenBrightness__P4817(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3194;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3194]) return breakpoint(s, 1, 3194, r0);
  case 1:
    s.tmp_0 = helpers_setScreenBrightness__P1760_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_0.arg1 = s.arg0;
    s.callLocIdx = 1398; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 3195;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3195]) return breakpoint(s, 3, 3195, r0);
  case 3:
    s.tmp_0 = settings_writeNumber__P1856_mk(s);
    s.tmp_0.arg0 = "#brightness";
    s.tmp_1 = helpers_screenBrightness__P1761_mk(s);
    s.tmp_1.arg0 = globals.screen___1827;
    s.callLocIdx = 1399; s.pc = 5; return s.tmp_1;
  case 5:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1400; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_setScreenBrightness__P4817.info = {"start":9291,"length":345,"line":293,"column":4,"endLine":298,"endColumn":5,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"setScreenBrightness","argumentNames":["b"]}

function scene_systemMenu_setScreenBrightness__P4817_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_setScreenBrightness__P4817, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function helpers_setScreenBrightness__P1760(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 825;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[825]) return breakpoint(s, 1, 825, r0);
  case 1:
    s.tmp_0 = Math_clamp__P127_mk(s);
    s.tmp_0.arg0 = 10;
    s.tmp_0.arg1 = 100;
    r0 = (s.arg1 | 0);
    s.tmp_0.arg2 = r0;
    s.callLocIdx = 134; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.arg1 = (r0);
    s.lastBrkId = 826;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[826]) return breakpoint(s, 3, 826, r0);
  case 3:
    globals.brightness___1748 = (s.arg1);
    s.lastBrkId = 827;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[827]) return breakpoint(s, 4, 827, r0);
  case 4:
    r0 = pxsim_pxtcore.setScreenBrightness(globals.brightness___1748);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
helpers_setScreenBrightness__P1760.info = {"start":7335,"length":210,"line":237,"column":4,"endLine":241,"endColumn":5,"fileName":"pxt_modules/screen/image.ts","functionName":"setScreenBrightness","argumentNames":["img","b"]}

function helpers_setScreenBrightness__P1760_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_setScreenBrightness__P1760, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function scene_systemMenu_brightnessUp__P4815(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 3192;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3192]) return breakpoint(s, 1, 3192, r0);
  case 1:
    s.tmp_0 = scene_systemMenu_setScreenBrightness__P4817_mk(s);
    s.tmp_2 = helpers_screenBrightness__P1761_mk(s);
    s.tmp_2.arg0 = globals.screen___1827;
    s.callLocIdx = 1394; s.pc = 3; return s.tmp_2;
  case 3:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 + 5);
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 1395; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_brightnessUp__P4815.info = {"start":9107,"length":85,"line":285,"column":4,"endLine":287,"endColumn":5,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"brightnessUp","argumentNames":[]}

function scene_systemMenu_brightnessUp__P4815_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_brightnessUp__P4815, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
} }





function scene_systemMenu_volumeDown__P4814(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.v___20099 = undefined;
    s.remainder___20102 = undefined;
    s.newVolume___20105 = undefined;
    s.lastBrkId = 3188;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3188]) return breakpoint(s, 3, 3188, r0);
  case 3:
    s.tmp_0 = music_volume__P1605_mk(s);
    s.callLocIdx = 1392; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.v___20099 = (r0);
    s.lastBrkId = 3189;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3189]) return breakpoint(s, 5, 3189, r0);
  case 5:
    r0 = (s.v___20099 % 32);
    s.remainder___20102 = (r0);
    s.lastBrkId = 3190;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3190]) return breakpoint(s, 6, 3190, r0);
  case 6:
    r0 = pxsim_numops_toBoolDecr(s.remainder___20102);
    if (!r0) { step = 1; continue; }
    r0 = s.remainder___20102;
    { step = 2; continue; }
  case 1:
    r0 = 32;
  case 2:
    // jmp value (already in r0)
    s.tmp_0 = r0;
    r0 = (s.v___20099 - s.tmp_0);
    s.newVolume___20105 = (r0);
    s.lastBrkId = 3191;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3191]) return breakpoint(s, 7, 3191, r0);
  case 7:
    s.tmp_0 = scene_systemMenu_setVolume__P4812_mk(s);
    s.tmp_0.arg0 = s.newVolume___20105;
    s.callLocIdx = 1393; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_volumeDown__P4814.info = {"start":8914,"length":187,"line":278,"column":4,"endLine":283,"endColumn":5,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"volumeDown","argumentNames":[]}

function scene_systemMenu_volumeDown__P4814_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_volumeDown__P4814, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  v___20099: undefined,
  remainder___20102: undefined,
  newVolume___20105: undefined,
} }





function scene_systemMenu_setVolume__P4812(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3181;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3181]) return breakpoint(s, 1, 3181, r0);
  case 1:
    s.tmp_0 = music_setVolume__P1604_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1387; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 3182;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3182]) return breakpoint(s, 3, 3182, r0);
  case 3:
    s.tmp_0 = music_playTone__P1606_mk(s);
    s.tmp_0.arg0 = 440;
    s.tmp_0.arg1 = 500;
    s.callLocIdx = 1388; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.lastBrkId = 3183;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3183]) return breakpoint(s, 5, 3183, r0);
  case 5:
    s.tmp_0 = settings_writeNumber__P1856_mk(s);
    s.tmp_0.arg0 = "#volume";
    s.tmp_0.arg1 = s.arg0;
    s.callLocIdx = 1389; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_setVolume__P4812.info = {"start":8565,"length":166,"line":265,"column":4,"endLine":269,"endColumn":5,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"setVolume","argumentNames":["newVolume"]}

function scene_systemMenu_setVolume__P4812_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_setVolume__P4812, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function music_playTone__P1606(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.id___20031 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = pxsim_pxtrt.mklocRef();
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.arg1);
    s.arg1 = (s.tmp_0);
    s.lastBrkId = 538;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[538]) return breakpoint(s, 5, 538, r0);
  case 5:
    r0 = pxsim_pxtrt_ldlocRef(s.arg1);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 == 0);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 539;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[539]) return breakpoint(s, 6, 539, r0);
  case 6:
    r0 = pxsim_pxtrt_stlocRef(s.arg1, 86400000);
  case 1:
  case 2:
    s.lastBrkId = 540;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[540]) return breakpoint(s, 7, 540, r0);
  case 7:
    r0 = pxsim_pxtrt_ldlocRef(s.arg1);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 <= 2000);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 541;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[541]) return breakpoint(s, 8, 541, r0);
  case 8:
    s.tmp_2 = music_playNoteCore__P4243_mk(s);
    s.tmp_2.arg0 = 0;
    s.tmp_2.arg1 = s.arg0;
    r0 = pxsim_pxtrt_ldlocRef(s.arg1);
    s.tmp_2.arg2 = r0;
    s.callLocIdx = 71; s.pc = 9; return s.tmp_2;
  case 9:
    r0 = s.retval;
    s.lastBrkId = 542;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[542]) return breakpoint(s, 10, 542, r0);
  case 10:
    s.tmp_0 = pause__P411_mk(s);
    r0 = pxsim_pxtrt_ldlocRef(s.arg1);
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 72; s.pc = 11; return s.tmp_0;
  case 11:
    r0 = s.retval;
    { step = 4; continue; }
  case 3:
    s.lastBrkId = 543;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[543]) return breakpoint(s, 12, 543, r0);
  case 12:
    r0 = (globals.playToneID___4245 + 1);
    s.tmp_0 = r0;
    globals.playToneID___4245 = (r0);
    s.id___20031 = (s.tmp_0);
    s.lastBrkId = 544;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[544]) return breakpoint(s, 13, 544, r0);
  case 13:
    r0 = pxsim_pxtcore_mkAction(3, music_playTone_inline__P20037);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.id___20031);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 1, s.arg1);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 2, s.arg0);
    r0 = pxsim.control.runInParallel(s.tmp_0);
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
music_playTone__P1606.info = {"start":2591,"length":831,"line":83,"column":4,"endLine":108,"endColumn":5,"fileName":"pxt_modules/mixer/melody.ts","functionName":"playTone","argumentNames":["frequency","ms"]}

function music_playTone__P1606_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: music_playTone__P1606, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  id___20031: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function music_playTone_inline__P20037(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.pos___20038 = undefined;
    s.now___20048 = undefined;
    s.d___20051 = undefined;
    s.t___20055 = undefined;
    s.lastBrkId = 545;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[545]) return breakpoint(s, 7, 545, r0);
  case 7:
    r0 = pxsim.control.millis();
    s.pos___20038 = (r0);
    s.lastBrkId = 546;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[546]) return breakpoint(s, 8, 546, r0);
  case 8:
  case 1:
    s.lastBrkId = 547;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[547]) return breakpoint(s, 9, 547, r0);
  case 9:
    r0 = (s.caps[0] == globals.playToneID___4245);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 2; continue; }
    r0 = s.tmp_0;
    { step = 3; continue; }
  case 2:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > 0);
  case 3:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 6; continue; }
    s.lastBrkId = 548;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[548]) return breakpoint(s, 10, 548, r0);
  case 10:
    r0 = pxsim.control.millis();
    s.now___20048 = (r0);
    s.lastBrkId = 549;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[549]) return breakpoint(s, 11, 549, r0);
  case 11:
    r0 = (s.pos___20038 - s.now___20048);
    s.d___20051 = (r0);
    s.lastBrkId = 550;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[550]) return breakpoint(s, 12, 550, r0);
  case 12:
    s.tmp_0 = Math_min__P131_mk(s);
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = 500;
    s.callLocIdx = 73; s.pc = 13; return s.tmp_0;
  case 13:
    r0 = s.retval;
    s.t___20055 = (r0);
    s.lastBrkId = 551;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[551]) return breakpoint(s, 14, 551, r0);
  case 14:
    s.tmp_0 = r0 = s.caps[1];
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - s.t___20055);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stlocRef(s.tmp_0, s.tmp_1);
    s.lastBrkId = 552;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[552]) return breakpoint(s, 15, 552, r0);
  case 15:
    r0 = (s.pos___20038 + s.t___20055);
    s.pos___20038 = (r0);
    s.lastBrkId = 553;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[553]) return breakpoint(s, 16, 553, r0);
  case 16:
    s.tmp_0 = music_playNoteCore__P4243_mk(s);
    r0 = (s.d___20051 - 1);
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = s.caps[2];
    s.tmp_0.arg2 = s.t___20055;
    s.callLocIdx = 74; s.pc = 17; return s.tmp_0;
  case 17:
    r0 = s.retval;
    s.lastBrkId = 554;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[554]) return breakpoint(s, 18, 554, r0);
  case 18:
    r0 = pxsim_pxtrt_ldlocRef(s.caps[1]);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 == 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 555;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[555]) return breakpoint(s, 19, 555, r0);
  case 19:
    s.tmp_2 = pause__P411_mk(s);
    r0 = (s.d___20051 + s.t___20055);
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 75; s.pc = 20; return s.tmp_2;
  case 20:
    r0 = s.retval;
    { step = 5; continue; }
  case 4:
    s.lastBrkId = 556;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[556]) return breakpoint(s, 21, 556, r0);
  case 21:
    s.tmp_0 = pause__P411_mk(s);
    r0 = (s.d___20051 + s.t___20055);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - 100);
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 76; s.pc = 22; return s.tmp_0;
  case 22:
    r0 = s.retval;
  case 5:
    { step = 1; continue; }
  case 6:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
music_playTone_inline__P20037.info = {"start":2890,"length":515,"line":92,"column":34,"endLine":106,"endColumn":13,"fileName":"pxt_modules/mixer/melody.ts","functionName":"inline","argumentNames":[]}

function music_playTone_inline__P20037_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: music_playTone_inline__P20037, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  pos___20038: undefined,
  now___20048: undefined,
  d___20051: undefined,
  t___20055: undefined,
} }





function music_playNoteCore__P4243(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.buf___20085 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 535;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[535]) return breakpoint(s, 1, 535, r0);
  case 1:
    r0 = pxsim.control.createBuffer(12);
    s.buf___20085 = (r0);
    s.lastBrkId = 536;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[536]) return breakpoint(s, 2, 536, r0);
  case 2:
    s.tmp_0 = music_addNote__P4250_mk(s);
    s.tmp_0.arg0 = s.buf___20085;
    s.tmp_0.arg1 = 0;
    s.tmp_0.arg2 = s.arg2;
    s.tmp_0.arg3 = 255;
    s.tmp_0.arg4 = 255;
    s.tmp_0.arg5 = 3;
    s.tmp_0.arg6 = s.arg1;
    s.tmp_1 = music_volume__P1605_mk(s);
    s.callLocIdx = 69; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
    s.tmp_0.arg7 = r0;
    s.tmp_0.arg8 = s.arg1;
    s.callLocIdx = 70; s.pc = 3; return s.tmp_0;
  case 3:
    r0 = s.retval;
    s.lastBrkId = 537;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[537]) return breakpoint(s, 5, 537, r0);
  case 5:
    r0 = pxsim.music.queuePlayInstructions(s.arg0, s.buf___20085);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
music_playNoteCore__P4243.info = {"start":1877,"length":240,"line":66,"column":4,"endLine":70,"endColumn":5,"fileName":"pxt_modules/mixer/melody.ts","functionName":"playNoteCore","argumentNames":["when","frequency","ms"]}

function music_playNoteCore__P4243_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: music_playNoteCore__P4243, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  buf___20085: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function scene_systemMenu_volumeUp__P4813(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.v___19999 = undefined;
    s.remainder___20002 = undefined;
    s.newVolume___20005 = undefined;
    s.lastBrkId = 3184;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3184]) return breakpoint(s, 1, 3184, r0);
  case 1:
    s.tmp_0 = music_volume__P1605_mk(s);
    s.callLocIdx = 1390; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.v___19999 = (r0);
    s.lastBrkId = 3185;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3185]) return breakpoint(s, 3, 3185, r0);
  case 3:
    r0 = (s.v___19999 % 32);
    s.remainder___20002 = (r0);
    s.lastBrkId = 3186;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3186]) return breakpoint(s, 4, 3186, r0);
  case 4:
    r0 = (s.v___19999 + 32);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 - s.remainder___20002);
    s.newVolume___20005 = (r0);
    s.lastBrkId = 3187;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3187]) return breakpoint(s, 5, 3187, r0);
  case 5:
    s.tmp_0 = scene_systemMenu_setVolume__P4812_mk(s);
    s.tmp_0.arg0 = s.newVolume___20005;
    s.callLocIdx = 1391; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_volumeUp__P4813.info = {"start":8737,"length":171,"line":271,"column":4,"endLine":276,"endColumn":5,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"volumeUp","argumentNames":[]}

function scene_systemMenu_volumeUp__P4813_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_volumeUp__P4813, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  v___19999: undefined,
  remainder___20002: undefined,
  newVolume___20005: undefined,
} }





function game_consoleOverlay_isVisible__P2729(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 3262;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3262]) return breakpoint(s, 1, 3262, r0);
  case 1:
    r0 = pxsim_numops_toBoolDecr(globals.consoleStrings___4854);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_0);
    return leave(s, r0)
  default: oops()
} } }
game_consoleOverlay_isVisible__P2729.info = {"start":422,"length":68,"line":11,"column":4,"endLine":13,"endColumn":5,"fileName":"pxt_modules/game/console.ts","functionName":"isVisible","argumentNames":[]}

function game_consoleOverlay_isVisible__P2729_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_consoleOverlay_isVisible__P2729, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
} }





function scene_systemMenu_closeMenu__P2707(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 3204;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3204]) return breakpoint(s, 3, 3204, r0);
  case 3:
    r0 = pxsim_numops_toBoolDecr(globals.instance___4808);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3205;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3205]) return breakpoint(s, 4, 3205, r0);
  case 4:
    s.tmp_0 = scene_systemMenu_PauseMenu_dispose__P2706_mk(s);
    s.tmp_0.arg0 = globals.instance___4808;
    s.callLocIdx = 1406; s.pc = 5; return s.tmp_0;
  case 5:
    r0 = s.retval;
    s.lastBrkId = 3206;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3206]) return breakpoint(s, 6, 3206, r0);
  case 6:
    globals.instance___4808 = (undefined);
    s.lastBrkId = 3207;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3207]) return breakpoint(s, 7, 3207, r0);
  case 7:
    s.tmp_0 = controller__setUserEventsEnabled__P1986_mk(s);
    s.tmp_0.arg0 = true;
    s.callLocIdx = 1407; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
    s.lastBrkId = 3208;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3208]) return breakpoint(s, 9, 3208, r0);
  case 9:
    s.tmp_0 = game_popScene__P2614_mk(s);
    s.callLocIdx = 1408; s.pc = 10; return s.tmp_0;
  case 10:
    r0 = s.retval;
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_closeMenu__P2707.info = {"start":10129,"length":216,"line":320,"column":4,"endLine":327,"endColumn":5,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"closeMenu","argumentNames":[]}

function scene_systemMenu_closeMenu__P2707_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_closeMenu__P2707, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
} }





function scene_systemMenu_PauseMenu_dispose__P2706(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_systemMenu_PauseMenu__C2700_VT)) failedCast(r0);
    s.lastBrkId = 3171;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3171]) return breakpoint(s, 3, 3171, r0);
  case 3:
    r0 = s.arg0.fields["options"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3172;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3172]) return breakpoint(s, 4, 3172, r0);
  case 4:
    s.tmp_1 = helpers_arrayForEach__P109_mk(s);
    r0 = s.arg0.fields["options"];
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = scene_systemMenu_PauseMenu_dispose_inline__P19676;
    s.callLocIdx = 1383; s.pc = 5; return s.tmp_1;
  case 5:
    r0 = s.retval;
    s.lastBrkId = 3173;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3173]) return breakpoint(s, 6, 3173, r0);
  case 6:
    r0 = (s.arg0).fields["options"] = (undefined);
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_PauseMenu_dispose__P2706.info = {"start":7732,"length":165,"line":243,"column":8,"endLine":248,"endColumn":9,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"dispose","argumentNames":["this"]}

function scene_systemMenu_PauseMenu_dispose__P2706_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_PauseMenu_dispose__P2706, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function scene_systemMenu_PauseMenu_dispose_inline__P19676(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = scene_systemMenu_MenuOption_dispose__P2699_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1382; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_PauseMenu_dispose_inline__P19676.info = {"start":7813,"length":16,"line":245,"column":37,"endLine":245,"endColumn":53,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"inline","argumentNames":["o"]}

function scene_systemMenu_PauseMenu_dispose_inline__P19676_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_PauseMenu_dispose_inline__P19676, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function scene_systemMenu_MenuOption_dispose__P2699(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_systemMenu_MenuOption__C2692_VT)) failedCast(r0);
    s.lastBrkId = 3085;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3085]) return breakpoint(s, 3, 3085, r0);
  case 3:
    r0 = s.arg0.fields["card"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3086;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3086]) return breakpoint(s, 4, 3086, r0);
  case 4:
    s.tmp_1 = Sprite_destroy__P2166_mk(s);
    r0 = s.arg0.fields["card"];
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = undefined;
    s.tmp_1.arg2 = undefined;
    s.callLocIdx = 1302; s.pc = 5; return s.tmp_1;
  case 5:
    r0 = s.retval;
    s.lastBrkId = 3087;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3087]) return breakpoint(s, 6, 3087, r0);
  case 6:
    s.tmp_0 = Sprite_destroy__P2166_mk(s);
    r0 = s.arg0.fields["icon"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = undefined;
    s.tmp_0.arg2 = undefined;
    s.callLocIdx = 1303; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    s.lastBrkId = 3088;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3088]) return breakpoint(s, 8, 3088, r0);
  case 8:
    r0 = (s.arg0).fields["card"] = (undefined);
    s.lastBrkId = 3089;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3089]) return breakpoint(s, 9, 3089, r0);
  case 9:
    r0 = (s.arg0).fields["icon"] = (undefined);
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_MenuOption_dispose__P2699.info = {"start":1812,"length":216,"line":77,"column":8,"endLine":84,"endColumn":9,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"dispose","argumentNames":["this"]}

function scene_systemMenu_MenuOption_dispose__P2699_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_MenuOption_dispose__P2699, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function scene_systemMenu_MenuOption_constructor__P2693(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_systemMenu_MenuOption__C2692_VT)) failedCast(r0);
    r0 = (s.arg0).fields["iconImage"] = (s.arg1);
    r0 = (s.arg0).fields["getText"] = (s.arg2);
    r0 = (s.arg0).fields["action"] = (s.arg3);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_MenuOption_constructor__P2693.info = {"start":786,"length":108,"line":38,"column":8,"endLine":39,"endColumn":9,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"inline","argumentNames":["this","iconImage","getText","action"]}

function scene_systemMenu_MenuOption_constructor__P2693_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_MenuOption_constructor__P2693, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function helpers_screenBrightness__P1761(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 828;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[828]) return breakpoint(s, 1, 828, r0);
  case 1:
    r0 = globals.brightness___1748;
    return leave(s, r0)
  default: oops()
} } }
helpers_screenBrightness__P1761.info = {"start":7551,"length":98,"line":243,"column":4,"endLine":245,"endColumn":5,"fileName":"pxt_modules/screen/image.ts","functionName":"screenBrightness","argumentNames":["img"]}

function helpers_screenBrightness__P1761_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_screenBrightness__P1761, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function helpers_arrayConcat__P113(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.out___19916 = undefined;
    s.value___19919 = undefined;
    s.unnamed1620___U2 = undefined;
    s.unnamed1621___U3 = undefined;
    s.value___19926 = undefined;
    s.unnamed1622___U5 = undefined;
    s.unnamed1623___U6 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 133;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[133]) return breakpoint(s, 5, 133, r0);
  case 5:
    r0 = pxsim_Array__mk();
    s.out___19916 = (r0);
    s.lastBrkId = 134;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[134]) return breakpoint(s, 6, 134, r0);
  case 6:
    s.value___19919 = (undefined);
    s.unnamed1620___U2 = (s.arg0);
    s.unnamed1621___U3 = (0);
    s.lastBrkId = 135;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[135]) return breakpoint(s, 7, 135, r0);
  case 7:
  case 1:
    s.tmp_0 = r0 = s.unnamed1621___U3;
    r0 = pxsim_Array__length(s.unnamed1620___U2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 2; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1620___U2, s.unnamed1621___U3);
    s.value___19919 = (r0);
    s.lastBrkId = 136;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[136]) return breakpoint(s, 8, 136, r0);
  case 8:
    r0 = pxsim_Array__push(s.out___19916, s.value___19919);
    r0 = (s.unnamed1621___U3 + 1);
    s.unnamed1621___U3 = (r0);
    { step = 1; continue; }
  case 2:
    s.unnamed1620___U2 = (undefined);
    s.lastBrkId = 137;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[137]) return breakpoint(s, 9, 137, r0);
  case 9:
    s.value___19926 = (undefined);
    s.unnamed1622___U5 = (s.arg1);
    s.unnamed1623___U6 = (0);
    s.lastBrkId = 138;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[138]) return breakpoint(s, 10, 138, r0);
  case 10:
  case 3:
    s.tmp_0 = r0 = s.unnamed1623___U6;
    r0 = pxsim_Array__length(s.unnamed1622___U5);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 4; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1622___U5, s.unnamed1623___U6);
    s.value___19926 = (r0);
    s.lastBrkId = 139;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[139]) return breakpoint(s, 11, 139, r0);
  case 11:
    r0 = pxsim_Array__push(s.out___19916, s.value___19926);
    r0 = (s.unnamed1623___U6 + 1);
    s.unnamed1623___U6 = (r0);
    { step = 3; continue; }
  case 4:
    s.unnamed1622___U5 = (undefined);
    s.lastBrkId = 140;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[140]) return breakpoint(s, 12, 140, r0);
  case 12:
    r0 = s.out___19916;
    return leave(s, r0)
  default: oops()
} } }
helpers_arrayConcat__P113.info = {"start":8639,"length":264,"line":288,"column":4,"endLine":297,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"arrayConcat","argumentNames":["arr","otherArr"]}

function helpers_arrayConcat__P113_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_arrayConcat__P113, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  out___19916: undefined,
  value___19919: undefined,
  unnamed1620___U2: undefined,
  unnamed1621___U3: undefined,
  value___19926: undefined,
  unnamed1622___U5: undefined,
  unnamed1623___U6: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function scene_systemMenu_PauseMenu_show__P2702(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.current___19232 = undefined;
    s.i___19233 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_systemMenu_PauseMenu__C2700_VT)) failedCast(r0);
    s.lastBrkId = 3105;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3105]) return breakpoint(s, 3, 3105, r0);
  case 3:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = if_generator_1_mk(s);
    s.tmp_2.arg0 = s.arg0;
    if (!s.tmp_2.arg0.vtable.iface) {
      setupLambda(s.tmp_2, pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "generator"), 1);
      s.callLocIdx = 1315; s.pc = 4; return s.tmp_2;
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["generator"];
      if (s.tmp_2.fn == null) { setupLambda(s.tmp_2, s.tmp_2.arg0.fields["generator"], 1); s.callLocIdx = 1315; s.pc = 4; return s.tmp_2; }
      else if (s.tmp_2.fn.isGetter) { s.tmp_2.stage2Call = true; s.callLocIdx = 1315; s.pc = 4; return s.tmp_2;; }
     else { s.callLocIdx = 1315; s.pc = 4; return s.tmp_2; }
    }
  case 4:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["options"] = (s.tmp_1);
    s.lastBrkId = 3106;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3106]) return breakpoint(s, 5, 3106, r0);
  case 5:
    r0 = (s.arg0).fields["selection"] = (0);
    s.lastBrkId = 3107;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3107]) return breakpoint(s, 6, 3107, r0);
  case 6:
    s.i___19233 = (0);
    s.lastBrkId = 3108;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3108]) return breakpoint(s, 7, 3108, r0);
  case 7:
  case 1:
    s.lastBrkId = 3109;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3109]) return breakpoint(s, 8, 3109, r0);
  case 8:
    s.tmp_1 = r0 = s.i___19233;
    r0 = s.arg0.fields["options"];
    s.tmp_3 = r0;
    r0 = pxsim_Array__length(s.tmp_3);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 3110;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3110]) return breakpoint(s, 9, 3110, r0);
  case 9:
    r0 = s.arg0.fields["options"];
    s.tmp_4 = r0;
    r0 = pxsim_Array__getAt(s.tmp_4, s.i___19233);
    s.current___19232 = (r0);
    s.lastBrkId = 3111;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3111]) return breakpoint(s, 10, 3111, r0);
  case 10:
    s.tmp_0 = scene_systemMenu_MenuOption_show__P2694_mk(s);
    s.tmp_0.arg0 = s.current___19232;
    s.callLocIdx = 1316; s.pc = 11; return s.tmp_0;
  case 11:
    r0 = s.retval;
    s.lastBrkId = 3112;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3112]) return breakpoint(s, 12, 3112, r0);
  case 12:
    s.tmp_0 = scene_systemMenu_MenuOption_setTheme__P2697_mk(s);
    s.tmp_0.arg0 = s.current___19232;
    r0 = s.arg0.fields["theme"];
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1317; s.pc = 13; return s.tmp_0;
  case 13:
    r0 = s.retval;
    s.lastBrkId = 3113;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3113]) return breakpoint(s, 14, 3113, r0);
  case 14:
    s.tmp_0 = scene_systemMenu_MenuOption_position__P2695_mk(s);
    s.tmp_0.arg0 = s.current___19232;
    s.tmp_2 = if_padding_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "padding");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["padding"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["padding"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1318; s.pc = 16; return s.tmp_2; }
    }
  case 16:
    r0 = s.retval;
    s.tmp_1 = r0;
    s.tmp_5 = r0 = s.i___19233;
    s.tmp_7 = if_cardsPerRow_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_7.arg0 = r0;
    if (!s.tmp_7.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_7.arg0, "cardsPerRow");
    } else {
      s.tmp_7.fn = s.tmp_7.arg0.vtable.iface["cardsPerRow"];
      if (s.tmp_7.fn == null) { s.retval = s.tmp_7.arg0.fields["cardsPerRow"]; }
      else if (!s.tmp_7.fn.isGetter) { s.retval = bind(s.tmp_7); }
     else { s.callLocIdx = 1319; s.pc = 17; return s.tmp_7; }
    }
  case 17:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = (s.tmp_5 % s.tmp_6);
    s.tmp_4 = r0;
    s.tmp_10 = if_cardWidth_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_10.arg0 = r0;
    if (!s.tmp_10.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_10.arg0, "cardWidth");
    } else {
      s.tmp_10.fn = s.tmp_10.arg0.vtable.iface["cardWidth"];
      if (s.tmp_10.fn == null) { s.retval = s.tmp_10.arg0.fields["cardWidth"]; }
      else if (!s.tmp_10.fn.isGetter) { s.retval = bind(s.tmp_10); }
     else { s.callLocIdx = 1320; s.pc = 18; return s.tmp_10; }
    }
  case 18:
    r0 = s.retval;
    s.tmp_9 = r0;
    s.tmp_12 = if_cardSpacing_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_12.arg0 = r0;
    if (!s.tmp_12.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_12.arg0, "cardSpacing");
    } else {
      s.tmp_12.fn = s.tmp_12.arg0.vtable.iface["cardSpacing"];
      if (s.tmp_12.fn == null) { s.retval = s.tmp_12.arg0.fields["cardSpacing"]; }
      else if (!s.tmp_12.fn.isGetter) { s.retval = bind(s.tmp_12); }
     else { s.callLocIdx = 1321; s.pc = 19; return s.tmp_12; }
    }
  case 19:
    r0 = s.retval;
    s.tmp_11 = r0;
    r0 = (s.tmp_9 + s.tmp_11);
    s.tmp_8 = r0;
    r0 = (s.tmp_4 * s.tmp_8);
    s.tmp_3 = r0;
    r0 = (s.tmp_1 + s.tmp_3);
    s.tmp_0.arg1 = r0;
    s.tmp_14 = if_cardsTop_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_14.arg0 = r0;
    if (!s.tmp_14.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_14.arg0, "cardsTop");
    } else {
      s.tmp_14.fn = s.tmp_14.arg0.vtable.iface["cardsTop"];
      if (s.tmp_14.fn == null) { s.retval = s.tmp_14.arg0.fields["cardsTop"]; }
      else if (!s.tmp_14.fn.isGetter) { s.retval = bind(s.tmp_14); }
     else { s.callLocIdx = 1322; s.pc = 20; return s.tmp_14; }
    }
  case 20:
    r0 = s.retval;
    s.tmp_13 = r0;
    s.tmp_17 = r0 = s.i___19233;
    s.tmp_19 = if_cardsPerRow_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_19.arg0 = r0;
    if (!s.tmp_19.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_19.arg0, "cardsPerRow");
    } else {
      s.tmp_19.fn = s.tmp_19.arg0.vtable.iface["cardsPerRow"];
      if (s.tmp_19.fn == null) { s.retval = s.tmp_19.arg0.fields["cardsPerRow"]; }
      else if (!s.tmp_19.fn.isGetter) { s.retval = bind(s.tmp_19); }
     else { s.callLocIdx = 1323; s.pc = 21; return s.tmp_19; }
    }
  case 21:
    r0 = s.retval;
    s.tmp_18 = r0;
    r0 = pxsim.Math_.idiv(s.tmp_17, s.tmp_18);
    s.tmp_16 = r0;
    s.tmp_22 = if_cardWidth_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_22.arg0 = r0;
    if (!s.tmp_22.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_22.arg0, "cardWidth");
    } else {
      s.tmp_22.fn = s.tmp_22.arg0.vtable.iface["cardWidth"];
      if (s.tmp_22.fn == null) { s.retval = s.tmp_22.arg0.fields["cardWidth"]; }
      else if (!s.tmp_22.fn.isGetter) { s.retval = bind(s.tmp_22); }
     else { s.callLocIdx = 1324; s.pc = 22; return s.tmp_22; }
    }
  case 22:
    r0 = s.retval;
    s.tmp_21 = r0;
    s.tmp_24 = if_cardSpacing_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_24.arg0 = r0;
    if (!s.tmp_24.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_24.arg0, "cardSpacing");
    } else {
      s.tmp_24.fn = s.tmp_24.arg0.vtable.iface["cardSpacing"];
      if (s.tmp_24.fn == null) { s.retval = s.tmp_24.arg0.fields["cardSpacing"]; }
      else if (!s.tmp_24.fn.isGetter) { s.retval = bind(s.tmp_24); }
     else { s.callLocIdx = 1325; s.pc = 23; return s.tmp_24; }
    }
  case 23:
    r0 = s.retval;
    s.tmp_23 = r0;
    r0 = (s.tmp_21 + s.tmp_23);
    s.tmp_20 = r0;
    r0 = (s.tmp_16 * s.tmp_20);
    s.tmp_15 = r0;
    r0 = (s.tmp_13 + s.tmp_15);
    s.tmp_0.arg2 = r0;
    s.callLocIdx = 1326; s.pc = 15; return s.tmp_0;
  case 15:
    r0 = s.retval;
    s.lastBrkId = 3114;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3114]) return breakpoint(s, 24, 3114, r0);
  case 24:
    r0 = (s.i___19233 + 1);
    s.i___19233 = (r0);
    { step = 1; continue; }
  case 2:
    s.lastBrkId = 3115;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3115]) return breakpoint(s, 25, 3115, r0);
  case 25:
    s.tmp_0 = controller__setUserEventsEnabled__P1986_mk(s);
    s.tmp_0.arg0 = false;
    s.callLocIdx = 1327; s.pc = 26; return s.tmp_0;
  case 26:
    r0 = s.retval;
    s.lastBrkId = 3116;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3116]) return breakpoint(s, 27, 3116, r0);
  case 27:
    r0 = pxsim_pxtcore_mkAction(1, scene_systemMenu_PauseMenu_show_inline__P19296);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    s.tmp_1 = controller_Button_onEvent__P1978_mk(s);
    s.tmp_1.arg0 = globals.A___1905;
    s.tmp_1.arg1 = 2053;
    s.tmp_1.arg2 = s.tmp_0;
    s.callLocIdx = 1329; s.pc = 28; return s.tmp_1;
  case 28:
    r0 = s.retval;
    s.lastBrkId = 3120;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3120]) return breakpoint(s, 29, 3120, r0);
  case 29:
    r0 = pxsim_pxtcore_mkAction(1, scene_systemMenu_PauseMenu_show_inline__P19316);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    s.tmp_1 = controller_Button_onEvent__P1978_mk(s);
    s.tmp_1.arg0 = globals.A___1905;
    s.tmp_1.arg1 = 2052;
    s.tmp_1.arg2 = s.tmp_0;
    s.callLocIdx = 1331; s.pc = 30; return s.tmp_1;
  case 30:
    r0 = s.retval;
    s.lastBrkId = 3125;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3125]) return breakpoint(s, 31, 3125, r0);
  case 31:
    s.tmp_0 = controller_Button_onEvent__P1978_mk(s);
    s.tmp_0.arg0 = globals.B___1906;
    s.tmp_0.arg1 = 2053;
    s.tmp_0.arg2 = scene_systemMenu_PauseMenu_show_inline__P19345;
    s.callLocIdx = 1333; s.pc = 32; return s.tmp_0;
  case 32:
    r0 = s.retval;
    s.lastBrkId = 3127;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3127]) return breakpoint(s, 33, 3127, r0);
  case 33:
    s.tmp_0 = controller_Button_onEvent__P1978_mk(s);
    s.tmp_0.arg0 = globals.menu___1911;
    s.tmp_0.arg1 = 2053;
    s.tmp_0.arg2 = scene_systemMenu_PauseMenu_show_inline__P19350;
    s.callLocIdx = 1335; s.pc = 34; return s.tmp_0;
  case 34:
    r0 = s.retval;
    s.lastBrkId = 3129;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3129]) return breakpoint(s, 35, 3129, r0);
  case 35:
    r0 = pxsim_pxtcore_mkAction(1, scene_systemMenu_PauseMenu_show_inline__P19355);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    s.tmp_1 = controller_Button_onEvent__P1978_mk(s);
    s.tmp_1.arg0 = globals.up___1908;
    s.tmp_1.arg1 = 2053;
    s.tmp_1.arg2 = s.tmp_0;
    s.callLocIdx = 1339; s.pc = 36; return s.tmp_1;
  case 36:
    r0 = s.retval;
    s.lastBrkId = 3131;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3131]) return breakpoint(s, 37, 3131, r0);
  case 37:
    r0 = pxsim_pxtcore_mkAction(1, scene_systemMenu_PauseMenu_show_inline__P19367);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    s.tmp_1 = controller_Button_onEvent__P1978_mk(s);
    s.tmp_1.arg0 = globals.left___1907;
    s.tmp_1.arg1 = 2053;
    s.tmp_1.arg2 = s.tmp_0;
    s.callLocIdx = 1342; s.pc = 38; return s.tmp_1;
  case 38:
    r0 = s.retval;
    s.lastBrkId = 3133;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3133]) return breakpoint(s, 39, 3133, r0);
  case 39:
    r0 = pxsim_pxtcore_mkAction(1, scene_systemMenu_PauseMenu_show_inline__P19376);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    s.tmp_1 = controller_Button_onEvent__P1978_mk(s);
    s.tmp_1.arg0 = globals.down___1910;
    s.tmp_1.arg1 = 2053;
    s.tmp_1.arg2 = s.tmp_0;
    s.callLocIdx = 1346; s.pc = 40; return s.tmp_1;
  case 40:
    r0 = s.retval;
    s.lastBrkId = 3135;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3135]) return breakpoint(s, 41, 3135, r0);
  case 41:
    r0 = pxsim_pxtcore_mkAction(1, scene_systemMenu_PauseMenu_show_inline__P19392);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    s.tmp_1 = controller_Button_onEvent__P1978_mk(s);
    s.tmp_1.arg0 = globals.right___1909;
    s.tmp_1.arg1 = 2053;
    s.tmp_1.arg2 = s.tmp_0;
    s.callLocIdx = 1349; s.pc = 42; return s.tmp_1;
  case 42:
    r0 = s.retval;
    s.lastBrkId = 3137;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3137]) return breakpoint(s, 43, 3137, r0);
  case 43:
    r0 = pxsim_pxtcore_mkAction(1, scene_systemMenu_PauseMenu_show_inline__P19404);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    s.tmp_1 = game_onShade__P2622_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.callLocIdx = 1352; s.pc = 44; return s.tmp_1;
  case 44:
    r0 = s.retval;
    s.lastBrkId = 3140;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3140]) return breakpoint(s, 45, 3140, r0);
  case 45:
    s.tmp_0 = scene_systemMenu_PauseMenu_setSelection__P2704_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = 0;
    s.callLocIdx = 1353; s.pc = 46; return s.tmp_0;
  case 46:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_PauseMenu_show__P2702.info = {"start":3296,"length":2241,"line":123,"column":8,"endLine":181,"endColumn":9,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"show","argumentNames":["this"]}

function scene_systemMenu_PauseMenu_show__P2702_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_PauseMenu_show__P2702, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  tmp_12: undefined,
  tmp_13: undefined,
  tmp_14: undefined,
  tmp_15: undefined,
  tmp_16: undefined,
  tmp_17: undefined,
  tmp_18: undefined,
  tmp_19: undefined,
  tmp_20: undefined,
  tmp_21: undefined,
  tmp_22: undefined,
  tmp_23: undefined,
  tmp_24: undefined,
  current___19232: undefined,
  i___19233: undefined,
  arg0: undefined,
} }





function scene_systemMenu_PauseMenu_show_inline__P19296(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 3117;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3117]) return breakpoint(s, 6, 3117, r0);
  case 6:
    r0 = s.caps[0].fields["options"];
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = s.caps[0].fields["options"];
    s.tmp_5 = r0;
    r0 = s.caps[0].fields["selection"];
    s.tmp_6 = r0;
    r0 = pxsim_Array__getAt(s.tmp_5, s.tmp_6);
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    s.tmp_3 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_3);
  case 2:
    // jmp value (already in r0)
    s.tmp_7 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_7);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 3118;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3118]) return breakpoint(s, 7, 3118, r0);
  case 7:
    { step = 5; continue; }
  case 3:
  case 4:
    s.lastBrkId = 3119;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3119]) return breakpoint(s, 8, 3119, r0);
  case 8:
    s.tmp_8 = scene_systemMenu_MenuOption_setState__P2698_mk(s);
    r0 = s.caps[0].fields["options"];
    s.tmp_9 = r0;
    r0 = s.caps[0].fields["selection"];
    s.tmp_10 = r0;
    r0 = pxsim_Array__getAt(s.tmp_9, s.tmp_10);
    s.tmp_8.arg0 = r0;
    s.tmp_8.arg1 = 1;
    s.callLocIdx = 1328; s.pc = 9; return s.tmp_8;
  case 9:
    r0 = s.retval;
  case 5:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_PauseMenu_show_inline__P19296.info = {"start":4025,"length":170,"line":140,"column":50,"endLine":143,"endColumn":13,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"inline","argumentNames":[]}

function scene_systemMenu_PauseMenu_show_inline__P19296_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_PauseMenu_show_inline__P19296, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
} }





function scene_systemMenu_PauseMenu_show_inline__P19316(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 3121;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3121]) return breakpoint(s, 6, 3121, r0);
  case 6:
    r0 = s.caps[0].fields["options"];
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = s.caps[0].fields["options"];
    s.tmp_5 = r0;
    r0 = s.caps[0].fields["selection"];
    s.tmp_6 = r0;
    r0 = pxsim_Array__getAt(s.tmp_5, s.tmp_6);
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    s.tmp_3 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_3);
  case 2:
    // jmp value (already in r0)
    s.tmp_7 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_7);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 3122;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3122]) return breakpoint(s, 7, 3122, r0);
  case 7:
    { step = 5; continue; }
  case 3:
  case 4:
    s.lastBrkId = 3123;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3123]) return breakpoint(s, 8, 3123, r0);
  case 8:
    s.tmp_8 = scene_systemMenu_MenuOption_setState__P2698_mk(s);
    r0 = s.caps[0].fields["options"];
    s.tmp_9 = r0;
    r0 = s.caps[0].fields["selection"];
    s.tmp_10 = r0;
    r0 = pxsim_Array__getAt(s.tmp_9, s.tmp_10);
    s.tmp_8.arg0 = r0;
    s.tmp_8.arg1 = 0;
    s.callLocIdx = 1330; s.pc = 9; return s.tmp_8;
  case 9:
    r0 = s.retval;
    s.lastBrkId = 3124;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3124]) return breakpoint(s, 10, 3124, r0);
  case 10:
    r0 = s.caps[0].fields["options"];
    s.tmp_1 = r0;
    r0 = s.caps[0].fields["selection"];
    s.tmp_2 = r0;
    r0 = pxsim_Array__getAt(s.tmp_1, s.tmp_2);
    r0 = r0.fields["action"];
    s.tmp_0 = r0;
    r0 = pxsim.control.runInParallel(s.tmp_0);
  case 5:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_PauseMenu_show_inline__P19316.info = {"start":4247,"length":247,"line":145,"column":48,"endLine":149,"endColumn":13,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"inline","argumentNames":[]}

function scene_systemMenu_PauseMenu_show_inline__P19316_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_PauseMenu_show_inline__P19316, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
} }





function scene_systemMenu_PauseMenu_show_inline__P19345(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 3126;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3126]) return breakpoint(s, 1, 3126, r0);
  case 1:
    s.tmp_0 = scene_systemMenu_closeMenu__P2707_mk(s);
    s.callLocIdx = 1332; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_PauseMenu_show_inline__P19345.info = {"start":4548,"length":50,"line":151,"column":50,"endLine":153,"endColumn":13,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"inline","argumentNames":[]}

function scene_systemMenu_PauseMenu_show_inline__P19345_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_PauseMenu_show_inline__P19345, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
} }





function scene_systemMenu_PauseMenu_show_inline__P19350(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 3128;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3128]) return breakpoint(s, 1, 3128, r0);
  case 1:
    s.tmp_0 = scene_systemMenu_closeMenu__P2707_mk(s);
    s.callLocIdx = 1334; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_PauseMenu_show_inline__P19350.info = {"start":4655,"length":50,"line":155,"column":53,"endLine":157,"endColumn":13,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"inline","argumentNames":[]}

function scene_systemMenu_PauseMenu_show_inline__P19350_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_PauseMenu_show_inline__P19350, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
} }





function scene_systemMenu_PauseMenu_show_inline__P19355(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 3130;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3130]) return breakpoint(s, 1, 3130, r0);
  case 1:
    s.tmp_0 = scene_systemMenu_PauseMenu_setSelection__P2704_mk(s);
    s.tmp_0.arg0 = s.caps[0];
    s.tmp_1 = Math_max__P130_mk(s);
    s.tmp_1.arg0 = 0;
    r0 = s.caps[0].fields["selection"];
    s.tmp_2 = r0;
    s.tmp_4 = if_cardsPerRow_1_mk(s);
    r0 = s.caps[0].fields["theme"];
    s.tmp_4.arg0 = r0;
    if (!s.tmp_4.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_4.arg0, "cardsPerRow");
    } else {
      s.tmp_4.fn = s.tmp_4.arg0.vtable.iface["cardsPerRow"];
      if (s.tmp_4.fn == null) { s.retval = s.tmp_4.arg0.fields["cardsPerRow"]; }
      else if (!s.tmp_4.fn.isGetter) { s.retval = bind(s.tmp_4); }
     else { s.callLocIdx = 1336; s.pc = 4; return s.tmp_4; }
    }
  case 4:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_2 - s.tmp_3);
    s.tmp_1.arg1 = r0;
    s.callLocIdx = 1337; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1338; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_PauseMenu_show_inline__P19355.info = {"start":4760,"length":110,"line":159,"column":51,"endLine":161,"endColumn":13,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"inline","argumentNames":[]}

function scene_systemMenu_PauseMenu_show_inline__P19355_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_PauseMenu_show_inline__P19355, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
} }





function scene_systemMenu_PauseMenu_show_inline__P19367(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 3132;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3132]) return breakpoint(s, 1, 3132, r0);
  case 1:
    s.tmp_0 = scene_systemMenu_PauseMenu_setSelection__P2704_mk(s);
    s.tmp_0.arg0 = s.caps[0];
    s.tmp_1 = Math_max__P130_mk(s);
    s.tmp_1.arg0 = 0;
    r0 = s.caps[0].fields["selection"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - 1);
    s.tmp_1.arg1 = r0;
    s.callLocIdx = 1340; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1341; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_PauseMenu_show_inline__P19367.info = {"start":4927,"length":89,"line":163,"column":53,"endLine":165,"endColumn":13,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"inline","argumentNames":[]}

function scene_systemMenu_PauseMenu_show_inline__P19367_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_PauseMenu_show_inline__P19367, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
} }





function scene_systemMenu_PauseMenu_show_inline__P19376(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 3134;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3134]) return breakpoint(s, 1, 3134, r0);
  case 1:
    s.tmp_0 = scene_systemMenu_PauseMenu_setSelection__P2704_mk(s);
    s.tmp_0.arg0 = s.caps[0];
    s.tmp_1 = Math_min__P131_mk(s);
    r0 = s.caps[0].fields["options"];
    s.tmp_3 = r0;
    r0 = pxsim_Array__length(s.tmp_3);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - 1);
    s.tmp_1.arg0 = r0;
    r0 = s.caps[0].fields["selection"];
    s.tmp_4 = r0;
    s.tmp_6 = if_cardsPerRow_1_mk(s);
    r0 = s.caps[0].fields["theme"];
    s.tmp_6.arg0 = r0;
    if (!s.tmp_6.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_6.arg0, "cardsPerRow");
    } else {
      s.tmp_6.fn = s.tmp_6.arg0.vtable.iface["cardsPerRow"];
      if (s.tmp_6.fn == null) { s.retval = s.tmp_6.arg0.fields["cardsPerRow"]; }
      else if (!s.tmp_6.fn.isGetter) { s.retval = bind(s.tmp_6); }
     else { s.callLocIdx = 1343; s.pc = 4; return s.tmp_6; }
    }
  case 4:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = (s.tmp_4 + s.tmp_5);
    s.tmp_1.arg1 = r0;
    s.callLocIdx = 1344; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1345; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_PauseMenu_show_inline__P19376.info = {"start":5073,"length":132,"line":167,"column":53,"endLine":169,"endColumn":13,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"inline","argumentNames":[]}

function scene_systemMenu_PauseMenu_show_inline__P19376_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_PauseMenu_show_inline__P19376, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
} }





function scene_systemMenu_PauseMenu_show_inline__P19392(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 3136;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3136]) return breakpoint(s, 1, 3136, r0);
  case 1:
    s.tmp_0 = scene_systemMenu_PauseMenu_setSelection__P2704_mk(s);
    s.tmp_0.arg0 = s.caps[0];
    s.tmp_1 = Math_min__P131_mk(s);
    r0 = s.caps[0].fields["options"];
    s.tmp_3 = r0;
    r0 = pxsim_Array__length(s.tmp_3);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - 1);
    s.tmp_1.arg0 = r0;
    r0 = s.caps[0].fields["selection"];
    s.tmp_4 = r0;
    r0 = (s.tmp_4 + 1);
    s.tmp_1.arg1 = r0;
    s.callLocIdx = 1347; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1348; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_PauseMenu_show_inline__P19392.info = {"start":5263,"length":111,"line":171,"column":54,"endLine":173,"endColumn":13,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"inline","argumentNames":[]}

function scene_systemMenu_PauseMenu_show_inline__P19392_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_PauseMenu_show_inline__P19392, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
} }





function scene_systemMenu_PauseMenu_show_inline__P19404(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 3138;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3138]) return breakpoint(s, 1, 3138, r0);
  case 1:
    s.tmp_0 = scene_systemMenu_PauseMenu_onUpdate__P2703_mk(s);
    s.tmp_0.arg0 = s.caps[0];
    s.callLocIdx = 1350; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 3139;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3139]) return breakpoint(s, 3, 3139, r0);
  case 3:
    s.tmp_0 = scene_systemMenu_PauseMenu_drawText__P2705_mk(s);
    s.tmp_0.arg0 = s.caps[0];
    s.callLocIdx = 1351; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_PauseMenu_show_inline__P19404.info = {"start":5403,"length":87,"line":175,"column":25,"endLine":178,"endColumn":13,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"inline","argumentNames":[]}

function scene_systemMenu_PauseMenu_show_inline__P19404_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_PauseMenu_show_inline__P19404, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
} }





function scene_systemMenu_PauseMenu_drawText__P2705(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_systemMenu_PauseMenu__C2700_VT)) failedCast(r0);
    s.lastBrkId = 3164;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3164]) return breakpoint(s, 4, 3164, r0);
  case 4:
    r0 = s.arg0.fields["options"];
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3165;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3165]) return breakpoint(s, 5, 3165, r0);
  case 5:
    { step = 3; continue; }
  case 1:
  case 2:
    s.lastBrkId = 3166;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3166]) return breakpoint(s, 6, 3166, r0);
  case 6:
    s.tmp_3 = helpers_imageFillRect__P1753_mk(s);
    s.tmp_3.arg0 = globals.screen___1827;
    s.tmp_3.arg1 = 0;
    s.tmp_3.arg2 = 0;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_3.arg3 = r0;
    s.tmp_5 = if_cardsTop_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_5.arg0 = r0;
    if (!s.tmp_5.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_5.arg0, "cardsTop");
    } else {
      s.tmp_5.fn = s.tmp_5.arg0.vtable.iface["cardsTop"];
      if (s.tmp_5.fn == null) { s.retval = s.tmp_5.arg0.fields["cardsTop"]; }
      else if (!s.tmp_5.fn.isGetter) { s.retval = bind(s.tmp_5); }
     else { s.callLocIdx = 1364; s.pc = 8; return s.tmp_5; }
    }
  case 8:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = (s.tmp_4 - 2);
    s.tmp_3.arg4 = r0;
    s.tmp_3.arg5 = 15;
    s.callLocIdx = 1365; s.pc = 7; return s.tmp_3;
  case 7:
    r0 = s.retval;
    s.lastBrkId = 3167;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3167]) return breakpoint(s, 9, 3167, r0);
  case 9:
    s.tmp_0 = helpers_imagePrintCenter__P1784_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_1 = if_headerText_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_1.arg0 = r0;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "headerText");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["headerText"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["headerText"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 1366; s.pc = 11; return s.tmp_1; }
    }
  case 11:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = 2;
    s.tmp_0.arg3 = 1;
    s.tmp_2 = if_headerFont_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "headerFont");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["headerFont"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["headerFont"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1367; s.pc = 12; return s.tmp_2; }
    }
  case 12:
    r0 = s.retval;
    s.tmp_0.arg4 = r0;
    s.callLocIdx = 1368; s.pc = 10; return s.tmp_0;
  case 10:
    r0 = s.retval;
    s.lastBrkId = 3168;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3168]) return breakpoint(s, 13, 3168, r0);
  case 13:
    s.tmp_0 = helpers_imageFillRect__P1753_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_0.arg1 = 0;
    s.tmp_2 = if_infoTop_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "infoTop");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["infoTop"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["infoTop"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1369; s.pc = 15; return s.tmp_2; }
    }
  case 15:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - 3);
    s.tmp_0.arg2 = r0;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_0.arg3 = r0;
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_4 = r0;
    s.tmp_6 = if_infoTop_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_6.arg0 = r0;
    if (!s.tmp_6.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_6.arg0, "infoTop");
    } else {
      s.tmp_6.fn = s.tmp_6.arg0.vtable.iface["infoTop"];
      if (s.tmp_6.fn == null) { s.retval = s.tmp_6.arg0.fields["infoTop"]; }
      else if (!s.tmp_6.fn.isGetter) { s.retval = bind(s.tmp_6); }
     else { s.callLocIdx = 1370; s.pc = 16; return s.tmp_6; }
    }
  case 16:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = (s.tmp_4 - s.tmp_5);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 + 6);
    s.tmp_0.arg4 = r0;
    s.tmp_0.arg5 = 15;
    s.callLocIdx = 1371; s.pc = 14; return s.tmp_0;
  case 14:
    r0 = s.retval;
    s.lastBrkId = 3169;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3169]) return breakpoint(s, 17, 3169, r0);
  case 17:
    s.tmp_0 = helpers_imageFillRect__P1753_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_1 = if_padding_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_1.arg0 = r0;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "padding");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["padding"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["padding"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 1372; s.pc = 19; return s.tmp_1; }
    }
  case 19:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.tmp_2 = if_infoTop_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "infoTop");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["infoTop"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["infoTop"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1373; s.pc = 20; return s.tmp_2; }
    }
  case 20:
    r0 = s.retval;
    s.tmp_0.arg2 = r0;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_3 = r0;
    s.tmp_6 = if_padding_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_6.arg0 = r0;
    if (!s.tmp_6.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_6.arg0, "padding");
    } else {
      s.tmp_6.fn = s.tmp_6.arg0.vtable.iface["padding"];
      if (s.tmp_6.fn == null) { s.retval = s.tmp_6.arg0.fields["padding"]; }
      else if (!s.tmp_6.fn.isGetter) { s.retval = bind(s.tmp_6); }
     else { s.callLocIdx = 1374; s.pc = 21; return s.tmp_6; }
    }
  case 21:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = (s.tmp_5 << 1);
    s.tmp_4 = r0;
    r0 = (s.tmp_3 - s.tmp_4);
    s.tmp_0.arg3 = r0;
    s.tmp_8 = if_charHeight_1_mk(s);
    s.tmp_9 = if_infoFont_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_9.arg0 = r0;
    if (!s.tmp_9.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_9.arg0, "infoFont");
    } else {
      s.tmp_9.fn = s.tmp_9.arg0.vtable.iface["infoFont"];
      if (s.tmp_9.fn == null) { s.retval = s.tmp_9.arg0.fields["infoFont"]; }
      else if (!s.tmp_9.fn.isGetter) { s.retval = bind(s.tmp_9); }
     else { s.callLocIdx = 1375; s.pc = 23; return s.tmp_9; }
    }
  case 23:
    r0 = s.retval;
    s.tmp_8.arg0 = r0;
    if (!s.tmp_8.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_8.arg0, "charHeight");
    } else {
      s.tmp_8.fn = s.tmp_8.arg0.vtable.iface["charHeight"];
      if (s.tmp_8.fn == null) { s.retval = s.tmp_8.arg0.fields["charHeight"]; }
      else if (!s.tmp_8.fn.isGetter) { s.retval = bind(s.tmp_8); }
     else { s.callLocIdx = 1376; s.pc = 22; return s.tmp_8; }
    }
  case 22:
    r0 = s.retval;
    s.tmp_7 = r0;
    r0 = (s.tmp_7 + 1);
    s.tmp_0.arg4 = r0;
    s.tmp_0.arg5 = 1;
    s.callLocIdx = 1377; s.pc = 18; return s.tmp_0;
  case 18:
    r0 = s.retval;
    s.lastBrkId = 3170;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3170]) return breakpoint(s, 24, 3170, r0);
  case 24:
    s.tmp_0 = helpers_imagePrintCenter__P1784_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_1 = if_getText_1_mk(s);
    r0 = s.arg0.fields["options"];
    s.tmp_2 = r0;
    r0 = s.arg0.fields["selection"];
    s.tmp_3 = r0;
    r0 = pxsim_Array__getAt(s.tmp_2, s.tmp_3);
    s.tmp_1.arg0 = r0;
    if (!s.tmp_1.arg0.vtable.iface) {
      setupLambda(s.tmp_1, pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "getText"), 1);
      s.callLocIdx = 1378; s.pc = 26; return s.tmp_1;
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["getText"];
      if (s.tmp_1.fn == null) { setupLambda(s.tmp_1, s.tmp_1.arg0.fields["getText"], 1); s.callLocIdx = 1378; s.pc = 26; return s.tmp_1; }
      else if (s.tmp_1.fn.isGetter) { s.tmp_1.stage2Call = true; s.callLocIdx = 1378; s.pc = 26; return s.tmp_1;; }
     else { s.callLocIdx = 1378; s.pc = 26; return s.tmp_1; }
    }
  case 26:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.tmp_5 = if_infoTop_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_5.arg0 = r0;
    if (!s.tmp_5.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_5.arg0, "infoTop");
    } else {
      s.tmp_5.fn = s.tmp_5.arg0.vtable.iface["infoTop"];
      if (s.tmp_5.fn == null) { s.retval = s.tmp_5.arg0.fields["infoTop"]; }
      else if (!s.tmp_5.fn.isGetter) { s.retval = bind(s.tmp_5); }
     else { s.callLocIdx = 1379; s.pc = 27; return s.tmp_5; }
    }
  case 27:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = (s.tmp_4 + 1);
    s.tmp_0.arg2 = r0;
    s.tmp_0.arg3 = 15;
    s.tmp_6 = if_infoFont_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_6.arg0 = r0;
    if (!s.tmp_6.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_6.arg0, "infoFont");
    } else {
      s.tmp_6.fn = s.tmp_6.arg0.vtable.iface["infoFont"];
      if (s.tmp_6.fn == null) { s.retval = s.tmp_6.arg0.fields["infoFont"]; }
      else if (!s.tmp_6.fn.isGetter) { s.retval = bind(s.tmp_6); }
     else { s.callLocIdx = 1380; s.pc = 28; return s.tmp_6; }
    }
  case 28:
    r0 = s.retval;
    s.tmp_0.arg4 = r0;
    s.callLocIdx = 1381; s.pc = 25; return s.tmp_0;
  case 25:
    r0 = s.retval;
  case 3:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_PauseMenu_drawText__P2705.info = {"start":6927,"length":795,"line":224,"column":8,"endLine":241,"endColumn":9,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"drawText","argumentNames":["this"]}

function scene_systemMenu_PauseMenu_drawText__P2705_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_PauseMenu_drawText__P2705, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  arg0: undefined,
} }





function scene_systemMenu_PauseMenu_setSelection__P2704(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_systemMenu_PauseMenu__C2700_VT)) failedCast(r0);
    s.lastBrkId = 3156;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3156]) return breakpoint(s, 10, 3156, r0);
  case 10:
    r0 = s.arg0.fields["options"];
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3157;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3157]) return breakpoint(s, 11, 3157, r0);
  case 11:
    { step = 9; continue; }
  case 1:
  case 2:
    s.lastBrkId = 3158;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3158]) return breakpoint(s, 12, 3158, r0);
  case 12:
    r0 = s.arg0.fields["options"];
    s.tmp_4 = r0;
    r0 = s.arg0.fields["selection"];
    s.tmp_5 = r0;
    r0 = pxsim_Array__getAt(s.tmp_4, s.tmp_5);
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 3159;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3159]) return breakpoint(s, 13, 3159, r0);
  case 13:
    s.tmp_6 = scene_systemMenu_MenuOption_setState__P2698_mk(s);
    r0 = s.arg0.fields["options"];
    s.tmp_7 = r0;
    r0 = s.arg0.fields["selection"];
    s.tmp_8 = r0;
    r0 = pxsim_Array__getAt(s.tmp_7, s.tmp_8);
    s.tmp_6.arg0 = r0;
    s.tmp_6.arg1 = 2;
    s.callLocIdx = 1361; s.pc = 14; return s.tmp_6;
  case 14:
    r0 = s.retval;
  case 3:
  case 4:
    s.lastBrkId = 3160;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3160]) return breakpoint(s, 15, 3160, r0);
  case 15:
    r0 = (s.arg0).fields["selection"] = (s.arg1);
    s.lastBrkId = 3161;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3161]) return breakpoint(s, 16, 3161, r0);
  case 16:
    r0 = s.arg0.fields["options"];
    s.tmp_1 = r0;
    r0 = s.arg0.fields["selection"];
    s.tmp_2 = r0;
    r0 = pxsim_Array__getAt(s.tmp_1, s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 3162;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3162]) return breakpoint(s, 17, 3162, r0);
  case 17:
    s.tmp_4 = controller_Button__C1971_v0_1_mk(s);
    s.tmp_4.arg0 = globals.A___1905;
    if (!checkSubtype(s.tmp_4.arg0, controller_Button__C1971_VT)) failedCast(s.tmp_4.arg0);
    s.tmp_4.fn = s.tmp_4.arg0.vtable.methods.isPressed;
    s.pc = 18; return s.tmp_4;
  case 18:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 5; continue; }
    r0 = 1;
    { step = 6; continue; }
  case 5:
    r0 = 0;
  case 6:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    s.tmp_6 = scene_systemMenu_MenuOption_setState__P2698_mk(s);
    r0 = s.arg0.fields["options"];
    s.tmp_7 = r0;
    r0 = s.arg0.fields["selection"];
    s.tmp_8 = r0;
    r0 = pxsim_Array__getAt(s.tmp_7, s.tmp_8);
    s.tmp_6.arg0 = r0;
    s.tmp_6.arg1 = s.tmp_5;
    s.callLocIdx = 1362; s.pc = 19; return s.tmp_6;
  case 19:
    r0 = s.retval;
  case 7:
  case 8:
    s.lastBrkId = 3163;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3163]) return breakpoint(s, 20, 3163, r0);
  case 20:
    s.tmp_0 = scene_systemMenu_PauseMenu_updateScrollTarget__P4811_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1363; s.pc = 21; return s.tmp_0;
  case 21:
    r0 = s.retval;
  case 9:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_PauseMenu_setSelection__P2704.info = {"start":6436,"length":481,"line":208,"column":8,"endLine":222,"endColumn":9,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"setSelection","argumentNames":["this","selection"]}

function scene_systemMenu_PauseMenu_setSelection__P2704_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_PauseMenu_setSelection__P2704, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function scene_systemMenu_PauseMenu_updateScrollTarget__P4811(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.row___19622 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_systemMenu_PauseMenu__C2700_VT)) failedCast(r0);
    s.lastBrkId = 3174;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3174]) return breakpoint(s, 8, 3174, r0);
  case 8:
    r0 = s.arg0.fields["selection"];
    s.tmp_0 = r0;
    s.tmp_2 = if_cardsPerRow_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_2.arg0 = r0;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "cardsPerRow");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["cardsPerRow"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["cardsPerRow"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 1384; s.pc = 9; return s.tmp_2; }
    }
  case 9:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim.Math_.idiv(s.tmp_0, s.tmp_1);
    s.row___19622 = (r0);
    s.lastBrkId = 3175;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3175]) return breakpoint(s, 10, 3175, r0);
  case 10:
    r0 = s.arg0.fields["scrollRow"];
    s.tmp_1 = r0;
    r0 = (s.row___19622 === s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = (s.row___19622 - 1);
    s.tmp_2 = r0;
    r0 = s.arg0.fields["scrollRow"];
    s.tmp_3 = r0;
    r0 = (s.tmp_2 === s.tmp_3);
  case 2:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 3176;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3176]) return breakpoint(s, 11, 3176, r0);
  case 11:
    { step = 7; continue; }
  case 3:
  case 4:
    s.lastBrkId = 3177;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3177]) return breakpoint(s, 12, 3177, r0);
  case 12:
    r0 = s.arg0.fields["scrollRow"];
    s.tmp_6 = r0;
    r0 = (s.row___19622 > s.tmp_6);
    s.tmp_5 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_5);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 3178;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3178]) return breakpoint(s, 13, 3178, r0);
  case 13:
    s.tmp_7 = r0 = s.arg0;
    r0 = s.tmp_7.fields["scrollRow"];
    s.tmp_9 = r0;
    r0 = (s.tmp_9 + 1);
    s.tmp_8 = r0;
    r0 = (s.tmp_7).fields["scrollRow"] = (s.tmp_8);
    { step = 6; continue; }
  case 5:
    s.lastBrkId = 3179;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3179]) return breakpoint(s, 14, 3179, r0);
  case 14:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["scrollRow"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["scrollRow"] = (s.tmp_1);
  case 6:
    s.lastBrkId = 3180;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3180]) return breakpoint(s, 15, 3180, r0);
  case 15:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.arg0.fields["scrollRow"];
    s.tmp_2 = r0;
    s.tmp_5 = if_cardSpacing_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_5.arg0 = r0;
    if (!s.tmp_5.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_5.arg0, "cardSpacing");
    } else {
      s.tmp_5.fn = s.tmp_5.arg0.vtable.iface["cardSpacing"];
      if (s.tmp_5.fn == null) { s.retval = s.tmp_5.arg0.fields["cardSpacing"]; }
      else if (!s.tmp_5.fn.isGetter) { s.retval = bind(s.tmp_5); }
     else { s.callLocIdx = 1385; s.pc = 16; return s.tmp_5; }
    }
  case 16:
    r0 = s.retval;
    s.tmp_4 = r0;
    s.tmp_7 = if_cardWidth_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_7.arg0 = r0;
    if (!s.tmp_7.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_7.arg0, "cardWidth");
    } else {
      s.tmp_7.fn = s.tmp_7.arg0.vtable.iface["cardWidth"];
      if (s.tmp_7.fn == null) { s.retval = s.tmp_7.arg0.fields["cardWidth"]; }
      else if (!s.tmp_7.fn.isGetter) { s.retval = bind(s.tmp_7); }
     else { s.callLocIdx = 1386; s.pc = 17; return s.tmp_7; }
    }
  case 17:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = (s.tmp_4 + s.tmp_6);
    s.tmp_3 = r0;
    r0 = (s.tmp_2 * s.tmp_3);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["scrollTarget"] = (s.tmp_1);
  case 7:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_PauseMenu_updateScrollTarget__P4811.info = {"start":7907,"length":458,"line":250,"column":8,"endLine":260,"endColumn":9,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"updateScrollTarget","argumentNames":["this"]}

function scene_systemMenu_PauseMenu_updateScrollTarget__P4811_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_PauseMenu_updateScrollTarget__P4811, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  row___19622: undefined,
  arg0: undefined,
} }





function scene_systemMenu_PauseMenu_onUpdate__P2703(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.t___19482 = undefined;
    s.i___19486 = undefined;
    s.dt___19515 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_systemMenu_PauseMenu__C2700_VT)) failedCast(r0);
    s.lastBrkId = 3141;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3141]) return breakpoint(s, 10, 3141, r0);
  case 10:
    r0 = pxsim.control.millis();
    s.tmp_0 = r0;
    r0 = (s.tmp_0 / 250);
    s.t___19482 = (r0);
    s.lastBrkId = 3142;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3142]) return breakpoint(s, 11, 3142, r0);
  case 11:
    s.i___19486 = (0);
    s.lastBrkId = 3143;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3143]) return breakpoint(s, 12, 3143, r0);
  case 12:
  case 1:
    s.lastBrkId = 3144;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3144]) return breakpoint(s, 13, 3144, r0);
  case 13:
    s.tmp_1 = r0 = s.i___19486;
    r0 = s.arg0.fields["options"];
    s.tmp_3 = r0;
    r0 = pxsim_Array__length(s.tmp_3);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 3145;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3145]) return breakpoint(s, 14, 3145, r0);
  case 14:
    s.tmp_4 = scene_systemMenu_MenuOption_setOffset__P2696_mk(s);
    r0 = s.arg0.fields["options"];
    s.tmp_5 = r0;
    r0 = pxsim_Array__getAt(s.tmp_5, s.i___19486);
    s.tmp_4.arg0 = r0;
    s.tmp_8 = r0 = s.t___19482;
    s.tmp_11 = r0 = s.i___19486;
    s.tmp_13 = if_cardsPerRow_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_13.arg0 = r0;
    if (!s.tmp_13.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_13.arg0, "cardsPerRow");
    } else {
      s.tmp_13.fn = s.tmp_13.arg0.vtable.iface["cardsPerRow"];
      if (s.tmp_13.fn == null) { s.retval = s.tmp_13.arg0.fields["cardsPerRow"]; }
      else if (!s.tmp_13.fn.isGetter) { s.retval = bind(s.tmp_13); }
     else { s.callLocIdx = 1354; s.pc = 16; return s.tmp_13; }
    }
  case 16:
    r0 = s.retval;
    s.tmp_12 = r0;
    r0 = (s.tmp_11 % s.tmp_12);
    s.tmp_10 = r0;
    r0 = (s.tmp_10 * 1.5707963267948966);
    s.tmp_9 = r0;
    r0 = (s.tmp_8 - s.tmp_9);
    s.tmp_7 = r0;
    r0 = pxsim.Math_.sin(s.tmp_7);
    s.tmp_6 = r0;
    r0 = (2 * s.tmp_6);
    s.tmp_4.arg1 = r0;
    s.callLocIdx = 1355; s.pc = 15; return s.tmp_4;
  case 15:
    r0 = s.retval;
    s.lastBrkId = 3146;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3146]) return breakpoint(s, 17, 3146, r0);
  case 17:
    r0 = (s.i___19486 + 1);
    s.i___19486 = (r0);
    { step = 1; continue; }
  case 2:
    s.lastBrkId = 3147;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3147]) return breakpoint(s, 18, 3147, r0);
  case 18:
    s.tmp_0 = control_EventContext_deltaTime__P398_mk(s);
    s.tmp_1 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 1356; s.pc = 20; return s.tmp_1;
  case 20:
    r0 = s.retval;
    r0 = r0.fields["eventContext"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 1357; s.pc = 19; return s.tmp_0;
  case 19:
    r0 = s.retval;
    s.dt___19515 = (r0);
    s.lastBrkId = 3148;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3148]) return breakpoint(s, 21, 3148, r0);
  case 21:
    r0 = s.arg0.fields["scrollOffset"];
    s.tmp_1 = r0;
    r0 = s.arg0.fields["scrollTarget"];
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 3149;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3149]) return breakpoint(s, 22, 3149, r0);
  case 22:
    s.tmp_3 = r0 = s.arg0;
    r0 = s.tmp_3.fields["scrollOffset"];
    s.tmp_5 = r0;
    r0 = (s.dt___19515 * 100);
    s.tmp_6 = r0;
    r0 = (s.tmp_5 + s.tmp_6);
    s.tmp_4 = r0;
    r0 = (s.tmp_3).fields["scrollOffset"] = (s.tmp_4);
    { step = 6; continue; }
  case 3:
    s.lastBrkId = 3150;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3150]) return breakpoint(s, 23, 3150, r0);
  case 23:
    r0 = s.arg0.fields["scrollOffset"];
    s.tmp_1 = r0;
    r0 = s.arg0.fields["scrollTarget"];
    s.tmp_2 = r0;
    r0 = (s.tmp_1 > s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 3151;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3151]) return breakpoint(s, 24, 3151, r0);
  case 24:
    s.tmp_3 = r0 = s.arg0;
    r0 = s.tmp_3.fields["scrollOffset"];
    s.tmp_5 = r0;
    r0 = (s.dt___19515 * 100);
    s.tmp_6 = r0;
    r0 = (s.tmp_5 - s.tmp_6);
    s.tmp_4 = r0;
    r0 = (s.tmp_3).fields["scrollOffset"] = (s.tmp_4);
    { step = 5; continue; }
  case 4:
    s.lastBrkId = 3152;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3152]) return breakpoint(s, 25, 3152, r0);
  case 25:
    { step = 9; continue; }
  case 5:
  case 6:
    s.lastBrkId = 3153;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3153]) return breakpoint(s, 26, 3153, r0);
  case 26:
    s.tmp_2 = Math_abs__P128_mk(s);
    r0 = s.arg0.fields["scrollOffset"];
    s.tmp_3 = r0;
    r0 = s.arg0.fields["scrollTarget"];
    s.tmp_4 = r0;
    r0 = (s.tmp_3 - s.tmp_4);
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 1358; s.pc = 27; return s.tmp_2;
  case 27:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 < 2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 3154;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3154]) return breakpoint(s, 28, 3154, r0);
  case 28:
    r0 = s.arg0.fields["scrollTarget"];
    s.tmp_5 = r0;
    r0 = (s.arg0).fields["scrollOffset"] = (s.tmp_5);
  case 7:
  case 8:
    s.lastBrkId = 3155;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3155]) return breakpoint(s, 29, 3155, r0);
  case 29:
    s.tmp_0 = scene_Camera_offsetY__P2445_mk(s);
    s.tmp_1 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 1359; s.pc = 31; return s.tmp_1;
  case 31:
    r0 = s.retval;
    r0 = r0.fields["camera"];
    s.tmp_0.arg0 = r0;
    r0 = s.arg0.fields["scrollOffset"];
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1360; s.pc = 30; return s.tmp_0;
  case 30:
    r0 = s.retval;
  case 9:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_PauseMenu_onUpdate__P2703.info = {"start":5547,"length":879,"line":183,"column":8,"endLine":206,"endColumn":9,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"onUpdate","argumentNames":["this"]}

function scene_systemMenu_PauseMenu_onUpdate__P2703_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_PauseMenu_onUpdate__P2703, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  tmp_12: undefined,
  tmp_13: undefined,
  t___19482: undefined,
  i___19486: undefined,
  dt___19515: undefined,
  arg0: undefined,
} }





function scene_systemMenu_MenuOption_setOffset__P2696(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_systemMenu_MenuOption__C2692_VT)) failedCast(r0);
    s.lastBrkId = 3077;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3077]) return breakpoint(s, 1, 3077, r0);
  case 1:
    s.tmp_0 = Sprite_top__P2143_mk(s);
    r0 = s.arg0.fields["card"];
    s.tmp_0.arg0 = r0;
    r0 = s.arg0.fields["top"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 + s.arg1);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1297; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 3078;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3078]) return breakpoint(s, 3, 3078, r0);
  case 3:
    s.tmp_0 = Sprite_y__P2104_mk(s);
    r0 = s.arg0.fields["icon"];
    s.tmp_0.arg0 = r0;
    s.tmp_1 = Sprite_y__P2103_mk(s);
    r0 = s.arg0.fields["card"];
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 1298; s.pc = 5; return s.tmp_1;
  case 5:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1299; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_MenuOption_setOffset__P2696.info = {"start":1411,"length":123,"line":61,"column":8,"endLine":64,"endColumn":9,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"setOffset","argumentNames":["this","offset"]}

function scene_systemMenu_MenuOption_setOffset__P2696_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_MenuOption_setOffset__P2696, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function scene_systemMenu_MenuOption_setState__P2698(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_systemMenu_MenuOption__C2692_VT)) failedCast(r0);
    s.lastBrkId = 3081;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3081]) return breakpoint(s, 4, 3081, r0);
  case 4:
    r0 = s.arg0.fields["state"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 === s.arg1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3082;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3082]) return breakpoint(s, 5, 3082, r0);
  case 5:
    { step = 3; continue; }
  case 1:
  case 2:
    s.lastBrkId = 3083;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3083]) return breakpoint(s, 6, 3083, r0);
  case 6:
    r0 = (s.arg0).fields["state"] = (s.arg1);
    s.lastBrkId = 3084;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3084]) return breakpoint(s, 7, 3084, r0);
  case 7:
    s.tmp_0 = scene_systemMenu_MenuOption_updateCard__P4810_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1301; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
  case 3:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_MenuOption_setState__P2698.info = {"start":1655,"length":147,"line":71,"column":8,"endLine":75,"endColumn":9,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"setState","argumentNames":["this","state"]}

function scene_systemMenu_MenuOption_setState__P2698_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_MenuOption_setState__P2698, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function scene_systemMenu_MenuOption_updateCard__P4810(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_systemMenu_MenuOption__C2692_VT)) failedCast(r0);
    s.lastBrkId = 3090;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3090]) return breakpoint(s, 8, 3090, r0);
  case 8:
    r0 = s.arg0.fields["theme"];
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3091;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3091]) return breakpoint(s, 9, 3091, r0);
  case 9:
    { step = 7; continue; }
  case 1:
  case 2:
    s.lastBrkId = 3092;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3092]) return breakpoint(s, 10, 3092, r0);
  case 10:
    r0 = s.arg0.fields["state"];
    s.tmp_3 = r0;
    r0 = pxsim_pxtcore.switch_eq(2, s.tmp_3);
    if (r0) { step = 3; continue; }
    r0 = pxsim_pxtcore.switch_eq(0, s.tmp_3);
    if (r0) { step = 4; continue; }
    r0 = pxsim_pxtcore.switch_eq(1, s.tmp_3);
    if (r0) { step = 5; continue; }
    r0 = s.tmp_3;
    { step = 6; continue; }
  case 3:
    s.lastBrkId = 3093;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3093]) return breakpoint(s, 11, 3093, r0);
  case 11:
    s.tmp_4 = Sprite_setImage__P2132_mk(s);
    r0 = s.arg0.fields["card"];
    s.tmp_4.arg0 = r0;
    s.tmp_5 = if_basicCard_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_5.arg0 = r0;
    if (!s.tmp_5.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_5.arg0, "basicCard");
    } else {
      s.tmp_5.fn = s.tmp_5.arg0.vtable.iface["basicCard"];
      if (s.tmp_5.fn == null) { s.retval = s.tmp_5.arg0.fields["basicCard"]; }
      else if (!s.tmp_5.fn.isGetter) { s.retval = bind(s.tmp_5); }
     else { s.callLocIdx = 1304; s.pc = 13; return s.tmp_5; }
    }
  case 13:
    r0 = s.retval;
    s.tmp_4.arg1 = r0;
    s.callLocIdx = 1305; s.pc = 12; return s.tmp_4;
  case 12:
    r0 = s.retval;
    s.lastBrkId = 3094;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3094]) return breakpoint(s, 14, 3094, r0);
  case 14:
    { step = 6; continue; }
  case 4:
    s.lastBrkId = 3095;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3095]) return breakpoint(s, 15, 3095, r0);
  case 15:
    s.tmp_0 = Sprite_setImage__P2132_mk(s);
    r0 = s.arg0.fields["card"];
    s.tmp_0.arg0 = r0;
    s.tmp_1 = if_selectedCard_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_1.arg0 = r0;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "selectedCard");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["selectedCard"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["selectedCard"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 1306; s.pc = 17; return s.tmp_1; }
    }
  case 17:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1307; s.pc = 16; return s.tmp_0;
  case 16:
    r0 = s.retval;
    s.lastBrkId = 3096;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3096]) return breakpoint(s, 18, 3096, r0);
  case 18:
    { step = 6; continue; }
  case 5:
    s.lastBrkId = 3097;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3097]) return breakpoint(s, 19, 3097, r0);
  case 19:
    s.tmp_0 = Sprite_setImage__P2132_mk(s);
    r0 = s.arg0.fields["card"];
    s.tmp_0.arg0 = r0;
    s.tmp_1 = if_activeCard_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_1.arg0 = r0;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "activeCard");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["activeCard"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["activeCard"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 1308; s.pc = 21; return s.tmp_1; }
    }
  case 21:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1309; s.pc = 20; return s.tmp_0;
  case 20:
    r0 = s.retval;
    s.lastBrkId = 3098;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3098]) return breakpoint(s, 22, 3098, r0);
  case 22:
  case 6:
    s.lastBrkId = 3099;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3099]) return breakpoint(s, 23, 3099, r0);
  case 23:
    s.tmp_0 = Sprite_x__P2102_mk(s);
    r0 = s.arg0.fields["icon"];
    s.tmp_0.arg0 = r0;
    s.tmp_1 = Sprite_x__P2101_mk(s);
    r0 = s.arg0.fields["card"];
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 1310; s.pc = 25; return s.tmp_1;
  case 25:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1311; s.pc = 24; return s.tmp_0;
  case 24:
    r0 = s.retval;
    s.lastBrkId = 3100;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3100]) return breakpoint(s, 26, 3100, r0);
  case 26:
    s.tmp_0 = Sprite_y__P2104_mk(s);
    r0 = s.arg0.fields["icon"];
    s.tmp_0.arg0 = r0;
    s.tmp_1 = Sprite_y__P2103_mk(s);
    r0 = s.arg0.fields["card"];
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 1312; s.pc = 28; return s.tmp_1;
  case 28:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1313; s.pc = 27; return s.tmp_0;
  case 27:
    r0 = s.retval;
  case 7:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_MenuOption_updateCard__P4810.info = {"start":2038,"length":497,"line":86,"column":8,"endLine":97,"endColumn":9,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"updateCard","argumentNames":["this"]}

function scene_systemMenu_MenuOption_updateCard__P4810_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_MenuOption_updateCard__P4810, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  arg0: undefined,
} }





function scene_systemMenu_MenuOption_setTheme__P2697(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_systemMenu_MenuOption__C2692_VT)) failedCast(r0);
    s.lastBrkId = 3079;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3079]) return breakpoint(s, 1, 3079, r0);
  case 1:
    r0 = (s.arg0).fields["theme"] = (s.arg1);
    s.lastBrkId = 3080;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3080]) return breakpoint(s, 2, 3080, r0);
  case 2:
    s.tmp_0 = scene_systemMenu_MenuOption_updateCard__P4810_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1300; s.pc = 3; return s.tmp_0;
  case 3:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_MenuOption_setTheme__P2697.info = {"start":1544,"length":101,"line":66,"column":8,"endLine":69,"endColumn":9,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"setTheme","argumentNames":["this","theme"]}

function scene_systemMenu_MenuOption_setTheme__P2697_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_MenuOption_setTheme__P2697, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function scene_systemMenu_MenuOption_position__P2695(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_systemMenu_MenuOption__C2692_VT)) failedCast(r0);
    s.lastBrkId = 3072;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3072]) return breakpoint(s, 1, 3072, r0);
  case 1:
    r0 = (s.arg0).fields["top"] = (s.arg2);
    s.lastBrkId = 3073;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3073]) return breakpoint(s, 2, 3073, r0);
  case 2:
    s.tmp_0 = Sprite_left__P2139_mk(s);
    r0 = s.arg0.fields["card"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = s.arg1;
    s.callLocIdx = 1291; s.pc = 3; return s.tmp_0;
  case 3:
    r0 = s.retval;
    s.lastBrkId = 3074;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3074]) return breakpoint(s, 4, 3074, r0);
  case 4:
    s.tmp_0 = Sprite_top__P2143_mk(s);
    r0 = s.arg0.fields["card"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = s.arg2;
    s.callLocIdx = 1292; s.pc = 5; return s.tmp_0;
  case 5:
    r0 = s.retval;
    s.lastBrkId = 3075;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3075]) return breakpoint(s, 6, 3075, r0);
  case 6:
    s.tmp_0 = Sprite_x__P2102_mk(s);
    r0 = s.arg0.fields["icon"];
    s.tmp_0.arg0 = r0;
    s.tmp_1 = Sprite_x__P2101_mk(s);
    r0 = s.arg0.fields["card"];
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 1293; s.pc = 8; return s.tmp_1;
  case 8:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1294; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    s.lastBrkId = 3076;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3076]) return breakpoint(s, 9, 3076, r0);
  case 9:
    s.tmp_0 = Sprite_y__P2104_mk(s);
    r0 = s.arg0.fields["icon"];
    s.tmp_0.arg0 = r0;
    s.tmp_1 = Sprite_y__P2103_mk(s);
    r0 = s.arg0.fields["card"];
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 1295; s.pc = 11; return s.tmp_1;
  case 11:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1296; s.pc = 10; return s.tmp_0;
  case 10:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_MenuOption_position__P2695.info = {"start":1178,"length":223,"line":51,"column":8,"endLine":59,"endColumn":9,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"position","argumentNames":["this","left","top"]}

function scene_systemMenu_MenuOption_position__P2695_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_MenuOption_position__P2695, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function scene_systemMenu_MenuOption_show__P2694(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_systemMenu_MenuOption__C2692_VT)) failedCast(r0);
    s.lastBrkId = 3067;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3067]) return breakpoint(s, 3, 3067, r0);
  case 3:
    r0 = s.arg0.fields["theme"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.tmp_1 = if_basicCard_1_mk(s);
    r0 = s.arg0.fields["theme"];
    s.tmp_1.arg0 = r0;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "basicCard");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["basicCard"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["basicCard"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 1286; s.pc = 4; return s.tmp_1; }
    }
  case 4:
    r0 = s.retval;
    { step = 2; continue; }
  case 1:
    r0 = globals.CARD_NORMAL___2716;
  case 2:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    s.tmp_3 = r0 = s.arg0;
    s.tmp_5 = sprites_create__P2043_mk(s);
    s.tmp_5.arg0 = s.tmp_2;
    s.tmp_5.arg1 = undefined;
    s.callLocIdx = 1287; s.pc = 5; return s.tmp_5;
  case 5:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = (s.tmp_3).fields["card"] = (s.tmp_4);
    s.lastBrkId = 3068;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3068]) return breakpoint(s, 6, 3068, r0);
  case 6:
    s.tmp_0 = if_z_2_mk(s);
    r0 = s.arg0.fields["card"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = 1;
    if (!s.tmp_0.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapSetByString(s.tmp_0.arg0, "z", s.tmp_0.arg1);
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["set/z"];
      if (s.tmp_0.fn === null) { s.tmp_0.arg0.fields["z"] = s.tmp_0.arg1; }
      else if (s.tmp_0.fn === undefined) { failedCast(s.tmp_0.arg0) } 
     else { s.callLocIdx = 1288; s.pc = 7; return s.tmp_0; }
    }
  case 7:
    r0 = s.retval;
    s.lastBrkId = 3069;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3069]) return breakpoint(s, 8, 3069, r0);
  case 8:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = sprites_create__P2043_mk(s);
    r0 = s.arg0.fields["iconImage"];
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = undefined;
    s.callLocIdx = 1289; s.pc = 9; return s.tmp_2;
  case 9:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["icon"] = (s.tmp_1);
    s.lastBrkId = 3070;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3070]) return breakpoint(s, 10, 3070, r0);
  case 10:
    s.tmp_0 = if_z_2_mk(s);
    r0 = s.arg0.fields["icon"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = 2;
    if (!s.tmp_0.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapSetByString(s.tmp_0.arg0, "z", s.tmp_0.arg1);
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["set/z"];
      if (s.tmp_0.fn === null) { s.tmp_0.arg0.fields["z"] = s.tmp_0.arg1; }
      else if (s.tmp_0.fn === undefined) { failedCast(s.tmp_0.arg0) } 
     else { s.callLocIdx = 1290; s.pc = 11; return s.tmp_0; }
    }
  case 11:
    r0 = s.retval;
    s.lastBrkId = 3071;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3071]) return breakpoint(s, 12, 3071, r0);
  case 12:
    r0 = (s.arg0).fields["state"] = (2);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_MenuOption_show__P2694.info = {"start":904,"length":264,"line":41,"column":8,"endLine":49,"endColumn":9,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"show","argumentNames":["this"]}

function scene_systemMenu_MenuOption_show__P2694_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_MenuOption_show__P2694, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  arg0: undefined,
} }





function game_onShade__P2622(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 2766;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2766]) return breakpoint(s, 4, 2766, r0);
  case 4:
    s.tmp_0 = game_init__P4564_mk(s);
    s.tmp_0.arg0 = undefined;
    s.callLocIdx = 1139; s.pc = 5; return s.tmp_0;
  case 5:
    r0 = s.retval;
    s.lastBrkId = 2767;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2767]) return breakpoint(s, 6, 2767, r0);
  case 6:
    r0 = pxsim_numops_toBoolDecr(s.arg0);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2768;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2768]) return breakpoint(s, 7, 2768, r0);
  case 7:
    { step = 3; continue; }
  case 1:
  case 2:
    s.lastBrkId = 2769;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2769]) return breakpoint(s, 8, 2769, r0);
  case 8:
    s.tmp_2 = scene_createRenderable__P2460_mk(s);
    s.tmp_2.arg0 = 80;
    s.tmp_2.arg1 = s.arg0;
    s.tmp_2.arg2 = undefined;
    s.callLocIdx = 1140; s.pc = 9; return s.tmp_2;
  case 9:
    r0 = s.retval;
  case 3:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_onShade__P2622.info = {"start":8745,"length":145,"line":286,"column":4,"endLine":290,"endColumn":5,"fileName":"pxt_modules/game/game.ts","functionName":"onShade","argumentNames":["a"]}

function game_onShade__P2622_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_onShade__P2622, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function scene_systemMenu_PauseMenu_constructor__P2701(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_systemMenu_PauseMenu__C2700_VT)) failedCast(r0);
    r0 = (s.arg0).fields["generator"] = (s.arg1);
    s.lastBrkId = 3101;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3101]) return breakpoint(s, 3, 3101, r0);
  case 3:
    s.tmp_0 = r0 = s.arg2;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    s.tmp_1 = scene_systemMenu_buildMenuTheme__P2709_mk(s);
    r0 = pxsim_ImageMethods.width(globals.CARD_NORMAL___2716);
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = 3;
    s.tmp_1.arg2 = undefined;
    s.tmp_1.arg3 = undefined;
    s.callLocIdx = 1314; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
  case 2:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = (s.arg0).fields["theme"] = (s.tmp_2);
    s.lastBrkId = 3102;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3102]) return breakpoint(s, 5, 3102, r0);
  case 5:
    r0 = (s.arg0).fields["scrollRow"] = (0);
    s.lastBrkId = 3103;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3103]) return breakpoint(s, 6, 3103, r0);
  case 6:
    r0 = (s.arg0).fields["scrollOffset"] = (0);
    s.lastBrkId = 3104;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3104]) return breakpoint(s, 7, 3104, r0);
  case 7:
    r0 = (s.arg0).fields["scrollTarget"] = (0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_PauseMenu_constructor__P2701.info = {"start":3029,"length":257,"line":116,"column":8,"endLine":121,"endColumn":9,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"inline","argumentNames":["this","generator","theme"]}

function scene_systemMenu_PauseMenu_constructor__P2701_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_PauseMenu_constructor__P2701, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function scene_systemMenu_buildMenuTheme__P2709(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.cardsPerRow___20134 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 3223;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3223]) return breakpoint(s, 5, 3223, r0);
  case 5:
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_0 = r0;
    r0 = (s.arg0 + s.arg1);
    s.tmp_1 = r0;
    r0 = pxsim.Math_.idiv(s.tmp_0, s.tmp_1);
    s.cardsPerRow___20134 = (r0);
    s.lastBrkId = 3224;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3224]) return breakpoint(s, 6, 3224, r0);
  case 6:
    s.tmp_0 = r0 = s.arg2;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = globals.font8___1770;
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    s.arg2 = (s.tmp_1);
    s.lastBrkId = 3225;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3225]) return breakpoint(s, 7, 3225, r0);
  case 7:
    s.tmp_0 = r0 = s.arg3;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 3; continue; }
    r0 = s.tmp_0;
    { step = 4; continue; }
  case 3:
    s.tmp_1 = image_doubledFont__P1773_mk(s);
    s.tmp_1.arg0 = s.arg2;
    s.callLocIdx = 1424; s.pc = 8; return s.tmp_1;
  case 8:
    r0 = s.retval;
  case 4:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    s.arg3 = (s.tmp_2);
    s.lastBrkId = 3226;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3226]) return breakpoint(s, 9, 3226, r0);
  case 9:
    r0 = pxsim_pxtrt.mkMap();
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "cardSpacing", s.arg1);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "cardWidth", s.arg0);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "cardsPerRow", s.cardsPerRow___20134);
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_3 = r0;
    r0 = (s.cardsPerRow___20134 * s.arg0);
    s.tmp_5 = r0;
    r0 = (s.cardsPerRow___20134 - 1);
    s.tmp_7 = r0;
    r0 = (s.tmp_7 * s.arg1);
    s.tmp_6 = r0;
    r0 = (s.tmp_5 + s.tmp_6);
    s.tmp_4 = r0;
    r0 = (s.tmp_3 - s.tmp_4);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 >> 1);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "padding", s.tmp_1);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "infoFont", s.arg2);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "headerFont", s.arg3);
    s.tmp_11 = if_charHeight_1_mk(s);
    s.tmp_11.arg0 = s.arg3;
    if (!s.tmp_11.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_11.arg0, "charHeight");
    } else {
      s.tmp_11.fn = s.tmp_11.arg0.vtable.iface["charHeight"];
      if (s.tmp_11.fn == null) { s.retval = s.tmp_11.arg0.fields["charHeight"]; }
      else if (!s.tmp_11.fn.isGetter) { s.retval = bind(s.tmp_11); }
     else { s.callLocIdx = 1425; s.pc = 10; return s.tmp_11; }
    }
  case 10:
    r0 = s.retval;
    s.tmp_10 = r0;
    r0 = (s.tmp_10 + 2);
    s.tmp_9 = r0;
    r0 = (s.tmp_9 + s.arg1);
    s.tmp_8 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "cardsTop", s.tmp_8);
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_14 = r0;
    s.tmp_16 = if_charHeight_1_mk(s);
    s.tmp_16.arg0 = s.arg2;
    if (!s.tmp_16.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_16.arg0, "charHeight");
    } else {
      s.tmp_16.fn = s.tmp_16.arg0.vtable.iface["charHeight"];
      if (s.tmp_16.fn == null) { s.retval = s.tmp_16.arg0.fields["charHeight"]; }
      else if (!s.tmp_16.fn.isGetter) { s.retval = bind(s.tmp_16); }
     else { s.callLocIdx = 1426; s.pc = 11; return s.tmp_16; }
    }
  case 11:
    r0 = s.retval;
    s.tmp_15 = r0;
    r0 = (s.tmp_14 - s.tmp_15);
    s.tmp_13 = r0;
    r0 = (s.tmp_13 - 2);
    s.tmp_12 = r0;
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "infoTop", s.tmp_12);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "headerText", "PAUSED");
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "selectedCard", globals.CARD_SELECTED___2717);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "activeCard", globals.CARD_ACTIVE___2718);
    r0 = pxsim_pxtrt.mapSetByString(s.tmp_0, "basicCard", globals.CARD_NORMAL___2716);
    r0 = s.tmp_0;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_buildMenuTheme__P2709.info = {"start":11654,"length":906,"line":356,"column":4,"endLine":375,"endColumn":5,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"buildMenuTheme","argumentNames":["cardWidth","cardSpacing","infoFont","headerFont"]}

function scene_systemMenu_buildMenuTheme__P2709_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_buildMenuTheme__P2709, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  tmp_12: undefined,
  tmp_13: undefined,
  tmp_14: undefined,
  tmp_15: undefined,
  tmp_16: undefined,
  cardsPerRow___20134: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function scene_systemMenu_initScreen__P4823(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.brightness___20186 = undefined;
    s.lastBrkId = 3239;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3239]) return breakpoint(s, 3, 3239, r0);
  case 3:
    s.tmp_0 = settings_readNumber__P1861_mk(s);
    s.tmp_0.arg0 = "#brightness";
    s.callLocIdx = 1433; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.brightness___20186 = (r0);
    s.lastBrkId = 3240;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3240]) return breakpoint(s, 5, 3240, r0);
  case 5:
    r0 = (s.brightness___20186 !== undefined);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3241;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3241]) return breakpoint(s, 6, 3241, r0);
  case 6:
    s.tmp_1 = helpers_setScreenBrightness__P1760_mk(s);
    s.tmp_1.arg0 = globals.screen___1827;
    s.tmp_1.arg1 = s.brightness___20186;
    s.callLocIdx = 1434; s.pc = 7; return s.tmp_1;
  case 7:
    r0 = s.retval;
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_initScreen__P4823.info = {"start":13388,"length":175,"line":405,"column":4,"endLine":409,"endColumn":5,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"initScreen","argumentNames":[]}

function scene_systemMenu_initScreen__P4823_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_initScreen__P4823, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  brightness___20186: undefined,
} }





function scene_systemMenu_initVolume__P4822(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.vol___20196 = undefined;
    s.lastBrkId = 3236;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3236]) return breakpoint(s, 3, 3236, r0);
  case 3:
    s.tmp_0 = settings_readNumber__P1861_mk(s);
    s.tmp_0.arg0 = "#volume";
    s.callLocIdx = 1431; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.vol___20196 = (r0);
    s.lastBrkId = 3237;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3237]) return breakpoint(s, 5, 3237, r0);
  case 5:
    r0 = (s.vol___20196 !== undefined);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3238;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3238]) return breakpoint(s, 6, 3238, r0);
  case 6:
    s.tmp_1 = music_setVolume__P1604_mk(s);
    s.tmp_1.arg0 = s.vol___20196;
    s.callLocIdx = 1432; s.pc = 7; return s.tmp_1;
  case 7:
    r0 = s.retval;
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_systemMenu_initVolume__P4822.info = {"start":13238,"length":144,"line":399,"column":4,"endLine":403,"endColumn":5,"fileName":"pxt_modules/game/systemmenu.ts","functionName":"initVolume","argumentNames":[]}

function scene_systemMenu_initVolume__P4822_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_systemMenu_initVolume__P4822, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  vol___20196: undefined,
} }





function game_currentScene__P2609(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 2667;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2667]) return breakpoint(s, 1, 2667, r0);
  case 1:
    s.tmp_0 = game_init__P4564_mk(s);
    s.tmp_0.arg0 = undefined;
    s.callLocIdx = 1081; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.lastBrkId = 2668;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2668]) return breakpoint(s, 3, 2668, r0);
  case 3:
    r0 = globals._scene___4556;
    return leave(s, r0)
  default: oops()
} } }
game_currentScene__P2609.info = {"start":667,"length":90,"line":22,"column":4,"endLine":25,"endColumn":5,"fileName":"pxt_modules/game/game.ts","functionName":"currentScene","argumentNames":[]}

function game_currentScene__P2609_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_currentScene__P2609, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
} }





function game_addScenePopHandler__P2625(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 2774;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2774]) return breakpoint(s, 5, 2774, r0);
  case 5:
    r0 = pxsim_numops_toBoolDecr(globals._scenePopHandlers___4559);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2775;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2775]) return breakpoint(s, 6, 2775, r0);
  case 6:
    r0 = pxsim_Array__mk();
    globals._scenePopHandlers___4559 = (r0);
  case 1:
  case 2:
    s.lastBrkId = 2776;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2776]) return breakpoint(s, 7, 2776, r0);
  case 7:
    r0 = pxsim_Array_.indexOf(globals._scenePopHandlers___4559, s.arg0, undefined);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2777;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2777]) return breakpoint(s, 8, 2777, r0);
  case 8:
    r0 = pxsim_Array__push(globals._scenePopHandlers___4559, s.arg0);
  case 3:
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_addScenePopHandler__P2625.info = {"start":10273,"length":237,"line":325,"column":4,"endLine":329,"endColumn":5,"fileName":"pxt_modules/game/game.ts","functionName":"addScenePopHandler","argumentNames":["handler"]}

function game_addScenePopHandler__P2625_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_addScenePopHandler__P2625, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function game_addScenePushHandler__P2623(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 2770;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2770]) return breakpoint(s, 5, 2770, r0);
  case 5:
    r0 = pxsim_numops_toBoolDecr(globals._scenePushHandlers___4558);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2771;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2771]) return breakpoint(s, 6, 2771, r0);
  case 6:
    r0 = pxsim_Array__mk();
    globals._scenePushHandlers___4558 = (r0);
  case 1:
  case 2:
    s.lastBrkId = 2772;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2772]) return breakpoint(s, 7, 2772, r0);
  case 7:
    r0 = pxsim_Array_.indexOf(globals._scenePushHandlers___4558, s.arg0, undefined);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2773;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2773]) return breakpoint(s, 8, 2773, r0);
  case 8:
    r0 = pxsim_Array__push(globals._scenePushHandlers___4558, s.arg0);
  case 3:
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_addScenePushHandler__P2623.info = {"start":9272,"length":242,"line":301,"column":4,"endLine":305,"endColumn":5,"fileName":"pxt_modules/game/game.ts","functionName":"addScenePushHandler","argumentNames":["handler"]}

function game_addScenePushHandler__P2623_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_addScenePushHandler__P2623, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function Fx8__P149(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 260;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[260]) return breakpoint(s, 1, 260, r0);
  case 1:
    r0 = (s.arg0 * 256);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 | 0);
    return leave(s, r0)
  default: oops()
} } }
Fx8__P149.info = {"start":42,"length":68,"line":4,"column":0,"endLine":6,"endColumn":1,"fileName":"pxt_modules/base/fixed.ts","functionName":"Fx8","argumentNames":["v"]}

function Fx8__P149_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Fx8__P149, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function SpriteKind_create__P2206(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 1474;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1474]) return breakpoint(s, 3, 1474, r0);
  case 3:
    r0 = (globals.nextKind___4394 === undefined);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1475;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1475]) return breakpoint(s, 4, 1475, r0);
  case 4:
    globals.nextKind___4394 = (1000);
  case 1:
  case 2:
    s.lastBrkId = 1476;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1476]) return breakpoint(s, 5, 1476, r0);
  case 5:
    s.tmp_0 = r0 = globals.nextKind___4394;
    r0 = (s.tmp_0 + 1);
    globals.nextKind___4394 = (r0);
    r0 = s.tmp_0;
    return leave(s, r0)
  default: oops()
} } }
SpriteKind_create__P2206.info = {"start":750,"length":112,"line":25,"column":4,"endLine":28,"endColumn":5,"fileName":"pxt_modules/game/spritekind.ts","functionName":"create","argumentNames":[]}

function SpriteKind_create__P2206_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: SpriteKind_create__P2206, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
} }





function controller_Button_constructor__P1977(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, controller_Button__C1971_VT)) failedCast(r0);
    s.lastBrkId = 1100;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1100]) return breakpoint(s, 5, 1100, r0);
  case 5:
    r0 = (s.arg0).fields["id"] = (s.arg1);
    s.lastBrkId = 1101;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1101]) return breakpoint(s, 6, 1101, r0);
  case 6:
    r0 = (s.arg0).fields["_pressed"] = (false);
    s.lastBrkId = 1102;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1102]) return breakpoint(s, 7, 1102, r0);
  case 7:
    r0 = (s.arg0).fields["repeatDelay"] = (undefined);
    s.lastBrkId = 1103;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1103]) return breakpoint(s, 8, 1103, r0);
  case 8:
    r0 = (s.arg0).fields["repeatInterval"] = (undefined);
    s.lastBrkId = 1104;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1104]) return breakpoint(s, 9, 1104, r0);
  case 9:
    r0 = (s.arg0).fields["_repeatCount"] = (0);
    s.lastBrkId = 1105;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1105]) return breakpoint(s, 10, 1105, r0);
  case 10:
    r0 = (s.arg1 > 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1106;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1106]) return breakpoint(s, 11, 1106, r0);
  case 11:
    r0 = pxsim_pxtcore_mkAction(1, controller_Button_inline__P20272);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_1, 0, s.arg0);
    r0 = s.arg0.fields["id"];
    s.tmp_2 = r0;
    r0 = pxsim.control.internalOnEvent(2050, s.tmp_2, s.tmp_1, 16);
    s.lastBrkId = 1107;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1107]) return breakpoint(s, 12, 1107, r0);
  case 12:
    r0 = pxsim_pxtcore_mkAction(1, controller_Button_inline__P20279);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    r0 = s.arg0.fields["id"];
    s.tmp_1 = r0;
    r0 = pxsim.control.internalOnEvent(2051, s.tmp_1, s.tmp_0, 16);
    s.lastBrkId = 1108;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1108]) return breakpoint(s, 13, 1108, r0);
  case 13:
    r0 = (s.arg2 > 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1109;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1109]) return breakpoint(s, 14, 1109, r0);
  case 14:
    s.tmp_1 = controller_setupButton__P4383_mk(s);
    s.tmp_1.arg0 = s.arg1;
    s.tmp_1.arg1 = s.arg2;
    s.callLocIdx = 238; s.pc = 15; return s.tmp_1;
  case 15:
    r0 = s.retval;
  case 1:
  case 2:
  case 3:
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller_Button_constructor__P1977.info = {"start":1467,"length":863,"line":59,"column":8,"endLine":75,"endColumn":9,"fileName":"pxt_modules/game/controllerbutton.ts","functionName":"inline","argumentNames":["this","id","configKey"]}

function controller_Button_constructor__P1977_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Button_constructor__P1977, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function controller_Button_inline__P20272(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.tmp_0 = controller_Button_setPressed__P1982_mk(s);
    s.tmp_0.arg0 = s.caps[0];
    s.tmp_0.arg1 = false;
    s.callLocIdx = 236; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller_Button_inline__P20272.info = {"start":2089,"length":28,"line":69,"column":66,"endLine":69,"endColumn":94,"fileName":"pxt_modules/game/controllerbutton.ts","functionName":"inline","argumentNames":[]}

function controller_Button_inline__P20272_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Button_inline__P20272, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
} }





function controller_Button_inline__P20279(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.tmp_0 = controller_Button_setPressed__P1982_mk(s);
    s.tmp_0.arg0 = s.caps[0];
    s.tmp_0.arg1 = true;
    s.callLocIdx = 237; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller_Button_inline__P20279.info = {"start":2191,"length":27,"line":70,"column":68,"endLine":70,"endColumn":95,"fileName":"pxt_modules/game/controllerbutton.ts","functionName":"inline","argumentNames":[]}

function controller_Button_inline__P20279_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Button_inline__P20279, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
} }





function controller_setupButton__P4383(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 1098;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1098]) return breakpoint(s, 1, 1098, r0);
  case 1:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller_setupButton__P4383.info = {"start":861,"length":93,"line":39,"column":4,"endLine":41,"endColumn":6,"fileName":"pxt_modules/game/controllerbutton.ts","functionName":"setupButton","argumentNames":["buttonId","key"]}

function controller_setupButton__P4383_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_setupButton__P4383, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
} }





function controller_Button_setPressed__P1982(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, controller_Button__C1971_VT)) failedCast(r0);
    s.lastBrkId = 1124;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1124]) return breakpoint(s, 7, 1124, r0);
  case 7:
    r0 = s.arg0.fields["_pressed"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 != s.arg1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 1125;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1125]) return breakpoint(s, 8, 1125, r0);
  case 8:
    s.tmp_2 = power_poke__P1728_mk(s);
    s.callLocIdx = 240; s.pc = 9; return s.tmp_2;
  case 9:
    r0 = s.retval;
    s.lastBrkId = 1126;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1126]) return breakpoint(s, 10, 1126, r0);
  case 10:
    r0 = s.arg0.fields["_owner"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1127;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1127]) return breakpoint(s, 11, 1127, r0);
  case 11:
    s.tmp_1 = controller_Controller_connected__P1946_mk(s);
    r0 = s.arg0.fields["_owner"];
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = true;
    s.callLocIdx = 241; s.pc = 12; return s.tmp_1;
  case 12:
    r0 = s.retval;
  case 1:
  case 2:
    s.lastBrkId = 1128;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1128]) return breakpoint(s, 13, 1128, r0);
  case 13:
    r0 = (s.arg0).fields["_pressed"] = (s.arg1);
    s.lastBrkId = 1129;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1129]) return breakpoint(s, 14, 1129, r0);
  case 14:
    r0 = s.arg0.fields["_pressed"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1130;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1130]) return breakpoint(s, 15, 1130, r0);
  case 15:
    r0 = (s.arg0).fields["_pressedElasped"] = (0);
    s.lastBrkId = 1131;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1131]) return breakpoint(s, 16, 1131, r0);
  case 16:
    s.tmp_0 = controller_Button_raiseButtonDown__P4369_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 242; s.pc = 17; return s.tmp_0;
  case 17:
    r0 = s.retval;
    { step = 4; continue; }
  case 3:
    s.lastBrkId = 1132;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1132]) return breakpoint(s, 18, 1132, r0);
  case 18:
    r0 = (s.arg0).fields["_repeatCount"] = (0);
    s.lastBrkId = 1133;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1133]) return breakpoint(s, 19, 1133, r0);
  case 19:
    s.tmp_0 = controller_Button_raiseButtonUp__P4368_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 243; s.pc = 20; return s.tmp_0;
  case 20:
    r0 = s.retval;
  case 4:
  case 5:
  case 6:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller_Button_setPressed__P1982.info = {"start":4478,"length":507,"line":140,"column":8,"endLine":154,"endColumn":9,"fileName":"pxt_modules/game/controllerbutton.ts","functionName":"setPressed","argumentNames":["this","pressed"]}

function controller_Button_setPressed__P1982_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Button_setPressed__P1982, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function controller_Button_raiseButtonDown__P4369(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, controller_Button__C1971_VT)) failedCast(r0);
    s.lastBrkId = 1113;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1113]) return breakpoint(s, 3, 1113, r0);
  case 3:
    r0 = pxsim_numops_toBoolDecr(globals._userEventsEnabled___4377);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1114;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1114]) return breakpoint(s, 4, 1114, r0);
  case 4:
    r0 = s.arg0.fields["id"];
    s.tmp_0 = r0;
    r0 = pxsim.control.raiseEvent(2049, s.tmp_0);
    { step = 2; continue; }
  case 1:
    s.lastBrkId = 1115;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1115]) return breakpoint(s, 5, 1115, r0);
  case 5:
    r0 = s.arg0.fields["id"];
    s.tmp_0 = r0;
    r0 = pxsim.control.raiseEvent(2053, s.tmp_0);
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller_Button_raiseButtonDown__P4369.info = {"start":2550,"length":205,"line":84,"column":8,"endLine":89,"endColumn":9,"fileName":"pxt_modules/game/controllerbutton.ts","functionName":"raiseButtonDown","argumentNames":["this"]}

function controller_Button_raiseButtonDown__P4369_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Button_raiseButtonDown__P4369, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function controller_Button_raiseButtonUp__P4368(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, controller_Button__C1971_VT)) failedCast(r0);
    s.lastBrkId = 1110;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1110]) return breakpoint(s, 3, 1110, r0);
  case 3:
    r0 = pxsim_numops_toBoolDecr(globals._userEventsEnabled___4377);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1111;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1111]) return breakpoint(s, 4, 1111, r0);
  case 4:
    r0 = s.arg0.fields["id"];
    s.tmp_0 = r0;
    r0 = pxsim.control.raiseEvent(2048, s.tmp_0);
    { step = 2; continue; }
  case 1:
    s.lastBrkId = 1112;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1112]) return breakpoint(s, 5, 1112, r0);
  case 5:
    r0 = s.arg0.fields["id"];
    s.tmp_0 = r0;
    r0 = pxsim.control.raiseEvent(2052, s.tmp_0);
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller_Button_raiseButtonUp__P4368.info = {"start":2340,"length":200,"line":77,"column":8,"endLine":82,"endColumn":9,"fileName":"pxt_modules/game/controllerbutton.ts","functionName":"raiseButtonUp","argumentNames":["this"]}

function controller_Button_raiseButtonUp__P4368_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Button_raiseButtonUp__P4368, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function controller_Controller_connected__P1946(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, controller_Controller__C1926_VT)) failedCast(r0);
    s.lastBrkId = 1040;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1040]) return breakpoint(s, 5, 1040, r0);
  case 5:
    r0 = s.arg0.fields["_connected"];
    s.tmp_1 = r0;
    r0 = (s.arg1 != s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1041;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1041]) return breakpoint(s, 6, 1041, r0);
  case 6:
    r0 = (s.arg0).fields["_connected"] = (s.arg1);
    s.lastBrkId = 1042;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1042]) return breakpoint(s, 7, 1042, r0);
  case 7:
    r0 = s.arg0.fields["_connected"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = 1;
    { step = 2; continue; }
  case 1:
    r0 = 2;
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    s.tmp_3 = controller_Controller_id__P1933_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.callLocIdx = 203; s.pc = 8; return s.tmp_3;
  case 8:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim.control.raiseEvent(s.tmp_2, s.tmp_1);
  case 3:
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
controller_Controller_connected__P1946.info = {"start":6340,"length":261,"line":216,"column":8,"endLine":221,"endColumn":9,"fileName":"pxt_modules/game/controller.ts","functionName":"connected","argumentNames":["this","value"]}

function controller_Controller_connected__P1946_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Controller_connected__P1946, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function controller_Controller_id__P1933(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, controller_Controller__C1926_VT)) failedCast(r0);
    s.lastBrkId = 1033;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1033]) return breakpoint(s, 1, 1033, r0);
  case 1:
    r0 = s.arg0.fields["_id"];
    return leaveAccessor(s, r0)
  default: oops()
} } }
controller_Controller_id__P1933.info = {"start":2547,"length":49,"line":85,"column":8,"endLine":87,"endColumn":9,"fileName":"pxt_modules/game/controller.ts","functionName":"id","argumentNames":["this"]}
controller_Controller_id__P1933.isGetter = true;

function controller_Controller_id__P1933_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Controller_id__P1933, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function controller_Controller_connected__P1945(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, controller_Controller__C1926_VT)) failedCast(r0);
    s.lastBrkId = 1039;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1039]) return breakpoint(s, 1, 1039, r0);
  case 1:
    r0 = s.arg0.fields["_connected"];
    return leaveAccessor(s, r0)
  default: oops()
} } }
controller_Controller_connected__P1945.info = {"start":6267,"length":63,"line":212,"column":8,"endLine":214,"endColumn":9,"fileName":"pxt_modules/game/controller.ts","functionName":"connected","argumentNames":["this"]}
controller_Controller_connected__P1945.isGetter = true;

function controller_Controller_connected__P1945_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Controller_connected__P1945, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function settings_initScopes__P4337(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.rn___20357 = undefined;
    s.lastBrkId = 957;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[957]) return breakpoint(s, 1, 957, r0);
  case 1:
    s.tmp_1 = settings_runNumber__P1851_mk(s);
    s.callLocIdx = 164; s.pc = 2; return s.tmp_1;
  case 2:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = (s.tmp_0 + 1);
    s.rn___20357 = (r0);
    s.lastBrkId = 958;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[958]) return breakpoint(s, 3, 958, r0);
  case 3:
    s.tmp_0 = settings_writeNumber__P1856_mk(s);
    s.tmp_0.arg0 = globals.RUN_KEY___4325;
    s.tmp_0.arg1 = s.rn___20357;
    s.callLocIdx = 165; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.lastBrkId = 959;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[959]) return breakpoint(s, 5, 959, r0);
  case 5:
    r0 = pxsim.control.deviceSerialNumber();
    s.tmp_1 = r0;
    r0 = (s.tmp_1 & 2147483647);
    s.tmp_0 = r0;
    r0 = pxsim_pxtcore.seedAddRandom(s.tmp_0);
    s.lastBrkId = 960;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[960]) return breakpoint(s, 6, 960, r0);
  case 6:
    r0 = pxsim_pxtcore.seedAddRandom(s.rn___20357);
    s.lastBrkId = 961;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[961]) return breakpoint(s, 7, 961, r0);
  case 7:
    s.tmp_0 = settings_setScope__P4336_mk(s);
    r0 = pxsim_pxtcore.programName();
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 166; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
settings_initScopes__P4337.info = {"start":1104,"length":230,"line":41,"column":4,"endLine":49,"endColumn":5,"fileName":"pxt_modules/settings/settings.ts","functionName":"initScopes","argumentNames":[]}

function settings_initScopes__P4337_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: settings_initScopes__P4337, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  rn___20357: undefined,
} }





function settings_setScope__P4336(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.currScope___20386 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 951;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[951]) return breakpoint(s, 7, 951, r0);
  case 7:
    r0 = pxsim_numops_toBoolDecr(s.arg0);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = pxsim_String_.length(s.arg0);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 > 100);
  case 2:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 952;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[952]) return breakpoint(s, 8, 952, r0);
  case 8:
    r0 = pxsim_pxtrt.panic(922);
  case 3:
  case 4:
    s.lastBrkId = 953;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[953]) return breakpoint(s, 9, 953, r0);
  case 9:
    s.tmp_0 = settings_readString__P1859_mk(s);
    s.tmp_0.arg0 = globals.SCOPE_KEY___4326;
    s.callLocIdx = 162; s.pc = 10; return s.tmp_0;
  case 10:
    r0 = s.retval;
    s.currScope___20386 = (r0);
    s.lastBrkId = 954;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[954]) return breakpoint(s, 11, 954, r0);
  case 11:
    r0 = (s.currScope___20386 != s.arg0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 955;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[955]) return breakpoint(s, 12, 955, r0);
  case 12:
    r0 = pxsim.settings._userClean();
    s.lastBrkId = 956;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[956]) return breakpoint(s, 13, 956, r0);
  case 13:
    s.tmp_0 = settings_writeString__P1854_mk(s);
    s.tmp_0.arg0 = globals.SCOPE_KEY___4326;
    s.tmp_0.arg1 = s.arg0;
    s.callLocIdx = 163; s.pc = 14; return s.tmp_0;
  case 14:
    r0 = s.retval;
  case 5:
  case 6:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
settings_setScope__P4336.info = {"start":826,"length":272,"line":31,"column":4,"endLine":39,"endColumn":5,"fileName":"pxt_modules/settings/settings.ts","functionName":"setScope","argumentNames":["scope"]}

function settings_setScope__P4336_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: settings_setScope__P4336, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  currScope___20386: undefined,
  arg0: undefined,
} }





function settings_readString__P1859(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.buf___20407 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 970;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[970]) return breakpoint(s, 4, 970, r0);
  case 4:
    s.tmp_0 = settings_readBuffer__P1858_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 173; s.pc = 5; return s.tmp_0;
  case 5:
    r0 = s.retval;
    s.buf___20407 = (r0);
    s.lastBrkId = 971;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[971]) return breakpoint(s, 6, 971, r0);
  case 6:
    r0 = pxsim_numops_toBoolDecr(s.buf___20407);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 972;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[972]) return breakpoint(s, 7, 972, r0);
  case 7:
    r0 = undefined;
    { step = 3; continue; }
    { step = 2; continue; }
  case 1:
    s.lastBrkId = 973;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[973]) return breakpoint(s, 8, 973, r0);
  case 8:
    r0 = pxsim.BufferMethods.toString(s.buf___20407);
    { step = 3; continue; }
  case 2:
    r0 = undefined;
  case 3:
    return leave(s, r0)
  default: oops()
} } }
settings_readString__P1859.info = {"start":2827,"length":177,"line":110,"column":4,"endLine":116,"endColumn":5,"fileName":"pxt_modules/settings/settings.ts","functionName":"readString","argumentNames":["key"]}

function settings_readString__P1859_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: settings_readString__P1859, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  buf___20407: undefined,
  arg0: undefined,
} }





function settings_writeString__P1854(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 966;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[966]) return breakpoint(s, 1, 966, r0);
  case 1:
    s.tmp_0 = settings_writeBuffer__P1853_mk(s);
    s.tmp_0.arg0 = s.arg0;
    r0 = pxsim.control.createBufferFromUTF8(s.arg1);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 168; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
settings_writeString__P1854.info = {"start":1895,"length":125,"line":75,"column":4,"endLine":77,"endColumn":5,"fileName":"pxt_modules/settings/settings.ts","functionName":"writeString","argumentNames":["key","value"]}

function settings_writeString__P1854_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: settings_writeString__P1854, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function settings_runNumber__P1851(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 950;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[950]) return breakpoint(s, 3, 950, r0);
  case 3:
    s.tmp_1 = settings_readNumber__P1861_mk(s);
    s.tmp_1.arg0 = globals.RUN_KEY___4325;
    s.callLocIdx = 161; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = 0;
  case 2:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = s.tmp_2;
    return leave(s, r0)
  default: oops()
} } }
settings_runNumber__P1851.info = {"start":745,"length":75,"line":27,"column":4,"endLine":29,"endColumn":5,"fileName":"pxt_modules/settings/settings.ts","functionName":"runNumber","argumentNames":[]}

function settings_runNumber__P1851_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: settings_runNumber__P1851, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
} }





function control___screen_setupUpdate__P1789(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 932;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[932]) return breakpoint(s, 1, 932, r0);
  case 1:
    globals.__updated___4294 = (true);
    s.lastBrkId = 933;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[933]) return breakpoint(s, 2, 933, r0);
  case 2:
    globals.__update___4292 = (s.arg0);
    s.lastBrkId = 934;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[934]) return breakpoint(s, 3, 934, r0);
  case 3:
    s.tmp_0 = lambda_1_mk(s);
    s.tmp_0.argL = s.arg0;
    setupLambda(s.tmp_0, s.tmp_0.argL);
    s.callLocIdx = 157; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
control___screen_setupUpdate__P1789.info = {"start":198,"length":125,"line":10,"column":4,"endLine":14,"endColumn":5,"fileName":"pxt_modules/screen/frame.ts","functionName":"setupUpdate","argumentNames":["update"]}

function control___screen_setupUpdate__P1789_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control___screen_setupUpdate__P1789, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function control___screen_update__P1788(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 929;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[929]) return breakpoint(s, 3, 929, r0);
  case 3:
    r0 = pxsim_numops_toBoolDecr(globals.__update___4292);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 930;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[930]) return breakpoint(s, 4, 930, r0);
  case 4:
    s.tmp_0 = lambda_1_mk(s);
    s.tmp_0.argL = globals.__update___4292;
    setupLambda(s.tmp_0, s.tmp_0.argL);
    s.callLocIdx = 156; s.pc = 5; return s.tmp_0;
  case 5:
    r0 = s.retval;
  case 1:
  case 2:
    s.lastBrkId = 931;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[931]) return breakpoint(s, 6, 931, r0);
  case 6:
    globals.__updated___4294 = (true);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
control___screen_update__P1788.info = {"start":90,"length":102,"line":4,"column":4,"endLine":8,"endColumn":5,"fileName":"pxt_modules/screen/frame.ts","functionName":"update","argumentNames":[]}

function control___screen_update__P1788_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: control___screen_update__P1788, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
} }





function pause__P411(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 524;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[524]) return breakpoint(s, 1, 524, r0);
  case 1:
    setupResume(s, 2);
    pxsim.loops.pause(s.arg0);
    checkResumeConsumed();
    return;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
pause__P411.info = {"start":246,"length":57,"line":7,"column":0,"endLine":9,"endColumn":1,"fileName":"pxt_modules/base/pause.ts","functionName":"pause","argumentNames":["ms"]}

function pause__P411_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: pause__P411, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function game_Dialog_drawTextCore__P2581(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lines___20442 = undefined;
    s.availableWidth___20448 = undefined;
    s.availableHeight___20451 = undefined;
    s.charactersPerRow___20454 = undefined;
    s.rowsOfCharacters___20462 = undefined;
    s.textLeft___20473 = undefined;
    s.textTop___20495 = undefined;
    s.row___20510 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Dialog__C2571_VT)) failedCast(r0);
    s.lastBrkId = 2457;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2457]) return breakpoint(s, 10, 2457, r0);
  case 10:
    r0 = s.arg0.fields["chunks"];
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = s.arg0.fields["chunks"];
    s.tmp_4 = r0;
    r0 = pxsim_Array__length(s.tmp_4);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 === 0);
  case 2:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_5);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2458;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2458]) return breakpoint(s, 11, 2458, r0);
  case 11:
    { step = 9; continue; }
  case 3:
  case 4:
    s.lastBrkId = 2459;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2459]) return breakpoint(s, 12, 2459, r0);
  case 12:
    r0 = s.arg0.fields["chunks"];
    s.tmp_6 = r0;
    r0 = s.arg0.fields["chunkIndex"];
    s.tmp_7 = r0;
    r0 = pxsim_Array__getAt(s.tmp_6, s.tmp_7);
    s.lines___20442 = (r0);
    s.lastBrkId = 2460;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2460]) return breakpoint(s, 13, 2460, r0);
  case 13:
    s.tmp_0 = game_BaseDialog_textAreaWidth__P4535_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 997; s.pc = 14; return s.tmp_0;
  case 14:
    r0 = s.retval;
    s.availableWidth___20448 = (r0);
    s.lastBrkId = 2461;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2461]) return breakpoint(s, 15, 2461, r0);
  case 15:
    s.tmp_0 = game_BaseDialog_textAreaHeight__P4536_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 998; s.pc = 16; return s.tmp_0;
  case 16:
    r0 = s.retval;
    s.availableHeight___20451 = (r0);
    s.lastBrkId = 2462;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2462]) return breakpoint(s, 17, 2462, r0);
  case 17:
    s.tmp_1 = r0 = s.availableWidth___20448;
    s.tmp_3 = if_charWidth_1_mk(s);
    r0 = s.arg0.fields["font"];
    s.tmp_3.arg0 = r0;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "charWidth");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["charWidth"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["charWidth"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 999; s.pc = 18; return s.tmp_3; }
    }
  case 18:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1 / s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim.Math_.floor(s.tmp_0);
    s.charactersPerRow___20454 = (r0);
    s.lastBrkId = 2463;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2463]) return breakpoint(s, 19, 2463, r0);
  case 19:
    s.tmp_1 = r0 = s.availableHeight___20451;
    s.tmp_3 = game_BaseDialog_rowHeight__P4534_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.callLocIdx = 1000; s.pc = 20; return s.tmp_3;
  case 20:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1 / s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim.Math_.floor(s.tmp_0);
    s.rowsOfCharacters___20462 = (r0);
    s.lastBrkId = 2464;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2464]) return breakpoint(s, 21, 2464, r0);
  case 21:
    r0 = s.arg0.fields["unit"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > 12);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 2465;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2465]) return breakpoint(s, 22, 2465, r0);
  case 22:
    s.tmp_2 = game_BaseDialog_drawBorder__P4529_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 1001; s.pc = 23; return s.tmp_2;
  case 23:
    r0 = s.retval;
  case 5:
  case 6:
    s.lastBrkId = 2466;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2466]) return breakpoint(s, 24, 2466, r0);
  case 24:
    r0 = s.arg0.fields["innerLeft"];
    s.tmp_2 = r0;
    r0 = (1 + s.tmp_2);
    s.tmp_1 = r0;
    s.tmp_4 = Math_min__P131_mk(s);
    r0 = s.arg0.fields["unit"];
    s.tmp_4.arg0 = r0;
    s.tmp_4.arg1 = 12;
    s.callLocIdx = 1002; s.pc = 25; return s.tmp_4;
  case 25:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_1 + s.tmp_3);
    s.tmp_0 = r0;
    s.tmp_7 = r0 = s.availableWidth___20448;
    s.tmp_9 = r0 = s.charactersPerRow___20454;
    s.tmp_11 = if_charWidth_1_mk(s);
    r0 = s.arg0.fields["font"];
    s.tmp_11.arg0 = r0;
    if (!s.tmp_11.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_11.arg0, "charWidth");
    } else {
      s.tmp_11.fn = s.tmp_11.arg0.vtable.iface["charWidth"];
      if (s.tmp_11.fn == null) { s.retval = s.tmp_11.arg0.fields["charWidth"]; }
      else if (!s.tmp_11.fn.isGetter) { s.retval = bind(s.tmp_11); }
     else { s.callLocIdx = 1003; s.pc = 26; return s.tmp_11; }
    }
  case 26:
    r0 = s.retval;
    s.tmp_10 = r0;
    r0 = (s.tmp_9 * s.tmp_10);
    s.tmp_8 = r0;
    r0 = (s.tmp_7 - s.tmp_8);
    s.tmp_6 = r0;
    r0 = (s.tmp_6 >> 1);
    s.tmp_5 = r0;
    r0 = (s.tmp_0 + s.tmp_5);
    s.textLeft___20473 = (r0);
    s.lastBrkId = 2467;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2467]) return breakpoint(s, 27, 2467, r0);
  case 27:
    r0 = s.arg0.fields["image"];
    s.tmp_3 = r0;
    r0 = pxsim_ImageMethods.height(s.tmp_3);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 >> 1);
    s.tmp_1 = r0;
    r0 = (1 + s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_Array__length(s.lines___20442);
    s.tmp_6 = r0;
    s.tmp_8 = game_BaseDialog_rowHeight__P4534_mk(s);
    s.tmp_8.arg0 = s.arg0;
    s.callLocIdx = 1004; s.pc = 28; return s.tmp_8;
  case 28:
    r0 = s.retval;
    s.tmp_7 = r0;
    r0 = (s.tmp_6 * s.tmp_7);
    s.tmp_5 = r0;
    r0 = (s.tmp_5 >> 1);
    s.tmp_4 = r0;
    r0 = (s.tmp_0 - s.tmp_4);
    s.textTop___20495 = (r0);
    s.lastBrkId = 2468;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2468]) return breakpoint(s, 29, 2468, r0);
  case 29:
    s.row___20510 = (0);
    s.lastBrkId = 2469;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2469]) return breakpoint(s, 30, 2469, r0);
  case 30:
  case 7:
    s.lastBrkId = 2470;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2470]) return breakpoint(s, 31, 2470, r0);
  case 31:
    s.tmp_1 = r0 = s.row___20510;
    r0 = pxsim_Array__length(s.lines___20442);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 8; continue; }
    s.lastBrkId = 2471;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2471]) return breakpoint(s, 32, 2471, r0);
  case 32:
    s.tmp_3 = helpers_imagePrint__P1785_mk(s);
    r0 = s.arg0.fields["image"];
    s.tmp_3.arg0 = r0;
    r0 = pxsim_Array__getAt(s.lines___20442, s.row___20510);
    s.tmp_3.arg1 = r0;
    s.tmp_3.arg2 = s.textLeft___20473;
    s.tmp_4 = r0 = s.textTop___20495;
    s.tmp_6 = r0 = s.row___20510;
    s.tmp_8 = game_BaseDialog_rowHeight__P4534_mk(s);
    s.tmp_8.arg0 = s.arg0;
    s.callLocIdx = 1005; s.pc = 34; return s.tmp_8;
  case 34:
    r0 = s.retval;
    s.tmp_7 = r0;
    r0 = (s.tmp_6 * s.tmp_7);
    s.tmp_5 = r0;
    r0 = (s.tmp_4 + s.tmp_5);
    s.tmp_3.arg3 = r0;
    r0 = s.arg0.fields["textColor"];
    s.tmp_3.arg4 = r0;
    r0 = s.arg0.fields["font"];
    s.tmp_3.arg5 = r0;
    s.tmp_3.arg6 = undefined;
    s.callLocIdx = 1006; s.pc = 33; return s.tmp_3;
  case 33:
    r0 = s.retval;
    s.lastBrkId = 2472;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2472]) return breakpoint(s, 35, 2472, r0);
  case 35:
    r0 = (s.row___20510 + 1);
    s.row___20510 = (r0);
    { step = 7; continue; }
  case 8:
  case 9:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_Dialog_drawTextCore__P2581.info = {"start":7266,"length":1045,"line":234,"column":8,"endLine":256,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"drawTextCore","argumentNames":["this"]}

function game_Dialog_drawTextCore__P2581_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Dialog_drawTextCore__P2581, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  lines___20442: undefined,
  availableWidth___20448: undefined,
  availableHeight___20451: undefined,
  charactersPerRow___20454: undefined,
  rowsOfCharacters___20462: undefined,
  textLeft___20473: undefined,
  textTop___20495: undefined,
  row___20510: undefined,
  arg0: undefined,
} }





function sprites_SpriteSet_toString__P2201(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_SpriteSet__C2190_VT)) failedCast(r0);
    s.lastBrkId = 1473;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1473]) return breakpoint(s, 1, 1473, r0);
  case 1:
    r0 = pxsim_String_.mkEmpty();
    s.tmp_1 = r0;
    s.tmp_4 = sprites_SpriteSet_length__P2193_mk(s);
    s.tmp_4.arg0 = s.arg0;
    s.callLocIdx = 489; s.pc = 2; return s.tmp_4;
  case 2:
    r0 = s.retval;
    s.tmp_3 = r0;
    if ((s.tmp_3) && (s.tmp_3).vtable) {
    setupResume(s, 3);
    pxsim_String__stringConv(s.tmp_3);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_3) + ""; }
  case 3:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_String__concat(s.tmp_1, s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_String__concat(s.tmp_0, " sprites");
    return leave(s, r0)
  default: oops()
} } }
sprites_SpriteSet_toString__P2201.info = {"start":2586,"length":66,"line":97,"column":8,"endLine":99,"endColumn":9,"fileName":"pxt_modules/game/spriteset.ts","functionName":"toString","argumentNames":["this"]}

function sprites_SpriteSet_toString__P2201_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_SpriteSet_toString__P2201, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }





function sprites_SpriteSet_length__P2193(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_SpriteSet__C2190_VT)) failedCast(r0);
    s.lastBrkId = 1459;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1459]) return breakpoint(s, 1, 1459, r0);
  case 1:
    r0 = s.arg0.fields["_sprites"];
    s.tmp_0 = r0;
    r0 = pxsim_Array__length(s.tmp_0);
    return leaveAccessor(s, r0)
  default: oops()
} } }
sprites_SpriteSet_length__P2193.info = {"start":625,"length":65,"line":26,"column":8,"endLine":28,"endColumn":9,"fileName":"pxt_modules/game/spriteset.ts","functionName":"length","argumentNames":["this"]}
sprites_SpriteSet_length__P2193.isGetter = true;

function sprites_SpriteSet_length__P2193_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_SpriteSet_length__P2193, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function game_SplashDialog_drawTextCore__P2592(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.scrollMax___20546 = undefined;
    s.left___20589 = undefined;
    s.ysub___20634 = undefined;
    s.left___20645 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_SplashDialog__C2582_VT)) failedCast(r0);
    s.lastBrkId = 2486;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2486]) return breakpoint(s, 15, 2486, r0);
  case 15:
    s.tmp_0 = Math_max__P130_mk(s);
    r0 = s.arg0.fields["maxOffset"];
    s.tmp_0.arg0 = r0;
    r0 = s.arg0.fields["maxSubOffset"];
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 1015; s.pc = 16; return s.tmp_0;
  case 16:
    r0 = s.retval;
    s.scrollMax___20546 = (r0);
    s.lastBrkId = 2487;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2487]) return breakpoint(s, 17, 2487, r0);
  case 17:
    r0 = s.arg0.fields["timer"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 2488;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2488]) return breakpoint(s, 18, 2488, r0);
  case 18:
    s.tmp_2 = r0 = s.arg0;
    r0 = s.tmp_2.fields["timer"];
    s.tmp_4 = r0;
    s.tmp_6 = control_EventContext_deltaTime__P398_mk(s);
    s.tmp_7 = game_eventContext__P2612_mk(s);
    s.callLocIdx = 1016; s.pc = 20; return s.tmp_7;
  case 20:
    r0 = s.retval;
    s.tmp_6.arg0 = r0;
    s.callLocIdx = 1017; s.pc = 19; return s.tmp_6;
  case 19:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = (s.tmp_4 - s.tmp_5);
    s.tmp_3 = r0;
    r0 = (s.tmp_2).fields["timer"] = (s.tmp_3);
    s.lastBrkId = 2489;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2489]) return breakpoint(s, 21, 2489, r0);
  case 21:
    r0 = s.arg0.fields["timer"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 <= 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2490;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2490]) return breakpoint(s, 22, 2490, r0);
  case 22:
    r0 = s.arg0.fields["offset"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 > 0);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2491;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2491]) return breakpoint(s, 23, 2491, r0);
  case 23:
    r0 = (s.arg0).fields["offset"] = (0);
    s.lastBrkId = 2492;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2492]) return breakpoint(s, 24, 2492, r0);
  case 24:
    r0 = (s.arg0).fields["timer"] = (2);
  case 1:
  case 2:
  case 3:
  case 4:
    { step = 8; continue; }
  case 5:
    s.lastBrkId = 2493;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2493]) return breakpoint(s, 25, 2493, r0);
  case 25:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.tmp_0.fields["offset"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["offset"] = (s.tmp_1);
    s.lastBrkId = 2494;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2494]) return breakpoint(s, 26, 2494, r0);
  case 26:
    r0 = s.arg0.fields["offset"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 >= s.scrollMax___20546);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 6; continue; }
    s.lastBrkId = 2495;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2495]) return breakpoint(s, 27, 2495, r0);
  case 27:
    r0 = (s.arg0).fields["offset"] = (s.scrollMax___20546);
    s.lastBrkId = 2496;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2496]) return breakpoint(s, 28, 2496, r0);
  case 28:
    r0 = (s.arg0).fields["timer"] = (2);
  case 6:
  case 7:
  case 8:
    s.lastBrkId = 2497;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2497]) return breakpoint(s, 29, 2497, r0);
  case 29:
    r0 = s.arg0.fields["maxOffset"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 2498;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2498]) return breakpoint(s, 30, 2498, r0);
  case 30:
    r0 = s.arg0.fields["image"];
    s.tmp_4 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_4);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 >> 1);
    s.tmp_2 = r0;
    r0 = s.arg0.fields["text"];
    s.tmp_8 = r0;
    r0 = pxsim_String_.length(s.tmp_8);
    s.tmp_7 = r0;
    s.tmp_10 = if_charWidth_1_mk(s);
    r0 = s.arg0.fields["font"];
    s.tmp_10.arg0 = r0;
    if (!s.tmp_10.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_10.arg0, "charWidth");
    } else {
      s.tmp_10.fn = s.tmp_10.arg0.vtable.iface["charWidth"];
      if (s.tmp_10.fn == null) { s.retval = s.tmp_10.arg0.fields["charWidth"]; }
      else if (!s.tmp_10.fn.isGetter) { s.retval = bind(s.tmp_10); }
     else { s.callLocIdx = 1018; s.pc = 31; return s.tmp_10; }
    }
  case 31:
    r0 = s.retval;
    s.tmp_9 = r0;
    r0 = (s.tmp_7 * s.tmp_9);
    s.tmp_6 = r0;
    r0 = (s.tmp_6 >> 1);
    s.tmp_5 = r0;
    r0 = (s.tmp_2 - s.tmp_5);
    s.left___20589 = (r0);
    s.lastBrkId = 2499;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2499]) return breakpoint(s, 32, 2499, r0);
  case 32:
    s.tmp_0 = helpers_imagePrint__P1785_mk(s);
    r0 = s.arg0.fields["image"];
    s.tmp_0.arg0 = r0;
    r0 = s.arg0.fields["text"];
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = s.left___20589;
    s.tmp_0.arg3 = 10;
    r0 = s.arg0.fields["textColor"];
    s.tmp_0.arg4 = r0;
    r0 = s.arg0.fields["font"];
    s.tmp_0.arg5 = r0;
    s.tmp_0.arg6 = undefined;
    s.callLocIdx = 1019; s.pc = 33; return s.tmp_0;
  case 33:
    r0 = s.retval;
    { step = 10; continue; }
  case 9:
    s.lastBrkId = 2500;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2500]) return breakpoint(s, 34, 2500, r0);
  case 34:
    s.tmp_0 = helpers_imagePrint__P1785_mk(s);
    r0 = s.arg0.fields["image"];
    s.tmp_0.arg0 = r0;
    r0 = s.arg0.fields["text"];
    s.tmp_0.arg1 = r0;
    r0 = s.arg0.fields["unit"];
    s.tmp_1 = r0;
    r0 = s.arg0.fields["offset"];
    s.tmp_2 = r0;
    r0 = (s.tmp_1 - s.tmp_2);
    s.tmp_0.arg2 = r0;
    s.tmp_0.arg3 = 10;
    r0 = s.arg0.fields["textColor"];
    s.tmp_0.arg4 = r0;
    r0 = s.arg0.fields["font"];
    s.tmp_0.arg5 = r0;
    s.tmp_0.arg6 = undefined;
    s.callLocIdx = 1020; s.pc = 35; return s.tmp_0;
  case 35:
    r0 = s.retval;
  case 10:
    s.lastBrkId = 2501;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2501]) return breakpoint(s, 36, 2501, r0);
  case 36:
    r0 = s.arg0.fields["subtext"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 13; continue; }
    s.lastBrkId = 2502;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2502]) return breakpoint(s, 37, 2502, r0);
  case 37:
    s.tmp_3 = if_charHeight_1_mk(s);
    r0 = s.arg0.fields["font"];
    s.tmp_3.arg0 = r0;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "charHeight");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["charHeight"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["charHeight"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1021; s.pc = 38; return s.tmp_3; }
    }
  case 38:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (10 + s.tmp_2);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 + 2);
    s.ysub___20634 = (r0);
    s.lastBrkId = 2503;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2503]) return breakpoint(s, 39, 2503, r0);
  case 39:
    r0 = s.arg0.fields["maxSubOffset"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 11; continue; }
    s.lastBrkId = 2504;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2504]) return breakpoint(s, 40, 2504, r0);
  case 40:
    r0 = s.arg0.fields["image"];
    s.tmp_4 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_4);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 >> 1);
    s.tmp_2 = r0;
    r0 = s.arg0.fields["subtext"];
    s.tmp_8 = r0;
    r0 = pxsim_String_.length(s.tmp_8);
    s.tmp_7 = r0;
    s.tmp_10 = if_charWidth_1_mk(s);
    r0 = s.arg0.fields["font"];
    s.tmp_10.arg0 = r0;
    if (!s.tmp_10.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_10.arg0, "charWidth");
    } else {
      s.tmp_10.fn = s.tmp_10.arg0.vtable.iface["charWidth"];
      if (s.tmp_10.fn == null) { s.retval = s.tmp_10.arg0.fields["charWidth"]; }
      else if (!s.tmp_10.fn.isGetter) { s.retval = bind(s.tmp_10); }
     else { s.callLocIdx = 1022; s.pc = 41; return s.tmp_10; }
    }
  case 41:
    r0 = s.retval;
    s.tmp_9 = r0;
    r0 = (s.tmp_7 * s.tmp_9);
    s.tmp_6 = r0;
    r0 = (s.tmp_6 >> 1);
    s.tmp_5 = r0;
    r0 = (s.tmp_2 - s.tmp_5);
    s.left___20645 = (r0);
    s.lastBrkId = 2505;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2505]) return breakpoint(s, 42, 2505, r0);
  case 42:
    s.tmp_0 = helpers_imagePrint__P1785_mk(s);
    r0 = s.arg0.fields["image"];
    s.tmp_0.arg0 = r0;
    r0 = s.arg0.fields["subtext"];
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = s.left___20645;
    s.tmp_0.arg3 = s.ysub___20634;
    r0 = s.arg0.fields["textColor"];
    s.tmp_0.arg4 = r0;
    r0 = s.arg0.fields["font"];
    s.tmp_0.arg5 = r0;
    s.tmp_0.arg6 = undefined;
    s.callLocIdx = 1023; s.pc = 43; return s.tmp_0;
  case 43:
    r0 = s.retval;
    { step = 12; continue; }
  case 11:
    s.lastBrkId = 2506;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2506]) return breakpoint(s, 44, 2506, r0);
  case 44:
    s.tmp_0 = helpers_imagePrint__P1785_mk(s);
    r0 = s.arg0.fields["image"];
    s.tmp_0.arg0 = r0;
    r0 = s.arg0.fields["subtext"];
    s.tmp_0.arg1 = r0;
    r0 = s.arg0.fields["unit"];
    s.tmp_1 = r0;
    s.tmp_3 = Math_min__P131_mk(s);
    r0 = s.arg0.fields["offset"];
    s.tmp_3.arg0 = r0;
    r0 = s.arg0.fields["maxSubOffset"];
    s.tmp_3.arg1 = r0;
    s.callLocIdx = 1024; s.pc = 46; return s.tmp_3;
  case 46:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1 - s.tmp_2);
    s.tmp_0.arg2 = r0;
    s.tmp_0.arg3 = s.ysub___20634;
    r0 = s.arg0.fields["textColor"];
    s.tmp_0.arg4 = r0;
    r0 = s.arg0.fields["font"];
    s.tmp_0.arg5 = r0;
    s.tmp_0.arg6 = undefined;
    s.callLocIdx = 1025; s.pc = 45; return s.tmp_0;
  case 45:
    r0 = s.retval;
  case 12:
  case 13:
  case 14:
    s.lastBrkId = 2507;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2507]) return breakpoint(s, 47, 2507, r0);
  case 47:
    s.tmp_0 = game_BaseDialog_drawBorder__P4529_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1026; s.pc = 48; return s.tmp_0;
  case 48:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_SplashDialog_drawTextCore__P2592.info = {"start":9357,"length":1616,"line":293,"column":8,"endLine":331,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"drawTextCore","argumentNames":["this"]}

function game_SplashDialog_drawTextCore__P2592_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_SplashDialog_drawTextCore__P2592, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  scrollMax___20546: undefined,
  left___20589: undefined,
  ysub___20634: undefined,
  left___20645: undefined,
  arg0: undefined,
} }





function game_BaseDialog_setText__P2568(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_BaseDialog__C2554_VT)) failedCast(r0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
game_BaseDialog_setText__P2568.info = {"start":1701,"length":77,"line":67,"column":8,"endLine":69,"endColumn":9,"fileName":"pxt_modules/game/textDialogs.ts","functionName":"setText","argumentNames":["this","rawString"]}

function game_BaseDialog_setText__P2568_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_BaseDialog_setText__P2568, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
} }





function sprites_SpriteMap_toString__P2181(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_SpriteMap__C2173_VT)) failedCast(r0);
    s.lastBrkId = 1457;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1457]) return breakpoint(s, 1, 1457, r0);
  case 1:
    r0 = pxsim_String_.mkEmpty();
    s.tmp_3 = r0;
    r0 = s.arg0.fields["buckets"];
    s.tmp_6 = r0;
    r0 = pxsim_Array__length(s.tmp_6);
    s.tmp_5 = r0;
    if ((s.tmp_5) && (s.tmp_5).vtable) {
    setupResume(s, 2);
    pxsim_String__stringConv(s.tmp_5);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_5) + ""; }
  case 2:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_String__concat(s.tmp_3, s.tmp_4);
    s.tmp_2 = r0;
    r0 = pxsim_String__concat(s.tmp_2, " buckets, ");
    s.tmp_1 = r0;
    s.tmp_10 = helpers_arrayFilter__P110_mk(s);
    r0 = s.arg0.fields["buckets"];
    s.tmp_10.arg0 = r0;
    s.tmp_10.arg1 = length_inline__P20708;
    s.callLocIdx = 485; s.pc = 3; return s.tmp_10;
  case 3:
    r0 = s.retval;
    s.tmp_9 = r0;
    r0 = pxsim_Array__length(s.tmp_9);
    s.tmp_8 = r0;
    if ((s.tmp_8) && (s.tmp_8).vtable) {
    setupResume(s, 4);
    pxsim_String__stringConv(s.tmp_8);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_8) + ""; }
  case 4:
    r0 = s.retval;
    s.tmp_7 = r0;
    r0 = pxsim_String__concat(s.tmp_1, s.tmp_7);
    s.tmp_0 = r0;
    r0 = pxsim_String__concat(s.tmp_0, " filled");
    return leave(s, r0)
  default: oops()
} } }
sprites_SpriteMap_toString__P2181.info = {"start":4109,"length":123,"line":112,"column":8,"endLine":114,"endColumn":9,"fileName":"pxt_modules/game/spritemap.ts","functionName":"toString","argumentNames":["this"]}

function sprites_SpriteMap_toString__P2181_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_SpriteMap_toString__P2181, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  arg0: undefined,
} }





function length_inline__P20708(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = pxsim_numops_toBoolDecr(s.arg0);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_0);
    return leave(s, r0)
  default: oops()
} } }
length_inline__P20708.info = {"start":4196,"length":8,"line":113,"column":74,"endLine":113,"endColumn":82,"fileName":"pxt_modules/game/spritemap.ts","functionName":"inline","argumentNames":["b"]}

function length_inline__P20708_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: length_inline__P20708, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function ArcadePhysicsEngine_moveSprite__P2268(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.tm___20740 = undefined;
    s.maxDist___20748 = undefined;
    s.ms___20768 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, ArcadePhysicsEngine__C2254_VT)) failedCast(r0);
    s.lastBrkId = 1729;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1729]) return breakpoint(s, 13, 1729, r0);
  case 13:
    r0 = s.arg1.fields["_x"];
    s.tmp_0 = r0;
    r0 = (s.arg1).fields["_lastX"] = (s.tmp_0);
    s.lastBrkId = 1730;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1730]) return breakpoint(s, 14, 1730, r0);
  case 14:
    r0 = s.arg1.fields["_y"];
    s.tmp_0 = r0;
    r0 = (s.arg1).fields["_lastY"] = (s.tmp_0);
    s.lastBrkId = 1731;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1731]) return breakpoint(s, 15, 1731, r0);
  case 15:
    s.tmp_0 = r0 = s.arg1;
    s.tmp_2 = Fx_add__P157_mk(s);
    r0 = s.arg1.fields["_x"];
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = s.arg2;
    s.callLocIdx = 690; s.pc = 16; return s.tmp_2;
  case 16:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_x"] = (s.tmp_1);
    s.lastBrkId = 1732;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1732]) return breakpoint(s, 17, 1732, r0);
  case 17:
    s.tmp_0 = r0 = s.arg1;
    s.tmp_2 = Fx_add__P157_mk(s);
    r0 = s.arg1.fields["_y"];
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = s.arg3;
    s.callLocIdx = 691; s.pc = 18; return s.tmp_2;
  case 18:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_y"] = (s.tmp_1);
    s.lastBrkId = 1733;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1733]) return breakpoint(s, 19, 1733, r0);
  case 19:
    s.tmp_0 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 692; s.pc = 20; return s.tmp_0;
  case 20:
    r0 = s.retval;
    r0 = r0.fields["tileMap"];
    s.tm___20740 = (r0);
    s.lastBrkId = 1734;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1734]) return breakpoint(s, 21, 1734, r0);
  case 21:
    s.tmp_0 = r0 = s.tm___20740;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    s.tmp_1 = tiles_TileMap_enabled__P2411_mk(s);
    s.tmp_1.arg0 = s.tm___20740;
    s.callLocIdx = 693; s.pc = 22; return s.tmp_1;
  case 22:
    r0 = s.retval;
  case 2:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 11; continue; }
    s.lastBrkId = 1735;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1735]) return breakpoint(s, 23, 1735, r0);
  case 23:
    s.tmp_3 = Fx_toInt__P170_mk(s);
    r0 = s.arg0.fields["maxSingleStep"];
    s.tmp_3.arg0 = r0;
    s.callLocIdx = 694; s.pc = 24; return s.tmp_3;
  case 24:
    r0 = s.retval;
    s.maxDist___20748 = (r0);
    s.lastBrkId = 1736;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1736]) return breakpoint(s, 25, 1736, r0);
  case 25:
    s.tmp_2 = Math_abs__P128_mk(s);
    s.tmp_3 = Fx_toInt__P170_mk(s);
    s.tmp_3.arg0 = s.arg2;
    s.callLocIdx = 695; s.pc = 27; return s.tmp_3;
  case 27:
    r0 = s.retval;
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 696; s.pc = 26; return s.tmp_2;
  case 26:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 <= s.maxDist___20748);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 3; continue; }
    r0 = s.tmp_0;
    { step = 4; continue; }
  case 3:
    s.tmp_5 = Math_abs__P128_mk(s);
    s.tmp_6 = Fx_toInt__P170_mk(s);
    s.tmp_6.arg0 = s.arg3;
    s.callLocIdx = 697; s.pc = 29; return s.tmp_6;
  case 29:
    r0 = s.retval;
    s.tmp_5.arg0 = r0;
    s.callLocIdx = 698; s.pc = 28; return s.tmp_5;
  case 28:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = (s.tmp_4 <= s.maxDist___20748);
  case 4:
    // jmp value (already in r0)
    s.tmp_7 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_7);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 1737;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1737]) return breakpoint(s, 30, 1737, r0);
  case 30:
    r0 = pxsim_pxtcore_mkClassInstance(MovingSprite__C2252_VT);
    s.tmp_8 = r0;
    s.tmp_9 = MovingSprite_constructor__P2253_mk(s);
    s.tmp_9.arg0 = s.tmp_8;
    s.tmp_9.arg1 = s.arg1;
    r0 = s.arg1.fields["_vx"];
    s.tmp_9.arg2 = r0;
    r0 = s.arg1.fields["_vy"];
    s.tmp_9.arg3 = r0;
    s.tmp_9.arg4 = s.arg2;
    s.tmp_9.arg5 = s.arg3;
    s.tmp_9.arg6 = s.arg2;
    s.tmp_9.arg7 = s.arg3;
    s.callLocIdx = 699; s.pc = 31; return s.tmp_9;
  case 31:
    r0 = s.retval;
    s.ms___20768 = (s.tmp_8);
    s.lastBrkId = 1738;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1738]) return breakpoint(s, 32, 1738, r0);
  case 32:
    s.tmp_0 = ArcadePhysicsEngine_tilemapCollisions__P4430_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.ms___20768;
    s.tmp_0.arg2 = s.tm___20740;
    s.callLocIdx = 700; s.pc = 33; return s.tmp_0;
  case 33:
    r0 = s.retval;
    { step = 10; continue; }
  case 5:
    s.lastBrkId = 1739;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1739]) return breakpoint(s, 34, 1739, r0);
  case 34:
    s.tmp_1 = tiles_TileMap_isOnWall__P2422_mk(s);
    s.tmp_1.arg0 = s.tm___20740;
    s.tmp_1.arg1 = s.arg1;
    s.callLocIdx = 701; s.pc = 35; return s.tmp_1;
  case 35:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 6; continue; }
    r0 = s.tmp_0;
    { step = 7; continue; }
  case 6:
    s.tmp_4 = ArcadePhysicsEngine_canResolveClipping__P4432_mk(s);
    s.tmp_4.arg0 = s.arg0;
    s.tmp_4.arg1 = s.arg1;
    s.tmp_4.arg2 = s.tm___20740;
    s.callLocIdx = 702; s.pc = 36; return s.tmp_4;
  case 36:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
  case 7:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_5);
    if (!r0) { step = 8; continue; }
    s.lastBrkId = 1740;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1740]) return breakpoint(s, 37, 1740, r0);
  case 37:
    s.tmp_6 = r0 = s.arg1;
    r0 = s.tmp_6.fields["flags"];
    s.tmp_8 = r0;
    r0 = (s.tmp_8 | 256);
    s.tmp_7 = r0;
    r0 = (s.tmp_6).fields["flags"] = (s.tmp_7);
    { step = 9; continue; }
  case 8:
    s.lastBrkId = 1741;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1741]) return breakpoint(s, 38, 1741, r0);
  case 38:
    s.tmp_0 = r0 = s.arg1;
    r0 = s.tmp_0.fields["flags"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 & -257);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["flags"] = (s.tmp_1);
  case 9:
  case 10:
  case 11:
  case 12:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
ArcadePhysicsEngine_moveSprite__P2268.info = {"start":22603,"length":1208,"line":623,"column":4,"endLine":654,"endColumn":5,"fileName":"pxt_modules/game/physics.ts","functionName":"moveSprite","argumentNames":["this","s","dx","dy"]}

function ArcadePhysicsEngine_moveSprite__P2268_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ArcadePhysicsEngine_moveSprite__P2268, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tm___20740: undefined,
  maxDist___20748: undefined,
  ms___20768: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function ArcadePhysicsEngine_canResolveClipping__P4432(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.hbox___20813 = undefined;
    s.sz___20816 = undefined;
    s.maxMove___20821 = undefined;
    s.origY___20823 = undefined;
    s.origX___20826 = undefined;
    s.l___20829 = undefined;
    s.r___20834 = undefined;
    s.t___20839 = undefined;
    s.b___20844 = undefined;
    s.offset___20849 = undefined;
    s.offset___20874 = undefined;
    s.offset___20905 = undefined;
    s.offset___20930 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, ArcadePhysicsEngine__C2254_VT)) failedCast(r0);
    s.lastBrkId = 1742;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1742]) return breakpoint(s, 20, 1742, r0);
  case 20:
    s.tmp_3 = Sprite_isStatic__P2134_mk(s);
    s.tmp_3.arg0 = s.arg1;
    s.callLocIdx = 703; s.pc = 21; return s.tmp_3;
  case 21:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1743;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1743]) return breakpoint(s, 22, 1743, r0);
  case 22:
    s.tmp_4 = Sprite_setHitbox__P2133_mk(s);
    s.tmp_4.arg0 = s.arg1;
    s.callLocIdx = 704; s.pc = 23; return s.tmp_4;
  case 23:
    r0 = s.retval;
  case 1:
  case 2:
    s.lastBrkId = 1744;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1744]) return breakpoint(s, 24, 1744, r0);
  case 24:
    r0 = s.arg1.fields["_hitbox"];
    s.hbox___20813 = (r0);
    s.lastBrkId = 1745;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1745]) return breakpoint(s, 25, 1745, r0);
  case 25:
    s.tmp_1 = tiles_TileMap_scale__P2403_mk(s);
    s.tmp_1.arg0 = s.arg2;
    s.callLocIdx = 705; s.pc = 26; return s.tmp_1;
  case 26:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = (1 << s.tmp_0);
    s.sz___20816 = (r0);
    s.lastBrkId = 1746;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1746]) return breakpoint(s, 27, 1746, r0);
  case 27:
    s.tmp_0 = ArcadePhysicsEngine_maxStep__P2260_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 706; s.pc = 28; return s.tmp_0;
  case 28:
    r0 = s.retval;
    s.maxMove___20821 = (r0);
    s.lastBrkId = 1747;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1747]) return breakpoint(s, 29, 1747, r0);
  case 29:
    r0 = s.arg1.fields["_y"];
    s.origY___20823 = (r0);
    s.lastBrkId = 1748;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1748]) return breakpoint(s, 30, 1748, r0);
  case 30:
    r0 = s.arg1.fields["_x"];
    s.origX___20826 = (r0);
    s.lastBrkId = 1749;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1749]) return breakpoint(s, 31, 1749, r0);
  case 31:
    s.tmp_0 = Fx_toInt__P170_mk(s);
    s.tmp_1 = game_Hitbox_left__P1997_mk(s);
    s.tmp_1.arg0 = s.hbox___20813;
    s.callLocIdx = 707; s.pc = 33; return s.tmp_1;
  case 33:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 708; s.pc = 32; return s.tmp_0;
  case 32:
    r0 = s.retval;
    s.l___20829 = (r0);
    s.lastBrkId = 1750;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1750]) return breakpoint(s, 34, 1750, r0);
  case 34:
    s.tmp_0 = Fx_toInt__P170_mk(s);
    s.tmp_1 = game_Hitbox_right__P1999_mk(s);
    s.tmp_1.arg0 = s.hbox___20813;
    s.callLocIdx = 709; s.pc = 36; return s.tmp_1;
  case 36:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 710; s.pc = 35; return s.tmp_0;
  case 35:
    r0 = s.retval;
    s.r___20834 = (r0);
    s.lastBrkId = 1751;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1751]) return breakpoint(s, 37, 1751, r0);
  case 37:
    s.tmp_0 = Fx_toInt__P170_mk(s);
    s.tmp_1 = game_Hitbox_top__P1998_mk(s);
    s.tmp_1.arg0 = s.hbox___20813;
    s.callLocIdx = 711; s.pc = 39; return s.tmp_1;
  case 39:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 712; s.pc = 38; return s.tmp_0;
  case 38:
    r0 = s.retval;
    s.t___20839 = (r0);
    s.lastBrkId = 1752;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1752]) return breakpoint(s, 40, 1752, r0);
  case 40:
    s.tmp_0 = Fx_toInt__P170_mk(s);
    s.tmp_1 = game_Hitbox_bottom__P2000_mk(s);
    s.tmp_1.arg0 = s.hbox___20813;
    s.callLocIdx = 713; s.pc = 42; return s.tmp_1;
  case 42:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 714; s.pc = 41; return s.tmp_0;
  case 41:
    r0 = s.retval;
    s.b___20844 = (r0);
    s.lastBrkId = 1753;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1753]) return breakpoint(s, 43, 1753, r0);
  case 43:
    r0 = (s.b___20844 + 1);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 % s.sz___20816);
    s.offset___20849 = (r0);
    s.lastBrkId = 1754;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1754]) return breakpoint(s, 44, 1754, r0);
  case 44:
    r0 = (s.offset___20849 <= s.maxMove___20821);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 1755;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1755]) return breakpoint(s, 45, 1755, r0);
  case 45:
    s.tmp_1 = r0 = s.arg1;
    s.tmp_3 = Fx_sub__P159_mk(s);
    r0 = s.arg1.fields["_y"];
    s.tmp_3.arg0 = r0;
    s.tmp_4 = Fx8__P149_mk(s);
    s.tmp_4.arg0 = s.offset___20849;
    s.callLocIdx = 715; s.pc = 47; return s.tmp_4;
  case 47:
    r0 = s.retval;
    s.tmp_3.arg1 = r0;
    s.callLocIdx = 716; s.pc = 46; return s.tmp_3;
  case 46:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1).fields["_y"] = (s.tmp_2);
    s.lastBrkId = 1756;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1756]) return breakpoint(s, 48, 1756, r0);
  case 48:
    s.tmp_3 = tiles_TileMap_isOnWall__P2422_mk(s);
    s.tmp_3.arg0 = s.arg2;
    s.tmp_3.arg1 = s.arg1;
    s.callLocIdx = 717; s.pc = 49; return s.tmp_3;
  case 49:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1757;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1757]) return breakpoint(s, 50, 1757, r0);
  case 50:
    r0 = true;
    { step = 19; continue; }
    { step = 4; continue; }
  case 3:
    s.lastBrkId = 1758;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1758]) return breakpoint(s, 51, 1758, r0);
  case 51:
    r0 = (s.arg1).fields["_y"] = (s.origY___20823);
  case 4:
  case 5:
  case 6:
    s.lastBrkId = 1759;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1759]) return breakpoint(s, 52, 1759, r0);
  case 52:
    r0 = (s.t___20839 / s.sz___20816);
    s.tmp_3 = r0;
    r0 = pxsim.Math_.floor(s.tmp_3);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 * s.sz___20816);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 - s.t___20839);
    s.offset___20874 = (r0);
    s.lastBrkId = 1760;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1760]) return breakpoint(s, 53, 1760, r0);
  case 53:
    r0 = (s.offset___20874 <= s.maxMove___20821);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 1761;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1761]) return breakpoint(s, 54, 1761, r0);
  case 54:
    s.tmp_1 = r0 = s.arg1;
    s.tmp_3 = Fx_add__P157_mk(s);
    r0 = s.arg1.fields["_y"];
    s.tmp_3.arg0 = r0;
    s.tmp_4 = Fx8__P149_mk(s);
    s.tmp_4.arg0 = s.offset___20874;
    s.callLocIdx = 718; s.pc = 56; return s.tmp_4;
  case 56:
    r0 = s.retval;
    s.tmp_3.arg1 = r0;
    s.callLocIdx = 719; s.pc = 55; return s.tmp_3;
  case 55:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1).fields["_y"] = (s.tmp_2);
    s.lastBrkId = 1762;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1762]) return breakpoint(s, 57, 1762, r0);
  case 57:
    s.tmp_3 = tiles_TileMap_isOnWall__P2422_mk(s);
    s.tmp_3.arg0 = s.arg2;
    s.tmp_3.arg1 = s.arg1;
    s.callLocIdx = 720; s.pc = 58; return s.tmp_3;
  case 58:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 1763;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1763]) return breakpoint(s, 59, 1763, r0);
  case 59:
    r0 = true;
    { step = 19; continue; }
    { step = 8; continue; }
  case 7:
    s.lastBrkId = 1764;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1764]) return breakpoint(s, 60, 1764, r0);
  case 60:
    r0 = (s.arg1).fields["_y"] = (s.origY___20823);
  case 8:
  case 9:
  case 10:
    s.lastBrkId = 1765;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1765]) return breakpoint(s, 61, 1765, r0);
  case 61:
    r0 = (s.r___20834 + 1);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 % s.sz___20816);
    s.offset___20905 = (r0);
    s.lastBrkId = 1766;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1766]) return breakpoint(s, 62, 1766, r0);
  case 62:
    r0 = (s.offset___20905 <= s.maxMove___20821);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 13; continue; }
    s.lastBrkId = 1767;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1767]) return breakpoint(s, 63, 1767, r0);
  case 63:
    s.tmp_1 = r0 = s.arg1;
    s.tmp_3 = Fx_sub__P159_mk(s);
    r0 = s.arg1.fields["_x"];
    s.tmp_3.arg0 = r0;
    s.tmp_4 = Fx8__P149_mk(s);
    s.tmp_4.arg0 = s.offset___20905;
    s.callLocIdx = 721; s.pc = 65; return s.tmp_4;
  case 65:
    r0 = s.retval;
    s.tmp_3.arg1 = r0;
    s.callLocIdx = 722; s.pc = 64; return s.tmp_3;
  case 64:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1).fields["_x"] = (s.tmp_2);
    s.lastBrkId = 1768;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1768]) return breakpoint(s, 66, 1768, r0);
  case 66:
    s.tmp_3 = tiles_TileMap_isOnWall__P2422_mk(s);
    s.tmp_3.arg0 = s.arg2;
    s.tmp_3.arg1 = s.arg1;
    s.callLocIdx = 723; s.pc = 67; return s.tmp_3;
  case 67:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 11; continue; }
    s.lastBrkId = 1769;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1769]) return breakpoint(s, 68, 1769, r0);
  case 68:
    r0 = true;
    { step = 19; continue; }
    { step = 12; continue; }
  case 11:
    s.lastBrkId = 1770;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1770]) return breakpoint(s, 69, 1770, r0);
  case 69:
    r0 = (s.arg1).fields["_x"] = (s.origX___20826);
  case 12:
  case 13:
  case 14:
    s.lastBrkId = 1771;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1771]) return breakpoint(s, 70, 1771, r0);
  case 70:
    r0 = (s.l___20829 / s.sz___20816);
    s.tmp_3 = r0;
    r0 = pxsim.Math_.floor(s.tmp_3);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 * s.sz___20816);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 - s.l___20829);
    s.offset___20930 = (r0);
    s.lastBrkId = 1772;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1772]) return breakpoint(s, 71, 1772, r0);
  case 71:
    r0 = (s.offset___20930 <= s.maxMove___20821);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 17; continue; }
    s.lastBrkId = 1773;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1773]) return breakpoint(s, 72, 1773, r0);
  case 72:
    s.tmp_1 = r0 = s.arg1;
    s.tmp_3 = Fx_add__P157_mk(s);
    r0 = s.arg1.fields["_x"];
    s.tmp_3.arg0 = r0;
    s.tmp_4 = Fx8__P149_mk(s);
    s.tmp_4.arg0 = s.offset___20930;
    s.callLocIdx = 724; s.pc = 74; return s.tmp_4;
  case 74:
    r0 = s.retval;
    s.tmp_3.arg1 = r0;
    s.callLocIdx = 725; s.pc = 73; return s.tmp_3;
  case 73:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1).fields["_x"] = (s.tmp_2);
    s.lastBrkId = 1774;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1774]) return breakpoint(s, 75, 1774, r0);
  case 75:
    s.tmp_3 = tiles_TileMap_isOnWall__P2422_mk(s);
    s.tmp_3.arg0 = s.arg2;
    s.tmp_3.arg1 = s.arg1;
    s.callLocIdx = 726; s.pc = 76; return s.tmp_3;
  case 76:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 15; continue; }
    s.lastBrkId = 1775;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1775]) return breakpoint(s, 77, 1775, r0);
  case 77:
    r0 = true;
    { step = 19; continue; }
    { step = 16; continue; }
  case 15:
    s.lastBrkId = 1776;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1776]) return breakpoint(s, 78, 1776, r0);
  case 78:
    r0 = (s.arg1).fields["_x"] = (s.origX___20826);
  case 16:
  case 17:
  case 18:
    s.lastBrkId = 1777;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1777]) return breakpoint(s, 79, 1777, r0);
  case 79:
    r0 = false;
  case 19:
    return leave(s, r0)
  default: oops()
} } }
ArcadePhysicsEngine_canResolveClipping__P4432.info = {"start":23907,"length":2135,"line":657,"column":4,"endLine":728,"endColumn":5,"fileName":"pxt_modules/game/physics.ts","functionName":"canResolveClipping","argumentNames":["this","s","tm"]}

function ArcadePhysicsEngine_canResolveClipping__P4432_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ArcadePhysicsEngine_canResolveClipping__P4432, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  hbox___20813: undefined,
  sz___20816: undefined,
  maxMove___20821: undefined,
  origY___20823: undefined,
  origX___20826: undefined,
  l___20829: undefined,
  r___20834: undefined,
  t___20839: undefined,
  b___20844: undefined,
  offset___20849: undefined,
  offset___20874: undefined,
  offset___20905: undefined,
  offset___20930: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function Sprite_isStatic__P2134(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1256;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1256]) return breakpoint(s, 1, 1256, r0);
  case 1:
    r0 = s.arg0.fields["_image"];
    s.tmp_0 = r0;
    r0 = pxsim_ImageMethods.isStatic(s.tmp_0);
    return leave(s, r0)
  default: oops()
} } }
Sprite_isStatic__P2134.info = {"start":8561,"length":57,"line":305,"column":4,"endLine":307,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"isStatic","argumentNames":["this"]}

function Sprite_isStatic__P2134_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_isStatic__P2134, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function game_Hitbox_bottom__P2000(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Hitbox__C1988_VT)) failedCast(r0);
    s.lastBrkId = 1157;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1157]) return breakpoint(s, 1, 1157, r0);
  case 1:
    s.tmp_0 = Fx_sub__P159_mk(s);
    s.tmp_1 = Fx_add__P157_mk(s);
    r0 = s.arg0.fields["height"];
    s.tmp_1.arg0 = r0;
    s.tmp_2 = game_Hitbox_top__P1998_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 256; s.pc = 4; return s.tmp_2;
  case 4:
    r0 = s.retval;
    s.tmp_1.arg1 = r0;
    s.callLocIdx = 257; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = 256;
    s.callLocIdx = 258; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leaveAccessor(s, r0)
  default: oops()
} } }
game_Hitbox_bottom__P2000.info = {"start":868,"length":139,"line":35,"column":8,"endLine":40,"endColumn":9,"fileName":"pxt_modules/game/hitbox.ts","functionName":"bottom","argumentNames":["this"]}
game_Hitbox_bottom__P2000.isGetter = true;

function game_Hitbox_bottom__P2000_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Hitbox_bottom__P2000, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function game_Hitbox_right__P1999(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Hitbox__C1988_VT)) failedCast(r0);
    s.lastBrkId = 1156;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1156]) return breakpoint(s, 1, 1156, r0);
  case 1:
    s.tmp_0 = Fx_sub__P159_mk(s);
    s.tmp_1 = Fx_add__P157_mk(s);
    r0 = s.arg0.fields["width"];
    s.tmp_1.arg0 = r0;
    s.tmp_2 = game_Hitbox_left__P1997_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 253; s.pc = 4; return s.tmp_2;
  case 4:
    r0 = s.retval;
    s.tmp_1.arg1 = r0;
    s.callLocIdx = 254; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = 256;
    s.callLocIdx = 255; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leaveAccessor(s, r0)
  default: oops()
} } }
game_Hitbox_right__P1999.info = {"start":720,"length":138,"line":28,"column":8,"endLine":33,"endColumn":9,"fileName":"pxt_modules/game/hitbox.ts","functionName":"right","argumentNames":["this"]}
game_Hitbox_right__P1999.isGetter = true;

function game_Hitbox_right__P1999_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Hitbox_right__P1999, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function game_Hitbox_top__P1998(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Hitbox__C1988_VT)) failedCast(r0);
    s.lastBrkId = 1155;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1155]) return breakpoint(s, 1, 1155, r0);
  case 1:
    s.tmp_0 = Fx_add__P157_mk(s);
    r0 = s.arg0.fields["oy"];
    s.tmp_0.arg0 = r0;
    r0 = s.arg0.fields["parent"];
    r0 = r0.fields["_y"];
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 252; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leaveAccessor(s, r0)
  default: oops()
} } }
game_Hitbox_top__P1998.info = {"start":637,"length":73,"line":24,"column":8,"endLine":26,"endColumn":9,"fileName":"pxt_modules/game/hitbox.ts","functionName":"top","argumentNames":["this"]}
game_Hitbox_top__P1998.isGetter = true;

function game_Hitbox_top__P1998_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Hitbox_top__P1998, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function game_Hitbox_left__P1997(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, game_Hitbox__C1988_VT)) failedCast(r0);
    s.lastBrkId = 1154;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1154]) return breakpoint(s, 1, 1154, r0);
  case 1:
    s.tmp_0 = Fx_add__P157_mk(s);
    r0 = s.arg0.fields["ox"];
    s.tmp_0.arg0 = r0;
    r0 = s.arg0.fields["parent"];
    r0 = r0.fields["_x"];
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 251; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leaveAccessor(s, r0)
  default: oops()
} } }
game_Hitbox_left__P1997.info = {"start":553,"length":74,"line":20,"column":8,"endLine":22,"endColumn":9,"fileName":"pxt_modules/game/hitbox.ts","functionName":"left","argumentNames":["this"]}
game_Hitbox_left__P1997.isGetter = true;

function game_Hitbox_left__P1997_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: game_Hitbox_left__P1997, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function ArcadePhysicsEngine_tilemapCollisions__P4430(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.s___21098 = undefined;
    s.hbox___21123 = undefined;
    s.tileScale___21126 = undefined;
    s.tileSize___21129 = undefined;
    s.xDiff___21133 = undefined;
    s.yDiff___21140 = undefined;
    s.right___21156 = undefined;
    s.x0___21160 = undefined;
    s.collidedTiles___21175 = undefined;
    s.y___21177 = undefined;
    s.y0___21191 = undefined;
    s.obstacle___21207 = undefined;
    s.collisionDirection___21234 = undefined;
    s.tile___21260 = undefined;
    s.unnamed1648___U14 = undefined;
    s.unnamed1649___U15 = undefined;
    s.down___21344 = undefined;
    s.y0___21348 = undefined;
    s.collidedTiles___21363 = undefined;
    s.x___21365 = undefined;
    s.x0___21375 = undefined;
    s.obstacle___21389 = undefined;
    s.collisionDirection___21416 = undefined;
    s.tile___21442 = undefined;
    s.unnamed1650___U24 = undefined;
    s.unnamed1651___U25 = undefined;
    s.overlappedTiles___21529 = undefined;
    s.x___21531 = undefined;
    s.x0___21541 = undefined;
    s.y___21551 = undefined;
    s.y0___21561 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, ArcadePhysicsEngine__C2254_VT)) failedCast(r0);
    s.lastBrkId = 1628;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1628]) return breakpoint(s, 93, 1628, r0);
  case 93:
    r0 = s.arg1.fields["sprite"];
    s.s___21098 = (r0);
    s.lastBrkId = 1629;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1629]) return breakpoint(s, 94, 1629, r0);
  case 94:
    r0 = s.s___21098.fields["flags"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 & 256);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1630;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1630]) return breakpoint(s, 95, 1630, r0);
  case 95:
    s.tmp_5 = tiles_TileMap_isOnWall__P2422_mk(s);
    s.tmp_5.arg0 = s.arg2;
    s.tmp_5.arg1 = s.s___21098;
    s.callLocIdx = 587; s.pc = 96; return s.tmp_5;
  case 96:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    s.tmp_3 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1631;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1631]) return breakpoint(s, 97, 1631, r0);
  case 97:
    s.tmp_6 = r0 = s.s___21098;
    r0 = s.tmp_6.fields["flags"];
    s.tmp_8 = r0;
    r0 = (s.tmp_8 & -257);
    s.tmp_7 = r0;
    r0 = (s.tmp_6).fields["flags"] = (s.tmp_7);
  case 1:
  case 2:
  case 3:
  case 4:
    s.lastBrkId = 1632;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1632]) return breakpoint(s, 98, 1632, r0);
  case 98:
    s.tmp_3 = Sprite_isStatic__P2134_mk(s);
    s.tmp_3.arg0 = s.s___21098;
    s.callLocIdx = 588; s.pc = 99; return s.tmp_3;
  case 99:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 1633;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1633]) return breakpoint(s, 100, 1633, r0);
  case 100:
    s.tmp_4 = Sprite_setHitbox__P2133_mk(s);
    s.tmp_4.arg0 = s.s___21098;
    s.callLocIdx = 589; s.pc = 101; return s.tmp_4;
  case 101:
    r0 = s.retval;
  case 5:
  case 6:
    s.lastBrkId = 1634;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1634]) return breakpoint(s, 102, 1634, r0);
  case 102:
    r0 = s.s___21098.fields["_hitbox"];
    s.hbox___21123 = (r0);
    s.lastBrkId = 1635;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1635]) return breakpoint(s, 103, 1635, r0);
  case 103:
    s.tmp_0 = tiles_TileMap_scale__P2403_mk(s);
    s.tmp_0.arg0 = s.arg2;
    s.callLocIdx = 590; s.pc = 104; return s.tmp_0;
  case 104:
    r0 = s.retval;
    s.tileScale___21126 = (r0);
    s.lastBrkId = 1636;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1636]) return breakpoint(s, 105, 1636, r0);
  case 105:
    r0 = (1 << s.tileScale___21126);
    s.tileSize___21129 = (r0);
    s.lastBrkId = 1637;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1637]) return breakpoint(s, 106, 1637, r0);
  case 106:
    s.tmp_0 = Fx_sub__P159_mk(s);
    r0 = s.s___21098.fields["_x"];
    s.tmp_0.arg0 = r0;
    r0 = s.s___21098.fields["_lastX"];
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 591; s.pc = 107; return s.tmp_0;
  case 107:
    r0 = s.retval;
    s.xDiff___21133 = (r0);
    s.lastBrkId = 1638;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1638]) return breakpoint(s, 108, 1638, r0);
  case 108:
    s.tmp_0 = Fx_sub__P159_mk(s);
    r0 = s.s___21098.fields["_y"];
    s.tmp_0.arg0 = r0;
    r0 = s.s___21098.fields["_lastY"];
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 592; s.pc = 109; return s.tmp_0;
  case 109:
    r0 = s.retval;
    s.yDiff___21140 = (r0);
    s.lastBrkId = 1639;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1639]) return breakpoint(s, 110, 1639, r0);
  case 110:
    r0 = s.s___21098.fields["flags"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 & 2818);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 79; continue; }
    s.lastBrkId = 1640;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1640]) return breakpoint(s, 111, 1640, r0);
  case 111:
    r0 = (s.xDiff___21133 !== 0);
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    if (!r0) { step = 41; continue; }
    s.lastBrkId = 1641;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1641]) return breakpoint(s, 112, 1641, r0);
  case 112:
    r0 = (s.xDiff___21133 > 0);
    s.right___21156 = (r0);
    s.lastBrkId = 1642;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1642]) return breakpoint(s, 113, 1642, r0);
  case 113:
    r0 = pxsim_numops_toBoolDecr(s.right___21156);
    if (!r0) { step = 7; continue; }
    s.tmp_0 = Fx_add__P157_mk(s);
    s.tmp_1 = game_Hitbox_right__P1999_mk(s);
    s.tmp_1.arg0 = s.hbox___21123;
    s.callLocIdx = 593; s.pc = 115; return s.tmp_1;
  case 115:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = 256;
    s.callLocIdx = 594; s.pc = 114; return s.tmp_0;
  case 114:
    r0 = s.retval;
    { step = 8; continue; }
  case 7:
    s.tmp_2 = Fx_sub__P159_mk(s);
    s.tmp_3 = game_Hitbox_left__P1997_mk(s);
    s.tmp_3.arg0 = s.hbox___21123;
    s.callLocIdx = 595; s.pc = 117; return s.tmp_3;
  case 117:
    r0 = s.retval;
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = 256;
    s.callLocIdx = 596; s.pc = 116; return s.tmp_2;
  case 116:
    r0 = s.retval;
  case 8:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    s.tmp_5 = Fx_toIntShifted__P156_mk(s);
    s.tmp_6 = Fx_add__P157_mk(s);
    s.tmp_6.arg0 = s.tmp_4;
    s.tmp_6.arg1 = 128;
    s.callLocIdx = 597; s.pc = 119; return s.tmp_6;
  case 119:
    r0 = s.retval;
    s.tmp_5.arg0 = r0;
    s.tmp_5.arg1 = s.tileScale___21126;
    s.callLocIdx = 598; s.pc = 118; return s.tmp_5;
  case 118:
    r0 = s.retval;
    s.x0___21160 = (r0);
    s.lastBrkId = 1643;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1643]) return breakpoint(s, 120, 1643, r0);
  case 120:
    r0 = pxsim_Array__mk();
    s.collidedTiles___21175 = (r0);
    s.lastBrkId = 1644;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1644]) return breakpoint(s, 121, 1644, r0);
  case 121:
    s.tmp_0 = Fx_sub__P159_mk(s);
    s.tmp_1 = game_Hitbox_top__P1998_mk(s);
    s.tmp_1.arg0 = s.hbox___21123;
    s.callLocIdx = 599; s.pc = 123; return s.tmp_1;
  case 123:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = s.yDiff___21140;
    s.callLocIdx = 600; s.pc = 122; return s.tmp_0;
  case 122:
    r0 = s.retval;
    s.y___21177 = (r0);
    s.lastBrkId = 1645;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1645]) return breakpoint(s, 124, 1645, r0);
  case 124:
  case 9:
    s.lastBrkId = 1646;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1646]) return breakpoint(s, 125, 1646, r0);
  case 125:
    s.tmp_1 = r0 = s.y___21177;
    s.tmp_3 = Fx_iadd__P158_mk(s);
    s.tmp_3.arg0 = s.tileSize___21129;
    s.tmp_4 = Fx_sub__P159_mk(s);
    s.tmp_5 = game_Hitbox_bottom__P2000_mk(s);
    s.tmp_5.arg0 = s.hbox___21123;
    s.callLocIdx = 601; s.pc = 128; return s.tmp_5;
  case 128:
    r0 = s.retval;
    s.tmp_4.arg0 = r0;
    s.tmp_4.arg1 = s.yDiff___21140;
    s.callLocIdx = 602; s.pc = 127; return s.tmp_4;
  case 127:
    r0 = s.retval;
    s.tmp_3.arg1 = r0;
    s.callLocIdx = 603; s.pc = 126; return s.tmp_3;
  case 126:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 14; continue; }
    s.lastBrkId = 1647;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1647]) return breakpoint(s, 129, 1647, r0);
  case 129:
    s.tmp_6 = Fx_toIntShifted__P156_mk(s);
    s.tmp_7 = Fx_add__P157_mk(s);
    s.tmp_8 = Fx_min__P166_mk(s);
    s.tmp_8.arg0 = s.y___21177;
    s.tmp_9 = Fx_sub__P159_mk(s);
    s.tmp_10 = game_Hitbox_bottom__P2000_mk(s);
    s.tmp_10.arg0 = s.hbox___21123;
    s.callLocIdx = 604; s.pc = 134; return s.tmp_10;
  case 134:
    r0 = s.retval;
    s.tmp_9.arg0 = r0;
    s.tmp_9.arg1 = s.yDiff___21140;
    s.callLocIdx = 605; s.pc = 133; return s.tmp_9;
  case 133:
    r0 = s.retval;
    s.tmp_8.arg1 = r0;
    s.callLocIdx = 606; s.pc = 132; return s.tmp_8;
  case 132:
    r0 = s.retval;
    s.tmp_7.arg0 = r0;
    s.tmp_7.arg1 = 128;
    s.callLocIdx = 607; s.pc = 131; return s.tmp_7;
  case 131:
    r0 = s.retval;
    s.tmp_6.arg0 = r0;
    s.tmp_6.arg1 = s.tileScale___21126;
    s.callLocIdx = 608; s.pc = 130; return s.tmp_6;
  case 130:
    r0 = s.retval;
    s.y0___21191 = (r0);
    s.lastBrkId = 1648;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1648]) return breakpoint(s, 135, 1648, r0);
  case 135:
    s.tmp_1 = tiles_TileMap_isObstacle__P2420_mk(s);
    s.tmp_1.arg0 = s.arg2;
    s.tmp_1.arg1 = s.x0___21160;
    s.tmp_1.arg2 = s.y0___21191;
    s.callLocIdx = 609; s.pc = 136; return s.tmp_1;
  case 136:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 12; continue; }
    s.lastBrkId = 1649;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1649]) return breakpoint(s, 137, 1649, r0);
  case 137:
    s.tmp_2 = tiles_TileMap_getObstacle__P2421_mk(s);
    s.tmp_2.arg0 = s.arg2;
    s.tmp_2.arg1 = s.x0___21160;
    s.tmp_2.arg2 = s.y0___21191;
    s.callLocIdx = 610; s.pc = 138; return s.tmp_2;
  case 138:
    r0 = s.retval;
    s.obstacle___21207 = (r0);
    s.lastBrkId = 1650;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1650]) return breakpoint(s, 139, 1650, r0);
  case 139:
    r0 = pxsim_pxtcore_mkAction(1, ArcadePhysicsEngine_tilemapCollisions_inline__P21215);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.obstacle___21207);
    s.tmp_4 = helpers_arraySome__P107_mk(s);
    s.tmp_4.arg0 = s.collidedTiles___21175;
    s.tmp_4.arg1 = s.tmp_0;
    s.callLocIdx = 611; s.pc = 140; return s.tmp_4;
  case 140:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 10; continue; }
    s.lastBrkId = 1651;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1651]) return breakpoint(s, 141, 1651, r0);
  case 141:
    r0 = pxsim_Array__push(s.collidedTiles___21175, s.obstacle___21207);
  case 10:
  case 11:
  case 12:
  case 13:
    s.lastBrkId = 1652;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1652]) return breakpoint(s, 142, 1652, r0);
  case 142:
    s.tmp_0 = Fx_iadd__P158_mk(s);
    s.tmp_0.arg0 = s.tileSize___21129;
    s.tmp_0.arg1 = s.y___21177;
    s.callLocIdx = 612; s.pc = 143; return s.tmp_0;
  case 143:
    r0 = s.retval;
    s.y___21177 = (r0);
    { step = 9; continue; }
  case 14:
    s.lastBrkId = 1653;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1653]) return breakpoint(s, 144, 1653, r0);
  case 144:
    r0 = pxsim_Array__length(s.collidedTiles___21175);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 39; continue; }
    s.lastBrkId = 1654;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1654]) return breakpoint(s, 145, 1654, r0);
  case 145:
    r0 = pxsim_numops_toBoolDecr(s.right___21156);
    if (!r0) { step = 15; continue; }
    r0 = 2;
    { step = 16; continue; }
  case 15:
    r0 = 0;
  case 16:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    s.collisionDirection___21234 = (s.tmp_1);
    s.lastBrkId = 1655;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1655]) return breakpoint(s, 146, 1655, r0);
  case 146:
    r0 = pxsim_numops_toBoolDecr(s.right___21156);
    if (!r0) { step = 17; continue; }
    s.tmp_0 = Fx_sub__P159_mk(s);
    s.tmp_1 = Fx8__P149_mk(s);
    r0 = (s.x0___21160 << s.tileScale___21126);
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 613; s.pc = 148; return s.tmp_1;
  case 148:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    r0 = s.hbox___21123.fields["width"];
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 614; s.pc = 147; return s.tmp_0;
  case 147:
    r0 = s.retval;
    { step = 18; continue; }
  case 17:
    s.tmp_2 = Fx8__P149_mk(s);
    r0 = (s.x0___21160 + 1);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 << s.tileScale___21126);
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 615; s.pc = 149; return s.tmp_2;
  case 149:
    r0 = s.retval;
  case 18:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    s.tmp_5 = r0 = s.s___21098;
    s.tmp_7 = Fx_sub__P159_mk(s);
    s.tmp_7.arg0 = s.tmp_4;
    r0 = s.hbox___21123.fields["ox"];
    s.tmp_7.arg1 = r0;
    s.callLocIdx = 616; s.pc = 150; return s.tmp_7;
  case 150:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = (s.tmp_5).fields["_x"] = (s.tmp_6);
    s.lastBrkId = 1656;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1656]) return breakpoint(s, 151, 1656, r0);
  case 151:
    s.tile___21260 = (undefined);
    s.unnamed1648___U14 = (s.collidedTiles___21175);
    s.unnamed1649___U15 = (0);
    s.lastBrkId = 1657;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1657]) return breakpoint(s, 152, 1657, r0);
  case 152:
  case 19:
    s.tmp_0 = r0 = s.unnamed1649___U15;
    r0 = pxsim_Array__length(s.unnamed1648___U14);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 22; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1648___U14, s.unnamed1649___U15);
    s.tile___21260 = (r0);
    s.lastBrkId = 1658;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1658]) return breakpoint(s, 153, 1658, r0);
  case 153:
    r0 = s.s___21098.fields["flags"];
    s.tmp_5 = r0;
    r0 = (s.tmp_5 & 2818);
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    s.tmp_3 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 20; continue; }
    s.lastBrkId = 1659;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1659]) return breakpoint(s, 154, 1659, r0);
  case 154:
    s.tmp_6 = Sprite_registerObstacle__P2164_mk(s);
    s.tmp_6.arg0 = s.s___21098;
    s.tmp_6.arg1 = s.collisionDirection___21234;
    s.tmp_6.arg2 = s.tile___21260;
    s.tmp_6.arg3 = s.arg2;
    s.callLocIdx = 617; s.pc = 155; return s.tmp_6;
  case 155:
    r0 = s.retval;
  case 20:
  case 21:
    r0 = (s.unnamed1649___U15 + 1);
    s.unnamed1649___U15 = (r0);
    { step = 19; continue; }
  case 22:
    s.unnamed1648___U14 = (undefined);
    s.lastBrkId = 1660;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1660]) return breakpoint(s, 156, 1660, r0);
  case 156:
    r0 = s.s___21098.fields["flags"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 & 16);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 23; continue; }
    s.lastBrkId = 1661;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1661]) return breakpoint(s, 157, 1661, r0);
  case 157:
    s.tmp_2 = Sprite_destroy__P2166_mk(s);
    s.tmp_2.arg0 = s.s___21098;
    s.tmp_2.arg1 = undefined;
    s.tmp_2.arg2 = undefined;
    s.callLocIdx = 618; s.pc = 158; return s.tmp_2;
  case 158:
    r0 = s.retval;
    { step = 38; continue; }
  case 23:
    s.lastBrkId = 1662;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1662]) return breakpoint(s, 159, 1662, r0);
  case 159:
    r0 = s.s___21098.fields["_vx"];
    s.tmp_1 = r0;
    r0 = s.arg1.fields["cachedVx"];
    s.tmp_2 = r0;
    r0 = (s.tmp_1 === s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 34; continue; }
    s.lastBrkId = 1663;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1663]) return breakpoint(s, 160, 1663, r0);
  case 160:
    r0 = s.s___21098.fields["flags"];
    s.tmp_4 = r0;
    r0 = (s.tmp_4 & 32);
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 32; continue; }
    s.lastBrkId = 1664;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1664]) return breakpoint(s, 161, 1664, r0);
  case 161:
    r0 = pxsim_numops_toBoolDecr(s.right___21156);
    s.tmp_6 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_6);
    s.tmp_5 = r0;
    r0 = pxsim_numops_toBool(s.tmp_5);
    if (r0) { step = 24; continue; }
    r0 = s.tmp_5;
    { step = 25; continue; }
  case 24:
    s.tmp_8 = Sprite_vx__P2105_mk(s);
    s.tmp_8.arg0 = s.s___21098;
    s.callLocIdx = 619; s.pc = 162; return s.tmp_8;
  case 162:
    r0 = s.retval;
    s.tmp_7 = r0;
    r0 = (s.tmp_7 < 0);
  case 25:
    // jmp value (already in r0)
    s.tmp_9 = r0;
    r0 = pxsim_numops_toBool(s.tmp_9);
    if (!r0) { step = 26; continue; }
    r0 = s.tmp_9;
    { step = 29; continue; }
  case 26:
    s.tmp_10 = r0 = s.right___21156;
    r0 = pxsim_numops_toBool(s.tmp_10);
    if (r0) { step = 27; continue; }
    r0 = s.tmp_10;
    { step = 28; continue; }
  case 27:
    s.tmp_12 = Sprite_vx__P2105_mk(s);
    s.tmp_12.arg0 = s.s___21098;
    s.callLocIdx = 620; s.pc = 163; return s.tmp_12;
  case 163:
    r0 = s.retval;
    s.tmp_11 = r0;
    r0 = (s.tmp_11 > 0);
  case 28:
    // jmp value (already in r0)
    s.tmp_13 = r0;
    r0 = s.tmp_13;
  case 29:
    // jmp value (already in r0)
    s.tmp_14 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_14);
    if (!r0) { step = 30; continue; }
    s.lastBrkId = 1665;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1665]) return breakpoint(s, 164, 1665, r0);
  case 164:
    s.tmp_15 = r0 = s.s___21098;
    s.tmp_17 = Fx_neg__P155_mk(s);
    r0 = s.s___21098.fields["_vx"];
    s.tmp_17.arg0 = r0;
    s.callLocIdx = 621; s.pc = 165; return s.tmp_17;
  case 165:
    r0 = s.retval;
    s.tmp_16 = r0;
    r0 = (s.tmp_15).fields["_vx"] = (s.tmp_16);
    s.lastBrkId = 1666;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1666]) return breakpoint(s, 166, 1666, r0);
  case 166:
    s.tmp_0 = r0 = s.arg1;
    s.tmp_2 = Fx_neg__P155_mk(s);
    r0 = s.arg1.fields["xStep"];
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 622; s.pc = 167; return s.tmp_2;
  case 167:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["xStep"] = (s.tmp_1);
    s.lastBrkId = 1667;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1667]) return breakpoint(s, 168, 1667, r0);
  case 168:
    s.tmp_0 = r0 = s.arg1;
    s.tmp_2 = Fx_neg__P155_mk(s);
    r0 = s.arg1.fields["dx"];
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 623; s.pc = 169; return s.tmp_2;
  case 169:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["dx"] = (s.tmp_1);
  case 30:
  case 31:
    { step = 33; continue; }
  case 32:
    s.lastBrkId = 1668;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1668]) return breakpoint(s, 170, 1668, r0);
  case 170:
    r0 = (s.arg1).fields["dx"] = (0);
    s.lastBrkId = 1669;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1669]) return breakpoint(s, 171, 1669, r0);
  case 171:
    r0 = (s.s___21098).fields["_vx"] = (0);
  case 33:
    { step = 37; continue; }
  case 34:
    s.lastBrkId = 1670;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1670]) return breakpoint(s, 172, 1670, r0);
  case 172:
    s.tmp_2 = Math_sign__P129_mk(s);
    s.tmp_3 = Fx_toInt__P170_mk(s);
    r0 = s.s___21098.fields["_vx"];
    s.tmp_3.arg0 = r0;
    s.callLocIdx = 624; s.pc = 174; return s.tmp_3;
  case 174:
    r0 = s.retval;
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 625; s.pc = 173; return s.tmp_2;
  case 173:
    r0 = s.retval;
    s.tmp_1 = r0;
    s.tmp_5 = Math_sign__P129_mk(s);
    s.tmp_6 = Fx_toInt__P170_mk(s);
    r0 = s.arg1.fields["cachedVx"];
    s.tmp_6.arg0 = r0;
    s.callLocIdx = 626; s.pc = 176; return s.tmp_6;
  case 176:
    r0 = s.retval;
    s.tmp_5.arg0 = r0;
    s.callLocIdx = 627; s.pc = 175; return s.tmp_5;
  case 175:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = (s.tmp_1 === s.tmp_4);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 35; continue; }
    s.lastBrkId = 1671;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1671]) return breakpoint(s, 177, 1671, r0);
  case 177:
    r0 = (s.arg1).fields["dx"] = (0);
  case 35:
  case 36:
  case 37:
  case 38:
  case 39:
  case 40:
  case 41:
  case 42:
    s.lastBrkId = 1672;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1672]) return breakpoint(s, 178, 1672, r0);
  case 178:
    r0 = (s.yDiff___21140 !== 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 77; continue; }
    s.lastBrkId = 1673;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1673]) return breakpoint(s, 179, 1673, r0);
  case 179:
    r0 = (s.yDiff___21140 > 0);
    s.down___21344 = (r0);
    s.lastBrkId = 1674;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1674]) return breakpoint(s, 180, 1674, r0);
  case 180:
    r0 = pxsim_numops_toBoolDecr(s.down___21344);
    if (!r0) { step = 43; continue; }
    s.tmp_0 = Fx_add__P157_mk(s);
    s.tmp_1 = game_Hitbox_bottom__P2000_mk(s);
    s.tmp_1.arg0 = s.hbox___21123;
    s.callLocIdx = 628; s.pc = 182; return s.tmp_1;
  case 182:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = 256;
    s.callLocIdx = 629; s.pc = 181; return s.tmp_0;
  case 181:
    r0 = s.retval;
    { step = 44; continue; }
  case 43:
    s.tmp_2 = Fx_sub__P159_mk(s);
    s.tmp_3 = game_Hitbox_top__P1998_mk(s);
    s.tmp_3.arg0 = s.hbox___21123;
    s.callLocIdx = 630; s.pc = 184; return s.tmp_3;
  case 184:
    r0 = s.retval;
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = 256;
    s.callLocIdx = 631; s.pc = 183; return s.tmp_2;
  case 183:
    r0 = s.retval;
  case 44:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    s.tmp_5 = Fx_toIntShifted__P156_mk(s);
    s.tmp_6 = Fx_add__P157_mk(s);
    s.tmp_6.arg0 = s.tmp_4;
    s.tmp_6.arg1 = 128;
    s.callLocIdx = 632; s.pc = 186; return s.tmp_6;
  case 186:
    r0 = s.retval;
    s.tmp_5.arg0 = r0;
    s.tmp_5.arg1 = s.tileScale___21126;
    s.callLocIdx = 633; s.pc = 185; return s.tmp_5;
  case 185:
    r0 = s.retval;
    s.y0___21348 = (r0);
    s.lastBrkId = 1675;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1675]) return breakpoint(s, 187, 1675, r0);
  case 187:
    r0 = pxsim_Array__mk();
    s.collidedTiles___21363 = (r0);
    s.lastBrkId = 1676;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1676]) return breakpoint(s, 188, 1676, r0);
  case 188:
    s.tmp_0 = game_Hitbox_left__P1997_mk(s);
    s.tmp_0.arg0 = s.hbox___21123;
    s.callLocIdx = 634; s.pc = 189; return s.tmp_0;
  case 189:
    r0 = s.retval;
    s.x___21365 = (r0);
    s.lastBrkId = 1677;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1677]) return breakpoint(s, 190, 1677, r0);
  case 190:
  case 45:
    s.lastBrkId = 1678;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1678]) return breakpoint(s, 191, 1678, r0);
  case 191:
    s.tmp_1 = r0 = s.x___21365;
    s.tmp_3 = Fx_iadd__P158_mk(s);
    s.tmp_3.arg0 = s.tileSize___21129;
    s.tmp_4 = game_Hitbox_right__P1999_mk(s);
    s.tmp_4.arg0 = s.hbox___21123;
    s.callLocIdx = 635; s.pc = 193; return s.tmp_4;
  case 193:
    r0 = s.retval;
    s.tmp_3.arg1 = r0;
    s.callLocIdx = 636; s.pc = 192; return s.tmp_3;
  case 192:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 50; continue; }
    s.lastBrkId = 1679;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1679]) return breakpoint(s, 194, 1679, r0);
  case 194:
    s.tmp_5 = Fx_toIntShifted__P156_mk(s);
    s.tmp_6 = Fx_add__P157_mk(s);
    s.tmp_7 = Fx_min__P166_mk(s);
    s.tmp_7.arg0 = s.x___21365;
    s.tmp_8 = game_Hitbox_right__P1999_mk(s);
    s.tmp_8.arg0 = s.hbox___21123;
    s.callLocIdx = 637; s.pc = 198; return s.tmp_8;
  case 198:
    r0 = s.retval;
    s.tmp_7.arg1 = r0;
    s.callLocIdx = 638; s.pc = 197; return s.tmp_7;
  case 197:
    r0 = s.retval;
    s.tmp_6.arg0 = r0;
    s.tmp_6.arg1 = 128;
    s.callLocIdx = 639; s.pc = 196; return s.tmp_6;
  case 196:
    r0 = s.retval;
    s.tmp_5.arg0 = r0;
    s.tmp_5.arg1 = s.tileScale___21126;
    s.callLocIdx = 640; s.pc = 195; return s.tmp_5;
  case 195:
    r0 = s.retval;
    s.x0___21375 = (r0);
    s.lastBrkId = 1680;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1680]) return breakpoint(s, 199, 1680, r0);
  case 199:
    s.tmp_1 = tiles_TileMap_isObstacle__P2420_mk(s);
    s.tmp_1.arg0 = s.arg2;
    s.tmp_1.arg1 = s.x0___21375;
    s.tmp_1.arg2 = s.y0___21348;
    s.callLocIdx = 641; s.pc = 200; return s.tmp_1;
  case 200:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 48; continue; }
    s.lastBrkId = 1681;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1681]) return breakpoint(s, 201, 1681, r0);
  case 201:
    s.tmp_2 = tiles_TileMap_getObstacle__P2421_mk(s);
    s.tmp_2.arg0 = s.arg2;
    s.tmp_2.arg1 = s.x0___21375;
    s.tmp_2.arg2 = s.y0___21348;
    s.callLocIdx = 642; s.pc = 202; return s.tmp_2;
  case 202:
    r0 = s.retval;
    s.obstacle___21389 = (r0);
    s.lastBrkId = 1682;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1682]) return breakpoint(s, 203, 1682, r0);
  case 203:
    r0 = pxsim_pxtcore_mkAction(1, ArcadePhysicsEngine_tilemapCollisions_inline__P21397);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.obstacle___21389);
    s.tmp_4 = helpers_arraySome__P107_mk(s);
    s.tmp_4.arg0 = s.collidedTiles___21363;
    s.tmp_4.arg1 = s.tmp_0;
    s.callLocIdx = 643; s.pc = 204; return s.tmp_4;
  case 204:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 46; continue; }
    s.lastBrkId = 1683;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1683]) return breakpoint(s, 205, 1683, r0);
  case 205:
    r0 = pxsim_Array__push(s.collidedTiles___21363, s.obstacle___21389);
  case 46:
  case 47:
  case 48:
  case 49:
    s.lastBrkId = 1684;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1684]) return breakpoint(s, 206, 1684, r0);
  case 206:
    s.tmp_0 = Fx_iadd__P158_mk(s);
    s.tmp_0.arg0 = s.tileSize___21129;
    s.tmp_0.arg1 = s.x___21365;
    s.callLocIdx = 644; s.pc = 207; return s.tmp_0;
  case 207:
    r0 = s.retval;
    s.x___21365 = (r0);
    { step = 45; continue; }
  case 50:
    s.lastBrkId = 1685;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1685]) return breakpoint(s, 208, 1685, r0);
  case 208:
    r0 = pxsim_Array__length(s.collidedTiles___21363);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 75; continue; }
    s.lastBrkId = 1686;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1686]) return breakpoint(s, 209, 1686, r0);
  case 209:
    r0 = pxsim_numops_toBoolDecr(s.down___21344);
    if (!r0) { step = 51; continue; }
    r0 = 3;
    { step = 52; continue; }
  case 51:
    r0 = 1;
  case 52:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    s.collisionDirection___21416 = (s.tmp_1);
    s.lastBrkId = 1687;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1687]) return breakpoint(s, 210, 1687, r0);
  case 210:
    r0 = pxsim_numops_toBoolDecr(s.down___21344);
    if (!r0) { step = 53; continue; }
    s.tmp_0 = Fx_sub__P159_mk(s);
    s.tmp_1 = Fx8__P149_mk(s);
    r0 = (s.y0___21348 << s.tileScale___21126);
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 645; s.pc = 212; return s.tmp_1;
  case 212:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    r0 = s.hbox___21123.fields["height"];
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 646; s.pc = 211; return s.tmp_0;
  case 211:
    r0 = s.retval;
    { step = 54; continue; }
  case 53:
    s.tmp_2 = Fx8__P149_mk(s);
    r0 = (s.y0___21348 + 1);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 << s.tileScale___21126);
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 647; s.pc = 213; return s.tmp_2;
  case 213:
    r0 = s.retval;
  case 54:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    s.tmp_5 = r0 = s.s___21098;
    s.tmp_7 = Fx_sub__P159_mk(s);
    s.tmp_7.arg0 = s.tmp_4;
    r0 = s.hbox___21123.fields["oy"];
    s.tmp_7.arg1 = r0;
    s.callLocIdx = 648; s.pc = 214; return s.tmp_7;
  case 214:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = (s.tmp_5).fields["_y"] = (s.tmp_6);
    s.lastBrkId = 1688;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1688]) return breakpoint(s, 215, 1688, r0);
  case 215:
    s.tile___21442 = (undefined);
    s.unnamed1650___U24 = (s.collidedTiles___21363);
    s.unnamed1651___U25 = (0);
    s.lastBrkId = 1689;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1689]) return breakpoint(s, 216, 1689, r0);
  case 216:
  case 55:
    s.tmp_0 = r0 = s.unnamed1651___U25;
    r0 = pxsim_Array__length(s.unnamed1650___U24);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 58; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1650___U24, s.unnamed1651___U25);
    s.tile___21442 = (r0);
    s.lastBrkId = 1690;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1690]) return breakpoint(s, 217, 1690, r0);
  case 217:
    r0 = s.s___21098.fields["flags"];
    s.tmp_5 = r0;
    r0 = (s.tmp_5 & 2818);
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    s.tmp_3 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 56; continue; }
    s.lastBrkId = 1691;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1691]) return breakpoint(s, 218, 1691, r0);
  case 218:
    s.tmp_6 = Sprite_registerObstacle__P2164_mk(s);
    s.tmp_6.arg0 = s.s___21098;
    s.tmp_6.arg1 = s.collisionDirection___21416;
    s.tmp_6.arg2 = s.tile___21442;
    s.tmp_6.arg3 = s.arg2;
    s.callLocIdx = 649; s.pc = 219; return s.tmp_6;
  case 219:
    r0 = s.retval;
  case 56:
  case 57:
    r0 = (s.unnamed1651___U25 + 1);
    s.unnamed1651___U25 = (r0);
    { step = 55; continue; }
  case 58:
    s.unnamed1650___U24 = (undefined);
    s.lastBrkId = 1692;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1692]) return breakpoint(s, 220, 1692, r0);
  case 220:
    r0 = s.s___21098.fields["flags"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 & 16);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 59; continue; }
    s.lastBrkId = 1693;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1693]) return breakpoint(s, 221, 1693, r0);
  case 221:
    s.tmp_2 = Sprite_destroy__P2166_mk(s);
    s.tmp_2.arg0 = s.s___21098;
    s.tmp_2.arg1 = undefined;
    s.tmp_2.arg2 = undefined;
    s.callLocIdx = 650; s.pc = 222; return s.tmp_2;
  case 222:
    r0 = s.retval;
    { step = 74; continue; }
  case 59:
    s.lastBrkId = 1694;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1694]) return breakpoint(s, 223, 1694, r0);
  case 223:
    r0 = s.s___21098.fields["_vy"];
    s.tmp_1 = r0;
    r0 = s.arg1.fields["cachedVy"];
    s.tmp_2 = r0;
    r0 = (s.tmp_1 === s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 70; continue; }
    s.lastBrkId = 1695;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1695]) return breakpoint(s, 224, 1695, r0);
  case 224:
    r0 = s.s___21098.fields["flags"];
    s.tmp_4 = r0;
    r0 = (s.tmp_4 & 32);
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 68; continue; }
    s.lastBrkId = 1696;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1696]) return breakpoint(s, 225, 1696, r0);
  case 225:
    r0 = pxsim_numops_toBoolDecr(s.down___21344);
    s.tmp_6 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_6);
    s.tmp_5 = r0;
    r0 = pxsim_numops_toBool(s.tmp_5);
    if (r0) { step = 60; continue; }
    r0 = s.tmp_5;
    { step = 61; continue; }
  case 60:
    s.tmp_8 = Sprite_vy__P2107_mk(s);
    s.tmp_8.arg0 = s.s___21098;
    s.callLocIdx = 651; s.pc = 226; return s.tmp_8;
  case 226:
    r0 = s.retval;
    s.tmp_7 = r0;
    r0 = (s.tmp_7 < 0);
  case 61:
    // jmp value (already in r0)
    s.tmp_9 = r0;
    r0 = pxsim_numops_toBool(s.tmp_9);
    if (!r0) { step = 62; continue; }
    r0 = s.tmp_9;
    { step = 65; continue; }
  case 62:
    s.tmp_10 = r0 = s.down___21344;
    r0 = pxsim_numops_toBool(s.tmp_10);
    if (r0) { step = 63; continue; }
    r0 = s.tmp_10;
    { step = 64; continue; }
  case 63:
    s.tmp_12 = Sprite_vy__P2107_mk(s);
    s.tmp_12.arg0 = s.s___21098;
    s.callLocIdx = 652; s.pc = 227; return s.tmp_12;
  case 227:
    r0 = s.retval;
    s.tmp_11 = r0;
    r0 = (s.tmp_11 > 0);
  case 64:
    // jmp value (already in r0)
    s.tmp_13 = r0;
    r0 = s.tmp_13;
  case 65:
    // jmp value (already in r0)
    s.tmp_14 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_14);
    if (!r0) { step = 66; continue; }
    s.lastBrkId = 1697;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1697]) return breakpoint(s, 228, 1697, r0);
  case 228:
    s.tmp_15 = r0 = s.s___21098;
    s.tmp_17 = Fx_neg__P155_mk(s);
    r0 = s.s___21098.fields["_vy"];
    s.tmp_17.arg0 = r0;
    s.callLocIdx = 653; s.pc = 229; return s.tmp_17;
  case 229:
    r0 = s.retval;
    s.tmp_16 = r0;
    r0 = (s.tmp_15).fields["_vy"] = (s.tmp_16);
    s.lastBrkId = 1698;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1698]) return breakpoint(s, 230, 1698, r0);
  case 230:
    s.tmp_0 = r0 = s.arg1;
    s.tmp_2 = Fx_neg__P155_mk(s);
    r0 = s.arg1.fields["yStep"];
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 654; s.pc = 231; return s.tmp_2;
  case 231:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["yStep"] = (s.tmp_1);
    s.lastBrkId = 1699;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1699]) return breakpoint(s, 232, 1699, r0);
  case 232:
    s.tmp_0 = r0 = s.arg1;
    s.tmp_2 = Fx_neg__P155_mk(s);
    r0 = s.arg1.fields["dy"];
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 655; s.pc = 233; return s.tmp_2;
  case 233:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["dy"] = (s.tmp_1);
  case 66:
  case 67:
    { step = 69; continue; }
  case 68:
    s.lastBrkId = 1700;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1700]) return breakpoint(s, 234, 1700, r0);
  case 234:
    r0 = (s.arg1).fields["dy"] = (0);
    s.lastBrkId = 1701;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1701]) return breakpoint(s, 235, 1701, r0);
  case 235:
    r0 = (s.s___21098).fields["_vy"] = (0);
  case 69:
    { step = 73; continue; }
  case 70:
    s.lastBrkId = 1702;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1702]) return breakpoint(s, 236, 1702, r0);
  case 236:
    s.tmp_2 = Math_sign__P129_mk(s);
    s.tmp_3 = Fx_toInt__P170_mk(s);
    r0 = s.s___21098.fields["_vy"];
    s.tmp_3.arg0 = r0;
    s.callLocIdx = 656; s.pc = 238; return s.tmp_3;
  case 238:
    r0 = s.retval;
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 657; s.pc = 237; return s.tmp_2;
  case 237:
    r0 = s.retval;
    s.tmp_1 = r0;
    s.tmp_5 = Math_sign__P129_mk(s);
    s.tmp_6 = Fx_toInt__P170_mk(s);
    r0 = s.arg1.fields["cachedVy"];
    s.tmp_6.arg0 = r0;
    s.callLocIdx = 658; s.pc = 240; return s.tmp_6;
  case 240:
    r0 = s.retval;
    s.tmp_5.arg0 = r0;
    s.callLocIdx = 659; s.pc = 239; return s.tmp_5;
  case 239:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = (s.tmp_1 === s.tmp_4);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 71; continue; }
    s.lastBrkId = 1703;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1703]) return breakpoint(s, 241, 1703, r0);
  case 241:
    r0 = (s.arg1).fields["dy"] = (0);
  case 71:
  case 72:
  case 73:
  case 74:
  case 75:
  case 76:
  case 77:
  case 78:
  case 79:
  case 80:
    s.lastBrkId = 1704;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1704]) return breakpoint(s, 242, 1704, r0);
  case 242:
    r0 = s.s___21098.fields["flags"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 & 1538);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 91; continue; }
    s.lastBrkId = 1705;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1705]) return breakpoint(s, 243, 1705, r0);
  case 243:
    r0 = pxsim_Array__mk();
    s.overlappedTiles___21529 = (r0);
    s.lastBrkId = 1706;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1706]) return breakpoint(s, 244, 1706, r0);
  case 244:
    s.tmp_0 = game_Hitbox_left__P1997_mk(s);
    s.tmp_0.arg0 = s.hbox___21123;
    s.callLocIdx = 660; s.pc = 245; return s.tmp_0;
  case 245:
    r0 = s.retval;
    s.x___21531 = (r0);
    s.lastBrkId = 1707;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1707]) return breakpoint(s, 246, 1707, r0);
  case 246:
  case 81:
    s.lastBrkId = 1708;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1708]) return breakpoint(s, 247, 1708, r0);
  case 247:
    s.tmp_1 = r0 = s.x___21531;
    s.tmp_3 = Fx_iadd__P158_mk(s);
    s.tmp_3.arg0 = s.tileSize___21129;
    s.tmp_4 = game_Hitbox_right__P1999_mk(s);
    s.tmp_4.arg0 = s.hbox___21123;
    s.callLocIdx = 661; s.pc = 249; return s.tmp_4;
  case 249:
    r0 = s.retval;
    s.tmp_3.arg1 = r0;
    s.callLocIdx = 662; s.pc = 248; return s.tmp_3;
  case 248:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 88; continue; }
    s.lastBrkId = 1709;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1709]) return breakpoint(s, 250, 1709, r0);
  case 250:
    s.tmp_5 = Fx_toIntShifted__P156_mk(s);
    s.tmp_6 = Fx_add__P157_mk(s);
    s.tmp_7 = Fx_min__P166_mk(s);
    s.tmp_7.arg0 = s.x___21531;
    s.tmp_8 = game_Hitbox_right__P1999_mk(s);
    s.tmp_8.arg0 = s.hbox___21123;
    s.callLocIdx = 663; s.pc = 254; return s.tmp_8;
  case 254:
    r0 = s.retval;
    s.tmp_7.arg1 = r0;
    s.callLocIdx = 664; s.pc = 253; return s.tmp_7;
  case 253:
    r0 = s.retval;
    s.tmp_6.arg0 = r0;
    s.tmp_6.arg1 = 128;
    s.callLocIdx = 665; s.pc = 252; return s.tmp_6;
  case 252:
    r0 = s.retval;
    s.tmp_5.arg0 = r0;
    s.tmp_5.arg1 = s.tileScale___21126;
    s.callLocIdx = 666; s.pc = 251; return s.tmp_5;
  case 251:
    r0 = s.retval;
    s.x0___21541 = (r0);
    s.lastBrkId = 1710;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1710]) return breakpoint(s, 255, 1710, r0);
  case 255:
    s.tmp_0 = game_Hitbox_top__P1998_mk(s);
    s.tmp_0.arg0 = s.hbox___21123;
    s.callLocIdx = 667; s.pc = 256; return s.tmp_0;
  case 256:
    r0 = s.retval;
    s.y___21551 = (r0);
    s.lastBrkId = 1711;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1711]) return breakpoint(s, 257, 1711, r0);
  case 257:
  case 82:
    s.lastBrkId = 1712;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1712]) return breakpoint(s, 258, 1712, r0);
  case 258:
    s.tmp_1 = r0 = s.y___21551;
    s.tmp_3 = Fx_iadd__P158_mk(s);
    s.tmp_3.arg0 = s.tileSize___21129;
    s.tmp_4 = game_Hitbox_bottom__P2000_mk(s);
    s.tmp_4.arg0 = s.hbox___21123;
    s.callLocIdx = 668; s.pc = 260; return s.tmp_4;
  case 260:
    r0 = s.retval;
    s.tmp_3.arg1 = r0;
    s.callLocIdx = 669; s.pc = 259; return s.tmp_3;
  case 259:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1 < s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 87; continue; }
    s.lastBrkId = 1713;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1713]) return breakpoint(s, 261, 1713, r0);
  case 261:
    s.tmp_5 = Fx_toIntShifted__P156_mk(s);
    s.tmp_6 = Fx_add__P157_mk(s);
    s.tmp_7 = Fx_min__P166_mk(s);
    s.tmp_7.arg0 = s.y___21551;
    s.tmp_8 = game_Hitbox_bottom__P2000_mk(s);
    s.tmp_8.arg0 = s.hbox___21123;
    s.callLocIdx = 670; s.pc = 265; return s.tmp_8;
  case 265:
    r0 = s.retval;
    s.tmp_7.arg1 = r0;
    s.callLocIdx = 671; s.pc = 264; return s.tmp_7;
  case 264:
    r0 = s.retval;
    s.tmp_6.arg0 = r0;
    s.tmp_6.arg1 = 128;
    s.callLocIdx = 672; s.pc = 263; return s.tmp_6;
  case 263:
    r0 = s.retval;
    s.tmp_5.arg0 = r0;
    s.tmp_5.arg1 = s.tileScale___21126;
    s.callLocIdx = 673; s.pc = 262; return s.tmp_5;
  case 262:
    r0 = s.retval;
    s.y0___21561 = (r0);
    s.lastBrkId = 1714;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1714]) return breakpoint(s, 266, 1714, r0);
  case 266:
    s.tmp_3 = tiles_TileMap_isObstacle__P2420_mk(s);
    s.tmp_3.arg0 = s.arg2;
    s.tmp_3.arg1 = s.x0___21541;
    s.tmp_3.arg2 = s.y0___21561;
    s.callLocIdx = 674; s.pc = 267; return s.tmp_3;
  case 267:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 83; continue; }
    r0 = s.tmp_0;
    { step = 84; continue; }
  case 83:
    r0 = s.s___21098.fields["flags"];
    s.tmp_8 = r0;
    r0 = (s.tmp_8 & 2048);
    s.tmp_7 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_7);
    s.tmp_6 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_6);
    s.tmp_5 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_5);
    s.tmp_4 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_4);
  case 84:
    // jmp value (already in r0)
    s.tmp_9 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_9);
    if (!r0) { step = 85; continue; }
    s.lastBrkId = 1715;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1715]) return breakpoint(s, 268, 1715, r0);
  case 268:
    s.tmp_10 = r0 = s.overlappedTiles___21529;
    s.tmp_12 = tiles_TileMap_getTile__P2413_mk(s);
    s.tmp_12.arg0 = s.arg2;
    s.tmp_12.arg1 = s.x0___21541;
    s.tmp_12.arg2 = s.y0___21561;
    s.callLocIdx = 675; s.pc = 269; return s.tmp_12;
  case 269:
    r0 = s.retval;
    s.tmp_11 = r0;
    r0 = pxsim_Array__push(s.tmp_10, s.tmp_11);
  case 85:
  case 86:
    s.lastBrkId = 1716;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1716]) return breakpoint(s, 270, 1716, r0);
  case 270:
    s.tmp_0 = Fx_iadd__P158_mk(s);
    s.tmp_0.arg0 = s.tileSize___21129;
    s.tmp_0.arg1 = s.y___21551;
    s.callLocIdx = 676; s.pc = 271; return s.tmp_0;
  case 271:
    r0 = s.retval;
    s.y___21551 = (r0);
    { step = 82; continue; }
  case 87:
    s.lastBrkId = 1717;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1717]) return breakpoint(s, 272, 1717, r0);
  case 272:
    s.tmp_0 = Fx_iadd__P158_mk(s);
    s.tmp_0.arg0 = s.tileSize___21129;
    s.tmp_0.arg1 = s.x___21531;
    s.callLocIdx = 677; s.pc = 273; return s.tmp_0;
  case 273:
    r0 = s.retval;
    s.x___21531 = (r0);
    { step = 81; continue; }
  case 88:
    s.lastBrkId = 1718;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1718]) return breakpoint(s, 274, 1718, r0);
  case 274:
    r0 = pxsim_Array__length(s.overlappedTiles___21529);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 89; continue; }
    s.lastBrkId = 1719;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1719]) return breakpoint(s, 275, 1719, r0);
  case 275:
    s.tmp_1 = ArcadePhysicsEngine_tilemapOverlaps__P4431_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.tmp_1.arg1 = s.s___21098;
    s.tmp_1.arg2 = s.overlappedTiles___21529;
    s.callLocIdx = 678; s.pc = 276; return s.tmp_1;
  case 276:
    r0 = s.retval;
  case 89:
  case 90:
  case 91:
  case 92:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
ArcadePhysicsEngine_tilemapCollisions__P4430.info = {"start":11722,"length":9572,"line":348,"column":4,"endLine":587,"endColumn":5,"fileName":"pxt_modules/game/physics.ts","functionName":"tilemapCollisions","argumentNames":["this","movingSprite","tm"]}

function ArcadePhysicsEngine_tilemapCollisions__P4430_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ArcadePhysicsEngine_tilemapCollisions__P4430, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  tmp_12: undefined,
  tmp_13: undefined,
  tmp_14: undefined,
  tmp_15: undefined,
  tmp_16: undefined,
  tmp_17: undefined,
  s___21098: undefined,
  hbox___21123: undefined,
  tileScale___21126: undefined,
  tileSize___21129: undefined,
  xDiff___21133: undefined,
  yDiff___21140: undefined,
  right___21156: undefined,
  x0___21160: undefined,
  collidedTiles___21175: undefined,
  y___21177: undefined,
  y0___21191: undefined,
  obstacle___21207: undefined,
  collisionDirection___21234: undefined,
  tile___21260: undefined,
  unnamed1648___U14: undefined,
  unnamed1649___U15: undefined,
  down___21344: undefined,
  y0___21348: undefined,
  collidedTiles___21363: undefined,
  x___21365: undefined,
  x0___21375: undefined,
  obstacle___21389: undefined,
  collisionDirection___21416: undefined,
  tile___21442: undefined,
  unnamed1650___U24: undefined,
  unnamed1651___U25: undefined,
  overlappedTiles___21529: undefined,
  x___21531: undefined,
  x0___21541: undefined,
  y___21551: undefined,
  y0___21561: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function ArcadePhysicsEngine_tilemapCollisions_inline__P21215(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0.fields["tileIndex"];
    s.tmp_0 = r0;
    r0 = s.caps[0].fields["tileIndex"];
    s.tmp_1 = r0;
    r0 = (s.tmp_0 === s.tmp_1);
    return leave(s, r0)
  default: oops()
} } }
ArcadePhysicsEngine_tilemapCollisions_inline__P21215.info = {"start":13940,"length":39,"line":410,"column":48,"endLine":410,"endColumn":87,"fileName":"pxt_modules/game/physics.ts","functionName":"inline","argumentNames":["o"]}

function ArcadePhysicsEngine_tilemapCollisions_inline__P21215_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ArcadePhysicsEngine_tilemapCollisions_inline__P21215, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function ArcadePhysicsEngine_tilemapCollisions_inline__P21397(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0.fields["tileIndex"];
    s.tmp_0 = r0;
    r0 = s.caps[0].fields["tileIndex"];
    s.tmp_1 = r0;
    r0 = (s.tmp_0 === s.tmp_1);
    return leave(s, r0)
  default: oops()
} } }
ArcadePhysicsEngine_tilemapCollisions_inline__P21397.info = {"start":17420,"length":39,"line":491,"column":48,"endLine":491,"endColumn":87,"fileName":"pxt_modules/game/physics.ts","functionName":"inline","argumentNames":["o"]}

function ArcadePhysicsEngine_tilemapCollisions_inline__P21397_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ArcadePhysicsEngine_tilemapCollisions_inline__P21397, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function ArcadePhysicsEngine_tilemapOverlaps__P4431(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.alreadyHandled___21608 = undefined;
    s.tile___21611 = undefined;
    s.unnamed1652___U2 = undefined;
    s.unnamed1653___U3 = undefined;
    s.tileOverlapHandlers___21632 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, ArcadePhysicsEngine__C2254_VT)) failedCast(r0);
    s.lastBrkId = 1720;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1720]) return breakpoint(s, 8, 1720, r0);
  case 8:
    r0 = pxsim_Array__mk();
    s.alreadyHandled___21608 = (r0);
    s.lastBrkId = 1721;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1721]) return breakpoint(s, 9, 1721, r0);
  case 9:
    s.tile___21611 = (undefined);
    s.unnamed1652___U2 = (s.arg2);
    s.unnamed1653___U3 = (0);
    s.lastBrkId = 1722;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1722]) return breakpoint(s, 10, 1722, r0);
  case 10:
  case 1:
    s.tmp_0 = r0 = s.unnamed1653___U3;
    r0 = pxsim_Array__length(s.unnamed1652___U2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 7; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1652___U2, s.unnamed1653___U3);
    s.tile___21611 = (r0);
    s.lastBrkId = 1723;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1723]) return breakpoint(s, 11, 1723, r0);
  case 11:
    r0 = pxsim_pxtcore_mkAction(1, ArcadePhysicsEngine_tilemapOverlaps_inline__P21615);
    s.tmp_2 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_2, 0, s.tile___21611);
    s.tmp_4 = helpers_arraySome__P107_mk(s);
    s.tmp_4.arg0 = s.alreadyHandled___21608;
    s.tmp_4.arg1 = s.tmp_2;
    s.callLocIdx = 683; s.pc = 12; return s.tmp_4;
  case 12:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 1724;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1724]) return breakpoint(s, 13, 1724, r0);
  case 13:
    { step = 6; continue; }
  case 2:
  case 3:
    s.lastBrkId = 1725;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1725]) return breakpoint(s, 14, 1725, r0);
  case 14:
    r0 = pxsim_Array__push(s.alreadyHandled___21608, s.tile___21611);
    s.lastBrkId = 1726;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1726]) return breakpoint(s, 15, 1726, r0);
  case 15:
    s.tmp_0 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 684; s.pc = 16; return s.tmp_0;
  case 16:
    r0 = s.retval;
    r0 = r0.fields["tileOverlapHandlers"];
    s.tileOverlapHandlers___21632 = (r0);
    s.lastBrkId = 1727;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1727]) return breakpoint(s, 17, 1727, r0);
  case 17:
    r0 = pxsim_numops_toBoolDecr(s.tileOverlapHandlers___21632);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 1728;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1728]) return breakpoint(s, 18, 1728, r0);
  case 18:
    r0 = pxsim_pxtcore_mkAction(2, forEach_inline__P21640);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg1);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 1, s.tile___21611);
    r0 = pxsim_pxtcore_mkAction(2, ArcadePhysicsEngine_tilemapOverlaps_inline__P21656);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_1, 0, s.arg1);
    r0 = pxsim_pxtrt_stclo(s.tmp_1, 1, s.tile___21611);
    s.tmp_2 = helpers_arrayForEach__P109_mk(s);
    s.tmp_3 = helpers_arrayFilter__P110_mk(s);
    s.tmp_3.arg0 = s.tileOverlapHandlers___21632;
    s.tmp_3.arg1 = s.tmp_0;
    s.callLocIdx = 687; s.pc = 20; return s.tmp_3;
  case 20:
    r0 = s.retval;
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = s.tmp_1;
    s.callLocIdx = 689; s.pc = 19; return s.tmp_2;
  case 19:
    r0 = s.retval;
  case 4:
  case 5:
  case 6:
    r0 = (s.unnamed1653___U3 + 1);
    s.unnamed1653___U3 = (r0);
    { step = 1; continue; }
  case 7:
    s.unnamed1652___U2 = (undefined);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
ArcadePhysicsEngine_tilemapOverlaps__P4431.info = {"start":21571,"length":701,"line":595,"column":4,"endLine":611,"endColumn":5,"fileName":"pxt_modules/game/physics.ts","functionName":"tilemapOverlaps","argumentNames":["this","sprite","overlappedTiles"]}

function ArcadePhysicsEngine_tilemapOverlaps__P4431_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ArcadePhysicsEngine_tilemapOverlaps__P4431, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  alreadyHandled___21608: undefined,
  tile___21611: undefined,
  unnamed1652___U2: undefined,
  unnamed1653___U3: undefined,
  tileOverlapHandlers___21632: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function ArcadePhysicsEngine_tilemapOverlaps_inline__P21615(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_2 = tiles_Location_col__P2373_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 679; s.pc = 3; return s.tmp_2;
  case 3:
    r0 = s.retval;
    s.tmp_1 = r0;
    s.tmp_4 = tiles_Location_col__P2373_mk(s);
    s.tmp_4.arg0 = s.caps[0];
    s.callLocIdx = 680; s.pc = 4; return s.tmp_4;
  case 4:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_1 === s.tmp_3);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    s.tmp_6 = tiles_Location_row__P2374_mk(s);
    s.tmp_6.arg0 = s.arg0;
    s.callLocIdx = 681; s.pc = 5; return s.tmp_6;
  case 5:
    r0 = s.retval;
    s.tmp_5 = r0;
    s.tmp_8 = tiles_Location_row__P2374_mk(s);
    s.tmp_8.arg0 = s.caps[0];
    s.callLocIdx = 682; s.pc = 6; return s.tmp_8;
  case 6:
    r0 = s.retval;
    s.tmp_7 = r0;
    r0 = (s.tmp_5 === s.tmp_7);
  case 2:
    // jmp value (already in r0)
    s.tmp_9 = r0;
    r0 = s.tmp_9;
    return leave(s, r0)
  default: oops()
} } }
ArcadePhysicsEngine_tilemapOverlaps_inline__P21615.info = {"start":21786,"length":45,"line":599,"column":36,"endLine":599,"endColumn":81,"fileName":"pxt_modules/game/physics.ts","functionName":"inline","argumentNames":["l"]}

function ArcadePhysicsEngine_tilemapOverlaps_inline__P21615_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ArcadePhysicsEngine_tilemapOverlaps_inline__P21615, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  arg0: undefined,
} }





function forEach_inline__P21640(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0.fields["spriteKind"];
    s.tmp_1 = r0;
    s.tmp_3 = Sprite_kind__P2146_mk(s);
    s.tmp_3.arg0 = s.caps[0];
    s.callLocIdx = 685; s.pc = 3; return s.tmp_3;
  case 3:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1 == s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = s.arg0.fields["tileKind"];
    s.tmp_4 = r0;
    s.tmp_6 = tiles_getTileImage__P2429_mk(s);
    s.tmp_6.arg0 = s.caps[1];
    s.callLocIdx = 686; s.pc = 4; return s.tmp_6;
  case 4:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = pxsim_ImageMethods.equals(s.tmp_4, s.tmp_5);
  case 2:
    // jmp value (already in r0)
    s.tmp_7 = r0;
    r0 = s.tmp_7;
    return leave(s, r0)
  default: oops()
} } }
forEach_inline__P21640.info = {"start":22100,"length":81,"line":607,"column":28,"endLine":607,"endColumn":109,"fileName":"pxt_modules/game/physics.ts","functionName":"inline","argumentNames":["h"]}

function forEach_inline__P21640_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: forEach_inline__P21640, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  arg0: undefined,
} }





function ArcadePhysicsEngine_tilemapOverlaps_inline__P21656(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = if_handler_3_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.caps[0];
    s.tmp_0.arg2 = s.caps[1];
    if (!s.tmp_0.arg0.vtable.iface) {
      setupLambda(s.tmp_0, pxsim_pxtrt.mapGetByString(s.tmp_0.arg0, "handler"), 3);
      s.callLocIdx = 688; s.pc = 1; return s.tmp_0;
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["handler"];
      if (s.tmp_0.fn == null) { setupLambda(s.tmp_0, s.tmp_0.arg0.fields["handler"], 3); s.callLocIdx = 688; s.pc = 1; return s.tmp_0; }
      else if (s.tmp_0.fn.isGetter) { s.tmp_0.stage2Call = true; s.callLocIdx = 688; s.pc = 1; return s.tmp_0;; }
     else { s.callLocIdx = 688; s.pc = 1; return s.tmp_0; }
    }
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
ArcadePhysicsEngine_tilemapOverlaps_inline__P21656.info = {"start":22212,"length":28,"line":608,"column":29,"endLine":608,"endColumn":57,"fileName":"pxt_modules/game/physics.ts","functionName":"inline","argumentNames":["h"]}

function ArcadePhysicsEngine_tilemapOverlaps_inline__P21656_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ArcadePhysicsEngine_tilemapOverlaps_inline__P21656, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function tiles_getTileImage__P2429(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.scene___21664 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 2207;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2207]) return breakpoint(s, 6, 2207, r0);
  case 6:
    s.tmp_0 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 893; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    s.scene___21664 = (r0);
    s.lastBrkId = 2208;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2208]) return breakpoint(s, 8, 2208, r0);
  case 8:
    r0 = pxsim_numops_toBoolDecr(s.arg0);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = s.scene___21664.fields["tileMap"];
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
  case 2:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2209;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2209]) return breakpoint(s, 9, 2209, r0);
  case 9:
    r0 = pxsim.image.ofBuffer(_hex21674);
    { step = 5; continue; }
  case 3:
  case 4:
    s.lastBrkId = 2210;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2210]) return breakpoint(s, 10, 2210, r0);
  case 10:
    s.tmp_5 = tiles_TileMap_getTileImage__P2423_mk(s);
    r0 = s.scene___21664.fields["tileMap"];
    s.tmp_5.arg0 = r0;
    s.tmp_6 = tiles_Location_tileSet__P2378_mk(s);
    s.tmp_6.arg0 = s.arg0;
    s.callLocIdx = 894; s.pc = 12; return s.tmp_6;
  case 12:
    r0 = s.retval;
    s.tmp_5.arg1 = r0;
    s.callLocIdx = 895; s.pc = 11; return s.tmp_5;
  case 11:
    r0 = s.retval;
  case 5:
    return leave(s, r0)
  default: oops()
} } }
tiles_getTileImage__P2429.info = {"start":16692,"length":207,"line":526,"column":4,"endLine":530,"endColumn":5,"fileName":"pxt_modules/game/tilemap.ts","functionName":"getTileImage","argumentNames":["loc"]}

function tiles_getTileImage__P2429_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_getTileImage__P2429, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  scene___21664: undefined,
  arg0: undefined,
} }

const _hex21674 = pxsim.BufferMethods.createBufferFromHex("8704000000000000")




function tiles_TileMap_getTileImage__P2423(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMap__C2400_VT)) failedCast(r0);
    s.lastBrkId = 2206;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2206]) return breakpoint(s, 1, 2206, r0);
  case 1:
    s.tmp_0 = tiles_TileMapData_getTileImage__P2396_mk(s);
    s.tmp_1 = tiles_TileMap_data__P4499_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.callLocIdx = 891; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = s.arg1;
    s.callLocIdx = 892; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leave(s, r0)
  default: oops()
} } }
tiles_TileMap_getTileImage__P2423.info = {"start":13755,"length":96,"line":443,"column":8,"endLine":445,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"getTileImage","argumentNames":["this","index"]}

function tiles_TileMap_getTileImage__P2423_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMap_getTileImage__P2423, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function tiles_TileMapData_getTileImage__P2396(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.size___21727 = undefined;
    s.cachedImage___21731 = undefined;
    s.originalImage___21738 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMapData__C2387_VT)) failedCast(r0);
    s.lastBrkId = 2117;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2117]) return breakpoint(s, 9, 2117, r0);
  case 9:
    s.tmp_1 = tiles_TileMapData_scale__P2391_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.callLocIdx = 828; s.pc = 10; return s.tmp_1;
  case 10:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = (1 << s.tmp_0);
    s.size___21727 = (r0);
    s.lastBrkId = 2118;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2118]) return breakpoint(s, 11, 2118, r0);
  case 11:
    r0 = s.arg0.fields["cachedTileView"];
    s.tmp_0 = r0;
    r0 = pxsim_Array__getAt(s.tmp_0, s.arg1);
    s.cachedImage___21731 = (r0);
    s.lastBrkId = 2119;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2119]) return breakpoint(s, 12, 2119, r0);
  case 12:
    r0 = pxsim_numops_toBoolDecr(s.cachedImage___21731);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 2120;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2120]) return breakpoint(s, 13, 2120, r0);
  case 13:
    r0 = s.arg0.fields["tileset"];
    s.tmp_2 = r0;
    r0 = pxsim_Array__getAt(s.tmp_2, s.arg1);
    s.originalImage___21738 = (r0);
    s.lastBrkId = 2121;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2121]) return breakpoint(s, 14, 2121, r0);
  case 14:
    r0 = pxsim_numops_toBoolDecr(s.originalImage___21738);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 2122;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2122]) return breakpoint(s, 15, 2122, r0);
  case 15:
    r0 = pxsim_ImageMethods.width(s.originalImage___21738);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 <= s.size___21727);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = pxsim_ImageMethods.height(s.originalImage___21738);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 <= s.size___21727);
  case 2:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2123;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2123]) return breakpoint(s, 16, 2123, r0);
  case 16:
    s.cachedImage___21731 = (s.originalImage___21738);
    { step = 4; continue; }
  case 3:
    s.lastBrkId = 2124;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2124]) return breakpoint(s, 17, 2124, r0);
  case 17:
    r0 = pxsim.image.create(s.size___21727, s.size___21727);
    s.cachedImage___21731 = (r0);
    s.lastBrkId = 2125;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2125]) return breakpoint(s, 18, 2125, r0);
  case 18:
    r0 = pxsim_ImageMethods.drawImage(s.cachedImage___21731, s.originalImage___21738, 0, 0);
  case 4:
    s.lastBrkId = 2126;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2126]) return breakpoint(s, 19, 2126, r0);
  case 19:
    r0 = s.arg0.fields["cachedTileView"];
    s.tmp_0 = r0;
    r0 = pxsim_Array_.setAt(s.tmp_0, s.arg1, s.cachedImage___21731);
  case 5:
  case 6:
  case 7:
  case 8:
    s.lastBrkId = 2127;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2127]) return breakpoint(s, 20, 2127, r0);
  case 20:
    r0 = s.cachedImage___21731;
    return leave(s, r0)
  default: oops()
} } }
tiles_TileMapData_getTileImage__P2396.info = {"start":4599,"length":717,"line":172,"column":8,"endLine":189,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"getTileImage","argumentNames":["this","index"]}

function tiles_TileMapData_getTileImage__P2396_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMapData_getTileImage__P2396, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  size___21727: undefined,
  cachedImage___21731: undefined,
  originalImage___21738: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function tiles_TileMapData_scale__P2391(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMapData__C2387_VT)) failedCast(r0);
    s.lastBrkId = 2111;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2111]) return breakpoint(s, 1, 2111, r0);
  case 1:
    r0 = s.arg0.fields["_scale"];
    return leaveAccessor(s, r0)
  default: oops()
} } }
tiles_TileMapData_scale__P2391.info = {"start":3809,"length":66,"line":143,"column":8,"endLine":145,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"scale","argumentNames":["this"]}
tiles_TileMapData_scale__P2391.isGetter = true;

function tiles_TileMapData_scale__P2391_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMapData_scale__P2391, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function tiles_Location_tileSet__P2378(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_Location__C2372_VT)) failedCast(r0);
    s.lastBrkId = 2102;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2102]) return breakpoint(s, 1, 2102, r0);
  case 1:
    s.tmp_0 = tiles_TileMap_getTileIndex__P2414_mk(s);
    r0 = s.arg0.fields["tileMap"];
    s.tmp_0.arg0 = r0;
    r0 = s.arg0.fields["_col"];
    s.tmp_0.arg1 = r0;
    r0 = s.arg0.fields["_row"];
    s.tmp_0.arg2 = r0;
    s.callLocIdx = 824; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leaveAccessor(s, r0)
  default: oops()
} } }
tiles_Location_tileSet__P2378.info = {"start":981,"length":101,"line":43,"column":8,"endLine":45,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"tileSet","argumentNames":["this"]}
tiles_Location_tileSet__P2378.isGetter = true;

function tiles_Location_tileSet__P2378_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_Location_tileSet__P2378, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function tiles_TileMap_getTileIndex__P2414(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMap__C2400_VT)) failedCast(r0);
    s.lastBrkId = 2145;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2145]) return breakpoint(s, 1, 2145, r0);
  case 1:
    s.tmp_0 = tiles_TileMapData_getTile__P2393_mk(s);
    s.tmp_1 = tiles_TileMap_data__P4499_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.callLocIdx = 846; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = s.arg1;
    s.tmp_0.arg2 = s.arg2;
    s.callLocIdx = 847; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leave(s, r0)
  default: oops()
} } }
tiles_TileMap_getTileIndex__P2414.info = {"start":7436,"length":105,"line":274,"column":8,"endLine":276,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"getTileIndex","argumentNames":["this","col","row"]}

function tiles_TileMap_getTileIndex__P2414_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMap_getTileIndex__P2414, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function tiles_TileMapData_getTile__P2393(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMapData__C2387_VT)) failedCast(r0);
    s.lastBrkId = 2114;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2114]) return breakpoint(s, 4, 2114, r0);
  case 4:
    s.tmp_1 = tiles_TileMapData_isOutsideMap__P2399_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.tmp_1.arg1 = s.arg1;
    s.tmp_1.arg2 = s.arg2;
    s.callLocIdx = 826; s.pc = 5; return s.tmp_1;
  case 5:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2115;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2115]) return breakpoint(s, 6, 2115, r0);
  case 6:
    r0 = 0;
    { step = 3; continue; }
  case 1:
  case 2:
    s.lastBrkId = 2116;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2116]) return breakpoint(s, 7, 2116, r0);
  case 7:
    r0 = s.arg0.fields["data"];
    s.tmp_2 = r0;
    r0 = (s.arg1 | 0);
    s.tmp_5 = r0;
    r0 = (4 + s.tmp_5);
    s.tmp_4 = r0;
    r0 = (s.arg2 | 0);
    s.tmp_7 = r0;
    s.tmp_9 = tiles_TileMapData_width__P2389_mk(s);
    s.tmp_9.arg0 = s.arg0;
    s.callLocIdx = 827; s.pc = 8; return s.tmp_9;
  case 8:
    r0 = s.retval;
    s.tmp_8 = r0;
    r0 = (s.tmp_7 * s.tmp_8);
    s.tmp_6 = r0;
    r0 = (s.tmp_4 + s.tmp_6);
    s.tmp_3 = r0;
    r0 = pxsim.BufferMethods.getUint8(s.tmp_2, s.tmp_3);
  case 3:
    return leave(s, r0)
  default: oops()
} } }
tiles_TileMapData_getTile__P2393.info = {"start":3997,"length":200,"line":152,"column":8,"endLine":156,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"getTile","argumentNames":["this","col","row"]}

function tiles_TileMapData_getTile__P2393_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMapData_getTile__P2393, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function tiles_TileMapData_isOutsideMap__P2399(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMapData__C2387_VT)) failedCast(r0);
    s.lastBrkId = 2129;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2129]) return breakpoint(s, 7, 2129, r0);
  case 7:
    r0 = (s.arg1 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    s.tmp_1 = r0 = s.arg1;
    s.tmp_3 = tiles_TileMapData_width__P2389_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.callLocIdx = 829; s.pc = 8; return s.tmp_3;
  case 8:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1 >= s.tmp_2);
  case 2:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBool(s.tmp_4);
    if (!r0) { step = 3; continue; }
    r0 = s.tmp_4;
    { step = 4; continue; }
  case 3:
    r0 = (s.arg2 < 0);
  case 4:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    r0 = pxsim_numops_toBool(s.tmp_5);
    if (!r0) { step = 5; continue; }
    r0 = s.tmp_5;
    { step = 6; continue; }
  case 5:
    s.tmp_6 = r0 = s.arg2;
    s.tmp_8 = tiles_TileMapData_height__P2390_mk(s);
    s.tmp_8.arg0 = s.arg0;
    s.callLocIdx = 830; s.pc = 9; return s.tmp_8;
  case 9:
    r0 = s.retval;
    s.tmp_7 = r0;
    r0 = (s.tmp_6 >= s.tmp_7);
  case 6:
    // jmp value (already in r0)
    s.tmp_9 = r0;
    r0 = s.tmp_9;
    return leave(s, r0)
  default: oops()
} } }
tiles_TileMapData_isOutsideMap__P2399.info = {"start":5580,"length":132,"line":199,"column":8,"endLine":201,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"isOutsideMap","argumentNames":["this","col","row"]}

function tiles_TileMapData_isOutsideMap__P2399_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMapData_isOutsideMap__P2399, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function tiles_Location_row__P2374(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_Location__C2372_VT)) failedCast(r0);
    s.lastBrkId = 2094;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2094]) return breakpoint(s, 1, 2094, r0);
  case 1:
    r0 = s.arg0.fields["_row"];
    return leaveAccessor(s, r0)
  default: oops()
} } }
tiles_Location_row__P2374.info = {"start":467,"length":51,"line":23,"column":8,"endLine":25,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"row","argumentNames":["this"]}
tiles_Location_row__P2374.isGetter = true;

function tiles_Location_row__P2374_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_Location_row__P2374, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function tiles_Location_col__P2373(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_Location__C2372_VT)) failedCast(r0);
    s.lastBrkId = 2093;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2093]) return breakpoint(s, 1, 2093, r0);
  case 1:
    r0 = s.arg0.fields["_col"];
    return leaveAccessor(s, r0)
  default: oops()
} } }
tiles_Location_col__P2373.info = {"start":406,"length":51,"line":19,"column":8,"endLine":21,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"col","argumentNames":["this"]}
tiles_Location_col__P2373.isGetter = true;

function tiles_Location_col__P2373_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_Location_col__P2373, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function tiles_TileMap_getObstacle__P2421(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.index___21904 = undefined;
    s.tile___21916 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMap__C2400_VT)) failedCast(r0);
    s.lastBrkId = 2187;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2187]) return breakpoint(s, 3, 2187, r0);
  case 3:
    s.tmp_1 = tiles_TileMapData_isOutsideMap__P2399_mk(s);
    r0 = s.arg0.fields["_map"];
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = s.arg1;
    s.tmp_1.arg2 = s.arg2;
    s.callLocIdx = 871; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = 0;
    { step = 2; continue; }
  case 1:
    s.tmp_2 = tiles_TileMapData_getTile__P2393_mk(s);
    r0 = s.arg0.fields["_map"];
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = s.arg1;
    s.tmp_2.arg2 = s.arg2;
    s.callLocIdx = 872; s.pc = 5; return s.tmp_2;
  case 5:
    r0 = s.retval;
  case 2:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    s.index___21904 = (s.tmp_3);
    s.lastBrkId = 2188;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2188]) return breakpoint(s, 6, 2188, r0);
  case 6:
    s.tmp_0 = tiles_TileMapData_getTileImage__P2396_mk(s);
    r0 = s.arg0.fields["_map"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = s.index___21904;
    s.callLocIdx = 873; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    s.tile___21916 = (r0);
    s.lastBrkId = 2189;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2189]) return breakpoint(s, 8, 2189, r0);
  case 8:
    r0 = pxsim_pxtcore_mkClassInstance(sprites_StaticObstacle__C2225_VT);
    s.tmp_0 = r0;
    s.tmp_1 = sprites_StaticObstacle_constructor__P2231_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = s.tile___21916;
    s.tmp_2 = r0 = s.arg2;
    s.tmp_4 = tiles_TileMap_scale__P2403_mk(s);
    s.tmp_4.arg0 = s.arg0;
    s.callLocIdx = 874; s.pc = 10; return s.tmp_4;
  case 10:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_2 << s.tmp_3);
    s.tmp_1.arg2 = r0;
    s.tmp_5 = r0 = s.arg1;
    s.tmp_7 = tiles_TileMap_scale__P2403_mk(s);
    s.tmp_7.arg0 = s.arg0;
    s.callLocIdx = 875; s.pc = 11; return s.tmp_7;
  case 11:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = (s.tmp_5 << s.tmp_6);
    s.tmp_1.arg3 = r0;
    s.tmp_8 = tiles_TileMap_layer__P2409_mk(s);
    s.tmp_8.arg0 = s.arg0;
    s.callLocIdx = 876; s.pc = 12; return s.tmp_8;
  case 12:
    r0 = s.retval;
    s.tmp_1.arg4 = r0;
    s.tmp_1.arg5 = s.index___21904;
    s.callLocIdx = 877; s.pc = 9; return s.tmp_1;
  case 9:
    r0 = s.retval;
    r0 = s.tmp_0;
    return leave(s, r0)
  default: oops()
} } }
tiles_TileMap_getObstacle__P2421.info = {"start":12698,"length":410,"line":412,"column":8,"endLine":422,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"getObstacle","argumentNames":["this","col","row"]}

function tiles_TileMap_getObstacle__P2421_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMap_getObstacle__P2421, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  index___21904: undefined,
  tile___21916: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function tiles_TileMap_layer__P2409(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMap__C2400_VT)) failedCast(r0);
    s.lastBrkId = 2142;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2142]) return breakpoint(s, 1, 2142, r0);
  case 1:
    r0 = s.arg0.fields["_layer"];
    return leaveAccessor(s, r0)
  default: oops()
} } }
tiles_TileMap_layer__P2409.info = {"start":6953,"length":63,"line":252,"column":8,"endLine":254,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"layer","argumentNames":["this"]}
tiles_TileMap_layer__P2409.isGetter = true;

function tiles_TileMap_layer__P2409_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMap_layer__P2409, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function sprites_StaticObstacle_constructor__P2231(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.arg5 = (s.lambdaArgs[5]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_StaticObstacle__C2225_VT)) failedCast(r0);
    s.lastBrkId = 1480;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1480]) return breakpoint(s, 1, 1480, r0);
  case 1:
    r0 = (s.arg0).fields["image"] = (s.arg1);
    s.lastBrkId = 1481;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1481]) return breakpoint(s, 2, 1481, r0);
  case 2:
    r0 = (s.arg0).fields["layer"] = (s.arg4);
    s.lastBrkId = 1482;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1482]) return breakpoint(s, 3, 1482, r0);
  case 3:
    r0 = (s.arg0).fields["top"] = (s.arg2);
    s.lastBrkId = 1483;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1483]) return breakpoint(s, 4, 1483, r0);
  case 4:
    r0 = (s.arg0).fields["left"] = (s.arg3);
    s.lastBrkId = 1484;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1484]) return breakpoint(s, 5, 1484, r0);
  case 5:
    r0 = (s.arg0).fields["tileIndex"] = (s.arg5);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
sprites_StaticObstacle_constructor__P2231.info = {"start":563,"length":261,"line":28,"column":8,"endLine":34,"endColumn":9,"fileName":"pxt_modules/game/obstacle.ts","functionName":"inline","argumentNames":["this","image","top","left","layer","tileIndex"]}

function sprites_StaticObstacle_constructor__P2231_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_StaticObstacle_constructor__P2231, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
  arg5: undefined,
} }





function tiles_TileMap_isObstacle__P2420(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMap__C2400_VT)) failedCast(r0);
    s.lastBrkId = 2182;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2182]) return breakpoint(s, 6, 2182, r0);
  case 6:
    s.tmp_3 = tiles_TileMap_enabled__P2411_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.callLocIdx = 868; s.pc = 7; return s.tmp_3;
  case 7:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2183;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2183]) return breakpoint(s, 8, 2183, r0);
  case 8:
    r0 = false;
    { step = 5; continue; }
  case 1:
  case 2:
    s.lastBrkId = 2184;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2184]) return breakpoint(s, 9, 2184, r0);
  case 9:
    s.tmp_5 = tiles_TileMapData_isOutsideMap__P2399_mk(s);
    r0 = s.arg0.fields["_map"];
    s.tmp_5.arg0 = r0;
    s.tmp_5.arg1 = s.arg1;
    s.tmp_5.arg2 = s.arg2;
    s.callLocIdx = 869; s.pc = 10; return s.tmp_5;
  case 10:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_4);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2185;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2185]) return breakpoint(s, 11, 2185, r0);
  case 11:
    r0 = true;
    { step = 5; continue; }
  case 3:
  case 4:
    s.lastBrkId = 2186;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2186]) return breakpoint(s, 12, 2186, r0);
  case 12:
    s.tmp_6 = tiles_TileMapData_isWall__P2398_mk(s);
    r0 = s.arg0.fields["_map"];
    s.tmp_6.arg0 = r0;
    s.tmp_6.arg1 = s.arg1;
    s.tmp_6.arg2 = s.arg2;
    s.callLocIdx = 870; s.pc = 13; return s.tmp_6;
  case 13:
    r0 = s.retval;
  case 5:
    return leave(s, r0)
  default: oops()
} } }
tiles_TileMap_isObstacle__P2420.info = {"start":12477,"length":211,"line":405,"column":8,"endLine":410,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"isObstacle","argumentNames":["this","col","row"]}

function tiles_TileMap_isObstacle__P2420_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMap_isObstacle__P2420, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function tiles_TileMapData_isWall__P2398(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMapData__C2387_VT)) failedCast(r0);
    s.lastBrkId = 2128;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2128]) return breakpoint(s, 1, 2128, r0);
  case 1:
    r0 = s.arg0.fields["layers"];
    s.tmp_1 = r0;
    r0 = pxsim_ImageMethods.getPixel(s.tmp_1, s.arg1, s.arg2);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 === 2);
    return leave(s, r0)
  default: oops()
} } }
tiles_TileMapData_isWall__P2398.info = {"start":5463,"length":107,"line":195,"column":8,"endLine":197,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"isWall","argumentNames":["this","col","row"]}

function tiles_TileMapData_isWall__P2398_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMapData_isWall__P2398, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function tiles_TileMap_getTile__P2413(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMap__C2400_VT)) failedCast(r0);
    s.lastBrkId = 2144;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2144]) return breakpoint(s, 1, 2144, r0);
  case 1:
    r0 = pxsim_pxtcore_mkClassInstance(tiles_Location__C2372_VT);
    s.tmp_0 = r0;
    s.tmp_1 = tiles_Location_constructor__P2375_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = s.arg1;
    s.tmp_1.arg2 = s.arg2;
    s.tmp_1.arg3 = s.arg0;
    s.callLocIdx = 845; s.pc = 2; return s.tmp_1;
  case 2:
    r0 = s.retval;
    r0 = s.tmp_0;
    return leave(s, r0)
  default: oops()
} } }
tiles_TileMap_getTile__P2413.info = {"start":7315,"length":111,"line":270,"column":8,"endLine":272,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"getTile","argumentNames":["this","col","row"]}

function tiles_TileMap_getTile__P2413_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMap_getTile__P2413, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function tiles_Location_constructor__P2375(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_Location__C2372_VT)) failedCast(r0);
    s.lastBrkId = 2095;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2095]) return breakpoint(s, 1, 2095, r0);
  case 1:
    r0 = (s.arg0).fields["_col"] = (s.arg1);
    s.lastBrkId = 2096;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2096]) return breakpoint(s, 2, 2096, r0);
  case 2:
    r0 = (s.arg0).fields["_row"] = (s.arg2);
    s.lastBrkId = 2097;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2097]) return breakpoint(s, 3, 2097, r0);
  case 3:
    r0 = (s.arg0).fields["tileMap"] = (s.arg3);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
tiles_Location_constructor__P2375.info = {"start":528,"length":153,"line":27,"column":8,"endLine":31,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"inline","argumentNames":["this","col","row","map"]}

function tiles_Location_constructor__P2375_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_Location_constructor__P2375, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function Sprite_registerObstacle__P2164(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.collisionHandlers___21817 = undefined;
    s.wallCollisionHandlers___21824 = undefined;
    s.wallHandlersToRun___21849 = undefined;
    s.asTileLocation___21862 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1359;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1359]) return breakpoint(s, 9, 1359, r0);
  case 9:
    r0 = s.arg0.fields["_obstacles"];
    s.tmp_0 = r0;
    r0 = pxsim_Array_.setAt(s.tmp_0, s.arg1, s.arg2);
    s.lastBrkId = 1360;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1360]) return breakpoint(s, 10, 1360, r0);
  case 10:
    s.tmp_1 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 413; s.pc = 11; return s.tmp_1;
  case 11:
    r0 = s.retval;
    r0 = r0.fields["collisionHandlers"];
    s.tmp_0 = r0;
    s.tmp_3 = if_tileIndex_1_mk(s);
    s.tmp_3.arg0 = s.arg2;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "tileIndex");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["tileIndex"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["tileIndex"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 414; s.pc = 12; return s.tmp_3; }
    }
  case 12:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_Array__getAt(s.tmp_0, s.tmp_2);
    s.collisionHandlers___21817 = (r0);
    s.lastBrkId = 1361;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1361]) return breakpoint(s, 13, 1361, r0);
  case 13:
    s.tmp_0 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 415; s.pc = 14; return s.tmp_0;
  case 14:
    r0 = s.retval;
    r0 = r0.fields["wallCollisionHandlers"];
    s.wallCollisionHandlers___21824 = (r0);
    s.lastBrkId = 1362;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1362]) return breakpoint(s, 15, 1362, r0);
  case 15:
    r0 = pxsim_numops_toBoolDecr(s.collisionHandlers___21817);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1363;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1363]) return breakpoint(s, 16, 1363, r0);
  case 16:
    r0 = pxsim_pxtcore_mkAction(1, forEach_inline__P21832);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    r0 = pxsim_pxtcore_mkAction(1, Sprite_registerObstacle_inline__P21838);
    s.tmp_1 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_1, 0, s.arg0);
    s.tmp_2 = helpers_arrayForEach__P109_mk(s);
    s.tmp_3 = helpers_arrayFilter__P110_mk(s);
    s.tmp_3.arg0 = s.collisionHandlers___21817;
    s.tmp_3.arg1 = s.tmp_0;
    s.callLocIdx = 417; s.pc = 18; return s.tmp_3;
  case 18:
    r0 = s.retval;
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = s.tmp_1;
    s.callLocIdx = 419; s.pc = 17; return s.tmp_2;
  case 17:
    r0 = s.retval;
  case 1:
  case 2:
    s.lastBrkId = 1364;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1364]) return breakpoint(s, 19, 1364, r0);
  case 19:
    r0 = pxsim_numops_toBoolDecr(s.wallCollisionHandlers___21824);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 1365;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1365]) return breakpoint(s, 20, 1365, r0);
  case 20:
    s.tmp_0 = r0 = s.arg3;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 3; continue; }
    r0 = s.tmp_0;
    { step = 4; continue; }
  case 3:
    s.tmp_1 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 420; s.pc = 21; return s.tmp_1;
  case 21:
    r0 = s.retval;
    r0 = r0.fields["tileMap"];
  case 4:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    s.arg3 = (s.tmp_2);
    s.lastBrkId = 1366;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1366]) return breakpoint(s, 22, 1366, r0);
  case 22:
    r0 = pxsim_pxtcore_mkAction(1, wallHandlersToRun_inline__P21851);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    s.tmp_1 = helpers_arrayFilter__P110_mk(s);
    s.tmp_1.arg0 = s.wallCollisionHandlers___21824;
    s.tmp_1.arg1 = s.tmp_0;
    s.callLocIdx = 422; s.pc = 23; return s.tmp_1;
  case 23:
    r0 = s.retval;
    s.wallHandlersToRun___21849 = (r0);
    s.lastBrkId = 1367;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1367]) return breakpoint(s, 24, 1367, r0);
  case 24:
    r0 = pxsim_Array__length(s.wallHandlersToRun___21849);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 1368;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1368]) return breakpoint(s, 25, 1368, r0);
  case 25:
    s.tmp_1 = tiles_TileMap_getTile__P2413_mk(s);
    s.tmp_1.arg0 = s.arg3;
    s.tmp_3 = if_left_1_mk(s);
    s.tmp_3.arg0 = s.arg2;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "left");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["left"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["left"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 423; s.pc = 27; return s.tmp_3; }
    }
  case 27:
    r0 = s.retval;
    s.tmp_2 = r0;
    s.tmp_5 = tiles_TileMap_scale__P2403_mk(s);
    s.tmp_5.arg0 = s.arg3;
    s.callLocIdx = 424; s.pc = 28; return s.tmp_5;
  case 28:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = (s.tmp_2 >> s.tmp_4);
    s.tmp_1.arg1 = r0;
    s.tmp_7 = if_top_1_mk(s);
    s.tmp_7.arg0 = s.arg2;
    if (!s.tmp_7.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_7.arg0, "top");
    } else {
      s.tmp_7.fn = s.tmp_7.arg0.vtable.iface["top"];
      if (s.tmp_7.fn == null) { s.retval = s.tmp_7.arg0.fields["top"]; }
      else if (!s.tmp_7.fn.isGetter) { s.retval = bind(s.tmp_7); }
     else { s.callLocIdx = 425; s.pc = 29; return s.tmp_7; }
    }
  case 29:
    r0 = s.retval;
    s.tmp_6 = r0;
    s.tmp_9 = tiles_TileMap_scale__P2403_mk(s);
    s.tmp_9.arg0 = s.arg3;
    s.callLocIdx = 426; s.pc = 30; return s.tmp_9;
  case 30:
    r0 = s.retval;
    s.tmp_8 = r0;
    r0 = (s.tmp_6 >> s.tmp_8);
    s.tmp_1.arg2 = r0;
    s.callLocIdx = 427; s.pc = 26; return s.tmp_1;
  case 26:
    r0 = s.retval;
    s.asTileLocation___21862 = (r0);
    s.lastBrkId = 1369;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1369]) return breakpoint(s, 31, 1369, r0);
  case 31:
    r0 = pxsim_pxtcore_mkAction(2, Sprite_registerObstacle_inline__P21878);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 1, s.asTileLocation___21862);
    s.tmp_1 = helpers_arrayForEach__P109_mk(s);
    s.tmp_1.arg0 = s.wallHandlersToRun___21849;
    s.tmp_1.arg1 = s.tmp_0;
    s.callLocIdx = 429; s.pc = 32; return s.tmp_1;
  case 32:
    r0 = s.retval;
  case 5:
  case 6:
  case 7:
  case 8:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite_registerObstacle__P2164.info = {"start":23704,"length":965,"line":761,"column":4,"endLine":781,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"registerObstacle","argumentNames":["this","direction","other","tm"]}

function Sprite_registerObstacle__P2164_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_registerObstacle__P2164, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  collisionHandlers___21817: undefined,
  wallCollisionHandlers___21824: undefined,
  wallHandlersToRun___21849: undefined,
  asTileLocation___21862: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function forEach_inline__P21832(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0.fields["kind"];
    s.tmp_0 = r0;
    s.tmp_2 = Sprite_kind__P2146_mk(s);
    s.tmp_2.arg0 = s.caps[0];
    s.callLocIdx = 416; s.pc = 1; return s.tmp_2;
  case 1:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0 == s.tmp_1);
    return leave(s, r0)
  default: oops()
} } }
forEach_inline__P21832.info = {"start":24102,"length":26,"line":768,"column":24,"endLine":768,"endColumn":50,"fileName":"pxt_modules/game/sprite.ts","functionName":"inline","argumentNames":["h"]}

function forEach_inline__P21832_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: forEach_inline__P21832, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function Sprite_registerObstacle_inline__P21838(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = if_handler_2_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.caps[0];
    if (!s.tmp_0.arg0.vtable.iface) {
      setupLambda(s.tmp_0, pxsim_pxtrt.mapGetByString(s.tmp_0.arg0, "handler"), 2);
      s.callLocIdx = 418; s.pc = 1; return s.tmp_0;
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["handler"];
      if (s.tmp_0.fn == null) { setupLambda(s.tmp_0, s.tmp_0.arg0.fields["handler"], 2); s.callLocIdx = 418; s.pc = 1; return s.tmp_0; }
      else if (s.tmp_0.fn.isGetter) { s.tmp_0.stage2Call = true; s.callLocIdx = 418; s.pc = 1; return s.tmp_0;; }
     else { s.callLocIdx = 418; s.pc = 1; return s.tmp_0; }
    }
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite_registerObstacle_inline__P21838.info = {"start":24155,"length":20,"line":769,"column":25,"endLine":769,"endColumn":45,"fileName":"pxt_modules/game/sprite.ts","functionName":"inline","argumentNames":["h"]}

function Sprite_registerObstacle_inline__P21838_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_registerObstacle_inline__P21838, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function wallHandlersToRun_inline__P21851(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0.fields["spriteKind"];
    s.tmp_0 = r0;
    s.tmp_2 = Sprite_kind__P2146_mk(s);
    s.tmp_2.arg0 = s.caps[0];
    s.callLocIdx = 421; s.pc = 1; return s.tmp_2;
  case 1:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0 == s.tmp_1);
    return leave(s, r0)
  default: oops()
} } }
wallHandlersToRun_inline__P21851.info = {"start":24361,"length":32,"line":774,"column":24,"endLine":774,"endColumn":56,"fileName":"pxt_modules/game/sprite.ts","functionName":"inline","argumentNames":["h"]}

function wallHandlersToRun_inline__P21851_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: wallHandlersToRun_inline__P21851, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function Sprite_registerObstacle_inline__P21878(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = if_handler_3_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.caps[0];
    s.tmp_0.arg2 = s.caps[1];
    if (!s.tmp_0.arg0.vtable.iface) {
      setupLambda(s.tmp_0, pxsim_pxtrt.mapGetByString(s.tmp_0.arg0, "handler"), 3);
      s.callLocIdx = 428; s.pc = 1; return s.tmp_0;
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["handler"];
      if (s.tmp_0.fn == null) { setupLambda(s.tmp_0, s.tmp_0.arg0.fields["handler"], 3); s.callLocIdx = 428; s.pc = 1; return s.tmp_0; }
      else if (s.tmp_0.fn.isGetter) { s.tmp_0.stage2Call = true; s.callLocIdx = 428; s.pc = 1; return s.tmp_0;; }
     else { s.callLocIdx = 428; s.pc = 1; return s.tmp_0; }
    }
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite_registerObstacle_inline__P21878.info = {"start":24601,"length":36,"line":778,"column":29,"endLine":778,"endColumn":65,"fileName":"pxt_modules/game/sprite.ts","functionName":"inline","argumentNames":["h"]}

function Sprite_registerObstacle_inline__P21878_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_registerObstacle_inline__P21878, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function Fx_min__P166(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 274;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[274]) return breakpoint(s, 4, 274, r0);
  case 4:
    r0 = (s.arg0 < s.arg1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 275;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[275]) return breakpoint(s, 5, 275, r0);
  case 5:
    r0 = s.arg0;
    { step = 3; continue; }
    { step = 2; continue; }
  case 1:
    s.lastBrkId = 276;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[276]) return breakpoint(s, 6, 276, r0);
  case 6:
    r0 = s.arg1;
    { step = 3; continue; }
  case 2:
    r0 = undefined;
  case 3:
    return leave(s, r0)
  default: oops()
} } }
Fx_min__P166.info = {"start":1675,"length":117,"line":50,"column":4,"endLine":55,"endColumn":5,"fileName":"pxt_modules/base/fixed.ts","functionName":"min","argumentNames":["a","b"]}

function Fx_min__P166_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Fx_min__P166, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Fx_iadd__P158(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 264;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[264]) return breakpoint(s, 1, 264, r0);
  case 1:
    r0 = (s.arg0 << 8);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 + s.arg1);
    return leave(s, r0)
  default: oops()
} } }
Fx_iadd__P158.info = {"start":634,"length":110,"line":23,"column":4,"endLine":25,"endColumn":5,"fileName":"pxt_modules/base/fixed.ts","functionName":"iadd","argumentNames":["a","b"]}

function Fx_iadd__P158_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Fx_iadd__P158, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Fx_toIntShifted__P156(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 262;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[262]) return breakpoint(s, 1, 262, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    r0 = (s.arg1 + 8);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 >> s.tmp_1);
    return leave(s, r0)
  default: oops()
} } }
Fx_toIntShifted__P156.info = {"start":404,"length":102,"line":17,"column":4,"endLine":19,"endColumn":5,"fileName":"pxt_modules/base/fixed.ts","functionName":"toIntShifted","argumentNames":["a","n"]}

function Fx_toIntShifted__P156_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Fx_toIntShifted__P156, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Math_sign__P129(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 249;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[249]) return breakpoint(s, 6, 249, r0);
  case 6:
    r0 = (s.arg0 == 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 250;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[250]) return breakpoint(s, 7, 250, r0);
  case 7:
    r0 = 0;
    { step = 5; continue; }
  case 1:
  case 2:
    s.lastBrkId = 251;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[251]) return breakpoint(s, 8, 251, r0);
  case 8:
    r0 = (s.arg0 > 0);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 252;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[252]) return breakpoint(s, 9, 252, r0);
  case 9:
    r0 = 1;
    { step = 5; continue; }
  case 3:
  case 4:
    s.lastBrkId = 253;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[253]) return breakpoint(s, 10, 253, r0);
  case 10:
    r0 = -1;
  case 5:
    return leave(s, r0)
  default: oops()
} } }
Math_sign__P129.info = {"start":16330,"length":125,"line":546,"column":4,"endLine":550,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"sign","argumentNames":["x"]}

function Math_sign__P129_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Math_sign__P129, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function helpers_arraySome__P107(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.len___21886 = undefined;
    s.i___21889 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 102;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[102]) return breakpoint(s, 6, 102, r0);
  case 6:
    r0 = pxsim_Array__length(s.arg0);
    s.len___21886 = (r0);
    s.lastBrkId = 103;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[103]) return breakpoint(s, 7, 103, r0);
  case 7:
    s.i___21889 = (0);
    s.lastBrkId = 104;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[104]) return breakpoint(s, 8, 104, r0);
  case 8:
  case 1:
    s.lastBrkId = 105;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[105]) return breakpoint(s, 9, 105, r0);
  case 9:
    r0 = (s.i___21889 < s.len___21886);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 106;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[106]) return breakpoint(s, 10, 106, r0);
  case 10:
    s.tmp_2 = lambda_3_mk(s);
    s.tmp_2.argL = s.arg1;
    r0 = pxsim_Array__getAt(s.arg0, s.i___21889);
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = s.i___21889;
    setupLambda(s.tmp_2, s.tmp_2.argL);
    s.callLocIdx = 5; s.pc = 11; return s.tmp_2;
  case 11:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 107;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[107]) return breakpoint(s, 12, 107, r0);
  case 12:
    r0 = true;
    { step = 5; continue; }
  case 2:
  case 3:
    s.lastBrkId = 108;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[108]) return breakpoint(s, 13, 108, r0);
  case 13:
    r0 = (s.i___21889 + 1);
    s.i___21889 = (r0);
    { step = 1; continue; }
  case 4:
    s.lastBrkId = 109;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[109]) return breakpoint(s, 14, 109, r0);
  case 14:
    r0 = false;
  case 5:
    return leave(s, r0)
  default: oops()
} } }
helpers_arraySome__P107.info = {"start":6833,"length":296,"line":238,"column":4,"endLine":244,"endColumn":5,"fileName":"pxt_modules/base/pxt-helpers.ts","functionName":"arraySome","argumentNames":["arr","callbackfn"]}

function helpers_arraySome__P107_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: helpers_arraySome__P107, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  len___21886: undefined,
  i___21889: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function tiles_TileMap_isOnWall__P2422(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.hbox___20996 = undefined;
    s.left___20999 = undefined;
    s.right___21005 = undefined;
    s.top___21011 = undefined;
    s.bottom___21017 = undefined;
    s.col___21023 = undefined;
    s.row___21029 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMap__C2400_VT)) failedCast(r0);
    s.lastBrkId = 2190;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2190]) return breakpoint(s, 8, 2190, r0);
  case 8:
    r0 = s.arg1.fields["_hitbox"];
    s.hbox___20996 = (r0);
    s.lastBrkId = 2191;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2191]) return breakpoint(s, 9, 2191, r0);
  case 9:
    s.tmp_0 = Fx_toIntShifted__P156_mk(s);
    s.tmp_1 = game_Hitbox_left__P1997_mk(s);
    s.tmp_1.arg0 = s.hbox___20996;
    s.callLocIdx = 878; s.pc = 11; return s.tmp_1;
  case 11:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.tmp_2 = tiles_TileMap_scale__P2403_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 879; s.pc = 12; return s.tmp_2;
  case 12:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 880; s.pc = 10; return s.tmp_0;
  case 10:
    r0 = s.retval;
    s.left___20999 = (r0);
    s.lastBrkId = 2192;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2192]) return breakpoint(s, 13, 2192, r0);
  case 13:
    s.tmp_0 = Fx_toIntShifted__P156_mk(s);
    s.tmp_1 = game_Hitbox_right__P1999_mk(s);
    s.tmp_1.arg0 = s.hbox___20996;
    s.callLocIdx = 881; s.pc = 15; return s.tmp_1;
  case 15:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.tmp_2 = tiles_TileMap_scale__P2403_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 882; s.pc = 16; return s.tmp_2;
  case 16:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 883; s.pc = 14; return s.tmp_0;
  case 14:
    r0 = s.retval;
    s.right___21005 = (r0);
    s.lastBrkId = 2193;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2193]) return breakpoint(s, 17, 2193, r0);
  case 17:
    s.tmp_0 = Fx_toIntShifted__P156_mk(s);
    s.tmp_1 = game_Hitbox_top__P1998_mk(s);
    s.tmp_1.arg0 = s.hbox___20996;
    s.callLocIdx = 884; s.pc = 19; return s.tmp_1;
  case 19:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.tmp_2 = tiles_TileMap_scale__P2403_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 885; s.pc = 20; return s.tmp_2;
  case 20:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 886; s.pc = 18; return s.tmp_0;
  case 18:
    r0 = s.retval;
    s.top___21011 = (r0);
    s.lastBrkId = 2194;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2194]) return breakpoint(s, 21, 2194, r0);
  case 21:
    s.tmp_0 = Fx_toIntShifted__P156_mk(s);
    s.tmp_1 = game_Hitbox_bottom__P2000_mk(s);
    s.tmp_1.arg0 = s.hbox___20996;
    s.callLocIdx = 887; s.pc = 23; return s.tmp_1;
  case 23:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.tmp_2 = tiles_TileMap_scale__P2403_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 888; s.pc = 24; return s.tmp_2;
  case 24:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 889; s.pc = 22; return s.tmp_0;
  case 22:
    r0 = s.retval;
    s.bottom___21017 = (r0);
    s.lastBrkId = 2195;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2195]) return breakpoint(s, 25, 2195, r0);
  case 25:
    s.col___21023 = (s.left___20999);
    s.lastBrkId = 2196;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2196]) return breakpoint(s, 26, 2196, r0);
  case 26:
  case 1:
    s.lastBrkId = 2197;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2197]) return breakpoint(s, 27, 2197, r0);
  case 27:
    r0 = (s.col___21023 <= s.right___21005);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 6; continue; }
    s.lastBrkId = 2198;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2198]) return breakpoint(s, 28, 2198, r0);
  case 28:
    s.row___21029 = (s.top___21011);
    s.lastBrkId = 2199;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2199]) return breakpoint(s, 29, 2199, r0);
  case 29:
  case 2:
    s.lastBrkId = 2200;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2200]) return breakpoint(s, 30, 2200, r0);
  case 30:
    r0 = (s.row___21029 <= s.bottom___21017);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 2201;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2201]) return breakpoint(s, 31, 2201, r0);
  case 31:
    s.tmp_2 = tiles_TileMap_isObstacle__P2420_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.tmp_2.arg1 = s.col___21023;
    s.tmp_2.arg2 = s.row___21029;
    s.callLocIdx = 890; s.pc = 32; return s.tmp_2;
  case 32:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 2202;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2202]) return breakpoint(s, 33, 2202, r0);
  case 33:
    r0 = true;
    { step = 7; continue; }
  case 3:
  case 4:
    s.lastBrkId = 2203;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2203]) return breakpoint(s, 34, 2203, r0);
  case 34:
    r0 = (s.row___21029 + 1);
    s.row___21029 = (r0);
    { step = 2; continue; }
  case 5:
    s.lastBrkId = 2204;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2204]) return breakpoint(s, 35, 2204, r0);
  case 35:
    r0 = (s.col___21023 + 1);
    s.col___21023 = (r0);
    { step = 1; continue; }
  case 6:
    s.lastBrkId = 2205;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2205]) return breakpoint(s, 36, 2205, r0);
  case 36:
    r0 = false;
  case 7:
    return leave(s, r0)
  default: oops()
} } }
tiles_TileMap_isOnWall__P2422.info = {"start":13118,"length":627,"line":424,"column":8,"endLine":441,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"isOnWall","argumentNames":["this","s"]}

function tiles_TileMap_isOnWall__P2422_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMap_isOnWall__P2422, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  hbox___20996: undefined,
  left___20999: undefined,
  right___21005: undefined,
  top___21011: undefined,
  bottom___21017: undefined,
  col___21023: undefined,
  row___21029: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function MovingSprite_constructor__P2253(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.arg5 = (s.lambdaArgs[5]);
      s.arg6 = (s.lambdaArgs[6]);
      s.arg7 = (s.lambdaArgs[7]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, MovingSprite__C2252_VT)) failedCast(r0);
    r0 = (s.arg0).fields["sprite"] = (s.arg1);
    r0 = (s.arg0).fields["cachedVx"] = (s.arg2);
    r0 = (s.arg0).fields["cachedVy"] = (s.arg3);
    r0 = (s.arg0).fields["dx"] = (s.arg4);
    r0 = (s.arg0).fields["dy"] = (s.arg5);
    r0 = (s.arg0).fields["xStep"] = (s.arg6);
    r0 = (s.arg0).fields["yStep"] = (s.arg7);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
MovingSprite_constructor__P2253.info = {"start":949,"length":313,"line":33,"column":4,"endLine":44,"endColumn":9,"fileName":"pxt_modules/game/physics.ts","functionName":"inline","argumentNames":["this","sprite","cachedVx","cachedVy","dx","dy","xStep","yStep"]}

function MovingSprite_constructor__P2253_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: MovingSprite_constructor__P2253, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
  arg5: undefined,
  arg6: undefined,
  arg7: undefined,
} }





function ArcadePhysicsEngine_move__P2266(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.dtMs___21976 = undefined;
    s.dt2___21982 = undefined;
    s.scene___21986 = undefined;
    s.tileMap___21989 = undefined;
    s.movingSprites___21992 = undefined;
    s.MAX_STEP_COUNT___22023 = undefined;
    s.overlapHandlers___22035 = undefined;
    s.selected___22042 = undefined;
    s.buffers___22043 = undefined;
    s.count___22047 = undefined;
    s.currMovers___22057 = undefined;
    s.remainingMovers___22064 = undefined;
    s.ms___22069 = undefined;
    s.unnamed1642___U13 = undefined;
    s.unnamed1643___U14 = undefined;
    s.s___22071 = undefined;
    s.stepX___22164 = undefined;
    s.stepY___22178 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, ArcadePhysicsEngine__C2254_VT)) failedCast(r0);
    s.lastBrkId = 1509;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1509]) return breakpoint(s, 47, 1509, r0);
  case 47:
    s.tmp_0 = Math_min__P131_mk(s);
    s.tmp_0.arg0 = 100;
    r0 = (s.arg1 * 1000);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 511; s.pc = 48; return s.tmp_0;
  case 48:
    r0 = s.retval;
    s.dtMs___21976 = (r0);
    s.lastBrkId = 1510;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1510]) return breakpoint(s, 49, 1510, r0);
  case 49:
    r0 = pxsim.Math_.idiv(s.dtMs___21976, 2);
    s.dt2___21982 = (r0);
    s.lastBrkId = 1511;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1511]) return breakpoint(s, 50, 1511, r0);
  case 50:
    s.tmp_0 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 512; s.pc = 51; return s.tmp_0;
  case 51:
    r0 = s.retval;
    s.scene___21986 = (r0);
    s.lastBrkId = 1512;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1512]) return breakpoint(s, 52, 1512, r0);
  case 52:
    r0 = s.scene___21986.fields["tileMap"];
    s.tileMap___21989 = (r0);
    s.lastBrkId = 1513;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1513]) return breakpoint(s, 53, 1513, r0);
  case 53:
    r0 = pxsim_pxtcore_mkAction(3, movingSprites_inline__P21994);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 1, s.dtMs___21976);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 2, s.dt2___21982);
    s.tmp_1 = helpers_arrayMap__P106_mk(s);
    r0 = s.arg0.fields["sprites"];
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = s.tmp_0;
    s.callLocIdx = 514; s.pc = 54; return s.tmp_1;
  case 54:
    r0 = s.retval;
    s.movingSprites___21992 = (r0);
    s.lastBrkId = 1514;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1514]) return breakpoint(s, 55, 1514, r0);
  case 55:
    s.tmp_0 = helpers_arrayForEach__P109_mk(s);
    r0 = s.arg0.fields["sprites"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = ArcadePhysicsEngine_move_inline__P22006;
    s.callLocIdx = 518; s.pc = 56; return s.tmp_0;
  case 56:
    r0 = s.retval;
    s.lastBrkId = 1517;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1517]) return breakpoint(s, 57, 1517, r0);
  case 57:
    s.tmp_0 = sprites_SpriteMap_clear__P2179_mk(s);
    r0 = s.arg0.fields["map"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 519; s.pc = 58; return s.tmp_0;
  case 58:
    r0 = s.retval;
    s.lastBrkId = 1518;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1518]) return breakpoint(s, 59, 1518, r0);
  case 59:
    s.tmp_0 = sprites_SpriteMap_resizeBuckets__P2178_mk(s);
    r0 = s.arg0.fields["map"];
    s.tmp_0.arg0 = r0;
    r0 = s.arg0.fields["sprites"];
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 520; s.pc = 60; return s.tmp_0;
  case 60:
    r0 = s.retval;
    s.lastBrkId = 1519;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1519]) return breakpoint(s, 61, 1519, r0);
  case 61:
    s.tmp_0 = Fx_toInt__P170_mk(s);
    s.tmp_1 = Fx_idiv__P163_mk(s);
    s.tmp_2 = Fx_imul__P161_mk(s);
    s.tmp_3 = Fx_div__P162_mk(s);
    r0 = s.arg0.fields["maxVelocity"];
    s.tmp_3.arg0 = r0;
    r0 = s.arg0.fields["minSingleStep"];
    s.tmp_3.arg1 = r0;
    s.callLocIdx = 521; s.pc = 65; return s.tmp_3;
  case 65:
    r0 = s.retval;
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = s.dtMs___21976;
    s.callLocIdx = 522; s.pc = 64; return s.tmp_2;
  case 64:
    r0 = s.retval;
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = 1000;
    s.callLocIdx = 523; s.pc = 63; return s.tmp_1;
  case 63:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 524; s.pc = 62; return s.tmp_0;
  case 62:
    r0 = s.retval;
    s.MAX_STEP_COUNT___22023 = (r0);
    s.lastBrkId = 1520;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1520]) return breakpoint(s, 66, 1520, r0);
  case 66:
    s.tmp_0 = helpers_arraySlice__P115_mk(s);
    r0 = s.scene___21986.fields["overlapHandlers"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = undefined;
    s.tmp_0.arg2 = undefined;
    s.callLocIdx = 525; s.pc = 67; return s.tmp_0;
  case 67:
    r0 = s.retval;
    s.overlapHandlers___22035 = (r0);
    s.lastBrkId = 1521;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1521]) return breakpoint(s, 68, 1521, r0);
  case 68:
    s.selected___22042 = (0);
    s.lastBrkId = 1522;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1522]) return breakpoint(s, 69, 1522, r0);
  case 69:
    r0 = pxsim_Array__mk();
    s.tmp_0 = r0;
    r0 = pxsim_Array__push(s.tmp_0, s.movingSprites___21992);
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = pxsim_Array__push(s.tmp_0, s.tmp_1);
    s.buffers___22043 = (s.tmp_0);
    s.lastBrkId = 1523;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1523]) return breakpoint(s, 70, 1523, r0);
  case 70:
    s.count___22047 = (0);
    s.lastBrkId = 1524;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1524]) return breakpoint(s, 71, 1524, r0);
  case 71:
  case 1:
    s.lastBrkId = 1525;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1525]) return breakpoint(s, 72, 1525, r0);
  case 72:
    r0 = (s.count___22047 < s.MAX_STEP_COUNT___22023);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 2; continue; }
    r0 = s.tmp_0;
    { step = 3; continue; }
  case 2:
    r0 = pxsim_Array__getAt(s.buffers___22043, s.selected___22042);
    s.tmp_2 = r0;
    r0 = pxsim_Array__length(s.tmp_2);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 !== 0);
  case 3:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 46; continue; }
    s.lastBrkId = 1526;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1526]) return breakpoint(s, 73, 1526, r0);
  case 73:
    r0 = pxsim_Array__getAt(s.buffers___22043, s.selected___22042);
    s.currMovers___22057 = (r0);
    s.lastBrkId = 1527;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1527]) return breakpoint(s, 74, 1527, r0);
  case 74:
    r0 = (s.selected___22042 ^ 1);
    s.selected___22042 = (r0);
    s.lastBrkId = 1528;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1528]) return breakpoint(s, 75, 1528, r0);
  case 75:
    r0 = pxsim_Array__getAt(s.buffers___22043, s.selected___22042);
    s.remainingMovers___22064 = (r0);
    s.lastBrkId = 1529;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1529]) return breakpoint(s, 76, 1529, r0);
  case 76:
    s.ms___22069 = (undefined);
    s.unnamed1642___U13 = (s.currMovers___22057);
    s.unnamed1643___U14 = (0);
    s.lastBrkId = 1530;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1530]) return breakpoint(s, 77, 1530, r0);
  case 77:
  case 4:
    s.tmp_0 = r0 = s.unnamed1643___U14;
    r0 = pxsim_Array__length(s.unnamed1642___U13);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 43; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1642___U13, s.unnamed1643___U14);
    s.ms___22069 = (r0);
    s.lastBrkId = 1531;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1531]) return breakpoint(s, 78, 1531, r0);
  case 78:
    r0 = s.ms___22069.fields["sprite"];
    s.s___22071 = (r0);
    s.lastBrkId = 1532;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1532]) return breakpoint(s, 79, 1532, r0);
  case 79:
    r0 = s.ms___22069.fields["cachedVx"];
    s.tmp_1 = r0;
    r0 = s.s___22071.fields["_vx"];
    s.tmp_2 = r0;
    r0 = (s.tmp_1 !== s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 15; continue; }
    s.lastBrkId = 1533;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1533]) return breakpoint(s, 80, 1533, r0);
  case 80:
    r0 = s.s___22071.fields["_vx"];
    s.tmp_4 = r0;
    r0 = (s.tmp_4 == 0);
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 1534;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1534]) return breakpoint(s, 81, 1534, r0);
  case 81:
    r0 = (s.ms___22069).fields["dx"] = (0);
    { step = 14; continue; }
  case 5:
    s.lastBrkId = 1535;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1535]) return breakpoint(s, 82, 1535, r0);
  case 82:
    r0 = s.s___22071.fields["_vx"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 6; continue; }
    r0 = s.tmp_0;
    { step = 7; continue; }
  case 6:
    r0 = s.ms___22069.fields["cachedVx"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 > 0);
  case 7:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBool(s.tmp_3);
    if (!r0) { step = 8; continue; }
    r0 = s.tmp_3;
    { step = 11; continue; }
  case 8:
    r0 = s.s___22071.fields["_vx"];
    s.tmp_5 = r0;
    r0 = (s.tmp_5 > 0);
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBool(s.tmp_4);
    if (r0) { step = 9; continue; }
    r0 = s.tmp_4;
    { step = 10; continue; }
  case 9:
    r0 = s.ms___22069.fields["cachedVx"];
    s.tmp_6 = r0;
    r0 = (s.tmp_6 < 0);
  case 10:
    // jmp value (already in r0)
    s.tmp_7 = r0;
    r0 = s.tmp_7;
  case 11:
    // jmp value (already in r0)
    s.tmp_8 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_8);
    if (!r0) { step = 12; continue; }
    s.lastBrkId = 1536;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1536]) return breakpoint(s, 83, 1536, r0);
  case 83:
    s.tmp_9 = r0 = s.ms___22069;
    s.tmp_11 = Fx_neg__P155_mk(s);
    r0 = s.ms___22069.fields["dx"];
    s.tmp_11.arg0 = r0;
    s.callLocIdx = 526; s.pc = 84; return s.tmp_11;
  case 84:
    r0 = s.retval;
    s.tmp_10 = r0;
    r0 = (s.tmp_9).fields["dx"] = (s.tmp_10);
    s.lastBrkId = 1537;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1537]) return breakpoint(s, 85, 1537, r0);
  case 85:
    s.tmp_0 = r0 = s.ms___22069;
    s.tmp_2 = Fx_neg__P155_mk(s);
    r0 = s.ms___22069.fields["xStep"];
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 527; s.pc = 86; return s.tmp_2;
  case 86:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["xStep"] = (s.tmp_1);
  case 12:
  case 13:
  case 14:
    s.lastBrkId = 1538;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1538]) return breakpoint(s, 87, 1538, r0);
  case 87:
    r0 = s.s___22071.fields["_vx"];
    s.tmp_0 = r0;
    r0 = (s.ms___22069).fields["cachedVx"] = (s.tmp_0);
  case 15:
  case 16:
    s.lastBrkId = 1539;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1539]) return breakpoint(s, 88, 1539, r0);
  case 88:
    r0 = s.ms___22069.fields["cachedVy"];
    s.tmp_1 = r0;
    r0 = s.s___22071.fields["_vy"];
    s.tmp_2 = r0;
    r0 = (s.tmp_1 !== s.tmp_2);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 27; continue; }
    s.lastBrkId = 1540;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1540]) return breakpoint(s, 89, 1540, r0);
  case 89:
    r0 = s.s___22071.fields["_vy"];
    s.tmp_4 = r0;
    r0 = (s.tmp_4 == 0);
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 17; continue; }
    s.lastBrkId = 1541;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1541]) return breakpoint(s, 90, 1541, r0);
  case 90:
    r0 = (s.ms___22069).fields["dy"] = (0);
    { step = 26; continue; }
  case 17:
    s.lastBrkId = 1542;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1542]) return breakpoint(s, 91, 1542, r0);
  case 91:
    r0 = s.s___22071.fields["_vy"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 18; continue; }
    r0 = s.tmp_0;
    { step = 19; continue; }
  case 18:
    r0 = s.ms___22069.fields["cachedVy"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 > 0);
  case 19:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBool(s.tmp_3);
    if (!r0) { step = 20; continue; }
    r0 = s.tmp_3;
    { step = 23; continue; }
  case 20:
    r0 = s.s___22071.fields["_vy"];
    s.tmp_5 = r0;
    r0 = (s.tmp_5 > 0);
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBool(s.tmp_4);
    if (r0) { step = 21; continue; }
    r0 = s.tmp_4;
    { step = 22; continue; }
  case 21:
    r0 = s.ms___22069.fields["cachedVy"];
    s.tmp_6 = r0;
    r0 = (s.tmp_6 < 0);
  case 22:
    // jmp value (already in r0)
    s.tmp_7 = r0;
    r0 = s.tmp_7;
  case 23:
    // jmp value (already in r0)
    s.tmp_8 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_8);
    if (!r0) { step = 24; continue; }
    s.lastBrkId = 1543;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1543]) return breakpoint(s, 92, 1543, r0);
  case 92:
    s.tmp_9 = r0 = s.ms___22069;
    s.tmp_11 = Fx_neg__P155_mk(s);
    r0 = s.ms___22069.fields["dy"];
    s.tmp_11.arg0 = r0;
    s.callLocIdx = 528; s.pc = 93; return s.tmp_11;
  case 93:
    r0 = s.retval;
    s.tmp_10 = r0;
    r0 = (s.tmp_9).fields["dy"] = (s.tmp_10);
    s.lastBrkId = 1544;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1544]) return breakpoint(s, 94, 1544, r0);
  case 94:
    s.tmp_0 = r0 = s.ms___22069;
    s.tmp_2 = Fx_neg__P155_mk(s);
    r0 = s.ms___22069.fields["yStep"];
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 529; s.pc = 95; return s.tmp_2;
  case 95:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["yStep"] = (s.tmp_1);
  case 24:
  case 25:
  case 26:
    s.lastBrkId = 1545;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1545]) return breakpoint(s, 96, 1545, r0);
  case 96:
    r0 = s.s___22071.fields["_vy"];
    s.tmp_0 = r0;
    r0 = (s.ms___22069).fields["cachedVy"] = (s.tmp_0);
  case 27:
  case 28:
    s.lastBrkId = 1546;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1546]) return breakpoint(s, 97, 1546, r0);
  case 97:
    s.tmp_2 = Fx_abs__P165_mk(s);
    r0 = s.ms___22069.fields["xStep"];
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 530; s.pc = 98; return s.tmp_2;
  case 98:
    r0 = s.retval;
    s.tmp_1 = r0;
    s.tmp_4 = Fx_abs__P165_mk(s);
    r0 = s.ms___22069.fields["dx"];
    s.tmp_4.arg0 = r0;
    s.callLocIdx = 531; s.pc = 99; return s.tmp_4;
  case 99:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_1 > s.tmp_3);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 29; continue; }
    r0 = s.ms___22069.fields["dx"];
    { step = 30; continue; }
  case 29:
    r0 = s.ms___22069.fields["xStep"];
  case 30:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    s.stepX___22164 = (s.tmp_5);
    s.lastBrkId = 1547;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1547]) return breakpoint(s, 100, 1547, r0);
  case 100:
    s.tmp_2 = Fx_abs__P165_mk(s);
    r0 = s.ms___22069.fields["yStep"];
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 532; s.pc = 101; return s.tmp_2;
  case 101:
    r0 = s.retval;
    s.tmp_1 = r0;
    s.tmp_4 = Fx_abs__P165_mk(s);
    r0 = s.ms___22069.fields["dy"];
    s.tmp_4.arg0 = r0;
    s.callLocIdx = 533; s.pc = 102; return s.tmp_4;
  case 102:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_1 > s.tmp_3);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 31; continue; }
    r0 = s.ms___22069.fields["dy"];
    { step = 32; continue; }
  case 31:
    r0 = s.ms___22069.fields["yStep"];
  case 32:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    s.stepY___22178 = (s.tmp_5);
    s.lastBrkId = 1548;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1548]) return breakpoint(s, 103, 1548, r0);
  case 103:
    s.tmp_0 = r0 = s.ms___22069;
    s.tmp_2 = Fx_sub__P159_mk(s);
    r0 = s.ms___22069.fields["dx"];
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = s.stepX___22164;
    s.callLocIdx = 534; s.pc = 104; return s.tmp_2;
  case 104:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["dx"] = (s.tmp_1);
    s.lastBrkId = 1549;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1549]) return breakpoint(s, 105, 1549, r0);
  case 105:
    s.tmp_0 = r0 = s.ms___22069;
    s.tmp_2 = Fx_sub__P159_mk(s);
    r0 = s.ms___22069.fields["dy"];
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = s.stepY___22178;
    s.callLocIdx = 535; s.pc = 106; return s.tmp_2;
  case 106:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["dy"] = (s.tmp_1);
    s.lastBrkId = 1550;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1550]) return breakpoint(s, 107, 1550, r0);
  case 107:
    r0 = s.s___22071.fields["_x"];
    s.tmp_0 = r0;
    r0 = (s.s___22071).fields["_lastX"] = (s.tmp_0);
    s.lastBrkId = 1551;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1551]) return breakpoint(s, 108, 1551, r0);
  case 108:
    r0 = s.s___22071.fields["_y"];
    s.tmp_0 = r0;
    r0 = (s.s___22071).fields["_lastY"] = (s.tmp_0);
    s.lastBrkId = 1552;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1552]) return breakpoint(s, 109, 1552, r0);
  case 109:
    s.tmp_0 = r0 = s.s___22071;
    s.tmp_2 = Fx_add__P157_mk(s);
    r0 = s.s___22071.fields["_x"];
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = s.stepX___22164;
    s.callLocIdx = 536; s.pc = 110; return s.tmp_2;
  case 110:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_x"] = (s.tmp_1);
    s.lastBrkId = 1553;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1553]) return breakpoint(s, 111, 1553, r0);
  case 111:
    s.tmp_0 = r0 = s.s___22071;
    s.tmp_2 = Fx_add__P157_mk(s);
    r0 = s.s___22071.fields["_y"];
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = s.stepY___22178;
    s.callLocIdx = 537; s.pc = 112; return s.tmp_2;
  case 112:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_y"] = (s.tmp_1);
    s.lastBrkId = 1554;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1554]) return breakpoint(s, 113, 1554, r0);
  case 113:
    r0 = s.s___22071.fields["flags"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 & 4610);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 33; continue; }
    s.lastBrkId = 1555;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1555]) return breakpoint(s, 114, 1555, r0);
  case 114:
    s.tmp_4 = sprites_SpriteMap_insertAABB__P2180_mk(s);
    r0 = s.arg0.fields["map"];
    s.tmp_4.arg0 = r0;
    s.tmp_4.arg1 = s.s___22071;
    s.callLocIdx = 538; s.pc = 115; return s.tmp_4;
  case 115:
    r0 = s.retval;
  case 33:
  case 34:
    s.lastBrkId = 1556;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1556]) return breakpoint(s, 116, 1556, r0);
  case 116:
    s.tmp_0 = r0 = s.tileMap___21989;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 35; continue; }
    r0 = s.tmp_0;
    { step = 36; continue; }
  case 35:
    s.tmp_1 = tiles_TileMap_enabled__P2411_mk(s);
    s.tmp_1.arg0 = s.tileMap___21989;
    s.callLocIdx = 539; s.pc = 117; return s.tmp_1;
  case 117:
    r0 = s.retval;
  case 36:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 37; continue; }
    s.lastBrkId = 1557;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1557]) return breakpoint(s, 118, 1557, r0);
  case 118:
    s.tmp_3 = ArcadePhysicsEngine_tilemapCollisions__P4430_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.tmp_3.arg1 = s.ms___22069;
    s.tmp_3.arg2 = s.tileMap___21989;
    s.callLocIdx = 540; s.pc = 119; return s.tmp_3;
  case 119:
    r0 = s.retval;
  case 37:
  case 38:
    s.lastBrkId = 1558;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1558]) return breakpoint(s, 120, 1558, r0);
  case 120:
    s.tmp_2 = Fx_abs__P165_mk(s);
    r0 = s.ms___22069.fields["dx"];
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 541; s.pc = 121; return s.tmp_2;
  case 121:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > globals.MIN_MOVE_GAP___2248);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 39; continue; }
    r0 = s.tmp_0;
    { step = 40; continue; }
  case 39:
    s.tmp_4 = Fx_abs__P165_mk(s);
    r0 = s.ms___22069.fields["dy"];
    s.tmp_4.arg0 = r0;
    s.callLocIdx = 542; s.pc = 122; return s.tmp_4;
  case 122:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_3 > globals.MIN_MOVE_GAP___2248);
  case 40:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_5);
    if (!r0) { step = 41; continue; }
    s.lastBrkId = 1559;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1559]) return breakpoint(s, 123, 1559, r0);
  case 123:
    r0 = pxsim_Array__push(s.remainingMovers___22064, s.ms___22069);
  case 41:
  case 42:
    r0 = (s.unnamed1643___U14 + 1);
    s.unnamed1643___U14 = (r0);
    { step = 4; continue; }
  case 43:
    s.unnamed1642___U13 = (undefined);
    s.lastBrkId = 1560;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1560]) return breakpoint(s, 124, 1560, r0);
  case 124:
    s.tmp_0 = ArcadePhysicsEngine_spriteCollisions__P4429_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.currMovers___22057;
    s.tmp_0.arg2 = s.overlapHandlers___22035;
    s.callLocIdx = 543; s.pc = 125; return s.tmp_0;
  case 125:
    r0 = s.retval;
    s.lastBrkId = 1561;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1561]) return breakpoint(s, 126, 1561, r0);
  case 126:
  case 44:
    s.lastBrkId = 1562;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1562]) return breakpoint(s, 127, 1562, r0);
  case 127:
    r0 = pxsim_Array__length(s.currMovers___22057);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 45; continue; }
    s.lastBrkId = 1563;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1563]) return breakpoint(s, 128, 1563, r0);
  case 128:
    r0 = pxsim_Array_.pop(s.currMovers___22057);
    { step = 44; continue; }
  case 45:
    s.lastBrkId = 1564;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1564]) return breakpoint(s, 129, 1564, r0);
  case 129:
    r0 = (s.count___22047 + 1);
    s.count___22047 = (r0);
    { step = 1; continue; }
  case 46:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
ArcadePhysicsEngine_move__P2266.info = {"start":2822,"length":3809,"line":112,"column":4,"endLine":208,"endColumn":5,"fileName":"pxt_modules/game/physics.ts","functionName":"move","argumentNames":["this","dt"]}

function ArcadePhysicsEngine_move__P2266_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ArcadePhysicsEngine_move__P2266, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  dtMs___21976: undefined,
  dt2___21982: undefined,
  scene___21986: undefined,
  tileMap___21989: undefined,
  movingSprites___21992: undefined,
  MAX_STEP_COUNT___22023: undefined,
  overlapHandlers___22035: undefined,
  selected___22042: undefined,
  buffers___22043: undefined,
  count___22047: undefined,
  currMovers___22057: undefined,
  remainingMovers___22064: undefined,
  ms___22069: undefined,
  unnamed1642___U13: undefined,
  unnamed1643___U14: undefined,
  s___22071: undefined,
  stepX___22164: undefined,
  stepY___22178: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function movingSprites_inline__P21994(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = ArcadePhysicsEngine_createMovingSprite__P4428_mk(s);
    s.tmp_0.arg0 = s.caps[0];
    s.tmp_0.arg1 = s.arg0;
    s.tmp_0.arg2 = s.caps[1];
    s.tmp_0.arg3 = s.caps[2];
    s.callLocIdx = 513; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    return leave(s, r0)
  default: oops()
} } }
movingSprites_inline__P21994.info = {"start":3181,"length":52,"line":121,"column":17,"endLine":121,"endColumn":69,"fileName":"pxt_modules/game/physics.ts","functionName":"inline","argumentNames":["sprite"]}

function movingSprites_inline__P21994_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: movingSprites_inline__P21994, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function ArcadePhysicsEngine_move_inline__P22006(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 1515;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1515]) return breakpoint(s, 5, 1515, r0);
  case 5:
    s.tmp_1 = Sprite_vx__P2105_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.callLocIdx = 515; s.pc = 6; return s.tmp_1;
  case 6:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    s.tmp_2 = Sprite_vy__P2107_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 516; s.pc = 7; return s.tmp_2;
  case 7:
    r0 = s.retval;
  case 2:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1516;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1516]) return breakpoint(s, 8, 1516, r0);
  case 8:
    s.tmp_4 = Sprite_clearObstacles__P2163_mk(s);
    s.tmp_4.arg0 = s.arg0;
    s.callLocIdx = 517; s.pc = 9; return s.tmp_4;
  case 9:
    r0 = s.retval;
  case 3:
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
ArcadePhysicsEngine_move_inline__P22006.info = {"start":3316,"length":66,"line":124,"column":29,"endLine":126,"endColumn":9,"fileName":"pxt_modules/game/physics.ts","functionName":"inline","argumentNames":["s"]}

function ArcadePhysicsEngine_move_inline__P22006_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ArcadePhysicsEngine_move_inline__P22006, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }





function ArcadePhysicsEngine_spriteCollisions__P4429(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.ms___22279 = undefined;
    s.unnamed1644___U1 = undefined;
    s.unnamed1645___U2 = undefined;
    s.sprite___22281 = undefined;
    s.overSprites___22288 = undefined;
    s.overlapper___22296 = undefined;
    s.unnamed1646___U6 = undefined;
    s.unnamed1647___U7 = undefined;
    s.thisKind___22302 = undefined;
    s.otherKind___22306 = undefined;
    s.higher___22319 = undefined;
    s.lower___22328 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, ArcadePhysicsEngine__C2254_VT)) failedCast(r0);
    s.lastBrkId = 1602;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1602]) return breakpoint(s, 22, 1602, r0);
  case 22:
    s.lastBrkId = 1603;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1603]) return breakpoint(s, 23, 1603, r0);
  case 23:
    r0 = pxsim_Array__length(s.arg2);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1604;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1604]) return breakpoint(s, 24, 1604, r0);
  case 24:
    { step = 21; continue; }
  case 1:
  case 2:
    s.lastBrkId = 1605;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1605]) return breakpoint(s, 25, 1605, r0);
  case 25:
    s.ms___22279 = (undefined);
    s.unnamed1644___U1 = (s.arg1);
    s.unnamed1645___U2 = (0);
    s.lastBrkId = 1606;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1606]) return breakpoint(s, 26, 1606, r0);
  case 26:
  case 3:
    s.tmp_0 = r0 = s.unnamed1645___U2;
    r0 = pxsim_Array__length(s.unnamed1644___U1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 20; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1644___U1, s.unnamed1645___U2);
    s.ms___22279 = (r0);
    s.lastBrkId = 1607;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1607]) return breakpoint(s, 27, 1607, r0);
  case 27:
    r0 = s.ms___22279.fields["sprite"];
    s.sprite___22281 = (r0);
    s.lastBrkId = 1608;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1608]) return breakpoint(s, 28, 1608, r0);
  case 28:
    r0 = s.sprite___22281.fields["flags"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 & 4610);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 1609;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1609]) return breakpoint(s, 29, 1609, r0);
  case 29:
    { step = 19; continue; }
  case 4:
  case 5:
    s.lastBrkId = 1610;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1610]) return breakpoint(s, 30, 1610, r0);
  case 30:
    s.tmp_2 = sprites_SpriteMap_overlaps__P2176_mk(s);
    r0 = s.arg0.fields["map"];
    s.tmp_2.arg0 = r0;
    r0 = s.ms___22279.fields["sprite"];
    s.tmp_2.arg1 = r0;
    s.callLocIdx = 581; s.pc = 31; return s.tmp_2;
  case 31:
    r0 = s.retval;
    s.overSprites___22288 = (r0);
    s.lastBrkId = 1611;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1611]) return breakpoint(s, 32, 1611, r0);
  case 32:
    s.overlapper___22296 = (undefined);
    s.unnamed1646___U6 = (s.overSprites___22288);
    s.unnamed1647___U7 = (0);
    s.lastBrkId = 1612;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1612]) return breakpoint(s, 33, 1612, r0);
  case 33:
  case 6:
    s.tmp_0 = r0 = s.unnamed1647___U7;
    r0 = pxsim_Array__length(s.unnamed1646___U6);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 18; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1646___U6, s.unnamed1647___U7);
    s.overlapper___22296 = (r0);
    s.lastBrkId = 1613;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1613]) return breakpoint(s, 34, 1613, r0);
  case 34:
    r0 = s.overlapper___22296.fields["flags"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 & 4610);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 1614;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1614]) return breakpoint(s, 35, 1614, r0);
  case 35:
    { step = 17; continue; }
  case 7:
  case 8:
    s.lastBrkId = 1615;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1615]) return breakpoint(s, 36, 1615, r0);
  case 36:
    s.tmp_4 = Sprite_kind__P2146_mk(s);
    s.tmp_4.arg0 = s.sprite___22281;
    s.callLocIdx = 582; s.pc = 37; return s.tmp_4;
  case 37:
    r0 = s.retval;
    s.thisKind___22302 = (r0);
    s.lastBrkId = 1616;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1616]) return breakpoint(s, 38, 1616, r0);
  case 38:
    s.tmp_0 = Sprite_kind__P2146_mk(s);
    s.tmp_0.arg0 = s.overlapper___22296;
    s.callLocIdx = 583; s.pc = 39; return s.tmp_0;
  case 39:
    r0 = s.retval;
    s.otherKind___22306 = (r0);
    s.lastBrkId = 1617;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1617]) return breakpoint(s, 40, 1617, r0);
  case 40:
    r0 = s.sprite___22281.fields["_kindsOverlappedWith"];
    s.tmp_2 = r0;
    r0 = pxsim_Array_.indexOf(s.tmp_2, s.otherKind___22306, undefined);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 === -1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 1618;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1618]) return breakpoint(s, 41, 1618, r0);
  case 41:
    { step = 17; continue; }
  case 9:
  case 10:
    s.lastBrkId = 1619;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1619]) return breakpoint(s, 42, 1619, r0);
  case 42:
    r0 = s.sprite___22281.fields["id"];
    s.tmp_4 = r0;
    r0 = s.overlapper___22296.fields["id"];
    s.tmp_5 = r0;
    r0 = (s.tmp_4 > s.tmp_5);
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 11; continue; }
    r0 = s.sprite___22281;
    { step = 12; continue; }
  case 11:
    r0 = s.overlapper___22296;
  case 12:
    // jmp value (already in r0)
    s.tmp_6 = r0;
    s.higher___22319 = (s.tmp_6);
    s.lastBrkId = 1620;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1620]) return breakpoint(s, 43, 1620, r0);
  case 43:
    r0 = (s.higher___22319 === s.sprite___22281);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 13; continue; }
    r0 = s.overlapper___22296;
    { step = 14; continue; }
  case 13:
    r0 = s.sprite___22281;
  case 14:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    s.lower___22328 = (s.tmp_1);
    s.lastBrkId = 1621;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1621]) return breakpoint(s, 44, 1621, r0);
  case 44:
    r0 = s.higher___22319.fields["_overlappers"];
    s.tmp_2 = r0;
    r0 = s.lower___22328.fields["id"];
    s.tmp_3 = r0;
    r0 = pxsim_Array_.indexOf(s.tmp_2, s.tmp_3, undefined);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 === -1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 15; continue; }
    s.lastBrkId = 1622;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1622]) return breakpoint(s, 45, 1622, r0);
  case 45:
    r0 = pxsim_pxtcore_mkAction(2, forEach_inline__P22348);
    s.tmp_4 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_4, 0, s.thisKind___22302);
    r0 = pxsim_pxtrt_stclo(s.tmp_4, 1, s.otherKind___22306);
    r0 = pxsim_pxtcore_mkAction(5, ArcadePhysicsEngine_spriteCollisions_inline__P22372);
    s.tmp_5 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_5, 0, s.higher___22319);
    r0 = pxsim_pxtrt_stclo(s.tmp_5, 1, s.lower___22328);
    r0 = pxsim_pxtrt_stclo(s.tmp_5, 2, s.sprite___22281);
    r0 = pxsim_pxtrt_stclo(s.tmp_5, 3, s.overlapper___22296);
    r0 = pxsim_pxtrt_stclo(s.tmp_5, 4, s.thisKind___22302);
    s.tmp_6 = helpers_arrayForEach__P109_mk(s);
    s.tmp_7 = helpers_arrayFilter__P110_mk(s);
    s.tmp_7.arg0 = s.arg2;
    s.tmp_7.arg1 = s.tmp_4;
    s.callLocIdx = 584; s.pc = 47; return s.tmp_7;
  case 47:
    r0 = s.retval;
    s.tmp_6.arg0 = r0;
    s.tmp_6.arg1 = s.tmp_5;
    s.callLocIdx = 586; s.pc = 46; return s.tmp_6;
  case 46:
    r0 = s.retval;
  case 15:
  case 16:
  case 17:
    r0 = (s.unnamed1647___U7 + 1);
    s.unnamed1647___U7 = (r0);
    { step = 6; continue; }
  case 18:
    s.unnamed1646___U6 = (undefined);
  case 19:
    r0 = (s.unnamed1645___U2 + 1);
    s.unnamed1645___U2 = (r0);
    { step = 3; continue; }
  case 20:
    s.unnamed1644___U1 = (undefined);
  case 21:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
ArcadePhysicsEngine_spriteCollisions__P4429.info = {"start":9448,"length":2268,"line":302,"column":4,"endLine":346,"endColumn":5,"fileName":"pxt_modules/game/physics.ts","functionName":"spriteCollisions","argumentNames":["this","movedSprites","handlers"]}

function ArcadePhysicsEngine_spriteCollisions__P4429_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ArcadePhysicsEngine_spriteCollisions__P4429, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  ms___22279: undefined,
  unnamed1644___U1: undefined,
  unnamed1645___U2: undefined,
  sprite___22281: undefined,
  overSprites___22288: undefined,
  overlapper___22296: undefined,
  unnamed1646___U6: undefined,
  unnamed1647___U7: undefined,
  thisKind___22302: undefined,
  otherKind___22306: undefined,
  higher___22319: undefined,
  lower___22328: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function forEach_inline__P22348(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0.fields["kind"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 === s.caps[0]);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = s.arg0.fields["otherKind"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 === s.caps[1]);
  case 2:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBool(s.tmp_3);
    if (!r0) { step = 3; continue; }
    r0 = s.tmp_3;
    { step = 6; continue; }
  case 3:
    r0 = s.arg0.fields["kind"];
    s.tmp_5 = r0;
    r0 = (s.tmp_5 === s.caps[1]);
    s.tmp_4 = r0;
    r0 = pxsim_numops_toBool(s.tmp_4);
    if (r0) { step = 4; continue; }
    r0 = s.tmp_4;
    { step = 5; continue; }
  case 4:
    r0 = s.arg0.fields["otherKind"];
    s.tmp_6 = r0;
    r0 = (s.tmp_6 === s.caps[0]);
  case 5:
    // jmp value (already in r0)
    s.tmp_7 = r0;
    r0 = s.tmp_7;
  case 6:
    // jmp value (already in r0)
    s.tmp_8 = r0;
    r0 = s.tmp_8;
    return leave(s, r0)
  default: oops()
} } }
forEach_inline__P22348.info = {"start":10817,"length":137,"line":328,"column":32,"endLine":329,"endColumn":81,"fileName":"pxt_modules/game/physics.ts","functionName":"inline","argumentNames":["h"]}

function forEach_inline__P22348_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: forEach_inline__P22348, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  arg0: undefined,
} }





function ArcadePhysicsEngine_spriteCollisions_inline__P22372(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 1623;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1623]) return breakpoint(s, 1, 1623, r0);
  case 1:
    r0 = s.caps[0].fields["_overlappers"];
    s.tmp_0 = r0;
    r0 = s.caps[1].fields["id"];
    s.tmp_1 = r0;
    r0 = pxsim_Array__push(s.tmp_0, s.tmp_1);
    s.lastBrkId = 1624;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1624]) return breakpoint(s, 2, 1624, r0);
  case 2:
    r0 = pxsim_pxtcore_mkAction(6, ArcadePhysicsEngine_spriteCollisions_inline__P22382);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.caps[2]);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 1, s.caps[3]);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 2, s.arg0);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 3, s.caps[4]);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 4, s.caps[0]);
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 5, s.caps[1]);
    r0 = pxsim.control.runInParallel(s.tmp_0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
ArcadePhysicsEngine_spriteCollisions_inline__P22372.info = {"start":11014,"length":652,"line":331,"column":33,"endLine":342,"endColumn":25,"fileName":"pxt_modules/game/physics.ts","functionName":"inline","argumentNames":["h"]}

function ArcadePhysicsEngine_spriteCollisions_inline__P22372_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ArcadePhysicsEngine_spriteCollisions_inline__P22372, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function ArcadePhysicsEngine_spriteCollisions_inline__P22382(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 1625;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1625]) return breakpoint(s, 7, 1625, r0);
  case 7:
    r0 = s.caps[0].fields["flags"];
    s.tmp_4 = r0;
    r0 = s.caps[1].fields["flags"];
    s.tmp_5 = r0;
    r0 = (s.tmp_4 | s.tmp_5);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 & 4610);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 1626;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1626]) return breakpoint(s, 8, 1626, r0);
  case 8:
    r0 = s.caps[2].fields["kind"];
    s.tmp_7 = r0;
    r0 = (s.caps[3] === s.tmp_7);
    s.tmp_6 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_6);
    if (!r0) { step = 1; continue; }
    r0 = s.caps[0];
    { step = 2; continue; }
  case 1:
    r0 = s.caps[1];
  case 2:
    // jmp value (already in r0)
    s.tmp_8 = r0;
    r0 = s.caps[2].fields["kind"];
    s.tmp_10 = r0;
    r0 = (s.caps[3] === s.tmp_10);
    s.tmp_9 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_9);
    if (!r0) { step = 3; continue; }
    r0 = s.caps[1];
    { step = 4; continue; }
  case 3:
    r0 = s.caps[0];
  case 4:
    // jmp value (already in r0)
    s.tmp_11 = r0;
    s.tmp_12 = if_handler_3_mk(s);
    s.tmp_12.arg0 = s.caps[2];
    s.tmp_12.arg1 = s.tmp_8;
    s.tmp_12.arg2 = s.tmp_11;
    if (!s.tmp_12.arg0.vtable.iface) {
      setupLambda(s.tmp_12, pxsim_pxtrt.mapGetByString(s.tmp_12.arg0, "handler"), 3);
      s.callLocIdx = 585; s.pc = 9; return s.tmp_12;
    } else {
      s.tmp_12.fn = s.tmp_12.arg0.vtable.iface["handler"];
      if (s.tmp_12.fn == null) { setupLambda(s.tmp_12, s.tmp_12.arg0.fields["handler"], 3); s.callLocIdx = 585; s.pc = 9; return s.tmp_12; }
      else if (s.tmp_12.fn.isGetter) { s.tmp_12.stage2Call = true; s.callLocIdx = 585; s.pc = 9; return s.tmp_12;; }
     else { s.callLocIdx = 585; s.pc = 9; return s.tmp_12; }
    }
  case 9:
    r0 = s.retval;
  case 5:
  case 6:
    s.lastBrkId = 1627;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1627]) return breakpoint(s, 10, 1627, r0);
  case 10:
    r0 = s.caps[4].fields["_overlappers"];
    s.tmp_0 = r0;
    r0 = s.caps[5].fields["id"];
    s.tmp_1 = r0;
    r0 = pxsim_Array_.removeElement(s.tmp_0, s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
ArcadePhysicsEngine_spriteCollisions_inline__P22382.info = {"start":11135,"length":503,"line":333,"column":50,"endLine":341,"endColumn":29,"fileName":"pxt_modules/game/physics.ts","functionName":"inline","argumentNames":[]}

function ArcadePhysicsEngine_spriteCollisions_inline__P22382_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ArcadePhysicsEngine_spriteCollisions_inline__P22382, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  tmp_12: undefined,
} }





function sprites_SpriteMap_overlaps__P2176(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.n___22416 = undefined;
    s.o___22420 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_SpriteMap__C2173_VT)) failedCast(r0);
    s.lastBrkId = 1395;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1395]) return breakpoint(s, 1, 1395, r0);
  case 1:
    s.tmp_0 = sprites_SpriteMap_neighbors__P2175_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.callLocIdx = 458; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.n___22416 = (r0);
    s.lastBrkId = 1396;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1396]) return breakpoint(s, 3, 1396, r0);
  case 3:
    r0 = pxsim_pxtcore_mkAction(1, o_inline__P22422);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg1);
    s.tmp_1 = helpers_arrayFilter__P110_mk(s);
    s.tmp_1.arg0 = s.n___22416;
    s.tmp_1.arg1 = s.tmp_0;
    s.callLocIdx = 460; s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
    s.o___22420 = (r0);
    s.lastBrkId = 1397;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1397]) return breakpoint(s, 5, 1397, r0);
  case 5:
    r0 = s.o___22420;
    return leave(s, r0)
  default: oops()
} } }
sprites_SpriteMap_overlaps__P2176.info = {"start":923,"length":189,"line":30,"column":8,"endLine":34,"endColumn":9,"fileName":"pxt_modules/game/spritemap.ts","functionName":"overlaps","argumentNames":["this","sprite"]}

function sprites_SpriteMap_overlaps__P2176_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_SpriteMap_overlaps__P2176, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  n___22416: undefined,
  o___22420: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function o_inline__P22422(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = Sprite_overlapsWith__P2159_mk(s);
    s.tmp_0.arg0 = s.caps[0];
    s.tmp_0.arg1 = s.arg0;
    s.callLocIdx = 459; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    return leave(s, r0)
  default: oops()
} } }
o_inline__P22422.info = {"start":1037,"length":41,"line":32,"column":31,"endLine":32,"endColumn":72,"fileName":"pxt_modules/game/spritemap.ts","functionName":"inline","argumentNames":["neighbor"]}

function o_inline__P22422_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: o_inline__P22422, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function sprites_SpriteMap_neighbors__P2175(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.n___22460 = undefined;
    s.layer___22462 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_SpriteMap__C2173_VT)) failedCast(r0);
    s.lastBrkId = 1387;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1387]) return breakpoint(s, 1, 1387, r0);
  case 1:
    r0 = pxsim_Array__mk();
    s.n___22460 = (r0);
    s.lastBrkId = 1388;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1388]) return breakpoint(s, 2, 1388, r0);
  case 2:
    r0 = s.arg1.fields["layer"];
    s.layer___22462 = (r0);
    s.lastBrkId = 1389;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1389]) return breakpoint(s, 3, 1389, r0);
  case 3:
    s.tmp_0 = sprites_SpriteMap_mergeAtKey__P4393_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_1 = Sprite_left__P2138_mk(s);
    s.tmp_1.arg0 = s.arg1;
    s.callLocIdx = 446; s.pc = 5; return s.tmp_1;
  case 5:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.tmp_2 = Sprite_top__P2142_mk(s);
    s.tmp_2.arg0 = s.arg1;
    s.callLocIdx = 447; s.pc = 6; return s.tmp_2;
  case 6:
    r0 = s.retval;
    s.tmp_0.arg2 = r0;
    s.tmp_0.arg3 = s.layer___22462;
    s.tmp_0.arg4 = s.n___22460;
    s.callLocIdx = 448; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.lastBrkId = 1390;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1390]) return breakpoint(s, 7, 1390, r0);
  case 7:
    s.tmp_0 = sprites_SpriteMap_mergeAtKey__P4393_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_1 = Sprite_left__P2138_mk(s);
    s.tmp_1.arg0 = s.arg1;
    s.callLocIdx = 449; s.pc = 9; return s.tmp_1;
  case 9:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.tmp_2 = Sprite_bottom__P2144_mk(s);
    s.tmp_2.arg0 = s.arg1;
    s.callLocIdx = 450; s.pc = 10; return s.tmp_2;
  case 10:
    r0 = s.retval;
    s.tmp_0.arg2 = r0;
    s.tmp_0.arg3 = s.layer___22462;
    s.tmp_0.arg4 = s.n___22460;
    s.callLocIdx = 451; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
    s.lastBrkId = 1391;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1391]) return breakpoint(s, 11, 1391, r0);
  case 11:
    s.tmp_0 = sprites_SpriteMap_mergeAtKey__P4393_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_1 = Sprite_right__P2140_mk(s);
    s.tmp_1.arg0 = s.arg1;
    s.callLocIdx = 452; s.pc = 13; return s.tmp_1;
  case 13:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.tmp_2 = Sprite_top__P2142_mk(s);
    s.tmp_2.arg0 = s.arg1;
    s.callLocIdx = 453; s.pc = 14; return s.tmp_2;
  case 14:
    r0 = s.retval;
    s.tmp_0.arg2 = r0;
    s.tmp_0.arg3 = s.layer___22462;
    s.tmp_0.arg4 = s.n___22460;
    s.callLocIdx = 454; s.pc = 12; return s.tmp_0;
  case 12:
    r0 = s.retval;
    s.lastBrkId = 1392;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1392]) return breakpoint(s, 15, 1392, r0);
  case 15:
    s.tmp_0 = sprites_SpriteMap_mergeAtKey__P4393_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_1 = Sprite_right__P2140_mk(s);
    s.tmp_1.arg0 = s.arg1;
    s.callLocIdx = 455; s.pc = 17; return s.tmp_1;
  case 17:
    r0 = s.retval;
    s.tmp_0.arg1 = r0;
    s.tmp_2 = Sprite_bottom__P2144_mk(s);
    s.tmp_2.arg0 = s.arg1;
    s.callLocIdx = 456; s.pc = 18; return s.tmp_2;
  case 18:
    r0 = s.retval;
    s.tmp_0.arg2 = r0;
    s.tmp_0.arg3 = s.layer___22462;
    s.tmp_0.arg4 = s.n___22460;
    s.callLocIdx = 457; s.pc = 16; return s.tmp_0;
  case 16:
    r0 = s.retval;
    s.lastBrkId = 1393;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1393]) return breakpoint(s, 19, 1393, r0);
  case 19:
    r0 = pxsim_Array_.removeElement(s.n___22460, s.arg1);
    s.lastBrkId = 1394;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1394]) return breakpoint(s, 20, 1394, r0);
  case 20:
    r0 = s.n___22460;
    return leave(s, r0)
  default: oops()
} } }
sprites_SpriteMap_neighbors__P2175.info = {"start":376,"length":442,"line":15,"column":8,"endLine":24,"endColumn":9,"fileName":"pxt_modules/game/spritemap.ts","functionName":"neighbors","argumentNames":["this","sprite"]}

function sprites_SpriteMap_neighbors__P2175_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_SpriteMap_neighbors__P2175, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  n___22460: undefined,
  layer___22462: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function sprites_SpriteMap_mergeAtKey__P4393(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.k___22511 = undefined;
    s.bucket___22516 = undefined;
    s.sprite___22523 = undefined;
    s.unnamed1640___U3 = undefined;
    s.unnamed1641___U4 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_SpriteMap__C2173_VT)) failedCast(r0);
    s.lastBrkId = 1450;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1450]) return breakpoint(s, 9, 1450, r0);
  case 9:
    s.tmp_0 = sprites_SpriteMap_key__P4391_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.tmp_0.arg2 = s.arg2;
    s.callLocIdx = 484; s.pc = 10; return s.tmp_0;
  case 10:
    r0 = s.retval;
    s.k___22511 = (r0);
    s.lastBrkId = 1451;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1451]) return breakpoint(s, 11, 1451, r0);
  case 11:
    r0 = s.arg0.fields["buckets"];
    s.tmp_0 = r0;
    r0 = pxsim_Array__getAt(s.tmp_0, s.k___22511);
    s.bucket___22516 = (r0);
    s.lastBrkId = 1452;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1452]) return breakpoint(s, 12, 1452, r0);
  case 12:
    r0 = pxsim_numops_toBoolDecr(s.bucket___22516);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 1453;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1453]) return breakpoint(s, 13, 1453, r0);
  case 13:
    s.sprite___22523 = (undefined);
    s.unnamed1640___U3 = (s.bucket___22516);
    s.unnamed1641___U4 = (0);
    s.lastBrkId = 1454;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1454]) return breakpoint(s, 14, 1454, r0);
  case 14:
  case 1:
    s.tmp_0 = r0 = s.unnamed1641___U4;
    r0 = pxsim_Array__length(s.unnamed1640___U3);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 6; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1640___U3, s.unnamed1641___U4);
    s.sprite___22523 = (r0);
    s.lastBrkId = 1455;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1455]) return breakpoint(s, 15, 1455, r0);
  case 15:
    r0 = s.sprite___22523.fields["layer"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 & s.arg3);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBool(s.tmp_2);
    if (r0) { step = 2; continue; }
    r0 = s.tmp_2;
    { step = 3; continue; }
  case 2:
    r0 = pxsim_Array_.indexOf(s.arg4, s.sprite___22523, undefined);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 < 0);
  case 3:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_5);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 1456;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1456]) return breakpoint(s, 16, 1456, r0);
  case 16:
    r0 = pxsim_Array__push(s.arg4, s.sprite___22523);
  case 4:
  case 5:
    r0 = (s.unnamed1641___U4 + 1);
    s.unnamed1641___U4 = (r0);
    { step = 1; continue; }
  case 6:
    s.unnamed1640___U3 = (undefined);
  case 7:
  case 8:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
sprites_SpriteMap_mergeAtKey__P4393.info = {"start":3715,"length":384,"line":101,"column":8,"endLine":110,"endColumn":9,"fileName":"pxt_modules/game/spritemap.ts","functionName":"mergeAtKey","argumentNames":["this","x","y","layer","n"]}

function sprites_SpriteMap_mergeAtKey__P4393_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_SpriteMap_mergeAtKey__P4393, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  k___22511: undefined,
  bucket___22516: undefined,
  sprite___22523: undefined,
  unnamed1640___U3: undefined,
  unnamed1641___U4: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
} }





function sprites_SpriteMap_key__P4391(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.xi___22544 = undefined;
    s.yi___22556 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_SpriteMap__C2173_VT)) failedCast(r0);
    s.lastBrkId = 1428;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1428]) return breakpoint(s, 1, 1428, r0);
  case 1:
    s.tmp_0 = Math_clamp__P127_mk(s);
    s.tmp_0.arg0 = 0;
    r0 = s.arg0.fields["columnCount"];
    s.tmp_0.arg1 = r0;
    r0 = s.arg0.fields["cellWidth"];
    s.tmp_1 = r0;
    r0 = pxsim.Math_.idiv(s.arg1, s.tmp_1);
    s.tmp_0.arg2 = r0;
    s.callLocIdx = 472; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.xi___22544 = (r0);
    s.lastBrkId = 1429;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1429]) return breakpoint(s, 3, 1429, r0);
  case 3:
    s.tmp_0 = Math_clamp__P127_mk(s);
    s.tmp_0.arg0 = 0;
    r0 = s.arg0.fields["rowCount"];
    s.tmp_0.arg1 = r0;
    r0 = s.arg0.fields["cellHeight"];
    s.tmp_1 = r0;
    r0 = pxsim.Math_.idiv(s.arg2, s.tmp_1);
    s.tmp_0.arg2 = r0;
    s.callLocIdx = 473; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.yi___22556 = (r0);
    s.lastBrkId = 1430;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1430]) return breakpoint(s, 5, 1430, r0);
  case 5:
    s.tmp_0 = r0 = s.xi___22544;
    r0 = s.arg0.fields["columnCount"];
    s.tmp_2 = r0;
    r0 = (s.yi___22556 * s.tmp_2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 + s.tmp_1);
    return leave(s, r0)
  default: oops()
} } }
sprites_SpriteMap_key__P4391.info = {"start":2592,"length":270,"line":76,"column":8,"endLine":80,"endColumn":9,"fileName":"pxt_modules/game/spritemap.ts","functionName":"key","argumentNames":["this","x","y"]}

function sprites_SpriteMap_key__P4391_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_SpriteMap_key__P4391, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  xi___22544: undefined,
  yi___22556: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function Sprite_bottom__P2144(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1268;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1268]) return breakpoint(s, 1, 1268, r0);
  case 1:
    s.tmp_1 = Sprite_top__P2142_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.callLocIdx = 336; s.pc = 2; return s.tmp_1;
  case 2:
    r0 = s.retval;
    s.tmp_0 = r0;
    s.tmp_3 = Sprite_height__P2137_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.callLocIdx = 337; s.pc = 3; return s.tmp_3;
  case 3:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_0 + s.tmp_2);
    return leaveAccessor(s, r0)
  default: oops()
} } }
Sprite_bottom__P2144.info = {"start":10378,"length":59,"line":375,"column":4,"endLine":377,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"bottom","argumentNames":["this"]}
Sprite_bottom__P2144.isGetter = true;

function Sprite_bottom__P2144_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_bottom__P2144, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
} }





function Sprite_right__P2140(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1263;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1263]) return breakpoint(s, 1, 1263, r0);
  case 1:
    s.tmp_1 = Sprite_left__P2138_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.callLocIdx = 328; s.pc = 2; return s.tmp_1;
  case 2:
    r0 = s.retval;
    s.tmp_0 = r0;
    s.tmp_3 = Sprite_width__P2136_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.callLocIdx = 329; s.pc = 3; return s.tmp_3;
  case 3:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_0 + s.tmp_2);
    return leaveAccessor(s, r0)
  default: oops()
} } }
Sprite_right__P2140.info = {"start":9574,"length":57,"line":345,"column":4,"endLine":347,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"right","argumentNames":["this"]}
Sprite_right__P2140.isGetter = true;

function Sprite_right__P2140_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_right__P2140, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
} }





function Sprite_overlapsWith__P2159(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1350;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1350]) return breakpoint(s, 8, 1350, r0);
  case 8:
    s.lastBrkId = 1351;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1351]) return breakpoint(s, 9, 1351, r0);
  case 9:
    r0 = (s.arg1 == s.arg0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1352;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1352]) return breakpoint(s, 10, 1352, r0);
  case 10:
    r0 = false;
    { step = 7; continue; }
  case 1:
  case 2:
    s.lastBrkId = 1353;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1353]) return breakpoint(s, 11, 1353, r0);
  case 11:
    r0 = s.arg0.fields["flags"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 & 4610);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1354;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1354]) return breakpoint(s, 12, 1354, r0);
  case 12:
    r0 = false;
    { step = 7; continue; }
  case 3:
  case 4:
    s.lastBrkId = 1355;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1355]) return breakpoint(s, 13, 1355, r0);
  case 13:
    r0 = s.arg1.fields["flags"];
    s.tmp_4 = r0;
    r0 = (s.tmp_4 & 4610);
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 1356;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1356]) return breakpoint(s, 14, 1356, r0);
  case 14:
    r0 = false;
    { step = 7; continue; }
  case 5:
  case 6:
    s.lastBrkId = 1357;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1357]) return breakpoint(s, 15, 1357, r0);
  case 15:
    r0 = s.arg1.fields["_image"];
    s.tmp_5 = r0;
    r0 = s.arg0.fields["_image"];
    s.tmp_6 = r0;
    s.tmp_9 = Sprite_left__P2138_mk(s);
    s.tmp_9.arg0 = s.arg0;
    s.callLocIdx = 409; s.pc = 16; return s.tmp_9;
  case 16:
    r0 = s.retval;
    s.tmp_8 = r0;
    s.tmp_11 = Sprite_left__P2138_mk(s);
    s.tmp_11.arg0 = s.arg1;
    s.callLocIdx = 410; s.pc = 17; return s.tmp_11;
  case 17:
    r0 = s.retval;
    s.tmp_10 = r0;
    r0 = (s.tmp_8 - s.tmp_10);
    s.tmp_7 = r0;
    s.tmp_14 = Sprite_top__P2142_mk(s);
    s.tmp_14.arg0 = s.arg0;
    s.callLocIdx = 411; s.pc = 18; return s.tmp_14;
  case 18:
    r0 = s.retval;
    s.tmp_13 = r0;
    s.tmp_16 = Sprite_top__P2142_mk(s);
    s.tmp_16.arg0 = s.arg1;
    s.callLocIdx = 412; s.pc = 19; return s.tmp_16;
  case 19:
    r0 = s.retval;
    s.tmp_15 = r0;
    r0 = (s.tmp_13 - s.tmp_15);
    s.tmp_12 = r0;
    r0 = pxsim_ImageMethods.overlapsWith(s.tmp_5, s.tmp_6, s.tmp_7, s.tmp_12);
  case 7:
    return leave(s, r0)
  default: oops()
} } }
Sprite_overlapsWith__P2159.info = {"start":21302,"length":380,"line":692,"column":4,"endLine":700,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"overlapsWith","argumentNames":["this","other"]}

function Sprite_overlapsWith__P2159_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_overlapsWith__P2159, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  tmp_12: undefined,
  tmp_13: undefined,
  tmp_14: undefined,
  tmp_15: undefined,
  tmp_16: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function ArcadePhysicsEngine_createMovingSprite__P4428(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.ovx___22764 = undefined;
    s.ovy___22769 = undefined;
    s.fx___22796 = undefined;
    s.c___22803 = undefined;
    s.fy___22846 = undefined;
    s.c___22853 = undefined;
    s.dx___22892 = undefined;
    s.dy___22905 = undefined;
    s.xStep___22918 = undefined;
    s.yStep___22920 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, ArcadePhysicsEngine__C2254_VT)) failedCast(r0);
    s.lastBrkId = 1565;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1565]) return breakpoint(s, 25, 1565, r0);
  case 25:
    s.tmp_0 = ArcadePhysicsEngine_constrain__P4433_mk(s);
    s.tmp_0.arg0 = s.arg0;
    r0 = s.arg1.fields["_vx"];
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 544; s.pc = 26; return s.tmp_0;
  case 26:
    r0 = s.retval;
    s.ovx___22764 = (r0);
    s.lastBrkId = 1566;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1566]) return breakpoint(s, 27, 1566, r0);
  case 27:
    s.tmp_0 = ArcadePhysicsEngine_constrain__P4433_mk(s);
    s.tmp_0.arg0 = s.arg0;
    r0 = s.arg1.fields["_vy"];
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 545; s.pc = 28; return s.tmp_0;
  case 28:
    r0 = s.retval;
    s.ovy___22769 = (r0);
    s.lastBrkId = 1567;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1567]) return breakpoint(s, 29, 1567, r0);
  case 29:
    r0 = s.arg1.fields["_x"];
    s.tmp_0 = r0;
    r0 = (s.arg1).fields["_lastX"] = (s.tmp_0);
    s.lastBrkId = 1568;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1568]) return breakpoint(s, 30, 1568, r0);
  case 30:
    r0 = s.arg1.fields["_y"];
    s.tmp_0 = r0;
    r0 = (s.arg1).fields["_lastY"] = (s.tmp_0);
    s.lastBrkId = 1569;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1569]) return breakpoint(s, 31, 1569, r0);
  case 31:
    r0 = s.arg1.fields["_ax"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1570;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1570]) return breakpoint(s, 32, 1570, r0);
  case 32:
    s.tmp_1 = r0 = s.arg1;
    s.tmp_3 = Fx_add__P157_mk(s);
    r0 = s.arg1.fields["_vx"];
    s.tmp_3.arg0 = r0;
    s.tmp_4 = Fx_idiv__P163_mk(s);
    s.tmp_5 = Fx_imul__P161_mk(s);
    r0 = s.arg1.fields["_ax"];
    s.tmp_5.arg0 = r0;
    s.tmp_5.arg1 = s.arg2;
    s.callLocIdx = 546; s.pc = 35; return s.tmp_5;
  case 35:
    r0 = s.retval;
    s.tmp_4.arg0 = r0;
    s.tmp_4.arg1 = 1000;
    s.callLocIdx = 547; s.pc = 34; return s.tmp_4;
  case 34:
    r0 = s.retval;
    s.tmp_3.arg1 = r0;
    s.callLocIdx = 548; s.pc = 33; return s.tmp_3;
  case 33:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1).fields["_vx"] = (s.tmp_2);
    { step = 8; continue; }
  case 1:
    s.lastBrkId = 1571;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1571]) return breakpoint(s, 36, 1571, r0);
  case 36:
    r0 = s.arg1.fields["_fx"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 6; continue; }
    s.lastBrkId = 1572;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1572]) return breakpoint(s, 37, 1572, r0);
  case 37:
    s.tmp_1 = Fx_idiv__P163_mk(s);
    s.tmp_2 = Fx_imul__P161_mk(s);
    r0 = s.arg1.fields["_fx"];
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = s.arg2;
    s.callLocIdx = 549; s.pc = 39; return s.tmp_2;
  case 39:
    r0 = s.retval;
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = 1000;
    s.callLocIdx = 550; s.pc = 38; return s.tmp_1;
  case 38:
    r0 = s.retval;
    s.fx___22796 = (r0);
    s.lastBrkId = 1573;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1573]) return breakpoint(s, 40, 1573, r0);
  case 40:
    s.tmp_0 = Fx_compare__P164_mk(s);
    r0 = s.arg1.fields["_vx"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = s.fx___22796;
    s.callLocIdx = 551; s.pc = 41; return s.tmp_0;
  case 41:
    r0 = s.retval;
    s.c___22803 = (r0);
    s.lastBrkId = 1574;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1574]) return breakpoint(s, 42, 1574, r0);
  case 42:
    r0 = (s.c___22803 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 1575;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1575]) return breakpoint(s, 43, 1575, r0);
  case 43:
    s.tmp_1 = r0 = s.arg1;
    s.tmp_3 = Fx_min__P166_mk(s);
    s.tmp_3.arg0 = 0;
    s.tmp_4 = Fx_add__P157_mk(s);
    r0 = s.arg1.fields["_vx"];
    s.tmp_4.arg0 = r0;
    s.tmp_4.arg1 = s.fx___22796;
    s.callLocIdx = 552; s.pc = 45; return s.tmp_4;
  case 45:
    r0 = s.retval;
    s.tmp_3.arg1 = r0;
    s.callLocIdx = 553; s.pc = 44; return s.tmp_3;
  case 44:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1).fields["_vx"] = (s.tmp_2);
    { step = 5; continue; }
  case 2:
    s.lastBrkId = 1576;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1576]) return breakpoint(s, 46, 1576, r0);
  case 46:
    r0 = (s.c___22803 > 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1577;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1577]) return breakpoint(s, 47, 1577, r0);
  case 47:
    s.tmp_1 = r0 = s.arg1;
    s.tmp_3 = Fx_max__P167_mk(s);
    s.tmp_3.arg0 = 0;
    s.tmp_4 = Fx_sub__P159_mk(s);
    r0 = s.arg1.fields["_vx"];
    s.tmp_4.arg0 = r0;
    s.tmp_4.arg1 = s.fx___22796;
    s.callLocIdx = 554; s.pc = 49; return s.tmp_4;
  case 49:
    r0 = s.retval;
    s.tmp_3.arg1 = r0;
    s.callLocIdx = 555; s.pc = 48; return s.tmp_3;
  case 48:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1).fields["_vx"] = (s.tmp_2);
    { step = 4; continue; }
  case 3:
    s.lastBrkId = 1578;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1578]) return breakpoint(s, 50, 1578, r0);
  case 50:
    r0 = (s.arg1).fields["_vx"] = (0);
  case 4:
  case 5:
  case 6:
  case 7:
  case 8:
    s.lastBrkId = 1579;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1579]) return breakpoint(s, 51, 1579, r0);
  case 51:
    r0 = s.arg1.fields["_ay"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 9; continue; }
    s.lastBrkId = 1580;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1580]) return breakpoint(s, 52, 1580, r0);
  case 52:
    s.tmp_1 = r0 = s.arg1;
    s.tmp_3 = Fx_add__P157_mk(s);
    r0 = s.arg1.fields["_vy"];
    s.tmp_3.arg0 = r0;
    s.tmp_4 = Fx_idiv__P163_mk(s);
    s.tmp_5 = Fx_imul__P161_mk(s);
    r0 = s.arg1.fields["_ay"];
    s.tmp_5.arg0 = r0;
    s.tmp_5.arg1 = s.arg2;
    s.callLocIdx = 556; s.pc = 55; return s.tmp_5;
  case 55:
    r0 = s.retval;
    s.tmp_4.arg0 = r0;
    s.tmp_4.arg1 = 1000;
    s.callLocIdx = 557; s.pc = 54; return s.tmp_4;
  case 54:
    r0 = s.retval;
    s.tmp_3.arg1 = r0;
    s.callLocIdx = 558; s.pc = 53; return s.tmp_3;
  case 53:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1).fields["_vy"] = (s.tmp_2);
    { step = 16; continue; }
  case 9:
    s.lastBrkId = 1581;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1581]) return breakpoint(s, 56, 1581, r0);
  case 56:
    r0 = s.arg1.fields["_fy"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 14; continue; }
    s.lastBrkId = 1582;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1582]) return breakpoint(s, 57, 1582, r0);
  case 57:
    s.tmp_1 = Fx_idiv__P163_mk(s);
    s.tmp_2 = Fx_imul__P161_mk(s);
    r0 = s.arg1.fields["_fy"];
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = s.arg2;
    s.callLocIdx = 559; s.pc = 59; return s.tmp_2;
  case 59:
    r0 = s.retval;
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = 1000;
    s.callLocIdx = 560; s.pc = 58; return s.tmp_1;
  case 58:
    r0 = s.retval;
    s.fy___22846 = (r0);
    s.lastBrkId = 1583;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1583]) return breakpoint(s, 60, 1583, r0);
  case 60:
    s.tmp_0 = Fx_compare__P164_mk(s);
    r0 = s.arg1.fields["_vy"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = s.fy___22846;
    s.callLocIdx = 561; s.pc = 61; return s.tmp_0;
  case 61:
    r0 = s.retval;
    s.c___22853 = (r0);
    s.lastBrkId = 1584;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1584]) return breakpoint(s, 62, 1584, r0);
  case 62:
    r0 = (s.c___22853 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 10; continue; }
    s.lastBrkId = 1585;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1585]) return breakpoint(s, 63, 1585, r0);
  case 63:
    s.tmp_1 = r0 = s.arg1;
    s.tmp_3 = Fx_min__P166_mk(s);
    s.tmp_3.arg0 = 0;
    s.tmp_4 = Fx_add__P157_mk(s);
    r0 = s.arg1.fields["_vy"];
    s.tmp_4.arg0 = r0;
    s.tmp_4.arg1 = s.fy___22846;
    s.callLocIdx = 562; s.pc = 65; return s.tmp_4;
  case 65:
    r0 = s.retval;
    s.tmp_3.arg1 = r0;
    s.callLocIdx = 563; s.pc = 64; return s.tmp_3;
  case 64:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1).fields["_vy"] = (s.tmp_2);
    { step = 13; continue; }
  case 10:
    s.lastBrkId = 1586;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1586]) return breakpoint(s, 66, 1586, r0);
  case 66:
    r0 = (s.c___22853 > 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 11; continue; }
    s.lastBrkId = 1587;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1587]) return breakpoint(s, 67, 1587, r0);
  case 67:
    s.tmp_1 = r0 = s.arg1;
    s.tmp_3 = Fx_max__P167_mk(s);
    s.tmp_3.arg0 = 0;
    s.tmp_4 = Fx_sub__P159_mk(s);
    r0 = s.arg1.fields["_vy"];
    s.tmp_4.arg0 = r0;
    s.tmp_4.arg1 = s.fy___22846;
    s.callLocIdx = 564; s.pc = 69; return s.tmp_4;
  case 69:
    r0 = s.retval;
    s.tmp_3.arg1 = r0;
    s.callLocIdx = 565; s.pc = 68; return s.tmp_3;
  case 68:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1).fields["_vy"] = (s.tmp_2);
    { step = 12; continue; }
  case 11:
    s.lastBrkId = 1588;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1588]) return breakpoint(s, 70, 1588, r0);
  case 70:
    r0 = (s.arg1).fields["_vy"] = (0);
  case 12:
  case 13:
  case 14:
  case 15:
  case 16:
    s.lastBrkId = 1589;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1589]) return breakpoint(s, 71, 1589, r0);
  case 71:
    s.tmp_0 = r0 = s.arg1;
    s.tmp_2 = ArcadePhysicsEngine_constrain__P4433_mk(s);
    s.tmp_2.arg0 = s.arg0;
    r0 = s.arg1.fields["_vx"];
    s.tmp_2.arg1 = r0;
    s.callLocIdx = 566; s.pc = 72; return s.tmp_2;
  case 72:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_vx"] = (s.tmp_1);
    s.lastBrkId = 1590;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1590]) return breakpoint(s, 73, 1590, r0);
  case 73:
    s.tmp_0 = r0 = s.arg1;
    s.tmp_2 = ArcadePhysicsEngine_constrain__P4433_mk(s);
    s.tmp_2.arg0 = s.arg0;
    r0 = s.arg1.fields["_vy"];
    s.tmp_2.arg1 = r0;
    s.callLocIdx = 567; s.pc = 74; return s.tmp_2;
  case 74:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_vy"] = (s.tmp_1);
    s.lastBrkId = 1591;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1591]) return breakpoint(s, 75, 1591, r0);
  case 75:
    s.tmp_0 = Fx8__P149_mk(s);
    s.tmp_3 = Fx_toFloat__P171_mk(s);
    s.tmp_4 = Fx_add__P157_mk(s);
    r0 = s.arg1.fields["_vx"];
    s.tmp_4.arg0 = r0;
    s.tmp_4.arg1 = s.ovx___22764;
    s.callLocIdx = 568; s.pc = 78; return s.tmp_4;
  case 78:
    r0 = s.retval;
    s.tmp_3.arg0 = r0;
    s.callLocIdx = 569; s.pc = 77; return s.tmp_3;
  case 77:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_2 * s.arg3);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 / 1000);
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 570; s.pc = 76; return s.tmp_0;
  case 76:
    r0 = s.retval;
    s.dx___22892 = (r0);
    s.lastBrkId = 1592;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1592]) return breakpoint(s, 79, 1592, r0);
  case 79:
    s.tmp_0 = Fx8__P149_mk(s);
    s.tmp_3 = Fx_toFloat__P171_mk(s);
    s.tmp_4 = Fx_add__P157_mk(s);
    r0 = s.arg1.fields["_vy"];
    s.tmp_4.arg0 = r0;
    s.tmp_4.arg1 = s.ovy___22769;
    s.callLocIdx = 571; s.pc = 82; return s.tmp_4;
  case 82:
    r0 = s.retval;
    s.tmp_3.arg0 = r0;
    s.callLocIdx = 572; s.pc = 81; return s.tmp_3;
  case 81:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_2 * s.arg3);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 / 1000);
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 573; s.pc = 80; return s.tmp_0;
  case 80:
    r0 = s.retval;
    s.dy___22905 = (r0);
    s.lastBrkId = 1593;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1593]) return breakpoint(s, 83, 1593, r0);
  case 83:
    s.xStep___22918 = (s.dx___22892);
    s.lastBrkId = 1594;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1594]) return breakpoint(s, 84, 1594, r0);
  case 84:
    s.yStep___22920 = (s.dy___22905);
    s.lastBrkId = 1595;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1595]) return breakpoint(s, 85, 1595, r0);
  case 85:
  case 17:
    s.lastBrkId = 1596;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1596]) return breakpoint(s, 86, 1596, r0);
  case 86:
    s.tmp_2 = Fx_abs__P165_mk(s);
    s.tmp_2.arg0 = s.xStep___22918;
    s.callLocIdx = 574; s.pc = 87; return s.tmp_2;
  case 87:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = s.arg0.fields["maxSingleStep"];
    s.tmp_3 = r0;
    r0 = (s.tmp_1 > s.tmp_3);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 18; continue; }
    r0 = s.tmp_0;
    { step = 19; continue; }
  case 18:
    s.tmp_5 = Fx_abs__P165_mk(s);
    s.tmp_5.arg0 = s.yStep___22920;
    s.callLocIdx = 575; s.pc = 88; return s.tmp_5;
  case 88:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = s.arg0.fields["maxSingleStep"];
    s.tmp_6 = r0;
    r0 = (s.tmp_4 > s.tmp_6);
  case 19:
    // jmp value (already in r0)
    s.tmp_7 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_7);
    if (!r0) { step = 24; continue; }
    s.lastBrkId = 1597;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1597]) return breakpoint(s, 89, 1597, r0);
  case 89:
    s.tmp_10 = Fx_abs__P165_mk(s);
    s.tmp_10.arg0 = s.xStep___22918;
    s.callLocIdx = 576; s.pc = 90; return s.tmp_10;
  case 90:
    r0 = s.retval;
    s.tmp_9 = r0;
    r0 = s.arg0.fields["minSingleStep"];
    s.tmp_11 = r0;
    r0 = (s.tmp_9 > s.tmp_11);
    s.tmp_8 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_8);
    if (!r0) { step = 20; continue; }
    s.lastBrkId = 1598;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1598]) return breakpoint(s, 91, 1598, r0);
  case 91:
    s.tmp_12 = Fx_idiv__P163_mk(s);
    s.tmp_12.arg0 = s.xStep___22918;
    s.tmp_12.arg1 = 2;
    s.callLocIdx = 577; s.pc = 92; return s.tmp_12;
  case 92:
    r0 = s.retval;
    s.xStep___22918 = (r0);
  case 20:
  case 21:
    s.lastBrkId = 1599;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1599]) return breakpoint(s, 93, 1599, r0);
  case 93:
    s.tmp_2 = Fx_abs__P165_mk(s);
    s.tmp_2.arg0 = s.yStep___22920;
    s.callLocIdx = 578; s.pc = 94; return s.tmp_2;
  case 94:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = s.arg0.fields["minSingleStep"];
    s.tmp_3 = r0;
    r0 = (s.tmp_1 > s.tmp_3);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 22; continue; }
    s.lastBrkId = 1600;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1600]) return breakpoint(s, 95, 1600, r0);
  case 95:
    s.tmp_4 = Fx_idiv__P163_mk(s);
    s.tmp_4.arg0 = s.yStep___22920;
    s.tmp_4.arg1 = 2;
    s.callLocIdx = 579; s.pc = 96; return s.tmp_4;
  case 96:
    r0 = s.retval;
    s.yStep___22920 = (r0);
  case 22:
  case 23:
    { step = 17; continue; }
  case 24:
    s.lastBrkId = 1601;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1601]) return breakpoint(s, 97, 1601, r0);
  case 97:
    r0 = pxsim_pxtcore_mkClassInstance(MovingSprite__C2252_VT);
    s.tmp_0 = r0;
    s.tmp_1 = MovingSprite_constructor__P2253_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = s.arg1;
    r0 = s.arg1.fields["_vx"];
    s.tmp_1.arg2 = r0;
    r0 = s.arg1.fields["_vy"];
    s.tmp_1.arg3 = r0;
    s.tmp_1.arg4 = s.dx___22892;
    s.tmp_1.arg5 = s.dy___22905;
    s.tmp_1.arg6 = s.xStep___22918;
    s.tmp_1.arg7 = s.yStep___22920;
    s.callLocIdx = 580; s.pc = 98; return s.tmp_1;
  case 98:
    r0 = s.retval;
    r0 = s.tmp_0;
    return leave(s, r0)
  default: oops()
} } }
ArcadePhysicsEngine_createMovingSprite__P4428.info = {"start":6637,"length":2805,"line":210,"column":4,"endLine":300,"endColumn":5,"fileName":"pxt_modules/game/physics.ts","functionName":"createMovingSprite","argumentNames":["this","sprite","dtMs","dt2"]}

function ArcadePhysicsEngine_createMovingSprite__P4428_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ArcadePhysicsEngine_createMovingSprite__P4428, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  tmp_12: undefined,
  ovx___22764: undefined,
  ovy___22769: undefined,
  fx___22796: undefined,
  c___22803: undefined,
  fy___22846: undefined,
  c___22853: undefined,
  dx___22892: undefined,
  dy___22905: undefined,
  xStep___22918: undefined,
  yStep___22920: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function ArcadePhysicsEngine_constrain__P4433(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, ArcadePhysicsEngine__C2254_VT)) failedCast(r0);
    s.lastBrkId = 1778;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1778]) return breakpoint(s, 1, 1778, r0);
  case 1:
    s.tmp_0 = Fx_max__P167_mk(s);
    s.tmp_1 = Fx_min__P166_mk(s);
    r0 = s.arg0.fields["maxVelocity"];
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = s.arg1;
    s.callLocIdx = 727; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    r0 = s.arg0.fields["maxNegativeVelocity"];
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 728; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    return leave(s, r0)
  default: oops()
} } }
ArcadePhysicsEngine_constrain__P4433.info = {"start":26048,"length":193,"line":730,"column":4,"endLine":738,"endColumn":5,"fileName":"pxt_modules/game/physics.ts","functionName":"constrain","argumentNames":["this","v"]}

function ArcadePhysicsEngine_constrain__P4433_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ArcadePhysicsEngine_constrain__P4433, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Fx_max__P167(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 277;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[277]) return breakpoint(s, 4, 277, r0);
  case 4:
    r0 = (s.arg0 > s.arg1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 278;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[278]) return breakpoint(s, 5, 278, r0);
  case 5:
    r0 = s.arg0;
    { step = 3; continue; }
    { step = 2; continue; }
  case 1:
    s.lastBrkId = 279;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[279]) return breakpoint(s, 6, 279, r0);
  case 6:
    r0 = s.arg1;
    { step = 3; continue; }
  case 2:
    r0 = undefined;
  case 3:
    return leave(s, r0)
  default: oops()
} } }
Fx_max__P167.info = {"start":1797,"length":117,"line":56,"column":4,"endLine":61,"endColumn":5,"fileName":"pxt_modules/base/fixed.ts","functionName":"max","argumentNames":["a","b"]}

function Fx_max__P167_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Fx_max__P167, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Fx_compare__P164(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 270;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[270]) return breakpoint(s, 1, 270, r0);
  case 1:
    r0 = (s.arg0 - s.arg1);
    return leave(s, r0)
  default: oops()
} } }
Fx_compare__P164.info = {"start":1395,"length":106,"line":41,"column":4,"endLine":43,"endColumn":5,"fileName":"pxt_modules/base/fixed.ts","functionName":"compare","argumentNames":["a","b"]}

function Fx_compare__P164_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Fx_compare__P164, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
} }





function sprites_SpriteMap_insertAABB__P2180(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.left___22576 = undefined;
    s.top___22579 = undefined;
    s.xn___22582 = undefined;
    s.yn___22593 = undefined;
    s.x___22604 = undefined;
    s.y___22609 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_SpriteMap__C2173_VT)) failedCast(r0);
    s.lastBrkId = 1437;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1437]) return breakpoint(s, 5, 1437, r0);
  case 5:
    s.tmp_0 = Sprite_left__P2138_mk(s);
    s.tmp_0.arg0 = s.arg1;
    s.callLocIdx = 475; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    s.left___22576 = (r0);
    s.lastBrkId = 1438;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1438]) return breakpoint(s, 7, 1438, r0);
  case 7:
    s.tmp_0 = Sprite_top__P2142_mk(s);
    s.tmp_0.arg0 = s.arg1;
    s.callLocIdx = 476; s.pc = 8; return s.tmp_0;
  case 8:
    r0 = s.retval;
    s.top___22579 = (r0);
    s.lastBrkId = 1439;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1439]) return breakpoint(s, 9, 1439, r0);
  case 9:
    s.tmp_3 = Sprite_width__P2136_mk(s);
    s.tmp_3.arg0 = s.arg1;
    s.callLocIdx = 477; s.pc = 10; return s.tmp_3;
  case 10:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = s.arg0.fields["cellWidth"];
    s.tmp_4 = r0;
    r0 = (s.tmp_2 + s.tmp_4);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - 1);
    s.tmp_0 = r0;
    r0 = s.arg0.fields["cellWidth"];
    s.tmp_5 = r0;
    r0 = pxsim.Math_.idiv(s.tmp_0, s.tmp_5);
    s.xn___22582 = (r0);
    s.lastBrkId = 1440;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1440]) return breakpoint(s, 11, 1440, r0);
  case 11:
    s.tmp_3 = Sprite_height__P2137_mk(s);
    s.tmp_3.arg0 = s.arg1;
    s.callLocIdx = 478; s.pc = 12; return s.tmp_3;
  case 12:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = s.arg0.fields["cellHeight"];
    s.tmp_4 = r0;
    r0 = (s.tmp_2 + s.tmp_4);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - 1);
    s.tmp_0 = r0;
    r0 = s.arg0.fields["cellHeight"];
    s.tmp_5 = r0;
    r0 = pxsim.Math_.idiv(s.tmp_0, s.tmp_5);
    s.yn___22593 = (r0);
    s.lastBrkId = 1441;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1441]) return breakpoint(s, 13, 1441, r0);
  case 13:
    s.x___22604 = (0);
    s.lastBrkId = 1442;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1442]) return breakpoint(s, 14, 1442, r0);
  case 14:
  case 1:
    s.lastBrkId = 1443;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1443]) return breakpoint(s, 15, 1443, r0);
  case 15:
    r0 = (s.x___22604 <= s.xn___22582);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 1444;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1444]) return breakpoint(s, 16, 1444, r0);
  case 16:
    s.y___22609 = (0);
    s.lastBrkId = 1445;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1445]) return breakpoint(s, 17, 1445, r0);
  case 17:
  case 2:
    s.lastBrkId = 1446;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1446]) return breakpoint(s, 18, 1446, r0);
  case 18:
    r0 = (s.y___22609 <= s.yn___22593);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1447;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1447]) return breakpoint(s, 19, 1447, r0);
  case 19:
    s.tmp_1 = sprites_SpriteMap_insertAtKey__P4392_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.tmp_2 = r0 = s.left___22576;
    s.tmp_4 = Math_min__P131_mk(s);
    s.tmp_5 = Sprite_width__P2136_mk(s);
    s.tmp_5.arg0 = s.arg1;
    s.callLocIdx = 479; s.pc = 22; return s.tmp_5;
  case 22:
    r0 = s.retval;
    s.tmp_4.arg0 = r0;
    r0 = s.arg0.fields["cellWidth"];
    s.tmp_6 = r0;
    r0 = (s.x___22604 * s.tmp_6);
    s.tmp_4.arg1 = r0;
    s.callLocIdx = 480; s.pc = 21; return s.tmp_4;
  case 21:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_2 + s.tmp_3);
    s.tmp_1.arg1 = r0;
    s.tmp_7 = r0 = s.top___22579;
    s.tmp_9 = Math_min__P131_mk(s);
    s.tmp_10 = Sprite_height__P2137_mk(s);
    s.tmp_10.arg0 = s.arg1;
    s.callLocIdx = 481; s.pc = 24; return s.tmp_10;
  case 24:
    r0 = s.retval;
    s.tmp_9.arg0 = r0;
    r0 = s.arg0.fields["cellHeight"];
    s.tmp_11 = r0;
    r0 = (s.y___22609 * s.tmp_11);
    s.tmp_9.arg1 = r0;
    s.callLocIdx = 482; s.pc = 23; return s.tmp_9;
  case 23:
    r0 = s.retval;
    s.tmp_8 = r0;
    r0 = (s.tmp_7 + s.tmp_8);
    s.tmp_1.arg2 = r0;
    s.tmp_1.arg3 = s.arg1;
    s.callLocIdx = 483; s.pc = 20; return s.tmp_1;
  case 20:
    r0 = s.retval;
    s.lastBrkId = 1448;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1448]) return breakpoint(s, 25, 1448, r0);
  case 25:
    r0 = (s.y___22609 + 1);
    s.y___22609 = (r0);
    { step = 2; continue; }
  case 3:
    s.lastBrkId = 1449;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1449]) return breakpoint(s, 26, 1449, r0);
  case 26:
    r0 = (s.x___22604 + 1);
    s.x___22604 = (r0);
    { step = 1; continue; }
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
sprites_SpriteMap_insertAABB__P2180.info = {"start":3184,"length":521,"line":91,"column":8,"endLine":99,"endColumn":9,"fileName":"pxt_modules/game/spritemap.ts","functionName":"insertAABB","argumentNames":["this","sprite"]}

function sprites_SpriteMap_insertAABB__P2180_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_SpriteMap_insertAABB__P2180, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  left___22576: undefined,
  top___22579: undefined,
  xn___22582: undefined,
  yn___22593: undefined,
  x___22604: undefined,
  y___22609: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function sprites_SpriteMap_insertAtKey__P4392(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.k___22644 = undefined;
    s.bucket___22649 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_SpriteMap__C2173_VT)) failedCast(r0);
    s.lastBrkId = 1431;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1431]) return breakpoint(s, 5, 1431, r0);
  case 5:
    s.tmp_0 = sprites_SpriteMap_key__P4391_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.tmp_0.arg2 = s.arg2;
    s.callLocIdx = 474; s.pc = 6; return s.tmp_0;
  case 6:
    r0 = s.retval;
    s.k___22644 = (r0);
    s.lastBrkId = 1432;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1432]) return breakpoint(s, 7, 1432, r0);
  case 7:
    r0 = s.arg0.fields["buckets"];
    s.tmp_0 = r0;
    r0 = pxsim_Array__getAt(s.tmp_0, s.k___22644);
    s.bucket___22649 = (r0);
    s.lastBrkId = 1433;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1433]) return breakpoint(s, 8, 1433, r0);
  case 8:
    r0 = pxsim_numops_toBoolDecr(s.bucket___22649);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1434;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1434]) return breakpoint(s, 9, 1434, r0);
  case 9:
    r0 = s.arg0.fields["buckets"];
    s.tmp_2 = r0;
    s.tmp_3 = r0 = s.k___22644;
    r0 = pxsim_Array__mk();
    s.tmp_4 = r0;
    r0 = pxsim_Array_.setAt(s.tmp_2, s.tmp_3, s.tmp_4);
    s.bucket___22649 = (s.tmp_4);
  case 1:
  case 2:
    s.lastBrkId = 1435;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1435]) return breakpoint(s, 10, 1435, r0);
  case 10:
    r0 = pxsim_Array_.indexOf(s.bucket___22649, s.arg3, undefined);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1436;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1436]) return breakpoint(s, 11, 1436, r0);
  case 11:
    r0 = pxsim_Array__push(s.bucket___22649, s.arg3);
  case 3:
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
sprites_SpriteMap_insertAtKey__P4392.info = {"start":2872,"length":302,"line":82,"column":8,"endLine":89,"endColumn":9,"fileName":"pxt_modules/game/spritemap.ts","functionName":"insertAtKey","argumentNames":["this","x","y","sprite"]}

function sprites_SpriteMap_insertAtKey__P4392_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_SpriteMap_insertAtKey__P4392, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  k___22644: undefined,
  bucket___22649: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function sprites_SpriteMap_clear__P2179(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_SpriteMap__C2173_VT)) failedCast(r0);
    s.lastBrkId = 1427;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1427]) return breakpoint(s, 1, 1427, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["buckets"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
sprites_SpriteMap_clear__P2179.info = {"start":2532,"length":50,"line":72,"column":8,"endLine":74,"endColumn":9,"fileName":"pxt_modules/game/spritemap.ts","functionName":"clear","argumentNames":["this"]}

function sprites_SpriteMap_clear__P2179_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_SpriteMap_clear__P2179, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function sprites_SpriteMap_resizeBuckets__P2178(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.maxWidth___22687 = undefined;
    s.maxHeight___22688 = undefined;
    s.sprite___22690 = undefined;
    s.unnamed1638___U3 = undefined;
    s.unnamed1639___U4 = undefined;
    s.tMap___22706 = undefined;
    s.areaWidth___22710 = undefined;
    s.areaHeight___22717 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_SpriteMap__C2173_VT)) failedCast(r0);
    s.lastBrkId = 1412;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1412]) return breakpoint(s, 11, 1412, r0);
  case 11:
    s.maxWidth___22687 = (0);
    s.lastBrkId = 1413;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1413]) return breakpoint(s, 12, 1413, r0);
  case 12:
    s.maxHeight___22688 = (0);
    s.lastBrkId = 1414;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1414]) return breakpoint(s, 13, 1414, r0);
  case 13:
    s.sprite___22690 = (undefined);
    s.unnamed1638___U3 = (s.arg1);
    s.unnamed1639___U4 = (0);
    s.lastBrkId = 1415;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1415]) return breakpoint(s, 14, 1415, r0);
  case 14:
  case 1:
    s.tmp_0 = r0 = s.unnamed1639___U4;
    r0 = pxsim_Array__length(s.unnamed1638___U3);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 6; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1638___U3, s.unnamed1639___U4);
    s.sprite___22690 = (r0);
    s.lastBrkId = 1416;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1416]) return breakpoint(s, 15, 1416, r0);
  case 15:
    s.tmp_4 = Sprite_width__P2136_mk(s);
    s.tmp_4.arg0 = s.sprite___22690;
    s.callLocIdx = 463; s.pc = 16; return s.tmp_4;
  case 16:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_3 > s.maxWidth___22687);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 1417;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1417]) return breakpoint(s, 17, 1417, r0);
  case 17:
    s.tmp_5 = Sprite_width__P2136_mk(s);
    s.tmp_5.arg0 = s.sprite___22690;
    s.callLocIdx = 464; s.pc = 18; return s.tmp_5;
  case 18:
    r0 = s.retval;
    s.maxWidth___22687 = (r0);
  case 2:
  case 3:
    s.lastBrkId = 1418;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1418]) return breakpoint(s, 19, 1418, r0);
  case 19:
    s.tmp_2 = Sprite_height__P2137_mk(s);
    s.tmp_2.arg0 = s.sprite___22690;
    s.callLocIdx = 465; s.pc = 20; return s.tmp_2;
  case 20:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > s.maxHeight___22688);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 1419;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1419]) return breakpoint(s, 21, 1419, r0);
  case 21:
    s.tmp_3 = Sprite_height__P2137_mk(s);
    s.tmp_3.arg0 = s.sprite___22690;
    s.callLocIdx = 466; s.pc = 22; return s.tmp_3;
  case 22:
    r0 = s.retval;
    s.maxHeight___22688 = (r0);
  case 4:
  case 5:
    r0 = (s.unnamed1639___U4 + 1);
    s.unnamed1639___U4 = (r0);
    { step = 1; continue; }
  case 6:
    s.unnamed1638___U3 = (undefined);
    s.lastBrkId = 1420;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1420]) return breakpoint(s, 23, 1420, r0);
  case 23:
    s.tmp_0 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 467; s.pc = 24; return s.tmp_0;
  case 24:
    r0 = s.retval;
    r0 = r0.fields["tileMap"];
    s.tMap___22706 = (r0);
    s.lastBrkId = 1421;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1421]) return breakpoint(s, 25, 1421, r0);
  case 25:
    r0 = pxsim_numops_toBoolDecr(s.tMap___22706);
    if (!r0) { step = 7; continue; }
    s.tmp_0 = tiles_TileMap_areaWidth__P2407_mk(s);
    s.tmp_0.arg0 = s.tMap___22706;
    s.callLocIdx = 468; s.pc = 26; return s.tmp_0;
  case 26:
    r0 = s.retval;
    { step = 8; continue; }
  case 7:
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
  case 8:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    s.areaWidth___22710 = (s.tmp_1);
    s.lastBrkId = 1422;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1422]) return breakpoint(s, 27, 1422, r0);
  case 27:
    r0 = pxsim_numops_toBoolDecr(s.tMap___22706);
    if (!r0) { step = 9; continue; }
    s.tmp_0 = tiles_TileMap_areaHeight__P2408_mk(s);
    s.tmp_0.arg0 = s.tMap___22706;
    s.callLocIdx = 469; s.pc = 28; return s.tmp_0;
  case 28:
    r0 = s.retval;
    { step = 10; continue; }
  case 9:
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
  case 10:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    s.areaHeight___22717 = (s.tmp_1);
    s.lastBrkId = 1423;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1423]) return breakpoint(s, 29, 1423, r0);
  case 29:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Math_clamp__P127_mk(s);
    s.tmp_2.arg0 = 8;
    r0 = (s.areaWidth___22710 >> 2);
    s.tmp_2.arg1 = r0;
    r0 = (s.maxWidth___22687 * 2);
    s.tmp_2.arg2 = r0;
    s.callLocIdx = 470; s.pc = 30; return s.tmp_2;
  case 30:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["cellWidth"] = (s.tmp_1);
    s.lastBrkId = 1424;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1424]) return breakpoint(s, 31, 1424, r0);
  case 31:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Math_clamp__P127_mk(s);
    s.tmp_2.arg0 = 8;
    r0 = (s.areaHeight___22717 >> 2);
    s.tmp_2.arg1 = r0;
    r0 = (s.maxHeight___22688 * 2);
    s.tmp_2.arg2 = r0;
    s.callLocIdx = 471; s.pc = 32; return s.tmp_2;
  case 32:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["cellHeight"] = (s.tmp_1);
    s.lastBrkId = 1425;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1425]) return breakpoint(s, 33, 1425, r0);
  case 33:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.arg0.fields["cellHeight"];
    s.tmp_2 = r0;
    r0 = pxsim.Math_.idiv(s.areaHeight___22717, s.tmp_2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["rowCount"] = (s.tmp_1);
    s.lastBrkId = 1426;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1426]) return breakpoint(s, 34, 1426, r0);
  case 34:
    s.tmp_0 = r0 = s.arg0;
    r0 = s.arg0.fields["cellWidth"];
    s.tmp_2 = r0;
    r0 = pxsim.Math_.idiv(s.areaWidth___22710, s.tmp_2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["columnCount"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
sprites_SpriteMap_resizeBuckets__P2178.info = {"start":1696,"length":826,"line":52,"column":8,"endLine":70,"endColumn":9,"fileName":"pxt_modules/game/spritemap.ts","functionName":"resizeBuckets","argumentNames":["this","sprites"]}

function sprites_SpriteMap_resizeBuckets__P2178_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_SpriteMap_resizeBuckets__P2178, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  maxWidth___22687: undefined,
  maxHeight___22688: undefined,
  sprite___22690: undefined,
  unnamed1638___U3: undefined,
  unnamed1639___U4: undefined,
  tMap___22706: undefined,
  areaWidth___22710: undefined,
  areaHeight___22717: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Sprite_clearObstacles__P2163(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1358;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1358]) return breakpoint(s, 1, 1358, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_obstacles"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite_clearObstacles__P2163.info = {"start":23644,"length":54,"line":757,"column":4,"endLine":759,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"clearObstacles","argumentNames":["this"]}

function Sprite_clearObstacles__P2163_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_clearObstacles__P2163, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function Fx_idiv__P163(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 269;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[269]) return breakpoint(s, 1, 269, r0);
  case 1:
    r0 = pxsim.Math_.idiv(s.arg0, s.arg1);
    return leave(s, r0)
  default: oops()
} } }
Fx_idiv__P163.info = {"start":1279,"length":111,"line":38,"column":4,"endLine":40,"endColumn":5,"fileName":"pxt_modules/base/fixed.ts","functionName":"idiv","argumentNames":["a","b"]}

function Fx_idiv__P163_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Fx_idiv__P163, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
} }





function Fx_div__P162(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.lastBrkId = 268;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[268]) return breakpoint(s, 1, 268, r0);
  case 1:
    r0 = (s.arg0 << 8);
    s.tmp_0 = r0;
    r0 = pxsim.Math_.idiv(s.tmp_0, s.arg1);
    return leave(s, r0)
  default: oops()
} } }
Fx_div__P162.info = {"start":1145,"length":129,"line":35,"column":4,"endLine":37,"endColumn":5,"fileName":"pxt_modules/base/fixed.ts","functionName":"div","argumentNames":["a","b"]}

function Fx_div__P162_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Fx_div__P162, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function ArcadePhysicsEngine_draw__P2265(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, ArcadePhysicsEngine__C2254_VT)) failedCast(r0);
    s.lastBrkId = 1508;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1508]) return breakpoint(s, 1, 1508, r0);
  case 1:
    s.tmp_0 = sprites_SpriteMap_draw__P2177_mk(s);
    r0 = s.arg0.fields["map"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 510; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
ArcadePhysicsEngine_draw__P2265.info = {"start":2777,"length":39,"line":108,"column":4,"endLine":110,"endColumn":5,"fileName":"pxt_modules/game/physics.ts","functionName":"draw","argumentNames":["this"]}

function ArcadePhysicsEngine_draw__P2265_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ArcadePhysicsEngine_draw__P2265, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function sprites_SpriteMap_draw__P2177(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.x___22992 = undefined;
    s.y___22998 = undefined;
    s.left___23004 = undefined;
    s.top___23009 = undefined;
    s.k___23014 = undefined;
    s.b___23019 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_SpriteMap__C2173_VT)) failedCast(r0);
    s.lastBrkId = 1398;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1398]) return breakpoint(s, 9, 1398, r0);
  case 9:
    s.x___22992 = (0);
    s.lastBrkId = 1399;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1399]) return breakpoint(s, 10, 1399, r0);
  case 10:
  case 1:
    s.lastBrkId = 1400;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1400]) return breakpoint(s, 11, 1400, r0);
  case 11:
    r0 = s.arg0.fields["columnCount"];
    s.tmp_1 = r0;
    r0 = (s.x___22992 < s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 8; continue; }
    s.lastBrkId = 1401;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1401]) return breakpoint(s, 12, 1401, r0);
  case 12:
    s.y___22998 = (0);
    s.lastBrkId = 1402;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1402]) return breakpoint(s, 13, 1402, r0);
  case 13:
  case 2:
    s.lastBrkId = 1403;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1403]) return breakpoint(s, 14, 1403, r0);
  case 14:
    r0 = s.arg0.fields["rowCount"];
    s.tmp_1 = r0;
    r0 = (s.y___22998 < s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 1404;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1404]) return breakpoint(s, 15, 1404, r0);
  case 15:
    r0 = s.arg0.fields["cellWidth"];
    s.tmp_2 = r0;
    r0 = (s.x___22992 * s.tmp_2);
    s.left___23004 = (r0);
    s.lastBrkId = 1405;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1405]) return breakpoint(s, 16, 1405, r0);
  case 16:
    r0 = s.arg0.fields["cellHeight"];
    s.tmp_0 = r0;
    r0 = (s.y___22998 * s.tmp_0);
    s.top___23009 = (r0);
    s.lastBrkId = 1406;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1406]) return breakpoint(s, 17, 1406, r0);
  case 17:
    s.tmp_0 = sprites_SpriteMap_key__P4391_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.left___23004;
    s.tmp_0.arg2 = s.top___23009;
    s.callLocIdx = 461; s.pc = 18; return s.tmp_0;
  case 18:
    r0 = s.retval;
    s.k___23014 = (r0);
    s.lastBrkId = 1407;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1407]) return breakpoint(s, 19, 1407, r0);
  case 19:
    r0 = s.arg0.fields["buckets"];
    s.tmp_0 = r0;
    r0 = pxsim_Array__getAt(s.tmp_0, s.k___23014);
    s.b___23019 = (r0);
    s.lastBrkId = 1408;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1408]) return breakpoint(s, 20, 1408, r0);
  case 20:
    s.tmp_0 = r0 = s.b___23019;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 3; continue; }
    r0 = s.tmp_0;
    { step = 4; continue; }
  case 3:
    r0 = pxsim_Array__length(s.b___23019);
  case 4:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 1409;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1409]) return breakpoint(s, 21, 1409, r0);
  case 21:
    s.tmp_2 = helpers_imageDrawRect__P1756_mk(s);
    s.tmp_2.arg0 = globals.screen___1827;
    s.tmp_2.arg1 = s.left___23004;
    s.tmp_2.arg2 = s.top___23009;
    r0 = s.arg0.fields["cellWidth"];
    s.tmp_2.arg3 = r0;
    r0 = s.arg0.fields["cellHeight"];
    s.tmp_2.arg4 = r0;
    s.tmp_2.arg5 = 5;
    s.callLocIdx = 462; s.pc = 22; return s.tmp_2;
  case 22:
    r0 = s.retval;
  case 5:
  case 6:
    s.lastBrkId = 1410;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1410]) return breakpoint(s, 23, 1410, r0);
  case 23:
    r0 = (s.y___22998 + 1);
    s.y___22998 = (r0);
    { step = 2; continue; }
  case 7:
    s.lastBrkId = 1411;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1411]) return breakpoint(s, 24, 1411, r0);
  case 24:
    r0 = (s.x___22992 + 1);
    s.x___22992 = (r0);
    { step = 1; continue; }
  case 8:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
sprites_SpriteMap_draw__P2177.info = {"start":1122,"length":496,"line":36,"column":8,"endLine":47,"endColumn":9,"fileName":"pxt_modules/game/spritemap.ts","functionName":"draw","argumentNames":["this"]}

function sprites_SpriteMap_draw__P2177_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_SpriteMap_draw__P2177, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  x___22992: undefined,
  y___22998: undefined,
  left___23004: undefined,
  top___23009: undefined,
  k___23014: undefined,
  b___23019: undefined,
  arg0: undefined,
} }





function ArcadePhysicsEngine_removeSprite__P2264(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, ArcadePhysicsEngine__C2254_VT)) failedCast(r0);
    s.lastBrkId = 1507;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1507]) return breakpoint(s, 1, 1507, r0);
  case 1:
    r0 = s.arg0.fields["sprites"];
    s.tmp_0 = r0;
    r0 = pxsim_Array_.removeElement(s.tmp_0, s.arg1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
ArcadePhysicsEngine_removeSprite__P2264.info = {"start":2691,"length":80,"line":104,"column":4,"endLine":106,"endColumn":5,"fileName":"pxt_modules/game/physics.ts","functionName":"removeSprite","argumentNames":["this","sprite"]}

function ArcadePhysicsEngine_removeSprite__P2264_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ArcadePhysicsEngine_removeSprite__P2264, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function ArcadePhysicsEngine_addSprite__P2263(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.tm___23056 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, ArcadePhysicsEngine__C2254_VT)) failedCast(r0);
    s.lastBrkId = 1503;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1503]) return breakpoint(s, 5, 1503, r0);
  case 5:
    r0 = s.arg0.fields["sprites"];
    s.tmp_0 = r0;
    r0 = pxsim_Array__push(s.tmp_0, s.arg1);
    s.lastBrkId = 1504;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1504]) return breakpoint(s, 6, 1504, r0);
  case 6:
    s.tmp_0 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 508; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    r0 = r0.fields["tileMap"];
    s.tm___23056 = (r0);
    s.lastBrkId = 1505;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1505]) return breakpoint(s, 8, 1505, r0);
  case 8:
    s.tmp_0 = r0 = s.tm___23056;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    s.tmp_1 = tiles_TileMap_isOnWall__P2422_mk(s);
    s.tmp_1.arg0 = s.tm___23056;
    s.tmp_1.arg1 = s.arg1;
    s.callLocIdx = 509; s.pc = 9; return s.tmp_1;
  case 9:
    r0 = s.retval;
  case 2:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1506;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1506]) return breakpoint(s, 10, 1506, r0);
  case 10:
    s.tmp_3 = r0 = s.arg1;
    r0 = s.tmp_3.fields["flags"];
    s.tmp_5 = r0;
    r0 = (s.tmp_5 | 256);
    s.tmp_4 = r0;
    r0 = (s.tmp_3).fields["flags"] = (s.tmp_4);
  case 3:
  case 4:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
ArcadePhysicsEngine_addSprite__P2263.info = {"start":2465,"length":220,"line":96,"column":4,"endLine":102,"endColumn":5,"fileName":"pxt_modules/game/physics.ts","functionName":"addSprite","argumentNames":["this","sprite"]}

function ArcadePhysicsEngine_addSprite__P2263_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: ArcadePhysicsEngine_addSprite__P2263, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tm___23056: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function tiles_TileMapData_constructor__P2388(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.arg4 = (s.lambdaArgs[4]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMapData__C2387_VT)) failedCast(r0);
    s.lastBrkId = 2103;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2103]) return breakpoint(s, 1, 2103, r0);
  case 1:
    r0 = (s.arg0).fields["data"] = (s.arg1);
    s.lastBrkId = 2104;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2104]) return breakpoint(s, 2, 2104, r0);
  case 2:
    r0 = (s.arg0).fields["layers"] = (s.arg2);
    s.lastBrkId = 2105;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2105]) return breakpoint(s, 3, 2105, r0);
  case 3:
    r0 = (s.arg0).fields["tileset"] = (s.arg3);
    s.lastBrkId = 2106;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2106]) return breakpoint(s, 4, 2106, r0);
  case 4:
    s.tmp_0 = tiles_TileMapData_scale__P2392_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg4;
    s.callLocIdx = 825; s.pc = 5; return s.tmp_0;
  case 5:
    r0 = s.retval;
    s.lastBrkId = 2107;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2107]) return breakpoint(s, 6, 2107, r0);
  case 6:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim.BufferMethods.getNumber(s.arg1, 4, 0);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_width"] = (s.tmp_1);
    s.lastBrkId = 2108;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2108]) return breakpoint(s, 7, 2108, r0);
  case 7:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim.BufferMethods.getNumber(s.arg1, 4, 2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_height"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
tiles_TileMapData_constructor__P2388.info = {"start":3293,"length":358,"line":125,"column":8,"endLine":133,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"inline","argumentNames":["this","data","layers","tileset","scale"]}

function tiles_TileMapData_constructor__P2388_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMapData_constructor__P2388, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
} }





function tiles_TileMapData_scale__P2392(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMapData__C2387_VT)) failedCast(r0);
    s.lastBrkId = 2112;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2112]) return breakpoint(s, 1, 2112, r0);
  case 1:
    r0 = (s.arg0).fields["_scale"] = (s.arg1);
    s.lastBrkId = 2113;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2113]) return breakpoint(s, 2, 2113, r0);
  case 2:
    s.tmp_0 = r0 = s.arg0;
    r0 = pxsim_Array__mk();
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["cachedTileView"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
tiles_TileMapData_scale__P2392.info = {"start":3885,"length":102,"line":147,"column":8,"endLine":150,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"scale","argumentNames":["this","s"]}

function tiles_TileMapData_scale__P2392_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMapData_scale__P2392, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function tiles_TileMap_constructor__P2402(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMap__C2400_VT)) failedCast(r0);
    s.lastBrkId = 2130;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2130]) return breakpoint(s, 1, 2130, r0);
  case 1:
    r0 = (s.arg0).fields["_layer"] = (1);
    s.lastBrkId = 2131;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2131]) return breakpoint(s, 2, 2131, r0);
  case 2:
    s.tmp_0 = tiles_TileMap_scale__P2404_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.callLocIdx = 831; s.pc = 3; return s.tmp_0;
  case 3:
    r0 = s.retval;
    s.lastBrkId = 2132;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2132]) return breakpoint(s, 4, 2132, r0);
  case 4:
    r0 = pxsim_pxtcore_mkAction(1, tiles_TileMap_inline__P23117);
    s.tmp_0 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_0, 0, s.arg0);
    s.tmp_1 = r0 = s.arg0;
    s.tmp_3 = scene_createRenderable__P2460_mk(s);
    s.tmp_3.arg0 = -1;
    s.tmp_3.arg1 = s.tmp_0;
    s.tmp_3.arg2 = undefined;
    s.callLocIdx = 833; s.pc = 5; return s.tmp_3;
  case 5:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1).fields["renderable"] = (s.tmp_2);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
tiles_TileMap_constructor__P2402.info = {"start":5903,"length":268,"line":211,"column":8,"endLine":219,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"inline","argumentNames":["this","scale"]}

function tiles_TileMap_constructor__P2402_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMap_constructor__P2402, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function tiles_TileMap_inline__P23117(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = tiles_TileMap_draw__P4501_mk(s);
    s.tmp_0.arg0 = s.caps[0];
    s.tmp_0.arg1 = s.arg0;
    s.tmp_0.arg2 = s.arg1;
    s.callLocIdx = 832; s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
tiles_TileMap_inline__P23117.info = {"start":6121,"length":25,"line":217,"column":16,"endLine":217,"endColumn":41,"fileName":"pxt_modules/game/tilemap.ts","functionName":"inline","argumentNames":["t","c"]}

function tiles_TileMap_inline__P23117_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMap_inline__P23117, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function tiles_TileMap_draw__P4501(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.bitmask___23128 = undefined;
    s.offsetX___23134 = undefined;
    s.offsetY___23139 = undefined;
    s.x0___23144 = undefined;
    s.xn___23151 = undefined;
    s.y0___23168 = undefined;
    s.yn___23175 = undefined;
    s.x___23192 = undefined;
    s.y___23198 = undefined;
    s.index___23204 = undefined;
    s.tile___23211 = undefined;
    s.x___23247 = undefined;
    s.xLine___23253 = undefined;
    s.y___23279 = undefined;
    s.yLine___23285 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMap__C2400_VT)) failedCast(r0);
    s.lastBrkId = 2146;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2146]) return breakpoint(s, 24, 2146, r0);
  case 24:
    s.tmp_3 = tiles_TileMap_enabled__P2411_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.callLocIdx = 848; s.pc = 25; return s.tmp_3;
  case 25:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2147;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2147]) return breakpoint(s, 26, 2147, r0);
  case 26:
    { step = 23; continue; }
  case 1:
  case 2:
    s.lastBrkId = 2148;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2148]) return breakpoint(s, 27, 2148, r0);
  case 27:
    s.tmp_6 = tiles_TileMap_scale__P2403_mk(s);
    s.tmp_6.arg0 = s.arg0;
    s.callLocIdx = 849; s.pc = 28; return s.tmp_6;
  case 28:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = (1 << s.tmp_5);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 - 1);
    s.bitmask___23128 = (r0);
    s.lastBrkId = 2149;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2149]) return breakpoint(s, 29, 2149, r0);
  case 29:
    r0 = s.arg2.fields["drawOffsetX"];
    s.tmp_0 = r0;
    r0 = (s.tmp_0 & s.bitmask___23128);
    s.offsetX___23134 = (r0);
    s.lastBrkId = 2150;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2150]) return breakpoint(s, 30, 2150, r0);
  case 30:
    r0 = s.arg2.fields["drawOffsetY"];
    s.tmp_0 = r0;
    r0 = (s.tmp_0 & s.bitmask___23128);
    s.offsetY___23139 = (r0);
    s.lastBrkId = 2151;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2151]) return breakpoint(s, 31, 2151, r0);
  case 31:
    s.tmp_0 = Math_max__P130_mk(s);
    s.tmp_0.arg0 = 0;
    r0 = s.arg2.fields["drawOffsetX"];
    s.tmp_1 = r0;
    s.tmp_3 = tiles_TileMap_scale__P2403_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.callLocIdx = 850; s.pc = 33; return s.tmp_3;
  case 33:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1 >> s.tmp_2);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 851; s.pc = 32; return s.tmp_0;
  case 32:
    r0 = s.retval;
    s.x0___23144 = (r0);
    s.lastBrkId = 2152;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2152]) return breakpoint(s, 34, 2152, r0);
  case 34:
    s.tmp_0 = Math_min__P131_mk(s);
    s.tmp_1 = tiles_TileMapData_width__P2389_mk(s);
    r0 = s.arg0.fields["_map"];
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 852; s.pc = 36; return s.tmp_1;
  case 36:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    r0 = s.arg2.fields["drawOffsetX"];
    s.tmp_4 = r0;
    r0 = pxsim_ImageMethods.width(s.arg1);
    s.tmp_5 = r0;
    r0 = (s.tmp_4 + s.tmp_5);
    s.tmp_3 = r0;
    s.tmp_7 = tiles_TileMap_scale__P2403_mk(s);
    s.tmp_7.arg0 = s.arg0;
    s.callLocIdx = 853; s.pc = 37; return s.tmp_7;
  case 37:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = (s.tmp_3 >> s.tmp_6);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + 1);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 854; s.pc = 35; return s.tmp_0;
  case 35:
    r0 = s.retval;
    s.xn___23151 = (r0);
    s.lastBrkId = 2153;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2153]) return breakpoint(s, 38, 2153, r0);
  case 38:
    s.tmp_0 = Math_max__P130_mk(s);
    s.tmp_0.arg0 = 0;
    r0 = s.arg2.fields["drawOffsetY"];
    s.tmp_1 = r0;
    s.tmp_3 = tiles_TileMap_scale__P2403_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.callLocIdx = 855; s.pc = 40; return s.tmp_3;
  case 40:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1 >> s.tmp_2);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 856; s.pc = 39; return s.tmp_0;
  case 39:
    r0 = s.retval;
    s.y0___23168 = (r0);
    s.lastBrkId = 2154;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2154]) return breakpoint(s, 41, 2154, r0);
  case 41:
    s.tmp_0 = Math_min__P131_mk(s);
    s.tmp_1 = tiles_TileMapData_height__P2390_mk(s);
    r0 = s.arg0.fields["_map"];
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 857; s.pc = 43; return s.tmp_1;
  case 43:
    r0 = s.retval;
    s.tmp_0.arg0 = r0;
    r0 = s.arg2.fields["drawOffsetY"];
    s.tmp_4 = r0;
    r0 = pxsim_ImageMethods.height(s.arg1);
    s.tmp_5 = r0;
    r0 = (s.tmp_4 + s.tmp_5);
    s.tmp_3 = r0;
    s.tmp_7 = tiles_TileMap_scale__P2403_mk(s);
    s.tmp_7.arg0 = s.arg0;
    s.callLocIdx = 858; s.pc = 44; return s.tmp_7;
  case 44:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = (s.tmp_3 >> s.tmp_6);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 + 1);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 859; s.pc = 42; return s.tmp_0;
  case 42:
    r0 = s.retval;
    s.yn___23175 = (r0);
    s.lastBrkId = 2155;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2155]) return breakpoint(s, 45, 2155, r0);
  case 45:
    s.x___23192 = (s.x0___23144);
    s.lastBrkId = 2156;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2156]) return breakpoint(s, 46, 2156, r0);
  case 46:
  case 3:
    s.lastBrkId = 2157;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2157]) return breakpoint(s, 47, 2157, r0);
  case 47:
    r0 = (s.x___23192 <= s.xn___23151);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 8; continue; }
    s.lastBrkId = 2158;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2158]) return breakpoint(s, 48, 2158, r0);
  case 48:
    s.y___23198 = (s.y0___23168);
    s.lastBrkId = 2159;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2159]) return breakpoint(s, 49, 2159, r0);
  case 49:
  case 4:
    s.lastBrkId = 2160;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2160]) return breakpoint(s, 50, 2160, r0);
  case 50:
    r0 = (s.y___23198 <= s.yn___23175);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 2161;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2161]) return breakpoint(s, 51, 2161, r0);
  case 51:
    s.tmp_1 = tiles_TileMapData_getTile__P2393_mk(s);
    r0 = s.arg0.fields["_map"];
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = s.x___23192;
    s.tmp_1.arg2 = s.y___23198;
    s.callLocIdx = 860; s.pc = 52; return s.tmp_1;
  case 52:
    r0 = s.retval;
    s.index___23204 = (r0);
    s.lastBrkId = 2162;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2162]) return breakpoint(s, 53, 2162, r0);
  case 53:
    s.tmp_0 = tiles_TileMapData_getTileImage__P2396_mk(s);
    r0 = s.arg0.fields["_map"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = s.index___23204;
    s.callLocIdx = 861; s.pc = 54; return s.tmp_0;
  case 54:
    r0 = s.retval;
    s.tile___23211 = (r0);
    s.lastBrkId = 2163;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2163]) return breakpoint(s, 55, 2163, r0);
  case 55:
    r0 = pxsim_numops_toBoolDecr(s.tile___23211);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 2164;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2164]) return breakpoint(s, 56, 2164, r0);
  case 56:
    s.tmp_0 = r0 = s.arg1;
    s.tmp_1 = r0 = s.tile___23211;
    r0 = (s.x___23192 - s.x0___23144);
    s.tmp_4 = r0;
    s.tmp_6 = tiles_TileMap_scale__P2403_mk(s);
    s.tmp_6.arg0 = s.arg0;
    s.callLocIdx = 862; s.pc = 57; return s.tmp_6;
  case 57:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = (s.tmp_4 << s.tmp_5);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 - s.offsetX___23134);
    s.tmp_2 = r0;
    r0 = (s.y___23198 - s.y0___23168);
    s.tmp_9 = r0;
    s.tmp_11 = tiles_TileMap_scale__P2403_mk(s);
    s.tmp_11.arg0 = s.arg0;
    s.callLocIdx = 863; s.pc = 58; return s.tmp_11;
  case 58:
    r0 = s.retval;
    s.tmp_10 = r0;
    r0 = (s.tmp_9 << s.tmp_10);
    s.tmp_8 = r0;
    r0 = (s.tmp_8 - s.offsetY___23139);
    s.tmp_7 = r0;
    r0 = pxsim_ImageMethods.drawTransparentImage(s.tmp_0, s.tmp_1, s.tmp_2, s.tmp_7);
  case 5:
  case 6:
    s.lastBrkId = 2165;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2165]) return breakpoint(s, 59, 2165, r0);
  case 59:
    r0 = (s.y___23198 + 1);
    s.y___23198 = (r0);
    { step = 4; continue; }
  case 7:
    s.lastBrkId = 2166;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2166]) return breakpoint(s, 60, 2166, r0);
  case 60:
    r0 = (s.x___23192 + 1);
    s.x___23192 = (r0);
    { step = 3; continue; }
  case 8:
    s.lastBrkId = 2167;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2167]) return breakpoint(s, 61, 2167, r0);
  case 61:
    r0 = pxsim_numops_toBoolDecr(globals.debug___2605);
    if (!r0) { step = 21; continue; }
    s.lastBrkId = 2168;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2168]) return breakpoint(s, 62, 2168, r0);
  case 62:
    s.x___23247 = (s.x0___23144);
    s.lastBrkId = 2169;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2169]) return breakpoint(s, 63, 2169, r0);
  case 63:
  case 9:
    s.lastBrkId = 2170;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2170]) return breakpoint(s, 64, 2170, r0);
  case 64:
    r0 = (s.x___23247 <= s.xn___23151);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 14; continue; }
    s.lastBrkId = 2171;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2171]) return breakpoint(s, 65, 2171, r0);
  case 65:
    r0 = (s.x___23247 - s.x0___23144);
    s.tmp_2 = r0;
    s.tmp_4 = tiles_TileMap_scale__P2403_mk(s);
    s.tmp_4.arg0 = s.arg0;
    s.callLocIdx = 864; s.pc = 66; return s.tmp_4;
  case 66:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_2 << s.tmp_3);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - s.offsetX___23134);
    s.xLine___23253 = (r0);
    s.lastBrkId = 2172;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2172]) return breakpoint(s, 67, 2172, r0);
  case 67:
    r0 = (s.xLine___23253 >= 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 10; continue; }
    r0 = s.tmp_0;
    { step = 11; continue; }
  case 10:
    s.tmp_1 = r0 = s.xLine___23253;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 <= s.tmp_2);
  case 11:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 12; continue; }
    s.lastBrkId = 2173;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2173]) return breakpoint(s, 68, 2173, r0);
  case 68:
    s.tmp_4 = helpers_imageDrawLine__P1755_mk(s);
    s.tmp_4.arg0 = s.arg1;
    s.tmp_4.arg1 = s.xLine___23253;
    s.tmp_4.arg2 = 0;
    s.tmp_4.arg3 = s.xLine___23253;
    r0 = pxsim_ImageMethods.height(s.arg1);
    s.tmp_4.arg4 = r0;
    s.tmp_4.arg5 = 1;
    s.callLocIdx = 865; s.pc = 69; return s.tmp_4;
  case 69:
    r0 = s.retval;
  case 12:
  case 13:
    s.lastBrkId = 2174;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2174]) return breakpoint(s, 70, 2174, r0);
  case 70:
    r0 = (s.x___23247 + 1);
    s.x___23247 = (r0);
    { step = 9; continue; }
  case 14:
    s.lastBrkId = 2175;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2175]) return breakpoint(s, 71, 2175, r0);
  case 71:
    s.y___23279 = (s.y0___23168);
    s.lastBrkId = 2176;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2176]) return breakpoint(s, 72, 2176, r0);
  case 72:
  case 15:
    s.lastBrkId = 2177;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2177]) return breakpoint(s, 73, 2177, r0);
  case 73:
    r0 = (s.y___23279 <= s.yn___23175);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 20; continue; }
    s.lastBrkId = 2178;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2178]) return breakpoint(s, 74, 2178, r0);
  case 74:
    r0 = (s.y___23279 - s.y0___23168);
    s.tmp_2 = r0;
    s.tmp_4 = tiles_TileMap_scale__P2403_mk(s);
    s.tmp_4.arg0 = s.arg0;
    s.callLocIdx = 866; s.pc = 75; return s.tmp_4;
  case 75:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_2 << s.tmp_3);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - s.offsetY___23139);
    s.yLine___23285 = (r0);
    s.lastBrkId = 2179;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2179]) return breakpoint(s, 76, 2179, r0);
  case 76:
    r0 = (s.yLine___23285 >= 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 16; continue; }
    r0 = s.tmp_0;
    { step = 17; continue; }
  case 16:
    s.tmp_1 = r0 = s.yLine___23285;
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_2 = r0;
    r0 = (s.tmp_1 <= s.tmp_2);
  case 17:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 18; continue; }
    s.lastBrkId = 2180;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2180]) return breakpoint(s, 77, 2180, r0);
  case 77:
    s.tmp_4 = helpers_imageDrawLine__P1755_mk(s);
    s.tmp_4.arg0 = s.arg1;
    s.tmp_4.arg1 = 0;
    s.tmp_4.arg2 = s.yLine___23285;
    r0 = pxsim_ImageMethods.width(s.arg1);
    s.tmp_4.arg3 = r0;
    s.tmp_4.arg4 = s.yLine___23285;
    s.tmp_4.arg5 = 1;
    s.callLocIdx = 867; s.pc = 78; return s.tmp_4;
  case 78:
    r0 = s.retval;
  case 18:
  case 19:
    s.lastBrkId = 2181;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2181]) return breakpoint(s, 79, 2181, r0);
  case 79:
    r0 = (s.y___23279 + 1);
    s.y___23279 = (r0);
    { step = 15; continue; }
  case 20:
  case 21:
  case 22:
  case 23:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
tiles_TileMap_draw__P4501.info = {"start":10243,"length":2224,"line":348,"column":8,"endLine":403,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"draw","argumentNames":["this","target","camera"]}

function tiles_TileMap_draw__P4501_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMap_draw__P4501, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  bitmask___23128: undefined,
  offsetX___23134: undefined,
  offsetY___23139: undefined,
  x0___23144: undefined,
  xn___23151: undefined,
  y0___23168: undefined,
  yn___23175: undefined,
  x___23192: undefined,
  y___23198: undefined,
  index___23204: undefined,
  tile___23211: undefined,
  x___23247: undefined,
  xLine___23253: undefined,
  y___23279: undefined,
  yLine___23285: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function tiles_TileMap_scale__P2404(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMap__C2400_VT)) failedCast(r0);
    s.lastBrkId = 2134;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2134]) return breakpoint(s, 3, 2134, r0);
  case 3:
    r0 = (s.arg0).fields["_scale"] = (s.arg1);
    s.lastBrkId = 2135;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2135]) return breakpoint(s, 4, 2135, r0);
  case 4:
    r0 = s.arg0.fields["_map"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 2136;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2136]) return breakpoint(s, 5, 2136, r0);
  case 5:
    s.tmp_1 = tiles_TileMapData_scale__P2392_mk(s);
    r0 = s.arg0.fields["_map"];
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = s.arg1;
    s.callLocIdx = 834; s.pc = 6; return s.tmp_1;
  case 6:
    r0 = s.retval;
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
tiles_TileMap_scale__P2404.info = {"start":6246,"length":144,"line":225,"column":8,"endLine":230,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"scale","argumentNames":["this","s"]}

function tiles_TileMap_scale__P2404_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMap_scale__P2404, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function tiles_TileMap_data__P4499(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_TileMap__C2400_VT)) failedCast(r0);
    s.lastBrkId = 2137;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2137]) return breakpoint(s, 1, 2137, r0);
  case 1:
    r0 = s.arg0.fields["_map"];
    return leaveAccessor(s, r0)
  default: oops()
} } }
tiles_TileMap_data__P4499.info = {"start":6400,"length":75,"line":232,"column":8,"endLine":234,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"data","argumentNames":["this"]}
tiles_TileMap_data__P4499.isGetter = true;

function tiles_TileMap_data__P4499_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_TileMap_data__P4499, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function scene_BackgroundLayer_constructor__P2365(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_BackgroundLayer__C2358_VT)) failedCast(r0);
    s.lastBrkId = 2032;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2032]) return breakpoint(s, 7, 2032, r0);
  case 7:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = Math_max__P130_mk(s);
    s.tmp_2.arg0 = 1;
    s.tmp_2.arg1 = s.arg1;
    s.callLocIdx = 819; s.pc = 8; return s.tmp_2;
  case 8:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["distance"] = (s.tmp_1);
    s.lastBrkId = 2033;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2033]) return breakpoint(s, 9, 2033, r0);
  case 9:
    r0 = (s.arg0).fields["img"] = (s.arg3);
    s.lastBrkId = 2034;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2034]) return breakpoint(s, 10, 2034, r0);
  case 10:
    s.tmp_0 = r0 = s.arg2;
    r0 = pxsim_pxtcore.switch_eq(5, s.tmp_0);
    if (r0) { step = 1; continue; }
    r0 = pxsim_pxtcore.switch_eq(1, s.tmp_0);
    if (r0) { step = 2; continue; }
    r0 = pxsim_pxtcore.switch_eq(2, s.tmp_0);
    if (r0) { step = 3; continue; }
    r0 = pxsim_pxtcore.switch_eq(3, s.tmp_0);
    if (r0) { step = 4; continue; }
    r0 = pxsim_pxtcore.switch_eq(4, s.tmp_0);
    if (r0) { step = 5; continue; }
    r0 = s.tmp_0;
    { step = 6; continue; }
  case 1:
    s.lastBrkId = 2035;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2035]) return breakpoint(s, 11, 2035, r0);
  case 11:
    r0 = (s.arg0).fields["repeatX"] = (true);
    s.lastBrkId = 2036;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2036]) return breakpoint(s, 12, 2036, r0);
  case 12:
    r0 = (s.arg0).fields["repeatY"] = (true);
    s.lastBrkId = 2037;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2037]) return breakpoint(s, 13, 2037, r0);
  case 13:
    r0 = (s.arg0).fields["alignX"] = (5);
    s.lastBrkId = 2038;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2038]) return breakpoint(s, 14, 2038, r0);
  case 14:
    r0 = (s.arg0).fields["alignY"] = (5);
    s.lastBrkId = 2039;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2039]) return breakpoint(s, 15, 2039, r0);
  case 15:
    { step = 6; continue; }
  case 2:
  case 3:
    s.lastBrkId = 2040;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2040]) return breakpoint(s, 16, 2040, r0);
  case 16:
    r0 = (s.arg0).fields["repeatX"] = (false);
    s.lastBrkId = 2041;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2041]) return breakpoint(s, 17, 2041, r0);
  case 17:
    r0 = (s.arg0).fields["repeatY"] = (true);
    s.lastBrkId = 2042;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2042]) return breakpoint(s, 18, 2042, r0);
  case 18:
    r0 = (s.arg0).fields["alignX"] = (s.arg2);
    s.lastBrkId = 2043;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2043]) return breakpoint(s, 19, 2043, r0);
  case 19:
    r0 = (s.arg0).fields["alignY"] = (5);
    s.lastBrkId = 2044;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2044]) return breakpoint(s, 20, 2044, r0);
  case 20:
    { step = 6; continue; }
  case 4:
  case 5:
    s.lastBrkId = 2045;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2045]) return breakpoint(s, 21, 2045, r0);
  case 21:
    r0 = (s.arg0).fields["repeatX"] = (true);
    s.lastBrkId = 2046;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2046]) return breakpoint(s, 22, 2046, r0);
  case 22:
    r0 = (s.arg0).fields["repeatY"] = (false);
    s.lastBrkId = 2047;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2047]) return breakpoint(s, 23, 2047, r0);
  case 23:
    r0 = (s.arg0).fields["alignX"] = (5);
    s.lastBrkId = 2048;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2048]) return breakpoint(s, 24, 2048, r0);
  case 24:
    r0 = (s.arg0).fields["alignY"] = (s.arg2);
    s.lastBrkId = 2049;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2049]) return breakpoint(s, 25, 2049, r0);
  case 25:
  case 6:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_BackgroundLayer_constructor__P2365.info = {"start":1936,"length":1117,"line":72,"column":8,"endLine":97,"endColumn":9,"fileName":"pxt_modules/game/background.ts","functionName":"inline","argumentNames":["this","distance","alignment","img"]}

function scene_BackgroundLayer_constructor__P2365_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_BackgroundLayer_constructor__P2365, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function scene_Camera_y__P2447(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_Camera__C2437_VT)) failedCast(r0);
    s.lastBrkId = 2226;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2226]) return breakpoint(s, 1, 2226, r0);
  case 1:
    r0 = s.arg0.fields["drawOffsetY"];
    s.tmp_0 = r0;
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 >> 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 + s.tmp_1);
    return leaveAccessor(s, r0)
  default: oops()
} } }
scene_Camera_y__P2447.info = {"start":1398,"length":79,"line":49,"column":8,"endLine":51,"endColumn":9,"fileName":"pxt_modules/game/camera.ts","functionName":"y","argumentNames":["this"]}
scene_Camera_y__P2447.isGetter = true;

function scene_Camera_y__P2447_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Camera_y__P2447, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function scene_Camera_x__P2446(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_Camera__C2437_VT)) failedCast(r0);
    s.lastBrkId = 2225;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2225]) return breakpoint(s, 1, 2225, r0);
  case 1:
    r0 = s.arg0.fields["drawOffsetX"];
    s.tmp_0 = r0;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 >> 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 + s.tmp_1);
    return leaveAccessor(s, r0)
  default: oops()
} } }
scene_Camera_x__P2446.info = {"start":1311,"length":78,"line":46,"column":8,"endLine":48,"endColumn":9,"fileName":"pxt_modules/game/camera.ts","functionName":"x","argumentNames":["this"]}
scene_Camera_x__P2446.isGetter = true;

function scene_Camera_x__P2446_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Camera_x__P2446, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function info_PlayerInfo_id__P2323(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, info_PlayerInfo__C2309_VT)) failedCast(r0);
    s.lastBrkId = 1912;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1912]) return breakpoint(s, 1, 1912, r0);
  case 1:
    r0 = s.arg0.fields["_player"];
    return leave(s, r0)
  default: oops()
} } }
info_PlayerInfo_id__P2323.info = {"start":17450,"length":57,"line":572,"column":8,"endLine":574,"endColumn":9,"fileName":"pxt_modules/game/info.ts","functionName":"id","argumentNames":["this"]}

function info_PlayerInfo_id__P2323_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: info_PlayerInfo_id__P2323, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function particles_ParticleSource_factory__P2774(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_ParticleSource__C2756_VT)) failedCast(r0);
    s.lastBrkId = 3391;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3391]) return breakpoint(s, 1, 3391, r0);
  case 1:
    r0 = s.arg0.fields["_factory"];
    return leaveAccessor(s, r0)
  default: oops()
} } }
particles_ParticleSource_factory__P2774.info = {"start":7951,"length":76,"line":264,"column":8,"endLine":266,"endColumn":9,"fileName":"pxt_modules/game/particles.ts","functionName":"factory","argumentNames":["this"]}
particles_ParticleSource_factory__P2774.isGetter = true;

function particles_ParticleSource_factory__P2774_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_ParticleSource_factory__P2774, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function particles_ParticleSource___draw__P2762(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.current___23397 = undefined;
    s.left___23400 = undefined;
    s.top___23410 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_ParticleSource__C2756_VT)) failedCast(r0);
    s.lastBrkId = 3319;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3319]) return breakpoint(s, 9, 3319, r0);
  case 9:
    r0 = s.arg0.fields["head"];
    s.current___23397 = (r0);
    s.lastBrkId = 3320;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3320]) return breakpoint(s, 10, 3320, r0);
  case 10:
    r0 = s.arg0.fields["pFlags"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 & 4);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = 0;
    { step = 2; continue; }
  case 1:
    s.tmp_2 = Fx8__P149_mk(s);
    r0 = s.arg1.fields["drawOffsetX"];
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 1465; s.pc = 11; return s.tmp_2;
  case 11:
    r0 = s.retval;
  case 2:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    s.left___23400 = (s.tmp_3);
    s.lastBrkId = 3321;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3321]) return breakpoint(s, 12, 3321, r0);
  case 12:
    r0 = s.arg0.fields["pFlags"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 & 4);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    r0 = 0;
    { step = 4; continue; }
  case 3:
    s.tmp_2 = Fx8__P149_mk(s);
    r0 = s.arg1.fields["drawOffsetY"];
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 1466; s.pc = 13; return s.tmp_2;
  case 13:
    r0 = s.retval;
  case 4:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    s.top___23410 = (s.tmp_3);
    s.lastBrkId = 3322;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3322]) return breakpoint(s, 14, 3322, r0);
  case 14:
  case 5:
    s.lastBrkId = 3323;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3323]) return breakpoint(s, 15, 3323, r0);
  case 15:
    r0 = pxsim_numops_toBoolDecr(s.current___23397);
    if (!r0) { step = 8; continue; }
    s.lastBrkId = 3324;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3324]) return breakpoint(s, 16, 3324, r0);
  case 16:
    r0 = s.current___23397.fields["lifespan"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 6; continue; }
    s.lastBrkId = 3325;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3325]) return breakpoint(s, 17, 3325, r0);
  case 17:
    s.tmp_2 = particles_ParticleSource_drawParticle__P4897_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.tmp_2.arg1 = s.current___23397;
    s.tmp_2.arg2 = s.left___23400;
    s.tmp_2.arg3 = s.top___23410;
    s.callLocIdx = 1467; s.pc = 18; return s.tmp_2;
  case 18:
    r0 = s.retval;
  case 6:
  case 7:
    s.lastBrkId = 3326;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3326]) return breakpoint(s, 19, 3326, r0);
  case 19:
    r0 = s.current___23397.fields["next"];
    s.current___23397 = (r0);
    { step = 5; continue; }
  case 8:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_ParticleSource___draw__P2762.info = {"start":3216,"length":468,"line":112,"column":8,"endLine":122,"endColumn":9,"fileName":"pxt_modules/game/particles.ts","functionName":"__draw","argumentNames":["this","camera"]}

function particles_ParticleSource___draw__P2762_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_ParticleSource___draw__P2762, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  current___23397: undefined,
  left___23400: undefined,
  top___23410: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function particles_ParticleSource_drawParticle__P4897(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_ParticleSource__C2756_VT)) failedCast(r0);
    s.lastBrkId = 3399;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3399]) return breakpoint(s, 1, 3399, r0);
  case 1:
    s.tmp_0 = particles_ParticleFactory__C2792_v1_4_mk(s);
    r0 = s.arg0.fields["_factory"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = s.arg1;
    s.tmp_1 = Fx_sub__P159_mk(s);
    r0 = s.arg1.fields["_x"];
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = s.arg2;
    s.callLocIdx = 1489; s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    s.tmp_0.arg2 = r0;
    s.tmp_2 = Fx_sub__P159_mk(s);
    r0 = s.arg1.fields["_y"];
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = s.arg3;
    s.callLocIdx = 1490; s.pc = 4; return s.tmp_2;
  case 4:
    r0 = s.retval;
    s.tmp_0.arg3 = r0;
    if (!checkSubtype(s.tmp_0.arg0, particles_ParticleFactory__C2792_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.drawParticle;
    s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_ParticleSource_drawParticle__P4897.info = {"start":8615,"length":174,"line":287,"column":8,"endLine":289,"endColumn":9,"fileName":"pxt_modules/game/particles.ts","functionName":"drawParticle","argumentNames":["this","p","screenLeft","screenTop"]}

function particles_ParticleSource_drawParticle__P4897_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_ParticleSource_drawParticle__P4897, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function particles_ParticleFactory_drawParticle__P2795(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_ParticleFactory__C2792_VT)) failedCast(r0);
    s.lastBrkId = 3470;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3470]) return breakpoint(s, 1, 3470, r0);
  case 1:
    s.tmp_0 = r0 = globals.screen___1827;
    s.tmp_2 = Fx_toInt__P170_mk(s);
    s.tmp_2.arg0 = s.arg2;
    s.callLocIdx = 1526; s.pc = 2; return s.tmp_2;
  case 2:
    r0 = s.retval;
    s.tmp_1 = r0;
    s.tmp_4 = Fx_toInt__P170_mk(s);
    s.tmp_4.arg0 = s.arg3;
    s.callLocIdx = 1527; s.pc = 3; return s.tmp_4;
  case 3:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = pxsim_ImageMethods.setPixel(s.tmp_0, s.tmp_1, s.tmp_3, 1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_ParticleFactory_drawParticle__P2795.info = {"start":2265,"length":118,"line":85,"column":8,"endLine":87,"endColumn":9,"fileName":"pxt_modules/game/particlefactories.ts","functionName":"drawParticle","argumentNames":["this","particle","x","y"]}

function particles_ParticleFactory_drawParticle__P2795_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_ParticleFactory_drawParticle__P2795, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function particles_ShapeFactory_createParticle__P2822(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.p___23461 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_ShapeFactory__C2818_VT)) failedCast(r0);
    s.lastBrkId = 3506;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3506]) return breakpoint(s, 1, 3506, r0);
  case 1:
    s.tmp_0 = particles_AreaFactory_createParticle__P2808_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.callLocIdx = 1561; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.p___23461 = (r0);
    s.lastBrkId = 3507;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3507]) return breakpoint(s, 3, 3507, r0);
  case 3:
    s.tmp_0 = r0 = s.p___23461;
    s.tmp_2 = Math_FastRandom_randomRange__P2668_mk(s);
    r0 = s.arg0.fields["galois"];
    s.tmp_2.arg0 = r0;
    s.tmp_2.arg1 = 1;
    s.tmp_2.arg2 = 14;
    s.callLocIdx = 1562; s.pc = 4; return s.tmp_2;
  case 4:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["color"] = (s.tmp_1);
    s.lastBrkId = 3508;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3508]) return breakpoint(s, 5, 3508, r0);
  case 5:
    r0 = s.p___23461;
    return leave(s, r0)
  default: oops()
} } }
particles_ShapeFactory_createParticle__P2822.info = {"start":7505,"length":178,"line":239,"column":8,"endLine":243,"endColumn":9,"fileName":"pxt_modules/game/particlefactories.ts","functionName":"createParticle","argumentNames":["this","anchor"]}

function particles_ShapeFactory_createParticle__P2822_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_ShapeFactory_createParticle__P2822, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  p___23461: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function particles_AreaFactory_createParticle__P2808(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.p___23473 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_AreaFactory__C2802_VT)) failedCast(r0);
    s.lastBrkId = 3490;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3490]) return breakpoint(s, 3, 3490, r0);
  case 3:
    s.tmp_0 = particles_SprayFactory_createParticle__P2798_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.callLocIdx = 1543; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    s.p___23473 = (r0);
    s.lastBrkId = 3491;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3491]) return breakpoint(s, 5, 3491, r0);
  case 5:
    s.tmp_0 = r0 = s.p___23473;
    s.tmp_2 = Math_FastRandom_randomRange__P2668_mk(s);
    r0 = s.arg0.fields["galois"];
    s.tmp_2.arg0 = r0;
    r0 = s.arg0.fields["minLifespan"];
    s.tmp_2.arg1 = r0;
    r0 = s.arg0.fields["maxLifespan"];
    s.tmp_2.arg2 = r0;
    s.callLocIdx = 1544; s.pc = 6; return s.tmp_2;
  case 6:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["lifespan"] = (s.tmp_1);
    s.lastBrkId = 3492;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3492]) return breakpoint(s, 7, 3492, r0);
  case 7:
    s.tmp_0 = r0 = s.p___23473;
    s.tmp_2 = Fx_iadd__P158_mk(s);
    s.tmp_4 = Math_FastRandom_randomRange__P2668_mk(s);
    r0 = s.arg0.fields["galois"];
    s.tmp_4.arg0 = r0;
    s.tmp_4.arg1 = 0;
    r0 = s.arg0.fields["xRange"];
    s.tmp_4.arg2 = r0;
    s.callLocIdx = 1545; s.pc = 9; return s.tmp_4;
  case 9:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = s.arg0.fields["xRange"];
    s.tmp_6 = r0;
    r0 = (s.tmp_6 >> 1);
    s.tmp_5 = r0;
    r0 = (s.tmp_3 - s.tmp_5);
    s.tmp_2.arg0 = r0;
    r0 = s.p___23473.fields["_x"];
    s.tmp_2.arg1 = r0;
    s.callLocIdx = 1546; s.pc = 8; return s.tmp_2;
  case 8:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["_x"] = (s.tmp_1);
    s.lastBrkId = 3493;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3493]) return breakpoint(s, 10, 3493, r0);
  case 10:
    s.tmp_1 = if_height_1_mk(s);
    s.tmp_1.arg0 = s.arg1;
    if (!s.tmp_1.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_1.arg0, "height");
    } else {
      s.tmp_1.fn = s.tmp_1.arg0.vtable.iface["height"];
      if (s.tmp_1.fn == null) { s.retval = s.tmp_1.arg0.fields["height"]; }
      else if (!s.tmp_1.fn.isGetter) { s.retval = bind(s.tmp_1); }
     else { s.callLocIdx = 1548; s.pc = 11; return s.tmp_1; }
    }
  case 11:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.tmp_3 = if_height_1_mk(s);
    s.tmp_3.arg0 = s.arg1;
    if (!s.tmp_3.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_3.arg0, "height");
    } else {
      s.tmp_3.fn = s.tmp_3.arg0.vtable.iface["height"];
      if (s.tmp_3.fn == null) { s.retval = s.tmp_3.arg0.fields["height"]; }
      else if (!s.tmp_3.fn.isGetter) { s.retval = bind(s.tmp_3); }
     else { s.callLocIdx = 1549; s.pc = 12; return s.tmp_3; }
    }
  case 12:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_2 >> 1);
    { step = 2; continue; }
  case 1:
    r0 = 0;
  case 2:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    s.tmp_5 = r0 = s.p___23473;
    s.tmp_7 = Fx_iadd__P158_mk(s);
    s.tmp_9 = Math_FastRandom_randomRange__P2668_mk(s);
    r0 = s.arg0.fields["galois"];
    s.tmp_9.arg0 = r0;
    s.tmp_9.arg1 = 0;
    r0 = s.arg0.fields["yRange"];
    s.tmp_9.arg2 = r0;
    s.callLocIdx = 1547; s.pc = 14; return s.tmp_9;
  case 14:
    r0 = s.retval;
    s.tmp_8 = r0;
    r0 = (s.tmp_8 - s.tmp_4);
    s.tmp_7.arg0 = r0;
    r0 = s.p___23473.fields["_y"];
    s.tmp_7.arg1 = r0;
    s.callLocIdx = 1550; s.pc = 13; return s.tmp_7;
  case 13:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = (s.tmp_5).fields["_y"] = (s.tmp_6);
    s.lastBrkId = 3494;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3494]) return breakpoint(s, 15, 3494, r0);
  case 15:
    r0 = s.p___23473;
    return leave(s, r0)
  default: oops()
} } }
particles_AreaFactory_createParticle__P2808.info = {"start":4334,"length":426,"line":148,"column":8,"endLine":156,"endColumn":9,"fileName":"pxt_modules/game/particlefactories.ts","functionName":"createParticle","argumentNames":["this","anchor"]}

function particles_AreaFactory_createParticle__P2808_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_AreaFactory_createParticle__P2808, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  p___23473: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function particles_SprayFactory_createParticle__P2798(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.p___23521 = undefined;
    s.angle___23525 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_SprayFactory__C2796_VT)) failedCast(r0);
    s.lastBrkId = 3475;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3475]) return breakpoint(s, 1, 3475, r0);
  case 1:
    s.tmp_0 = particles_ParticleFactory_createParticle__P2794_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.callLocIdx = 1532; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.p___23521 = (r0);
    s.lastBrkId = 3476;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3476]) return breakpoint(s, 3, 3476, r0);
  case 3:
    r0 = s.arg0.fields["minAngle"];
    s.tmp_1 = r0;
    s.tmp_3 = Math_FastRandom_randomRange__P2668_mk(s);
    s.tmp_3.arg0 = globals.galois___4911;
    s.tmp_3.arg1 = 0;
    r0 = s.arg0.fields["spread"];
    s.tmp_3.arg2 = r0;
    s.callLocIdx = 1533; s.pc = 4; return s.tmp_3;
  case 4:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1 + s.tmp_2);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 % 100);
    s.angle___23525 = (r0);
    s.lastBrkId = 3477;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3477]) return breakpoint(s, 5, 3477, r0);
  case 5:
    s.tmp_0 = r0 = s.p___23521;
    s.tmp_2 = Fx_mul__P160_mk(s);
    r0 = pxsim_Array__getAt(globals.cachedSin___4906, s.angle___23525);
    s.tmp_2.arg0 = r0;
    r0 = s.arg0.fields["speed"];
    s.tmp_2.arg1 = r0;
    s.callLocIdx = 1534; s.pc = 6; return s.tmp_2;
  case 6:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["vx"] = (s.tmp_1);
    s.lastBrkId = 3478;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3478]) return breakpoint(s, 7, 3478, r0);
  case 7:
    s.tmp_0 = r0 = s.p___23521;
    s.tmp_2 = Fx_mul__P160_mk(s);
    r0 = pxsim_Array__getAt(globals.cachedCos___4907, s.angle___23525);
    s.tmp_2.arg0 = r0;
    r0 = s.arg0.fields["speed"];
    s.tmp_2.arg1 = r0;
    s.callLocIdx = 1535; s.pc = 8; return s.tmp_2;
  case 8:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["vy"] = (s.tmp_1);
    s.lastBrkId = 3479;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3479]) return breakpoint(s, 9, 3479, r0);
  case 9:
    r0 = s.p___23521;
    return leave(s, r0)
  default: oops()
} } }
particles_SprayFactory_createParticle__P2798.info = {"start":2851,"length":333,"line":105,"column":8,"endLine":113,"endColumn":9,"fileName":"pxt_modules/game/particlefactories.ts","functionName":"createParticle","argumentNames":["this","anchor"]}

function particles_SprayFactory_createParticle__P2798_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_SprayFactory_createParticle__P2798, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  p___23521: undefined,
  angle___23525: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function effects_ScreenEffect_startScreenEffect__P2873(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, effects_ScreenEffect__C2871_VT)) failedCast(r0);
    s.lastBrkId = 3538;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3538]) return breakpoint(s, 14, 3538, r0);
  case 14:
    r0 = s.arg0.fields["sourceFactory"];
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3539;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3539]) return breakpoint(s, 15, 3539, r0);
  case 15:
    { step = 13; continue; }
  case 1:
  case 2:
    s.lastBrkId = 3540;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3540]) return breakpoint(s, 16, 3540, r0);
  case 16:
    r0 = s.arg0.fields["source"];
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBool(s.tmp_3);
    if (r0) { step = 3; continue; }
    r0 = s.tmp_3;
    { step = 4; continue; }
  case 3:
    s.tmp_4 = particles_ParticleSource_enabled__P2768_mk(s);
    r0 = s.arg0.fields["source"];
    s.tmp_4.arg0 = r0;
    s.callLocIdx = 1574; s.pc = 17; return s.tmp_4;
  case 17:
    r0 = s.retval;
  case 4:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_5);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 3541;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3541]) return breakpoint(s, 18, 3541, r0);
  case 18:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 3542;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3542]) return breakpoint(s, 19, 3542, r0);
  case 19:
    r0 = s.arg0.fields["source"];
    s.tmp_6 = r0;
    r0 = (s.tmp_6).fields["lifespan"] = (s.arg1);
  case 5:
  case 6:
    s.lastBrkId = 3543;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3543]) return breakpoint(s, 20, 3543, r0);
  case 20:
    { step = 13; continue; }
  case 7:
  case 8:
    s.lastBrkId = 3544;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3544]) return breakpoint(s, 21, 3544, r0);
  case 21:
    s.tmp_0 = effects_ScreenEffect_endScreenEffect__P2874_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 1575; s.pc = 22; return s.tmp_0;
  case 22:
    r0 = s.retval;
    s.lastBrkId = 3545;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3545]) return breakpoint(s, 23, 3545, r0);
  case 23:
    r0 = pxsim_pxtcore_mkClassInstance(effects_SceneAnchor__C4939_VT);
    s.tmp_0 = r0;
    s.tmp_1 = effects_SceneAnchor_constructor__P4944_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.callLocIdx = 1576; s.pc = 24; return s.tmp_1;
  case 24:
    r0 = s.retval;
    r0 = pxsim_numops_toBoolDecr(s.arg2);
    if (!r0) { step = 9; continue; }
    r0 = s.arg2;
    { step = 10; continue; }
  case 9:
    r0 = s.arg0.fields["sceneDefaultRate"];
  case 10:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    s.tmp_3 = r0 = s.arg0;
    s.tmp_5 = if_sourceFactory_3_mk(s);
    s.tmp_5.arg0 = s.arg0;
    s.tmp_5.arg1 = s.tmp_0;
    s.tmp_5.arg2 = s.tmp_2;
    if (!s.tmp_5.arg0.vtable.iface) {
      setupLambda(s.tmp_5, pxsim_pxtrt.mapGetByString(s.tmp_5.arg0, "sourceFactory"), 3);
      s.callLocIdx = 1577; s.pc = 25; return s.tmp_5;
    } else {
      s.tmp_5.fn = s.tmp_5.arg0.vtable.iface["sourceFactory"];
      if (s.tmp_5.fn == null) { setupLambda(s.tmp_5, s.tmp_5.arg0.fields["sourceFactory"], 3); s.callLocIdx = 1577; s.pc = 25; return s.tmp_5; }
      else if (s.tmp_5.fn.isGetter) { s.tmp_5.stage2Call = true; s.callLocIdx = 1577; s.pc = 25; return s.tmp_5;; }
     else { s.callLocIdx = 1577; s.pc = 25; return s.tmp_5; }
    }
  case 25:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = (s.tmp_3).fields["source"] = (s.tmp_4);
    s.lastBrkId = 3546;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3546]) return breakpoint(s, 26, 3546, r0);
  case 26:
    r0 = s.arg0.fields["source"];
    s.tmp_0 = r0;
    r0 = (s.tmp_0).fields["priority"] = (10);
    s.lastBrkId = 3547;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3547]) return breakpoint(s, 27, 3547, r0);
  case 27:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    if (!r0) { step = 11; continue; }
    s.lastBrkId = 3548;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3548]) return breakpoint(s, 28, 3548, r0);
  case 28:
    r0 = s.arg0.fields["source"];
    s.tmp_0 = r0;
    r0 = (s.tmp_0).fields["lifespan"] = (s.arg1);
  case 11:
  case 12:
  case 13:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
effects_ScreenEffect_startScreenEffect__P2873.info = {"start":3680,"length":601,"line":97,"column":8,"endLine":112,"endColumn":9,"fileName":"pxt_modules/game/particleeffects.ts","functionName":"startScreenEffect","argumentNames":["this","duration","particlesPerSecond"]}

function effects_ScreenEffect_startScreenEffect__P2873_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: effects_ScreenEffect_startScreenEffect__P2873, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function effects_SceneAnchor_constructor__P4944(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, effects_SceneAnchor__C4939_VT)) failedCast(r0);
    s.lastBrkId = 3531;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3531]) return breakpoint(s, 1, 3531, r0);
  case 1:
    s.tmp_0 = r0 = s.arg0;
    s.tmp_2 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 1570; s.pc = 2; return s.tmp_2;
  case 2:
    r0 = s.retval;
    r0 = r0.fields["camera"];
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["camera"] = (s.tmp_1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
effects_SceneAnchor_constructor__P4944.info = {"start":2296,"length":79,"line":55,"column":8,"endLine":57,"endColumn":9,"fileName":"pxt_modules/game/particleeffects.ts","functionName":"inline","argumentNames":["this"]}

function effects_SceneAnchor_constructor__P4944_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: effects_SceneAnchor_constructor__P4944, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }





function effects_ScreenEffect_endScreenEffect__P2874(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, effects_ScreenEffect__C2871_VT)) failedCast(r0);
    s.lastBrkId = 3549;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3549]) return breakpoint(s, 3, 3549, r0);
  case 3:
    r0 = s.arg0.fields["source"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3550;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3550]) return breakpoint(s, 4, 3550, r0);
  case 4:
    s.tmp_1 = particles_ParticleSource_destroy__P2770_mk(s);
    r0 = s.arg0.fields["source"];
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 1578; s.pc = 5; return s.tmp_1;
  case 5:
    r0 = s.retval;
    s.lastBrkId = 3551;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3551]) return breakpoint(s, 6, 3551, r0);
  case 6:
    r0 = (s.arg0).fields["source"] = (undefined);
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
effects_ScreenEffect_endScreenEffect__P2874.info = {"start":4677,"length":160,"line":122,"column":8,"endLine":127,"endColumn":9,"fileName":"pxt_modules/game/particleeffects.ts","functionName":"endScreenEffect","argumentNames":["this"]}

function effects_ScreenEffect_endScreenEffect__P2874_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: effects_ScreenEffect_endScreenEffect__P2874, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
} }





function effects_ImageEffect_startScreenEffect__P2898(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.wasRunning___23613 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, effects_ImageEffect__C2894_VT)) failedCast(r0);
    s.lastBrkId = 3566;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3566]) return breakpoint(s, 8, 3566, r0);
  case 8:
    s.tmp_3 = scene_Background_hasBackgroundImage__P2356_mk(s);
    s.tmp_4 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 1591; s.pc = 10; return s.tmp_4;
  case 10:
    r0 = s.retval;
    r0 = r0.fields["background"];
    s.tmp_3.arg0 = r0;
    s.callLocIdx = 1592; s.pc = 9; return s.tmp_3;
  case 9:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 3567;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3567]) return breakpoint(s, 11, 3567, r0);
  case 11:
    { step = 7; continue; }
  case 1:
  case 2:
    s.lastBrkId = 3568;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3568]) return breakpoint(s, 12, 3568, r0);
  case 12:
    r0 = s.arg0.fields["times"];
    s.tmp_5 = r0;
    r0 = (s.tmp_5 != undefined);
    s.wasRunning___23613 = (r0);
    s.lastBrkId = 3569;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3569]) return breakpoint(s, 13, 3569, r0);
  case 13:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    if (!r0) { step = 3; continue; }
    r0 = s.arg1;
    { step = 4; continue; }
  case 3:
    r0 = 15;
  case 4:
    // jmp value (already in r0)
    s.tmp_0 = r0;
    r0 = (s.arg0).fields["times"] = (s.tmp_0);
    s.lastBrkId = 3570;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3570]) return breakpoint(s, 14, 3570, r0);
  case 14:
    r0 = pxsim_numops_toBoolDecr(s.wasRunning___23613);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 3571;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3571]) return breakpoint(s, 15, 3571, r0);
  case 15:
    r0 = pxsim_pxtcore_mkAction(2, effects_ImageEffect_startScreenEffect_inline__P23626);
    s.tmp_2 = r0;
    r0 = pxsim_pxtrt_stclo(s.tmp_2, 0, s.arg0);
    r0 = pxsim_pxtrt_stclo(s.tmp_2, 1, s.arg2);
    r0 = pxsim.control.runInParallel(s.tmp_2);
  case 5:
  case 6:
  case 7:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
effects_ImageEffect_startScreenEffect__P2898.info = {"start":1457,"length":637,"line":41,"column":8,"endLine":56,"endColumn":9,"fileName":"pxt_modules/game/effects.ts","functionName":"startScreenEffect","argumentNames":["this","times","delay"]}

function effects_ImageEffect_startScreenEffect__P2898_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: effects_ImageEffect_startScreenEffect__P2898, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  wasRunning___23613: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function effects_ImageEffect_startScreenEffect_inline__P23626(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.lastBrkId = 3572;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3572]) return breakpoint(s, 5, 3572, r0);
  case 5:
  case 1:
    s.lastBrkId = 3573;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3573]) return breakpoint(s, 6, 3573, r0);
  case 6:
    r0 = s.caps[0].fields["times"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 4; continue; }
    s.lastBrkId = 3574;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3574]) return breakpoint(s, 7, 3574, r0);
  case 7:
    s.tmp_2 = effects_ImageEffect_change__P2897_mk(s);
    s.tmp_2.arg0 = s.caps[0];
    s.tmp_3 = scene_backgroundImage__P2537_mk(s);
    s.callLocIdx = 1593; s.pc = 9; return s.tmp_3;
  case 9:
    r0 = s.retval;
    s.tmp_2.arg1 = r0;
    s.callLocIdx = 1594; s.pc = 8; return s.tmp_2;
  case 8:
    r0 = s.retval;
    s.lastBrkId = 3575;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3575]) return breakpoint(s, 10, 3575, r0);
  case 10:
    r0 = pxsim_numops_toBoolDecr(s.caps[1]);
    if (!r0) { step = 2; continue; }
    r0 = s.caps[1];
    { step = 3; continue; }
  case 2:
    r0 = s.caps[0].fields["preferredDelay"];
  case 3:
    // jmp value (already in r0)
    s.tmp_0 = r0;
    s.tmp_1 = pause__P411_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.callLocIdx = 1595; s.pc = 11; return s.tmp_1;
  case 11:
    r0 = s.retval;
    s.lastBrkId = 3576;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3576]) return breakpoint(s, 12, 3576, r0);
  case 12:
    s.tmp_0 = r0 = s.caps[0];
    r0 = s.tmp_0.fields["times"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0).fields["times"] = (s.tmp_1);
    { step = 1; continue; }
  case 4:
    s.lastBrkId = 3577;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3577]) return breakpoint(s, 13, 3577, r0);
  case 13:
    r0 = (s.caps[0]).fields["times"] = (undefined);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
effects_ImageEffect_startScreenEffect_inline__P23626.info = {"start":1764,"length":304,"line":47,"column":38,"endLine":54,"endColumn":17,"fileName":"pxt_modules/game/effects.ts","functionName":"inline","argumentNames":[]}

function effects_ImageEffect_startScreenEffect_inline__P23626_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: effects_ImageEffect_startScreenEffect_inline__P23626, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
} }





function scene_backgroundImage__P2537(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.scene___23645 = undefined;
    s.lastBrkId = 2343;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2343]) return breakpoint(s, 1, 2343, r0);
  case 1:
    s.tmp_0 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 951; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.scene___23645 = (r0);
    s.lastBrkId = 2344;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2344]) return breakpoint(s, 3, 2344, r0);
  case 3:
    s.tmp_0 = scene_Background_image__P2354_mk(s);
    r0 = s.scene___23645.fields["background"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 952; s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
    return leave(s, r0)
  default: oops()
} } }
scene_backgroundImage__P2537.info = {"start":2273,"length":130,"line":90,"column":4,"endLine":93,"endColumn":5,"fileName":"pxt_modules/game/scenes.ts","functionName":"backgroundImage","argumentNames":[]}

function scene_backgroundImage__P2537_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_backgroundImage__P2537, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  scene___23645: undefined,
} }





function scene_Background_hasBackgroundImage__P2356(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_Background__C2348_VT)) failedCast(r0);
    s.lastBrkId = 2023;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2023]) return breakpoint(s, 1, 2023, r0);
  case 1:
    r0 = s.arg0.fields["_image"];
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_0);
    return leave(s, r0)
  default: oops()
} } }
scene_Background_hasBackgroundImage__P2356.info = {"start":1081,"length":75,"line":44,"column":8,"endLine":46,"endColumn":9,"fileName":"pxt_modules/game/background.ts","functionName":"hasBackgroundImage","argumentNames":["this"]}

function scene_Background_hasBackgroundImage__P2356_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Background_hasBackgroundImage__P2356, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
} }





function Sprite_toString__P2169(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1385;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1385]) return breakpoint(s, 1, 1385, r0);
  case 1:
    r0 = pxsim_String_.mkEmpty();
    s.tmp_9 = r0;
    r0 = s.arg0.fields["id"];
    s.tmp_11 = r0;
    if ((s.tmp_11) && (s.tmp_11).vtable) {
    setupResume(s, 2);
    pxsim_String__stringConv(s.tmp_11);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_11) + ""; }
  case 2:
    r0 = s.retval;
    s.tmp_10 = r0;
    r0 = pxsim_String__concat(s.tmp_9, s.tmp_10);
    s.tmp_8 = r0;
    r0 = pxsim_String__concat(s.tmp_8, "(");
    s.tmp_7 = r0;
    s.tmp_14 = Sprite_x__P2101_mk(s);
    s.tmp_14.arg0 = s.arg0;
    s.callLocIdx = 442; s.pc = 3; return s.tmp_14;
  case 3:
    r0 = s.retval;
    s.tmp_13 = r0;
    if ((s.tmp_13) && (s.tmp_13).vtable) {
    setupResume(s, 4);
    pxsim_String__stringConv(s.tmp_13);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_13) + ""; }
  case 4:
    r0 = s.retval;
    s.tmp_12 = r0;
    r0 = pxsim_String__concat(s.tmp_7, s.tmp_12);
    s.tmp_6 = r0;
    r0 = pxsim_String__concat(s.tmp_6, ",");
    s.tmp_5 = r0;
    s.tmp_17 = Sprite_y__P2103_mk(s);
    s.tmp_17.arg0 = s.arg0;
    s.callLocIdx = 443; s.pc = 5; return s.tmp_17;
  case 5:
    r0 = s.retval;
    s.tmp_16 = r0;
    if ((s.tmp_16) && (s.tmp_16).vtable) {
    setupResume(s, 6);
    pxsim_String__stringConv(s.tmp_16);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_16) + ""; }
  case 6:
    r0 = s.retval;
    s.tmp_15 = r0;
    r0 = pxsim_String__concat(s.tmp_5, s.tmp_15);
    s.tmp_4 = r0;
    r0 = pxsim_String__concat(s.tmp_4, ")->(");
    s.tmp_3 = r0;
    s.tmp_20 = Sprite_vx__P2105_mk(s);
    s.tmp_20.arg0 = s.arg0;
    s.callLocIdx = 444; s.pc = 7; return s.tmp_20;
  case 7:
    r0 = s.retval;
    s.tmp_19 = r0;
    if ((s.tmp_19) && (s.tmp_19).vtable) {
    setupResume(s, 8);
    pxsim_String__stringConv(s.tmp_19);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_19) + ""; }
  case 8:
    r0 = s.retval;
    s.tmp_18 = r0;
    r0 = pxsim_String__concat(s.tmp_3, s.tmp_18);
    s.tmp_2 = r0;
    r0 = pxsim_String__concat(s.tmp_2, ",");
    s.tmp_1 = r0;
    s.tmp_23 = Sprite_vy__P2107_mk(s);
    s.tmp_23.arg0 = s.arg0;
    s.callLocIdx = 445; s.pc = 9; return s.tmp_23;
  case 9:
    r0 = s.retval;
    s.tmp_22 = r0;
    if ((s.tmp_22) && (s.tmp_22).vtable) {
    setupResume(s, 10);
    pxsim_String__stringConv(s.tmp_22);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_22) + ""; }
  case 10:
    r0 = s.retval;
    s.tmp_21 = r0;
    r0 = pxsim_String__concat(s.tmp_1, s.tmp_21);
    s.tmp_0 = r0;
    r0 = pxsim_String__concat(s.tmp_0, ")");
    return leave(s, r0)
  default: oops()
} } }
Sprite_toString__P2169.info = {"start":29970,"length":93,"line":924,"column":4,"endLine":926,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"toString","argumentNames":["this"]}

function Sprite_toString__P2169_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_toString__P2169, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  tmp_12: undefined,
  tmp_13: undefined,
  tmp_14: undefined,
  tmp_15: undefined,
  tmp_16: undefined,
  tmp_17: undefined,
  tmp_18: undefined,
  tmp_19: undefined,
  tmp_20: undefined,
  tmp_21: undefined,
  tmp_22: undefined,
  tmp_23: undefined,
  arg0: undefined,
} }





function Sprite___update__P2155(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.bounce___23718 = undefined;
    s.tm___23723 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1319;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1319]) return breakpoint(s, 33, 1319, r0);
  case 33:
    r0 = s.arg0.fields["lifespan"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 !== undefined);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1320;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1320]) return breakpoint(s, 34, 1320, r0);
  case 34:
    s.tmp_2 = r0 = s.arg0;
    r0 = s.tmp_2.fields["lifespan"];
    s.tmp_4 = r0;
    r0 = (s.arg2 * 1000);
    s.tmp_5 = r0;
    r0 = (s.tmp_4 - s.tmp_5);
    s.tmp_3 = r0;
    r0 = (s.tmp_2).fields["lifespan"] = (s.tmp_3);
    s.lastBrkId = 1321;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1321]) return breakpoint(s, 35, 1321, r0);
  case 35:
    r0 = s.arg0.fields["lifespan"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 <= 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1322;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1322]) return breakpoint(s, 36, 1322, r0);
  case 36:
    r0 = (s.arg0).fields["lifespan"] = (undefined);
    s.lastBrkId = 1323;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1323]) return breakpoint(s, 37, 1323, r0);
  case 37:
    s.tmp_0 = Sprite__destroyCore__P2167_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.callLocIdx = 381; s.pc = 38; return s.tmp_0;
  case 38:
    r0 = s.retval;
  case 1:
  case 2:
  case 3:
  case 4:
    s.lastBrkId = 1324;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1324]) return breakpoint(s, 39, 1324, r0);
  case 39:
    r0 = s.arg0.fields["flags"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 & 4);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (r0) { step = 5; continue; }
    r0 = s.tmp_0;
    { step = 6; continue; }
  case 5:
    s.tmp_2 = Sprite_isOutOfScreen__P2153_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.tmp_2.arg1 = s.arg1;
    s.callLocIdx = 382; s.pc = 40; return s.tmp_2;
  case 40:
    r0 = s.retval;
  case 6:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 1325;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1325]) return breakpoint(s, 41, 1325, r0);
  case 41:
    s.tmp_4 = Sprite_destroy__P2166_mk(s);
    s.tmp_4.arg0 = s.arg0;
    s.tmp_4.arg1 = undefined;
    s.tmp_4.arg2 = undefined;
    s.callLocIdx = 383; s.pc = 42; return s.tmp_4;
  case 42:
    r0 = s.retval;
  case 7:
  case 8:
    s.lastBrkId = 1326;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1326]) return breakpoint(s, 43, 1326, r0);
  case 43:
    r0 = s.arg0.fields["flags"];
    s.tmp_0 = r0;
    r0 = (s.tmp_0 & 32);
    s.bounce___23718 = (r0);
    s.lastBrkId = 1327;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1327]) return breakpoint(s, 44, 1327, r0);
  case 44:
    s.tmp_0 = game_currentScene__P2609_mk(s);
    s.callLocIdx = 384; s.pc = 45; return s.tmp_0;
  case 45:
    r0 = s.retval;
    r0 = r0.fields["tileMap"];
    s.tm___23723 = (r0);
    s.lastBrkId = 1328;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1328]) return breakpoint(s, 46, 1328, r0);
  case 46:
    r0 = s.arg0.fields["flags"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 & 8);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 9; continue; }
    r0 = s.tmp_0;
    { step = 12; continue; }
  case 9:
    s.tmp_2 = r0 = s.bounce___23718;
    r0 = pxsim_numops_toBool(s.tmp_2);
    if (r0) { step = 10; continue; }
    r0 = s.tmp_2;
    { step = 11; continue; }
  case 10:
    r0 = pxsim_numops_toBoolDecr(s.tm___23723);
    s.tmp_3 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_3);
  case 11:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    r0 = s.tmp_4;
  case 12:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_5);
    if (!r0) { step = 29; continue; }
    s.lastBrkId = 1329;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1329]) return breakpoint(s, 47, 1329, r0);
  case 47:
    s.tmp_8 = Sprite_left__P2138_mk(s);
    s.tmp_8.arg0 = s.arg0;
    s.callLocIdx = 385; s.pc = 48; return s.tmp_8;
  case 48:
    r0 = s.retval;
    s.tmp_7 = r0;
    s.tmp_10 = scene_Camera_offsetX__P2442_mk(s);
    s.tmp_10.arg0 = s.arg1;
    s.callLocIdx = 386; s.pc = 49; return s.tmp_10;
  case 49:
    r0 = s.retval;
    s.tmp_9 = r0;
    r0 = (s.tmp_7 < s.tmp_9);
    s.tmp_6 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_6);
    if (!r0) { step = 15; continue; }
    s.lastBrkId = 1330;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1330]) return breakpoint(s, 50, 1330, r0);
  case 50:
    s.tmp_11 = Sprite_left__P2139_mk(s);
    s.tmp_11.arg0 = s.arg0;
    s.tmp_12 = scene_Camera_offsetX__P2442_mk(s);
    s.tmp_12.arg0 = s.arg1;
    s.callLocIdx = 387; s.pc = 52; return s.tmp_12;
  case 52:
    r0 = s.retval;
    s.tmp_11.arg1 = r0;
    s.callLocIdx = 388; s.pc = 51; return s.tmp_11;
  case 51:
    r0 = s.retval;
    s.lastBrkId = 1331;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1331]) return breakpoint(s, 53, 1331, r0);
  case 53:
    r0 = pxsim_numops_toBoolDecr(s.bounce___23718);
    if (!r0) { step = 13; continue; }
    s.lastBrkId = 1332;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1332]) return breakpoint(s, 54, 1332, r0);
  case 54:
    s.tmp_0 = Sprite_vx__P2106_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_2 = Sprite_vx__P2105_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 389; s.pc = 56; return s.tmp_2;
  case 56:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (0 - s.tmp_1);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 390; s.pc = 55; return s.tmp_0;
  case 55:
    r0 = s.retval;
  case 13:
  case 14:
    { step = 20; continue; }
  case 15:
    s.lastBrkId = 1333;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1333]) return breakpoint(s, 57, 1333, r0);
  case 57:
    s.tmp_2 = Sprite_right__P2140_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 391; s.pc = 58; return s.tmp_2;
  case 58:
    r0 = s.retval;
    s.tmp_1 = r0;
    s.tmp_5 = scene_Camera_offsetX__P2442_mk(s);
    s.tmp_5.arg0 = s.arg1;
    s.callLocIdx = 392; s.pc = 59; return s.tmp_5;
  case 59:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_6 = r0;
    r0 = (s.tmp_4 + s.tmp_6);
    s.tmp_3 = r0;
    r0 = (s.tmp_1 > s.tmp_3);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 18; continue; }
    s.lastBrkId = 1334;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1334]) return breakpoint(s, 60, 1334, r0);
  case 60:
    s.tmp_7 = Sprite_right__P2141_mk(s);
    s.tmp_7.arg0 = s.arg0;
    s.tmp_9 = scene_Camera_offsetX__P2442_mk(s);
    s.tmp_9.arg0 = s.arg1;
    s.callLocIdx = 393; s.pc = 62; return s.tmp_9;
  case 62:
    r0 = s.retval;
    s.tmp_8 = r0;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_10 = r0;
    r0 = (s.tmp_8 + s.tmp_10);
    s.tmp_7.arg1 = r0;
    s.callLocIdx = 394; s.pc = 61; return s.tmp_7;
  case 61:
    r0 = s.retval;
    s.lastBrkId = 1335;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1335]) return breakpoint(s, 63, 1335, r0);
  case 63:
    r0 = pxsim_numops_toBoolDecr(s.bounce___23718);
    if (!r0) { step = 16; continue; }
    s.lastBrkId = 1336;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1336]) return breakpoint(s, 64, 1336, r0);
  case 64:
    s.tmp_0 = Sprite_vx__P2106_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_2 = Sprite_vx__P2105_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 395; s.pc = 66; return s.tmp_2;
  case 66:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (0 - s.tmp_1);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 396; s.pc = 65; return s.tmp_0;
  case 65:
    r0 = s.retval;
  case 16:
  case 17:
  case 18:
  case 19:
  case 20:
    s.lastBrkId = 1337;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1337]) return breakpoint(s, 67, 1337, r0);
  case 67:
    s.tmp_2 = Sprite_top__P2142_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 397; s.pc = 68; return s.tmp_2;
  case 68:
    r0 = s.retval;
    s.tmp_1 = r0;
    s.tmp_4 = scene_Camera_offsetY__P2444_mk(s);
    s.tmp_4.arg0 = s.arg1;
    s.callLocIdx = 398; s.pc = 69; return s.tmp_4;
  case 69:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = (s.tmp_1 < s.tmp_3);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 23; continue; }
    s.lastBrkId = 1338;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1338]) return breakpoint(s, 70, 1338, r0);
  case 70:
    s.tmp_5 = Sprite_top__P2143_mk(s);
    s.tmp_5.arg0 = s.arg0;
    s.tmp_6 = scene_Camera_offsetY__P2444_mk(s);
    s.tmp_6.arg0 = s.arg1;
    s.callLocIdx = 399; s.pc = 72; return s.tmp_6;
  case 72:
    r0 = s.retval;
    s.tmp_5.arg1 = r0;
    s.callLocIdx = 400; s.pc = 71; return s.tmp_5;
  case 71:
    r0 = s.retval;
    s.lastBrkId = 1339;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1339]) return breakpoint(s, 73, 1339, r0);
  case 73:
    r0 = pxsim_numops_toBoolDecr(s.bounce___23718);
    if (!r0) { step = 21; continue; }
    s.lastBrkId = 1340;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1340]) return breakpoint(s, 74, 1340, r0);
  case 74:
    s.tmp_0 = Sprite_vy__P2108_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_2 = Sprite_vy__P2107_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 401; s.pc = 76; return s.tmp_2;
  case 76:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (0 - s.tmp_1);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 402; s.pc = 75; return s.tmp_0;
  case 75:
    r0 = s.retval;
  case 21:
  case 22:
    { step = 28; continue; }
  case 23:
    s.lastBrkId = 1341;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1341]) return breakpoint(s, 77, 1341, r0);
  case 77:
    s.tmp_2 = Sprite_bottom__P2144_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 403; s.pc = 78; return s.tmp_2;
  case 78:
    r0 = s.retval;
    s.tmp_1 = r0;
    s.tmp_5 = scene_Camera_offsetY__P2444_mk(s);
    s.tmp_5.arg0 = s.arg1;
    s.callLocIdx = 404; s.pc = 79; return s.tmp_5;
  case 79:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_6 = r0;
    r0 = (s.tmp_4 + s.tmp_6);
    s.tmp_3 = r0;
    r0 = (s.tmp_1 > s.tmp_3);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 26; continue; }
    s.lastBrkId = 1342;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1342]) return breakpoint(s, 80, 1342, r0);
  case 80:
    s.tmp_7 = Sprite_bottom__P2145_mk(s);
    s.tmp_7.arg0 = s.arg0;
    s.tmp_9 = scene_Camera_offsetY__P2444_mk(s);
    s.tmp_9.arg0 = s.arg1;
    s.callLocIdx = 405; s.pc = 82; return s.tmp_9;
  case 82:
    r0 = s.retval;
    s.tmp_8 = r0;
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_10 = r0;
    r0 = (s.tmp_8 + s.tmp_10);
    s.tmp_7.arg1 = r0;
    s.callLocIdx = 406; s.pc = 81; return s.tmp_7;
  case 81:
    r0 = s.retval;
    s.lastBrkId = 1343;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1343]) return breakpoint(s, 83, 1343, r0);
  case 83:
    r0 = pxsim_numops_toBoolDecr(s.bounce___23718);
    if (!r0) { step = 24; continue; }
    s.lastBrkId = 1344;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1344]) return breakpoint(s, 84, 1344, r0);
  case 84:
    s.tmp_0 = Sprite_vy__P2108_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_2 = Sprite_vy__P2107_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 407; s.pc = 86; return s.tmp_2;
  case 86:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (0 - s.tmp_1);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 408; s.pc = 85; return s.tmp_0;
  case 85:
    r0 = s.retval;
  case 24:
  case 25:
  case 26:
  case 27:
  case 28:
  case 29:
  case 30:
    s.lastBrkId = 1345;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1345]) return breakpoint(s, 87, 1345, r0);
  case 87:
    r0 = s.arg0.fields["sayRenderer"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 31; continue; }
    s.lastBrkId = 1346;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1346]) return breakpoint(s, 88, 1346, r0);
  case 88:
    s.tmp_1 = sprites_BaseSpriteSayRenderer__C2028_v1_4_mk(s);
    r0 = s.arg0.fields["sayRenderer"];
    s.tmp_1.arg0 = r0;
    s.tmp_1.arg1 = s.arg2;
    s.tmp_1.arg2 = s.arg1;
    s.tmp_1.arg3 = s.arg0;
    if (!checkSubtype(s.tmp_1.arg0, sprites_BaseSpriteSayRenderer__C2028_VT)) failedCast(s.tmp_1.arg0);
    s.tmp_1.fn = s.tmp_1.arg0.vtable.methods.update;
    s.pc = 89; return s.tmp_1;
  case 89:
    r0 = s.retval;
  case 31:
  case 32:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite___update__P2155.info = {"start":18461,"length":1363,"line":609,"column":4,"endLine":645,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"__update","argumentNames":["this","camera","dt"]}

function Sprite___update__P2155_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite___update__P2155, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  tmp_12: undefined,
  bounce___23718: undefined,
  tm___23723: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function Sprite_isOutOfScreen__P2153(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.ox___23818 = undefined;
    s.oy___23826 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1287;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1287]) return breakpoint(s, 11, 1287, r0);
  case 11:
    r0 = s.arg0.fields["flags"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 & 512);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = 0;
    { step = 2; continue; }
  case 1:
    r0 = s.arg1.fields["drawOffsetX"];
  case 2:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    s.ox___23818 = (s.tmp_2);
    s.lastBrkId = 1288;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1288]) return breakpoint(s, 12, 1288, r0);
  case 12:
    r0 = s.arg0.fields["flags"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 & 512);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 3; continue; }
    r0 = 0;
    { step = 4; continue; }
  case 3:
    r0 = s.arg1.fields["drawOffsetY"];
  case 4:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    s.oy___23826 = (s.tmp_2);
    s.lastBrkId = 1289;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1289]) return breakpoint(s, 13, 1289, r0);
  case 13:
    s.tmp_3 = Sprite_right__P2140_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.callLocIdx = 350; s.pc = 14; return s.tmp_3;
  case 14:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_2 - s.ox___23818);
    s.tmp_1 = r0;
    r0 = (s.tmp_1 < 0);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 5; continue; }
    r0 = s.tmp_0;
    { step = 6; continue; }
  case 5:
    s.tmp_6 = Sprite_bottom__P2144_mk(s);
    s.tmp_6.arg0 = s.arg0;
    s.callLocIdx = 351; s.pc = 15; return s.tmp_6;
  case 15:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = (s.tmp_5 - s.oy___23826);
    s.tmp_4 = r0;
    r0 = (s.tmp_4 < 0);
  case 6:
    // jmp value (already in r0)
    s.tmp_7 = r0;
    r0 = pxsim_numops_toBool(s.tmp_7);
    if (!r0) { step = 7; continue; }
    r0 = s.tmp_7;
    { step = 8; continue; }
  case 7:
    s.tmp_10 = Sprite_left__P2138_mk(s);
    s.tmp_10.arg0 = s.arg0;
    s.callLocIdx = 352; s.pc = 16; return s.tmp_10;
  case 16:
    r0 = s.retval;
    s.tmp_9 = r0;
    r0 = (s.tmp_9 - s.ox___23818);
    s.tmp_8 = r0;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_11 = r0;
    r0 = (s.tmp_8 > s.tmp_11);
  case 8:
    // jmp value (already in r0)
    s.tmp_12 = r0;
    r0 = pxsim_numops_toBool(s.tmp_12);
    if (!r0) { step = 9; continue; }
    r0 = s.tmp_12;
    { step = 10; continue; }
  case 9:
    s.tmp_15 = Sprite_top__P2142_mk(s);
    s.tmp_15.arg0 = s.arg0;
    s.callLocIdx = 353; s.pc = 17; return s.tmp_15;
  case 17:
    r0 = s.retval;
    s.tmp_14 = r0;
    r0 = (s.tmp_14 - s.oy___23826);
    s.tmp_13 = r0;
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_16 = r0;
    r0 = (s.tmp_13 > s.tmp_16);
  case 10:
    // jmp value (already in r0)
    s.tmp_17 = r0;
    r0 = s.tmp_17;
    return leave(s, r0)
  default: oops()
} } }
Sprite_isOutOfScreen__P2153.info = {"start":16156,"length":358,"line":547,"column":4,"endLine":551,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"isOutOfScreen","argumentNames":["this","camera"]}

function Sprite_isOutOfScreen__P2153_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_isOutOfScreen__P2153, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  tmp_12: undefined,
  tmp_13: undefined,
  tmp_14: undefined,
  tmp_15: undefined,
  tmp_16: undefined,
  tmp_17: undefined,
  ox___23818: undefined,
  oy___23826: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Sprite_bottom__P2145(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1269;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1269]) return breakpoint(s, 1, 1269, r0);
  case 1:
    s.tmp_0 = Sprite_top__P2143_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_1 = r0 = s.arg1;
    s.tmp_3 = Sprite_height__P2137_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.callLocIdx = 338; s.pc = 3; return s.tmp_3;
  case 3:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1 - s.tmp_2);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 339; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite_bottom__P2145.info = {"start":10530,"length":73,"line":380,"column":4,"endLine":382,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"bottom","argumentNames":["this","value"]}

function Sprite_bottom__P2145_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_bottom__P2145, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function Sprite_right__P2141(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1264;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1264]) return breakpoint(s, 1, 1264, r0);
  case 1:
    s.tmp_0 = Sprite_left__P2139_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_1 = r0 = s.arg1;
    s.tmp_3 = Sprite_width__P2136_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.callLocIdx = 330; s.pc = 3; return s.tmp_3;
  case 3:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1 - s.tmp_2);
    s.tmp_0.arg1 = r0;
    s.callLocIdx = 331; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite_right__P2141.info = {"start":9723,"length":71,"line":350,"column":4,"endLine":352,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"right","argumentNames":["this","value"]}

function Sprite_right__P2141_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_right__P2141, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function sprites_BaseSpriteSayRenderer_update__P2031(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_BaseSpriteSayRenderer__C2028_VT)) failedCast(r0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
sprites_BaseSpriteSayRenderer_update__P2031.info = {"start":250,"length":68,"line":9,"column":8,"endLine":11,"endColumn":9,"fileName":"pxt_modules/game/spritesay.ts","functionName":"update","argumentNames":["this","dt","camera","owner"]}

function sprites_BaseSpriteSayRenderer_update__P2031_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_BaseSpriteSayRenderer_update__P2031, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function Sprite_width__P2136(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1258;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1258]) return breakpoint(s, 1, 1258, r0);
  case 1:
    r0 = s.arg0.fields["_image"];
    s.tmp_0 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_0);
    return leaveAccessor(s, r0)
  default: oops()
} } }
Sprite_width__P2136.info = {"start":8789,"length":52,"line":315,"column":4,"endLine":317,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"width","argumentNames":["this"]}
Sprite_width__P2136.isGetter = true;

function Sprite_width__P2136_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_width__P2136, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function Sprite_data__P2118(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1211;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1211]) return breakpoint(s, 1, 1211, r0);
  case 1:
    r0 = (s.arg0).fields["_data"] = (s.arg1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite_data__P2118.info = {"start":4575,"length":56,"line":171,"column":4,"endLine":173,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"data","argumentNames":["this","value"]}

function Sprite_data__P2118_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_data__P2118, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
} }





function Sprite_data__P2117(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1208;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1208]) return breakpoint(s, 3, 1208, r0);
  case 3:
    r0 = s.arg0.fields["_data"];
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1209;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1209]) return breakpoint(s, 4, 1209, r0);
  case 4:
    s.tmp_3 = r0 = s.arg0;
    r0 = pxsim_pxtrt.mkMap();
    s.tmp_4 = r0;
    r0 = (s.tmp_3).fields["_data"] = (s.tmp_4);
  case 1:
  case 2:
    s.lastBrkId = 1210;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1210]) return breakpoint(s, 5, 1210, r0);
  case 5:
    r0 = s.arg0.fields["_data"];
    return leaveAccessor(s, r0)
  default: oops()
} } }
Sprite_data__P2117.info = {"start":4477,"length":92,"line":166,"column":4,"endLine":169,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"data","argumentNames":["this"]}
Sprite_data__P2117.isGetter = true;

function Sprite_data__P2117_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite_data__P2117, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }





function sprites_BaseSprite___update__P1894(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_BaseSprite__C1886_VT)) failedCast(r0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
sprites_BaseSprite___update__P1894.info = {"start":1027,"length":46,"line":45,"column":8,"endLine":45,"endColumn":54,"fileName":"pxt_modules/game/basesprite.ts","functionName":"__update","argumentNames":["this","camera","dt"]}

function sprites_BaseSprite___update__P1894_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_BaseSprite___update__P1894, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function sprites_BaseSprite___draw__P1892(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_BaseSprite__C1886_VT)) failedCast(r0);
    s.lastBrkId = 993;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[993]) return breakpoint(s, 3, 993, r0);
  case 3:
    s.tmp_1 = sprites_BaseSprite__C1886_v0_1_mk(s);
    s.tmp_1.arg0 = s.arg0;
    if (!checkSubtype(s.tmp_1.arg0, sprites_BaseSprite__C1886_VT)) failedCast(s.tmp_1.arg0);
    s.tmp_1.fn = s.tmp_1.arg0.vtable.methods.__visible;
    s.pc = 4; return s.tmp_1;
  case 4:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 994;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[994]) return breakpoint(s, 5, 994, r0);
  case 5:
    s.tmp_2 = sprites_BaseSprite__C1886_v2_2_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.tmp_2.arg1 = s.arg1;
    if (!checkSubtype(s.tmp_2.arg0, sprites_BaseSprite__C1886_VT)) failedCast(s.tmp_2.arg0);
    s.tmp_2.fn = s.tmp_2.arg0.vtable.methods.__drawCore;
    s.pc = 6; return s.tmp_2;
  case 6:
    r0 = s.retval;
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
sprites_BaseSprite___draw__P1892.info = {"start":840,"length":131,"line":37,"column":8,"endLine":41,"endColumn":9,"fileName":"pxt_modules/game/basesprite.ts","functionName":"__draw","argumentNames":["this","camera"]}

function sprites_BaseSprite___draw__P1892_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_BaseSprite___draw__P1892, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function sprites_BaseSprite___drawCore__P1893(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_BaseSprite__C1886_VT)) failedCast(r0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
sprites_BaseSprite___drawCore__P1893.info = {"start":981,"length":36,"line":43,"column":8,"endLine":43,"endColumn":44,"fileName":"pxt_modules/game/basesprite.ts","functionName":"__drawCore","argumentNames":["this","camera"]}

function sprites_BaseSprite___drawCore__P1893_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_BaseSprite___drawCore__P1893, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
} }





function sprites_BaseSprite___visible__P1889(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_BaseSprite__C1886_VT)) failedCast(r0);
    s.lastBrkId = 988;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[988]) return breakpoint(s, 1, 988, r0);
  case 1:
    r0 = true;
    return leave(s, r0)
  default: oops()
} } }
sprites_BaseSprite___visible__P1889.info = {"start":524,"length":57,"line":22,"column":8,"endLine":24,"endColumn":9,"fileName":"pxt_modules/game/basesprite.ts","functionName":"__visible","argumentNames":["this"]}

function sprites_BaseSprite___visible__P1889_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_BaseSprite___visible__P1889, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function music_Melody_toString__P1619(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, music_Melody__C1610_VT)) failedCast(r0);
    s.lastBrkId = 590;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[590]) return breakpoint(s, 1, 590, r0);
  case 1:
    r0 = s.arg0.fields["_text"];
    return leave(s, r0)
  default: oops()
} } }
music_Melody_toString__P1619.info = {"start":10021,"length":53,"line":310,"column":8,"endLine":312,"endColumn":9,"fileName":"pxt_modules/mixer/melody.ts","functionName":"toString","argumentNames":["this"]}

function music_Melody_toString__P1619_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: music_Melody_toString__P1619, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function controller_AnyButton_isPressed__P4371(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.ctrl___23887 = undefined;
    s.b___23891 = undefined;
    s.unnamed1636___U2 = undefined;
    s.unnamed1637___U3 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, controller_AnyButton__C4366_VT)) failedCast(r0);
    s.lastBrkId = 1088;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1088]) return breakpoint(s, 6, 1088, r0);
  case 6:
    s.tmp_0 = controller__player1__P1920_mk(s);
    s.callLocIdx = 234; s.pc = 7; return s.tmp_0;
  case 7:
    r0 = s.retval;
    s.ctrl___23887 = (r0);
    s.lastBrkId = 1089;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1089]) return breakpoint(s, 8, 1089, r0);
  case 8:
    s.b___23891 = (undefined);
    r0 = s.ctrl___23887.fields["buttons"];
    s.unnamed1636___U2 = (r0);
    s.unnamed1637___U3 = (0);
    s.lastBrkId = 1090;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1090]) return breakpoint(s, 9, 1090, r0);
  case 9:
  case 1:
    s.tmp_0 = r0 = s.unnamed1637___U3;
    r0 = pxsim_Array__length(s.unnamed1636___U2);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 < s.tmp_1);
    if (!r0) { step = 4; continue; }
    r0 = pxsim_Array__getAt(s.unnamed1636___U2, s.unnamed1637___U3);
    s.b___23891 = (r0);
    s.lastBrkId = 1091;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1091]) return breakpoint(s, 10, 1091, r0);
  case 10:
    s.tmp_3 = controller_Button__C1971_v0_1_mk(s);
    s.tmp_3.arg0 = s.b___23891;
    if (!checkSubtype(s.tmp_3.arg0, controller_Button__C1971_VT)) failedCast(s.tmp_3.arg0);
    s.tmp_3.fn = s.tmp_3.arg0.vtable.methods.isPressed;
    s.pc = 11; return s.tmp_3;
  case 11:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 2; continue; }
    s.lastBrkId = 1092;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1092]) return breakpoint(s, 12, 1092, r0);
  case 12:
    r0 = true;
    { step = 5; continue; }
  case 2:
  case 3:
    r0 = (s.unnamed1637___U3 + 1);
    s.unnamed1637___U3 = (r0);
    { step = 1; continue; }
  case 4:
    s.unnamed1636___U2 = (undefined);
    s.lastBrkId = 1093;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1093]) return breakpoint(s, 13, 1093, r0);
  case 13:
    r0 = false;
  case 5:
    return leave(s, r0)
  default: oops()
} } }
controller_AnyButton_isPressed__P4371.info = {"start":13715,"length":202,"line":416,"column":8,"endLine":423,"endColumn":9,"fileName":"pxt_modules/game/controller.ts","functionName":"isPressed","argumentNames":["this"]}

function controller_AnyButton_isPressed__P4371_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_AnyButton_isPressed__P4371, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  ctrl___23887: undefined,
  b___23891: undefined,
  unnamed1636___U2: undefined,
  unnamed1637___U3: undefined,
  arg0: undefined,
} }





function controller_Button_toString__P1976(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, controller_Button__C1971_VT)) failedCast(r0);
    s.lastBrkId = 1099;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1099]) return breakpoint(s, 3, 1099, r0);
  case 3:
    r0 = s.arg0.fields["_pressed"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = "down";
    { step = 2; continue; }
  case 1:
    r0 = "up";
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = s.arg0.fields["id"];
    s.tmp_5 = r0;
    if ((s.tmp_5) && (s.tmp_5).vtable) {
    setupResume(s, 4);
    pxsim_String__stringConv(s.tmp_5);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_5) + ""; }
  case 4:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_String__concat("btn ", s.tmp_4);
    s.tmp_3 = r0;
    r0 = pxsim_String__concat(s.tmp_3, " ");
    s.tmp_2 = r0;
    if ((s.tmp_1) && (s.tmp_1).vtable) {
    setupResume(s, 5);
    pxsim_String__stringConv(s.tmp_1);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_1) + ""; }
  case 5:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = pxsim_String__concat(s.tmp_2, s.tmp_6);
    return leave(s, r0)
  default: oops()
} } }
controller_Button_toString__P1976.info = {"start":1357,"length":100,"line":55,"column":8,"endLine":57,"endColumn":9,"fileName":"pxt_modules/game/controllerbutton.ts","functionName":"toString","argumentNames":["this"]}

function controller_Button_toString__P1976_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: controller_Button_toString__P1976, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  arg0: undefined,
} }





function sprites_BaseSpriteSayRenderer_constructor__P2029(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_BaseSpriteSayRenderer__C2028_VT)) failedCast(r0);
    r0 = (s.arg0).fields["text"] = (s.arg1);
    r0 = (s.arg0).fields["fgColor"] = (s.arg2);
    r0 = (s.arg0).fields["bgColor"] = (s.arg3);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
sprites_BaseSpriteSayRenderer_constructor__P2029.info = {"start":69,"length":92,"line":2,"column":8,"endLine":3,"endColumn":9,"fileName":"pxt_modules/game/spritesay.ts","functionName":"inline","argumentNames":["this","text","fgColor","bgColor"]}

function sprites_BaseSpriteSayRenderer_constructor__P2029_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_BaseSpriteSayRenderer_constructor__P2029, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function effects_SceneAnchor_height__P4943(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, effects_SceneAnchor__C4939_VT)) failedCast(r0);
    s.lastBrkId = 3535;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3535]) return breakpoint(s, 1, 3535, r0);
  case 1:
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    return leaveAccessor(s, r0)
  default: oops()
} } }
effects_SceneAnchor_height__P4943.info = {"start":2634,"length":58,"line":71,"column":8,"endLine":73,"endColumn":9,"fileName":"pxt_modules/game/particleeffects.ts","functionName":"height","argumentNames":["this"]}
effects_SceneAnchor_height__P4943.isGetter = true;

function effects_SceneAnchor_height__P4943_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: effects_SceneAnchor_height__P4943, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function effects_SceneAnchor_width__P4942(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, effects_SceneAnchor__C4939_VT)) failedCast(r0);
    s.lastBrkId = 3534;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3534]) return breakpoint(s, 1, 3534, r0);
  case 1:
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    return leaveAccessor(s, r0)
  default: oops()
} } }
effects_SceneAnchor_width__P4942.info = {"start":2568,"length":56,"line":67,"column":8,"endLine":69,"endColumn":9,"fileName":"pxt_modules/game/particleeffects.ts","functionName":"width","argumentNames":["this"]}
effects_SceneAnchor_width__P4942.isGetter = true;

function effects_SceneAnchor_width__P4942_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: effects_SceneAnchor_width__P4942, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function effects_SceneAnchor_y__P4941(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, effects_SceneAnchor__C4939_VT)) failedCast(r0);
    s.lastBrkId = 3533;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3533]) return breakpoint(s, 1, 3533, r0);
  case 1:
    s.tmp_1 = scene_Camera_offsetY__P2444_mk(s);
    r0 = s.arg0.fields["camera"];
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 1572; s.pc = 2; return s.tmp_1;
  case 2:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_ImageMethods.height(globals.screen___1827);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 >> 1);
    s.tmp_2 = r0;
    r0 = (s.tmp_0 + s.tmp_2);
    return leaveAccessor(s, r0)
  default: oops()
} } }
effects_SceneAnchor_y__P4941.info = {"start":2476,"length":82,"line":63,"column":8,"endLine":65,"endColumn":9,"fileName":"pxt_modules/game/particleeffects.ts","functionName":"y","argumentNames":["this"]}
effects_SceneAnchor_y__P4941.isGetter = true;

function effects_SceneAnchor_y__P4941_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: effects_SceneAnchor_y__P4941, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
} }





function effects_SceneAnchor_x__P4940(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, effects_SceneAnchor__C4939_VT)) failedCast(r0);
    s.lastBrkId = 3532;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3532]) return breakpoint(s, 1, 3532, r0);
  case 1:
    s.tmp_1 = scene_Camera_offsetX__P2442_mk(s);
    r0 = s.arg0.fields["camera"];
    s.tmp_1.arg0 = r0;
    s.callLocIdx = 1571; s.pc = 2; return s.tmp_1;
  case 2:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_ImageMethods.width(globals.screen___1827);
    s.tmp_3 = r0;
    r0 = (s.tmp_3 >> 1);
    s.tmp_2 = r0;
    r0 = (s.tmp_0 + s.tmp_2);
    return leaveAccessor(s, r0)
  default: oops()
} } }
effects_SceneAnchor_x__P4940.info = {"start":2385,"length":81,"line":59,"column":8,"endLine":61,"endColumn":9,"fileName":"pxt_modules/game/particleeffects.ts","functionName":"x","argumentNames":["this"]}
effects_SceneAnchor_x__P4940.isGetter = true;

function effects_SceneAnchor_x__P4940_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: effects_SceneAnchor_x__P4940, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
} }





function sprites_StaticObstacle_width__P2235(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_StaticObstacle__C2225_VT)) failedCast(r0);
    s.lastBrkId = 1488;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1488]) return breakpoint(s, 1, 1488, r0);
  case 1:
    r0 = s.arg0.fields["image"];
    s.tmp_0 = r0;
    r0 = pxsim_ImageMethods.width(s.tmp_0);
    return leaveAccessor(s, r0)
  default: oops()
} } }
sprites_StaticObstacle_width__P2235.info = {"start":1088,"length":68,"line":48,"column":8,"endLine":50,"endColumn":9,"fileName":"pxt_modules/game/obstacle.ts","functionName":"width","argumentNames":["this"]}
sprites_StaticObstacle_width__P2235.isGetter = true;

function sprites_StaticObstacle_width__P2235_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_StaticObstacle_width__P2235, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function sprites_StaticObstacle_height__P2234(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_StaticObstacle__C2225_VT)) failedCast(r0);
    s.lastBrkId = 1487;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1487]) return breakpoint(s, 1, 1487, r0);
  case 1:
    r0 = s.arg0.fields["image"];
    s.tmp_0 = r0;
    r0 = pxsim_ImageMethods.height(s.tmp_0);
    return leaveAccessor(s, r0)
  default: oops()
} } }
sprites_StaticObstacle_height__P2234.info = {"start":1008,"length":70,"line":44,"column":8,"endLine":46,"endColumn":9,"fileName":"pxt_modules/game/obstacle.ts","functionName":"height","argumentNames":["this"]}
sprites_StaticObstacle_height__P2234.isGetter = true;

function sprites_StaticObstacle_height__P2234_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_StaticObstacle_height__P2234, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function sprites_StaticObstacle_y__P2233(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_StaticObstacle__C2225_VT)) failedCast(r0);
    s.lastBrkId = 1486;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1486]) return breakpoint(s, 1, 1486, r0);
  case 1:
    r0 = s.arg0.fields["top"];
    s.tmp_0 = r0;
    s.tmp_3 = sprites_StaticObstacle_height__P2234_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.callLocIdx = 494; s.pc = 2; return s.tmp_3;
  case 2:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_2 >> 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 + s.tmp_1);
    return leaveAccessor(s, r0)
  default: oops()
} } }
sprites_StaticObstacle_y__P2233.info = {"start":921,"length":77,"line":40,"column":8,"endLine":42,"endColumn":9,"fileName":"pxt_modules/game/obstacle.ts","functionName":"y","argumentNames":["this"]}
sprites_StaticObstacle_y__P2233.isGetter = true;

function sprites_StaticObstacle_y__P2233_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_StaticObstacle_y__P2233, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
} }





function sprites_StaticObstacle_x__P2232(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_StaticObstacle__C2225_VT)) failedCast(r0);
    s.lastBrkId = 1485;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1485]) return breakpoint(s, 1, 1485, r0);
  case 1:
    r0 = s.arg0.fields["left"];
    s.tmp_0 = r0;
    s.tmp_3 = sprites_StaticObstacle_width__P2235_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.callLocIdx = 493; s.pc = 2; return s.tmp_3;
  case 2:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_2 >> 1);
    s.tmp_1 = r0;
    r0 = (s.tmp_0 + s.tmp_1);
    return leaveAccessor(s, r0)
  default: oops()
} } }
sprites_StaticObstacle_x__P2232.info = {"start":834,"length":77,"line":36,"column":8,"endLine":38,"endColumn":9,"fileName":"pxt_modules/game/obstacle.ts","functionName":"x","argumentNames":["this"]}
sprites_StaticObstacle_x__P2232.isGetter = true;

function sprites_StaticObstacle_x__P2232_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_StaticObstacle_x__P2232, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  arg0: undefined,
} }





function tiles_Location_y__P2377(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.scale___23959 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_Location__C2372_VT)) failedCast(r0);
    s.lastBrkId = 2100;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2100]) return breakpoint(s, 1, 2100, r0);
  case 1:
    s.tmp_0 = tiles_TileMap_scale__P2403_mk(s);
    r0 = s.arg0.fields["tileMap"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 823; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.scale___23959 = (r0);
    s.lastBrkId = 2101;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2101]) return breakpoint(s, 3, 2101, r0);
  case 3:
    r0 = s.arg0.fields["_row"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 << s.scale___23959);
    s.tmp_0 = r0;
    r0 = (s.scale___23959 - 1);
    s.tmp_3 = r0;
    r0 = (1 << s.tmp_3);
    s.tmp_2 = r0;
    r0 = (s.tmp_0 + s.tmp_2);
    return leaveAccessor(s, r0)
  default: oops()
} } }
tiles_Location_y__P2377.info = {"start":836,"length":135,"line":38,"column":8,"endLine":41,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"y","argumentNames":["this"]}
tiles_Location_y__P2377.isGetter = true;

function tiles_Location_y__P2377_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_Location_y__P2377, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  scale___23959: undefined,
  arg0: undefined,
} }





function tiles_Location_x__P2376(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.scale___23976 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, tiles_Location__C2372_VT)) failedCast(r0);
    s.lastBrkId = 2098;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2098]) return breakpoint(s, 1, 2098, r0);
  case 1:
    s.tmp_0 = tiles_TileMap_scale__P2403_mk(s);
    r0 = s.arg0.fields["tileMap"];
    s.tmp_0.arg0 = r0;
    s.callLocIdx = 822; s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    s.scale___23976 = (r0);
    s.lastBrkId = 2099;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2099]) return breakpoint(s, 3, 2099, r0);
  case 3:
    r0 = s.arg0.fields["_col"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 << s.scale___23976);
    s.tmp_0 = r0;
    r0 = (s.scale___23976 - 1);
    s.tmp_3 = r0;
    r0 = (1 << s.tmp_3);
    s.tmp_2 = r0;
    r0 = (s.tmp_0 + s.tmp_2);
    return leaveAccessor(s, r0)
  default: oops()
} } }
tiles_Location_x__P2376.info = {"start":691,"length":135,"line":33,"column":8,"endLine":36,"endColumn":9,"fileName":"pxt_modules/game/tilemap.ts","functionName":"x","argumentNames":["this"]}
tiles_Location_x__P2376.isGetter = true;

function tiles_Location_x__P2376_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: tiles_Location_x__P2376, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  scale___23976: undefined,
  arg0: undefined,
} }





function scene_Renderable___drawCore__P2458(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_Renderable__C2455_VT)) failedCast(r0);
    s.lastBrkId = 2251;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2251]) return breakpoint(s, 1, 2251, r0);
  case 1:
    s.tmp_0 = if_handler_3_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = globals.screen___1827;
    s.tmp_0.arg2 = s.arg1;
    if (!s.tmp_0.arg0.vtable.iface) {
      setupLambda(s.tmp_0, pxsim_pxtrt.mapGetByString(s.tmp_0.arg0, "handler"), 3);
      s.callLocIdx = 915; s.pc = 2; return s.tmp_0;
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["handler"];
      if (s.tmp_0.fn == null) { setupLambda(s.tmp_0, s.tmp_0.arg0.fields["handler"], 3); s.callLocIdx = 915; s.pc = 2; return s.tmp_0; }
      else if (s.tmp_0.fn.isGetter) { s.tmp_0.stage2Call = true; s.callLocIdx = 915; s.pc = 2; return s.tmp_0;; }
     else { s.callLocIdx = 915; s.pc = 2; return s.tmp_0; }
    }
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
scene_Renderable___drawCore__P2458.info = {"start":390,"length":86,"line":14,"column":8,"endLine":16,"endColumn":9,"fileName":"pxt_modules/game/renderable.ts","functionName":"__drawCore","argumentNames":["this","camera"]}

function scene_Renderable___drawCore__P2458_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Renderable___drawCore__P2458, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function scene_Renderable___visible__P2457(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_Renderable__C2455_VT)) failedCast(r0);
    s.lastBrkId = 2250;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2250]) return breakpoint(s, 1, 2250, r0);
  case 1:
    s.tmp_0 = if_shouldBeVisible_1_mk(s);
    s.tmp_0.arg0 = s.arg0;
    if (!s.tmp_0.arg0.vtable.iface) {
      setupLambda(s.tmp_0, pxsim_pxtrt.mapGetByString(s.tmp_0.arg0, "shouldBeVisible"), 1);
      s.callLocIdx = 914; s.pc = 2; return s.tmp_0;
    } else {
      s.tmp_0.fn = s.tmp_0.arg0.vtable.iface["shouldBeVisible"];
      if (s.tmp_0.fn == null) { setupLambda(s.tmp_0, s.tmp_0.arg0.fields["shouldBeVisible"], 1); s.callLocIdx = 914; s.pc = 2; return s.tmp_0; }
      else if (s.tmp_0.fn.isGetter) { s.tmp_0.stage2Call = true; s.callLocIdx = 914; s.pc = 2; return s.tmp_0;; }
     else { s.callLocIdx = 914; s.pc = 2; return s.tmp_0; }
    }
  case 2:
    r0 = s.retval;
    return leave(s, r0)
  default: oops()
} } }
scene_Renderable___visible__P2457.info = {"start":305,"length":75,"line":10,"column":8,"endLine":12,"endColumn":9,"fileName":"pxt_modules/game/renderable.ts","functionName":"__visible","argumentNames":["this"]}

function scene_Renderable___visible__P2457_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Renderable___visible__P2457, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }





function scene_Camera_top__P2450(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_Camera__C2437_VT)) failedCast(r0);
    s.lastBrkId = 2228;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2228]) return breakpoint(s, 1, 2228, r0);
  case 1:
    r0 = s.arg0.fields["drawOffsetY"];
    return leaveAccessor(s, r0)
  default: oops()
} } }
scene_Camera_top__P2450.info = {"start":1638,"length":58,"line":58,"column":8,"endLine":60,"endColumn":9,"fileName":"pxt_modules/game/camera.ts","functionName":"top","argumentNames":["this"]}
scene_Camera_top__P2450.isGetter = true;

function scene_Camera_top__P2450_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Camera_top__P2450, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function scene_Camera_left__P2448(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, scene_Camera__C2437_VT)) failedCast(r0);
    s.lastBrkId = 2227;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[2227]) return breakpoint(s, 1, 2227, r0);
  case 1:
    r0 = s.arg0.fields["drawOffsetX"];
    return leaveAccessor(s, r0)
  default: oops()
} } }
scene_Camera_left__P2448.info = {"start":1486,"length":59,"line":52,"column":8,"endLine":54,"endColumn":9,"fileName":"pxt_modules/game/camera.ts","functionName":"left","argumentNames":["this"]}
scene_Camera_left__P2448.isGetter = true;

function scene_Camera_left__P2448_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: scene_Camera_left__P2448, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function particles_ShapeFactory_drawParticle__P2821(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.pImage___24009 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_ShapeFactory__C2818_VT)) failedCast(r0);
    s.lastBrkId = 3503;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3503]) return breakpoint(s, 1, 3503, r0);
  case 1:
    s.tmp_1 = Math_FastRandom_pickRandom__P2669_mk(s);
    r0 = s.arg0.fields["galois"];
    s.tmp_1.arg0 = r0;
    r0 = s.arg0.fields["sources"];
    s.tmp_1.arg1 = r0;
    s.callLocIdx = 1556; s.pc = 2; return s.tmp_1;
  case 2:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_ImageMethods.clone(s.tmp_0);
    s.pImage___24009 = (r0);
    s.lastBrkId = 3504;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3504]) return breakpoint(s, 3, 3504, r0);
  case 3:
    r0 = s.arg1.fields["color"];
    s.tmp_0 = r0;
    r0 = pxsim_ImageMethods.replace(s.pImage___24009, 15, s.tmp_0);
    s.lastBrkId = 3505;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3505]) return breakpoint(s, 4, 3505, r0);
  case 4:
    s.tmp_0 = r0 = globals.screen___1827;
    s.tmp_1 = r0 = s.pImage___24009;
    s.tmp_3 = Fx_toInt__P170_mk(s);
    s.tmp_4 = Fx_sub__P159_mk(s);
    s.tmp_4.arg0 = s.arg2;
    r0 = s.arg0.fields["ox"];
    s.tmp_4.arg1 = r0;
    s.callLocIdx = 1557; s.pc = 6; return s.tmp_4;
  case 6:
    r0 = s.retval;
    s.tmp_3.arg0 = r0;
    s.callLocIdx = 1558; s.pc = 5; return s.tmp_3;
  case 5:
    r0 = s.retval;
    s.tmp_2 = r0;
    s.tmp_6 = Fx_toInt__P170_mk(s);
    s.tmp_7 = Fx_sub__P159_mk(s);
    s.tmp_7.arg0 = s.arg3;
    r0 = s.arg0.fields["oy"];
    s.tmp_7.arg1 = r0;
    s.callLocIdx = 1559; s.pc = 8; return s.tmp_7;
  case 8:
    r0 = s.retval;
    s.tmp_6.arg0 = r0;
    s.callLocIdx = 1560; s.pc = 7; return s.tmp_6;
  case 7:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = pxsim_ImageMethods.drawTransparentImage(s.tmp_0, s.tmp_1, s.tmp_2, s.tmp_5);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_ShapeFactory_drawParticle__P2821.info = {"start":7172,"length":323,"line":229,"column":8,"endLine":237,"endColumn":9,"fileName":"pxt_modules/game/particlefactories.ts","functionName":"drawParticle","argumentNames":["this","p","x","y"]}

function particles_ShapeFactory_drawParticle__P2821_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_ShapeFactory_drawParticle__P2821, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  pImage___24009: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function Math_FastRandom_pickRandom__P2669(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Math_FastRandom__C2664_VT)) failedCast(r0);
    s.lastBrkId = 3064;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3064]) return breakpoint(s, 6, 3064, r0);
  case 6:
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = pxsim_Array__length(s.arg1);
    s.tmp_2 = r0;
    r0 = (s.tmp_2 == 0);
  case 2:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 3065;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3065]) return breakpoint(s, 7, 3065, r0);
  case 7:
    r0 = undefined;
    { step = 5; continue; }
  case 3:
  case 4:
    s.lastBrkId = 3066;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3066]) return breakpoint(s, 8, 3066, r0);
  case 8:
    s.tmp_4 = r0 = s.arg1;
    s.tmp_6 = Math_FastRandom_randomRange__P2668_mk(s);
    s.tmp_6.arg0 = s.arg0;
    s.tmp_6.arg1 = 0;
    r0 = pxsim_Array__length(s.arg1);
    s.tmp_7 = r0;
    r0 = (s.tmp_7 - 1);
    s.tmp_6.arg2 = r0;
    s.callLocIdx = 1285; s.pc = 9; return s.tmp_6;
  case 9:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = pxsim_Array__getAt(s.tmp_4, s.tmp_5);
  case 5:
    return leave(s, r0)
  default: oops()
} } }
Math_FastRandom_pickRandom__P2669.info = {"start":2358,"length":192,"line":70,"column":8,"endLine":75,"endColumn":9,"fileName":"pxt_modules/game/mathUtil.ts","functionName":"pickRandom","argumentNames":["this","list"]}

function Math_FastRandom_pickRandom__P2669_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Math_FastRandom_pickRandom__P2669, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function particles_AreaFactory_drawParticle__P2809(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.col___24055 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_AreaFactory__C2802_VT)) failedCast(r0);
    s.lastBrkId = 3495;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3495]) return breakpoint(s, 5, 3495, r0);
  case 5:
    r0 = s.arg1.fields["lifespan"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 > 500);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = 4;
    { step = 4; continue; }
  case 1:
    r0 = s.arg1.fields["lifespan"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 > 250);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 2; continue; }
    r0 = 5;
    { step = 3; continue; }
  case 2:
    r0 = 1;
  case 3:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    r0 = s.tmp_4;
  case 4:
    // jmp value (already in r0)
    s.tmp_5 = r0;
    s.col___24055 = (s.tmp_5);
    s.lastBrkId = 3496;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3496]) return breakpoint(s, 6, 3496, r0);
  case 6:
    s.tmp_0 = r0 = globals.screen___1827;
    s.tmp_2 = Fx_toInt__P170_mk(s);
    s.tmp_2.arg0 = s.arg2;
    s.callLocIdx = 1551; s.pc = 7; return s.tmp_2;
  case 7:
    r0 = s.retval;
    s.tmp_1 = r0;
    s.tmp_4 = Fx_toInt__P170_mk(s);
    s.tmp_4.arg0 = s.arg3;
    s.callLocIdx = 1552; s.pc = 8; return s.tmp_4;
  case 8:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = pxsim_ImageMethods.setPixel(s.tmp_0, s.tmp_1, s.tmp_3, s.col___24055);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_AreaFactory_drawParticle__P2809.info = {"start":4770,"length":222,"line":158,"column":8,"endLine":163,"endColumn":9,"fileName":"pxt_modules/game/particlefactories.ts","functionName":"drawParticle","argumentNames":["this","p","x","y"]}

function particles_AreaFactory_drawParticle__P2809_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_AreaFactory_drawParticle__P2809, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  col___24055: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function particles_SprayFactory_drawParticle__P2799(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, particles_SprayFactory__C2796_VT)) failedCast(r0);
    s.lastBrkId = 3480;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[3480]) return breakpoint(s, 1, 3480, r0);
  case 1:
    s.tmp_0 = r0 = globals.screen___1827;
    s.tmp_2 = Fx_toInt__P170_mk(s);
    s.tmp_2.arg0 = s.arg2;
    s.callLocIdx = 1536; s.pc = 2; return s.tmp_2;
  case 2:
    r0 = s.retval;
    s.tmp_1 = r0;
    s.tmp_4 = Fx_toInt__P170_mk(s);
    s.tmp_4.arg0 = s.arg3;
    s.callLocIdx = 1537; s.pc = 3; return s.tmp_4;
  case 3:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = pxsim_ImageMethods.setPixel(s.tmp_0, s.tmp_1, s.tmp_3, 1);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
particles_SprayFactory_drawParticle__P2799.info = {"start":3194,"length":118,"line":115,"column":8,"endLine":117,"endColumn":9,"fileName":"pxt_modules/game/particlefactories.ts","functionName":"drawParticle","argumentNames":["this","particle","x","y"]}

function particles_SprayFactory_drawParticle__P2799_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: particles_SprayFactory_drawParticle__P2799, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function Sprite___drawCore__P2154(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    s.ox___24117 = undefined;
    s.oy___24125 = undefined;
    s.l___24133 = undefined;
    s.t___24139 = undefined;
    s.font___24157 = undefined;
    s.tx___24161 = undefined;
    s.ty___24163 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1290;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1290]) return breakpoint(s, 26, 1290, r0);
  case 26:
    r0 = s.arg0.fields["sayRenderer"];
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    s.lastBrkId = 1291;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1291]) return breakpoint(s, 27, 1291, r0);
  case 27:
    r0 = s.arg0.fields["sayEndTime"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 !== undefined);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    if (!r0) { step = 3; continue; }
    s.lastBrkId = 1292;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1292]) return breakpoint(s, 28, 1292, r0);
  case 28:
    r0 = pxsim.control.millis();
    s.tmp_4 = r0;
    r0 = s.arg0.fields["sayEndTime"];
    s.tmp_5 = r0;
    r0 = (s.tmp_4 < s.tmp_5);
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 1; continue; }
    s.lastBrkId = 1293;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1293]) return breakpoint(s, 29, 1293, r0);
  case 29:
    s.tmp_6 = sprites_BaseSpriteSayRenderer__C2028_v0_4_mk(s);
    r0 = s.arg0.fields["sayRenderer"];
    s.tmp_6.arg0 = r0;
    s.tmp_6.arg1 = globals.screen___1827;
    s.tmp_6.arg2 = s.arg1;
    s.tmp_6.arg3 = s.arg0;
    if (!checkSubtype(s.tmp_6.arg0, sprites_BaseSpriteSayRenderer__C2028_VT)) failedCast(s.tmp_6.arg0);
    s.tmp_6.fn = s.tmp_6.arg0.vtable.methods.draw;
    s.pc = 30; return s.tmp_6;
  case 30:
    r0 = s.retval;
    { step = 2; continue; }
  case 1:
    s.lastBrkId = 1294;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1294]) return breakpoint(s, 31, 1294, r0);
  case 31:
    s.tmp_0 = sprites_BaseSpriteSayRenderer__C2028_v2_1_mk(s);
    r0 = s.arg0.fields["sayRenderer"];
    s.tmp_0.arg0 = r0;
    if (!checkSubtype(s.tmp_0.arg0, sprites_BaseSpriteSayRenderer__C2028_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.destroy;
    s.pc = 32; return s.tmp_0;
  case 32:
    r0 = s.retval;
    s.lastBrkId = 1295;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1295]) return breakpoint(s, 33, 1295, r0);
  case 33:
    r0 = (s.arg0).fields["sayRenderer"] = (undefined);
    s.lastBrkId = 1296;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1296]) return breakpoint(s, 34, 1296, r0);
  case 34:
    r0 = (s.arg0).fields["sayEndTime"] = (undefined);
  case 2:
    { step = 4; continue; }
  case 3:
    s.lastBrkId = 1297;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1297]) return breakpoint(s, 35, 1297, r0);
  case 35:
    s.tmp_0 = sprites_BaseSpriteSayRenderer__C2028_v0_4_mk(s);
    r0 = s.arg0.fields["sayRenderer"];
    s.tmp_0.arg0 = r0;
    s.tmp_0.arg1 = globals.screen___1827;
    s.tmp_0.arg2 = s.arg1;
    s.tmp_0.arg3 = s.arg0;
    if (!checkSubtype(s.tmp_0.arg0, sprites_BaseSpriteSayRenderer__C2028_VT)) failedCast(s.tmp_0.arg0);
    s.tmp_0.fn = s.tmp_0.arg0.vtable.methods.draw;
    s.pc = 36; return s.tmp_0;
  case 36:
    r0 = s.retval;
  case 4:
  case 5:
  case 6:
    s.lastBrkId = 1298;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1298]) return breakpoint(s, 37, 1298, r0);
  case 37:
    s.tmp_1 = Sprite_isOutOfScreen__P2153_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.tmp_1.arg1 = s.arg1;
    s.callLocIdx = 354; s.pc = 38; return s.tmp_1;
  case 38:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 7; continue; }
    s.lastBrkId = 1299;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1299]) return breakpoint(s, 39, 1299, r0);
  case 39:
    { step = 25; continue; }
  case 7:
  case 8:
    s.lastBrkId = 1300;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1300]) return breakpoint(s, 40, 1300, r0);
  case 40:
    r0 = s.arg0.fields["flags"];
    s.tmp_3 = r0;
    r0 = (s.tmp_3 & 512);
    s.tmp_2 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_2);
    if (!r0) { step = 9; continue; }
    r0 = 0;
    { step = 10; continue; }
  case 9:
    r0 = s.arg1.fields["drawOffsetX"];
  case 10:
    // jmp value (already in r0)
    s.tmp_4 = r0;
    s.ox___24117 = (s.tmp_4);
    s.lastBrkId = 1301;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1301]) return breakpoint(s, 41, 1301, r0);
  case 41:
    r0 = s.arg0.fields["flags"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 & 512);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 11; continue; }
    r0 = 0;
    { step = 12; continue; }
  case 11:
    r0 = s.arg1.fields["drawOffsetY"];
  case 12:
    // jmp value (already in r0)
    s.tmp_2 = r0;
    s.oy___24125 = (s.tmp_2);
    s.lastBrkId = 1302;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1302]) return breakpoint(s, 42, 1302, r0);
  case 42:
    s.tmp_2 = Sprite_left__P2138_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 355; s.pc = 43; return s.tmp_2;
  case 43:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - s.ox___24117);
    s.tmp_0 = r0;
    r0 = pxsim.Math_.floor(s.tmp_0);
    s.l___24133 = (r0);
    s.lastBrkId = 1303;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1303]) return breakpoint(s, 44, 1303, r0);
  case 44:
    s.tmp_2 = Sprite_top__P2142_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 356; s.pc = 45; return s.tmp_2;
  case 45:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - s.oy___24125);
    s.tmp_0 = r0;
    r0 = pxsim.Math_.floor(s.tmp_0);
    s.t___24139 = (r0);
    s.lastBrkId = 1304;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1304]) return breakpoint(s, 46, 1304, r0);
  case 46:
    r0 = s.arg0.fields["_image"];
    s.tmp_0 = r0;
    r0 = pxsim_ImageMethods.drawTransparentImage(globals.screen___1827, s.tmp_0, s.l___24133, s.t___24139);
    s.lastBrkId = 1305;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1305]) return breakpoint(s, 47, 1305, r0);
  case 47:
    r0 = s.arg0.fields["flags"];
    s.tmp_1 = r0;
    r0 = (s.tmp_1 & 64);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 21; continue; }
    s.lastBrkId = 1306;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1306]) return breakpoint(s, 48, 1306, r0);
  case 48:
    s.font___24157 = (globals.font5___1775);
    s.lastBrkId = 1307;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1307]) return breakpoint(s, 49, 1307, r0);
  case 49:
    s.tx___24161 = (s.l___24133);
    s.lastBrkId = 1308;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1308]) return breakpoint(s, 50, 1308, r0);
  case 50:
    s.tmp_1 = r0 = s.t___24139;
    s.tmp_3 = Sprite_height__P2137_mk(s);
    s.tmp_3.arg0 = s.arg0;
    s.callLocIdx = 357; s.pc = 51; return s.tmp_3;
  case 51:
    r0 = s.retval;
    s.tmp_2 = r0;
    r0 = (s.tmp_1 + s.tmp_2);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 + 2);
    s.ty___24163 = (r0);
    s.lastBrkId = 1309;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1309]) return breakpoint(s, 52, 1309, r0);
  case 52:
    s.tmp_0 = helpers_imagePrint__P1785_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    r0 = pxsim_String_.mkEmpty();
    s.tmp_3 = r0;
    s.tmp_7 = Sprite_x__P2101_mk(s);
    s.tmp_7.arg0 = s.arg0;
    s.callLocIdx = 358; s.pc = 54; return s.tmp_7;
  case 54:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = (s.tmp_6 >> 0);
    s.tmp_5 = r0;
    if ((s.tmp_5) && (s.tmp_5).vtable) {
    setupResume(s, 55);
    pxsim_String__stringConv(s.tmp_5);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_5) + ""; }
  case 55:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = pxsim_String__concat(s.tmp_3, s.tmp_4);
    s.tmp_2 = r0;
    r0 = pxsim_String__concat(s.tmp_2, ",");
    s.tmp_1 = r0;
    s.tmp_11 = Sprite_y__P2103_mk(s);
    s.tmp_11.arg0 = s.arg0;
    s.callLocIdx = 359; s.pc = 56; return s.tmp_11;
  case 56:
    r0 = s.retval;
    s.tmp_10 = r0;
    r0 = (s.tmp_10 >> 0);
    s.tmp_9 = r0;
    if ((s.tmp_9) && (s.tmp_9).vtable) {
    setupResume(s, 57);
    pxsim_String__stringConv(s.tmp_9);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_9) + ""; }
  case 57:
    r0 = s.retval;
    s.tmp_8 = r0;
    r0 = pxsim_String__concat(s.tmp_1, s.tmp_8);
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = s.tx___24161;
    s.tmp_0.arg3 = s.ty___24163;
    s.tmp_0.arg4 = 1;
    s.tmp_0.arg5 = s.font___24157;
    s.tmp_0.arg6 = undefined;
    s.callLocIdx = 360; s.pc = 53; return s.tmp_0;
  case 53:
    r0 = s.retval;
    s.lastBrkId = 1310;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1310]) return breakpoint(s, 58, 1310, r0);
  case 58:
    s.tmp_0 = r0 = s.tx___24161;
    s.tmp_2 = if_charWidth_1_mk(s);
    s.tmp_2.arg0 = s.font___24157;
    if (!s.tmp_2.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_2.arg0, "charWidth");
    } else {
      s.tmp_2.fn = s.tmp_2.arg0.vtable.iface["charWidth"];
      if (s.tmp_2.fn == null) { s.retval = s.tmp_2.arg0.fields["charWidth"]; }
      else if (!s.tmp_2.fn.isGetter) { s.retval = bind(s.tmp_2); }
     else { s.callLocIdx = 361; s.pc = 59; return s.tmp_2; }
    }
  case 59:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_0 - s.tmp_1);
    s.tx___24161 = (r0);
    s.lastBrkId = 1311;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1311]) return breakpoint(s, 60, 1311, r0);
  case 60:
    s.tmp_1 = Sprite_vx__P2105_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.callLocIdx = 362; s.pc = 61; return s.tmp_1;
  case 61:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 13; continue; }
    r0 = s.tmp_0;
    { step = 14; continue; }
  case 13:
    s.tmp_2 = Sprite_vy__P2107_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 363; s.pc = 62; return s.tmp_2;
  case 62:
    r0 = s.retval;
  case 14:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 15; continue; }
    s.lastBrkId = 1312;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1312]) return breakpoint(s, 63, 1312, r0);
  case 63:
    s.tmp_4 = r0 = s.ty___24163;
    s.tmp_7 = if_charHeight_1_mk(s);
    s.tmp_7.arg0 = s.font___24157;
    if (!s.tmp_7.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_7.arg0, "charHeight");
    } else {
      s.tmp_7.fn = s.tmp_7.arg0.vtable.iface["charHeight"];
      if (s.tmp_7.fn == null) { s.retval = s.tmp_7.arg0.fields["charHeight"]; }
      else if (!s.tmp_7.fn.isGetter) { s.retval = bind(s.tmp_7); }
     else { s.callLocIdx = 364; s.pc = 64; return s.tmp_7; }
    }
  case 64:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = (s.tmp_6 + 2);
    s.tmp_5 = r0;
    r0 = (s.tmp_4 + s.tmp_5);
    s.ty___24163 = (r0);
    s.lastBrkId = 1313;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1313]) return breakpoint(s, 65, 1313, r0);
  case 65:
    s.tmp_0 = helpers_imagePrint__P1785_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_6 = Sprite_vx__P2105_mk(s);
    s.tmp_6.arg0 = s.arg0;
    s.callLocIdx = 365; s.pc = 67; return s.tmp_6;
  case 67:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = (s.tmp_5 >> 0);
    s.tmp_4 = r0;
    if ((s.tmp_4) && (s.tmp_4).vtable) {
    setupResume(s, 68);
    pxsim_String__stringConv(s.tmp_4);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_4) + ""; }
  case 68:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = pxsim_String__concat("v", s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim_String__concat(s.tmp_2, ",");
    s.tmp_1 = r0;
    s.tmp_10 = Sprite_vy__P2107_mk(s);
    s.tmp_10.arg0 = s.arg0;
    s.callLocIdx = 366; s.pc = 69; return s.tmp_10;
  case 69:
    r0 = s.retval;
    s.tmp_9 = r0;
    r0 = (s.tmp_9 >> 0);
    s.tmp_8 = r0;
    if ((s.tmp_8) && (s.tmp_8).vtable) {
    setupResume(s, 70);
    pxsim_String__stringConv(s.tmp_8);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_8) + ""; }
  case 70:
    r0 = s.retval;
    s.tmp_7 = r0;
    r0 = pxsim_String__concat(s.tmp_1, s.tmp_7);
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = s.tx___24161;
    s.tmp_0.arg3 = s.ty___24163;
    s.tmp_0.arg4 = 1;
    s.tmp_0.arg5 = s.font___24157;
    s.tmp_0.arg6 = undefined;
    s.callLocIdx = 367; s.pc = 66; return s.tmp_0;
  case 66:
    r0 = s.retval;
  case 15:
  case 16:
    s.lastBrkId = 1314;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1314]) return breakpoint(s, 71, 1314, r0);
  case 71:
    s.tmp_1 = Sprite_ax__P2109_mk(s);
    s.tmp_1.arg0 = s.arg0;
    s.callLocIdx = 368; s.pc = 72; return s.tmp_1;
  case 72:
    r0 = s.retval;
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 17; continue; }
    r0 = s.tmp_0;
    { step = 18; continue; }
  case 17:
    s.tmp_2 = Sprite_ay__P2111_mk(s);
    s.tmp_2.arg0 = s.arg0;
    s.callLocIdx = 369; s.pc = 73; return s.tmp_2;
  case 73:
    r0 = s.retval;
  case 18:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 19; continue; }
    s.lastBrkId = 1315;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1315]) return breakpoint(s, 74, 1315, r0);
  case 74:
    s.tmp_4 = r0 = s.ty___24163;
    s.tmp_7 = if_charHeight_1_mk(s);
    s.tmp_7.arg0 = s.font___24157;
    if (!s.tmp_7.arg0.vtable.iface) {
      s.retval = pxsim_pxtrt.mapGetByString(s.tmp_7.arg0, "charHeight");
    } else {
      s.tmp_7.fn = s.tmp_7.arg0.vtable.iface["charHeight"];
      if (s.tmp_7.fn == null) { s.retval = s.tmp_7.arg0.fields["charHeight"]; }
      else if (!s.tmp_7.fn.isGetter) { s.retval = bind(s.tmp_7); }
     else { s.callLocIdx = 370; s.pc = 75; return s.tmp_7; }
    }
  case 75:
    r0 = s.retval;
    s.tmp_6 = r0;
    r0 = (s.tmp_6 + 2);
    s.tmp_5 = r0;
    r0 = (s.tmp_4 + s.tmp_5);
    s.ty___24163 = (r0);
    s.lastBrkId = 1316;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1316]) return breakpoint(s, 76, 1316, r0);
  case 76:
    s.tmp_0 = helpers_imagePrint__P1785_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_6 = Sprite_ax__P2109_mk(s);
    s.tmp_6.arg0 = s.arg0;
    s.callLocIdx = 371; s.pc = 78; return s.tmp_6;
  case 78:
    r0 = s.retval;
    s.tmp_5 = r0;
    r0 = (s.tmp_5 >> 0);
    s.tmp_4 = r0;
    if ((s.tmp_4) && (s.tmp_4).vtable) {
    setupResume(s, 79);
    pxsim_String__stringConv(s.tmp_4);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_4) + ""; }
  case 79:
    r0 = s.retval;
    s.tmp_3 = r0;
    r0 = pxsim_String__concat("a", s.tmp_3);
    s.tmp_2 = r0;
    r0 = pxsim_String__concat(s.tmp_2, ",");
    s.tmp_1 = r0;
    s.tmp_10 = Sprite_ay__P2111_mk(s);
    s.tmp_10.arg0 = s.arg0;
    s.callLocIdx = 372; s.pc = 80; return s.tmp_10;
  case 80:
    r0 = s.retval;
    s.tmp_9 = r0;
    r0 = (s.tmp_9 >> 0);
    s.tmp_8 = r0;
    if ((s.tmp_8) && (s.tmp_8).vtable) {
    setupResume(s, 81);
    pxsim_String__stringConv(s.tmp_8);
    checkResumeConsumed();
    return;
    } else { s.retval = (s.tmp_8) + ""; }
  case 81:
    r0 = s.retval;
    s.tmp_7 = r0;
    r0 = pxsim_String__concat(s.tmp_1, s.tmp_7);
    s.tmp_0.arg1 = r0;
    s.tmp_0.arg2 = s.tx___24161;
    s.tmp_0.arg3 = s.ty___24163;
    s.tmp_0.arg4 = 1;
    s.tmp_0.arg5 = s.font___24157;
    s.tmp_0.arg6 = undefined;
    s.callLocIdx = 373; s.pc = 77; return s.tmp_0;
  case 77:
    r0 = s.retval;
  case 19:
  case 20:
  case 21:
  case 22:
    s.lastBrkId = 1317;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1317]) return breakpoint(s, 82, 1317, r0);
  case 82:
    r0 = pxsim_numops_toBoolDecr(globals.debug___2605);
    if (!r0) { step = 23; continue; }
    s.lastBrkId = 1318;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1318]) return breakpoint(s, 83, 1318, r0);
  case 83:
    s.tmp_0 = helpers_imageDrawRect__P1756_mk(s);
    s.tmp_0.arg0 = globals.screen___1827;
    s.tmp_2 = Fx_toInt__P170_mk(s);
    s.tmp_3 = game_Hitbox_left__P1997_mk(s);
    r0 = s.arg0.fields["_hitbox"];
    s.tmp_3.arg0 = r0;
    s.callLocIdx = 374; s.pc = 86; return s.tmp_3;
  case 86:
    r0 = s.retval;
    s.tmp_2.arg0 = r0;
    s.callLocIdx = 375; s.pc = 85; return s.tmp_2;
  case 85:
    r0 = s.retval;
    s.tmp_1 = r0;
    r0 = (s.tmp_1 - s.ox___24117);
    s.tmp_0.arg1 = r0;
    s.tmp_5 = Fx_toInt__P170_mk(s);
    s.tmp_6 = game_Hitbox_top__P1998_mk(s);
    r0 = s.arg0.fields["_hitbox"];
    s.tmp_6.arg0 = r0;
    s.callLocIdx = 376; s.pc = 88; return s.tmp_6;
  case 88:
    r0 = s.retval;
    s.tmp_5.arg0 = r0;
    s.callLocIdx = 377; s.pc = 87; return s.tmp_5;
  case 87:
    r0 = s.retval;
    s.tmp_4 = r0;
    r0 = (s.tmp_4 - s.oy___24125);
    s.tmp_0.arg2 = r0;
    s.tmp_7 = Fx_toInt__P170_mk(s);
    r0 = s.arg0.fields["_hitbox"];
    r0 = r0.fields["width"];
    s.tmp_7.arg0 = r0;
    s.callLocIdx = 378; s.pc = 89; return s.tmp_7;
  case 89:
    r0 = s.retval;
    s.tmp_0.arg3 = r0;
    s.tmp_8 = Fx_toInt__P170_mk(s);
    r0 = s.arg0.fields["_hitbox"];
    r0 = r0.fields["height"];
    s.tmp_8.arg0 = r0;
    s.callLocIdx = 379; s.pc = 90; return s.tmp_8;
  case 90:
    r0 = s.retval;
    s.tmp_0.arg4 = r0;
    s.tmp_0.arg5 = 1;
    s.callLocIdx = 380; s.pc = 84; return s.tmp_0;
  case 84:
    r0 = s.retval;
  case 23:
  case 24:
  case 25:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
Sprite___drawCore__P2154.info = {"start":16520,"length":1935,"line":553,"column":4,"endLine":607,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"__drawCore","argumentNames":["this","camera"]}

function Sprite___drawCore__P2154_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite___drawCore__P2154, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tmp_5: undefined,
  tmp_6: undefined,
  tmp_7: undefined,
  tmp_8: undefined,
  tmp_9: undefined,
  tmp_10: undefined,
  tmp_11: undefined,
  ox___24117: undefined,
  oy___24125: undefined,
  l___24133: undefined,
  t___24139: undefined,
  font___24157: undefined,
  tx___24161: undefined,
  ty___24163: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function sprites_BaseSpriteSayRenderer_destroy__P2032(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_BaseSpriteSayRenderer__C2028_VT)) failedCast(r0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
sprites_BaseSpriteSayRenderer_destroy__P2032.info = {"start":328,"length":22,"line":13,"column":8,"endLine":15,"endColumn":9,"fileName":"pxt_modules/game/spritesay.ts","functionName":"destroy","argumentNames":["this"]}

function sprites_BaseSpriteSayRenderer_destroy__P2032_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_BaseSpriteSayRenderer_destroy__P2032, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function sprites_BaseSpriteSayRenderer_draw__P2030(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.arg3 = (s.lambdaArgs[3]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, sprites_BaseSpriteSayRenderer__C2028_VT)) failedCast(r0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
sprites_BaseSpriteSayRenderer_draw__P2030.info = {"start":171,"length":69,"line":5,"column":8,"endLine":7,"endColumn":9,"fileName":"pxt_modules/game/spritesay.ts","functionName":"draw","argumentNames":["this","screen","camera","owner"]}

function sprites_BaseSpriteSayRenderer_draw__P2030_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: sprites_BaseSpriteSayRenderer_draw__P2030, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }





function Sprite___visible__P2135(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0) || runtime !== pxsim.runtime) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, Sprite__C2092_VT)) failedCast(r0);
    s.lastBrkId = 1257;
    if ((breakpoints[0] && isBreakFrame(s)) || breakpoints[1257]) return breakpoint(s, 1, 1257, r0);
  case 1:
    r0 = s.arg0.fields["flags"];
    s.tmp_2 = r0;
    r0 = (s.tmp_2 & 128);
    s.tmp_1 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_0);
    return leave(s, r0)
  default: oops()
} } }
Sprite___visible__P2135.info = {"start":8624,"length":72,"line":309,"column":4,"endLine":311,"endColumn":5,"fileName":"pxt_modules/game/sprite.ts","functionName":"__visible","argumentNames":["this"]}

function Sprite___visible__P2135_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Sprite___visible__P2135, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  arg0: undefined,
} }




function lambda_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_onPlayFinished_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function lambda_5_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
  arg4: undefined,
} }


function lambda_3_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }


function if_flags_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function particles_ParticleFactory__C2792_v0_2_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }


function particles_ParticleSource__C2756_v4_3_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }


function if_x_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_y_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_handler_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_condition_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_id_2_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }


function lambda_2_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }


function if_startScreenEffect_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function game_GameOverDialog__C2593_v0_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function PhysicsEngine__C2238_v4_2_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }


function if___update_3_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }


function PhysicsEngine__C2238_v3_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_charHeight_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_charWidth_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_multiplier_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_data_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_xOffset_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_yOffset_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if___draw_2_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }


function if_z_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_id_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function controller_Button__C1971_v0_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_s_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_vx_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_vy_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function game_GameOverDialog__C2593_v2_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_countdownEndHandler_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_lifeZeroHandler_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function game_SplashDialog__C2582_v1_2_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }


function game_BaseDialog__C2554_v0_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function game_BaseDialog__C2554_v2_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function PhysicsEngine__C2238_v0_2_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }


function if_handler_2_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }


function lambda_4_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }


function RotatingScreens__C3926_v2_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_font_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_color_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function RotatingScreens__C3926_v1_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_mode_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_img_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function PhysicsEngine__C2238_v2_4_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }


function if_imgs_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_speed_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_dir_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function RotatingScreens__C3926_v3_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_y_2_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }


function if_effect_3_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }


function if_sourceFactory_3_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }


function PhysicsEngine__C2238_v1_2_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }


function if_destroyHandler_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function game_Dialog__C2571_v1_2_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }


function if_combinations_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_c_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_h_2_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }


function if_maxCombo_2_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }


function if_maxCombo_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_buttonComboState_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_timeout_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_lastPressed_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_triggerOn_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_state_2_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }


function if_countAsOne_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_state_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_lastPressed_2_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }


function if_buttonComboState_2_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }


function if_currState_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_extendedCombos_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_h_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_colorInput_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_colorInputText_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_colorCursor_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_colorBottomBackground_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_colorInputHighlighted_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_z_2_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }


function if_colorPrompt_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_kind_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_factory_2_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }


function if_generator_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_padding_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_cardsPerRow_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_cardWidth_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_cardSpacing_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_cardsTop_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_headerText_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_headerFont_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_infoTop_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_infoFont_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_getText_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_basicCard_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_selectedCard_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_activeCard_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_handler_3_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }


function if_tileIndex_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_left_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_top_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function particles_ParticleFactory__C2792_v1_4_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }


function if_height_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function sprites_BaseSpriteSayRenderer__C2028_v1_4_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }


function sprites_BaseSprite__C1886_v0_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function sprites_BaseSprite__C1886_v2_2_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
} }


function if_shouldBeVisible_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function sprites_BaseSpriteSayRenderer__C2028_v0_4_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
  arg3: undefined,
} }


function sprites_BaseSpriteSayRenderer__C2028_v2_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_scene_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function if_width_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }


function RotatingScreens__C3926_v0_1_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: null, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  arg0: undefined,
} }

const controller_Button__C1971_VT = mkVTable({
  name: "Button",
  numFields: 7,
  classNo: 16,
  lastSubtypeNo: 17,
  maxBgInstances: null,
  methods: {
    "isPressed": controller_Button_isPressed__P1980,
  },
  iface: {
    "_owner": null,
    "set/_owner": null,
    "id": null,
    "set/id": null,
    "repeatDelay": null,
    "set/repeatDelay": null,
    "repeatInterval": null,
    "set/repeatInterval": null,
    "_pressed": null,
    "set/_pressed": null,
    "_pressedElasped": null,
    "set/_pressedElasped": null,
    "_repeatCount": null,
    "set/_repeatCount": null,
    "toString": controller_Button_toString__P1976,
    "raiseButtonUp": controller_Button_raiseButtonUp__P4368,
    "raiseButtonDown": controller_Button_raiseButtonDown__P4369,
    "raiseButtonRepeat": controller_Button_raiseButtonRepeat__P4370,
    "onEvent": controller_Button_onEvent__P1978,
    "isPressed": controller_Button_isPressed__P1980,
    "pressureLevel": controller_Button_pressureLevel__P1981,
    "setPressed": controller_Button_setPressed__P1982,
    "__update": controller_Button___update__P1983,
  },
  toStringMethod: controller_Button_toString__P1976,
});
const controller_AnyButton__C4366_VT = mkVTable({
  name: "AnyButton",
  numFields: 7,
  classNo: 17,
  lastSubtypeNo: 17,
  maxBgInstances: null,
  methods: {
    "isPressed": controller_AnyButton_isPressed__P4371,
  },
  iface: {
    "_owner": null,
    "set/_owner": null,
    "id": null,
    "set/id": null,
    "repeatDelay": null,
    "set/repeatDelay": null,
    "repeatInterval": null,
    "set/repeatInterval": null,
    "_pressed": null,
    "set/_pressed": null,
    "_pressedElasped": null,
    "set/_pressedElasped": null,
    "_repeatCount": null,
    "set/_repeatCount": null,
    "isPressed": controller_AnyButton_isPressed__P4371,
    "toString": controller_Button_toString__P1976,
    "raiseButtonUp": controller_Button_raiseButtonUp__P4368,
    "raiseButtonDown": controller_Button_raiseButtonDown__P4369,
    "raiseButtonRepeat": controller_Button_raiseButtonRepeat__P4370,
    "onEvent": controller_Button_onEvent__P1978,
    "pressureLevel": controller_Button_pressureLevel__P1981,
    "setPressed": controller_Button_setPressed__P1982,
    "__update": controller_Button___update__P1983,
  },
});
const Math_FastRandom__C2664_VT = mkVTable({
  name: "FastRandom",
  numFields: 2,
  classNo: 18,
  lastSubtypeNo: 18,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "lfsr": null,
    "set/lfsr": null,
    "seed": null,
    "set/seed": null,
    "next": Math_FastRandom_next__P2667,
    "randomRange": Math_FastRandom_randomRange__P2668,
    "pickRandom": Math_FastRandom_pickRandom__P2669,
  },
});
const Stats__C55116_VT = mkVTable({
  name: "Stats",
  numFields: 4,
  classNo: 19,
  lastSubtypeNo: 19,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "wins": null,
    "set/wins": null,
    "streak": null,
    "set/streak": null,
    "games": null,
    "set/games": null,
    "guesses": null,
    "set/guesses": null,
    "addLoss": Stats_addLoss__P55117,
    "addWin": Stats_addWin__P55118,
    "load": Stats_load__P55119,
    "reset": Stats_reset__P55115,
    "save": Stats_save__P55120,
    "show": Stats_show__P55111,
  },
});
const MainGame__C82383_VT = mkVTable({
  name: "MainGame",
  numFields: 8,
  classNo: 20,
  lastSubtypeNo: 20,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "board": null,
    "set/board": null,
    "guess": null,
    "set/guess": null,
    "guessCount": null,
    "set/guessCount": null,
    "nextReveal": null,
    "set/nextReveal": null,
    "revealFinished": null,
    "set/revealFinished": null,
    "resetRequested": null,
    "set/resetRequested": null,
    "lastRevealed": null,
    "set/lastRevealed": null,
    "puzzleWord": null,
    "set/puzzleWord": null,
    "findInDictionary": MainGame_findInDictionary__P82384,
    "getGuess": MainGame_getGuess__P82385,
    "getPuzzle": MainGame_getPuzzle__P82386,
    "revealNext": MainGame_revealNext__P82387,
    "revealPuzzle": MainGame_revealPuzzle__P82304,
    "startRound": MainGame_startRound__P82388,
    "validateInput": MainGame_validateInput__P82389,
  },
});
const RotatingScreens__C3926_VT = mkVTable({
  name: "RotatingScreens",
  numFields: 13,
  classNo: 21,
  lastSubtypeNo: 22,
  maxBgInstances: null,
  methods: {
    "build": RotatingScreens_build__P3950,
    "destroySprites": RotatingScreens_destroySprites__P3952,
    "refresh": RotatingScreens_refresh__P3955,
    "createBase": RotatingScreens_createBase__P6601,
  },
  iface: {
    "_backColor": null,
    "set/_backColor": null,
    "_backImage": null,
    "set/_backImage": null,
    "_currScreen": null,
    "set/_currScreen": null,
    "_currSprite": null,
    "set/_currSprite": null,
    "_footer": null,
    "set/_footer": null,
    "_headlines": null,
    "set/_headlines": null,
    "_midText": null,
    "set/_midText": null,
    "_titles": null,
    "set/_titles": null,
    "_movingSprites": null,
    "set/_movingSprites": null,
    "_movingSpritesSequential": null,
    "set/_movingSpritesSequential": null,
    "_interval": null,
    "set/_interval": null,
    "_next": null,
    "set/_next": null,
    "_staticSprites": null,
    "set/_staticSprites": null,
    "nextTime": RotatingScreens_nextTime__P3941,
    "build": RotatingScreens_build__P3950,
    "destroySprites": RotatingScreens_destroySprites__P3952,
    "rebuild": RotatingScreens_rebuild__P3953,
    "release": RotatingScreens_release__P3954,
    "refresh": RotatingScreens_refresh__P3955,
    "rotate": RotatingScreens_rotate__P3956,
    "showScrollingSprite": RotatingScreens_showScrollingSprite__P3958,
    "addAllMovingSprites": RotatingScreens_addAllMovingSprites__P6599,
    "addStaticSprites": RotatingScreens_addStaticSprites__P6600,
    "createBase": RotatingScreens_createBase__P6601,
    "duplicateBackImage": RotatingScreens_duplicateBackImage__P6602,
    "drawCurrHeadline": RotatingScreens_drawCurrHeadline__P6603,
    "printMultiple": RotatingScreens_printMultiple__P6604,
    "printMultipleCenter": RotatingScreens_printMultipleCenter__P6605,
  },
});
const music_Melody__C1610_VT = mkVTable({
  name: "Melody",
  numFields: 2,
  classNo: 23,
  lastSubtypeNo: 23,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "_text": null,
    "set/_text": null,
    "_player": null,
    "set/_player": null,
    "stop": music_Melody_stop__P1615,
    "registerMelody": music_Melody_registerMelody__P4246,
    "unregisterMelody": music_Melody_unregisterMelody__P4247,
    "playCore": music_Melody_playCore__P4248,
    "play": music_Melody_play__P1617,
    "playUntilDone": music_Melody_playUntilDone__P1618,
    "toString": music_Melody_toString__P1619,
  },
  toStringMethod: music_Melody_toString__P1619,
});
const GameBoard__C67279_VT = mkVTable({
  name: "GameBoard",
  numFields: 5,
  classNo: 24,
  lastSubtypeNo: 24,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "gameBoard": null,
    "set/gameBoard": null,
    "giveUpSprite": null,
    "set/giveUpSprite": null,
    "letterBoard": null,
    "set/letterBoard": null,
    "promptSprite": null,
    "set/promptSprite": null,
    "titleSprite": null,
    "set/titleSprite": null,
    "hideGiveUpPrompt": GameBoard_hideGiveUpPrompt__P67280,
    "hideWordPrompt": GameBoard_hideWordPrompt__P67281,
    "reveal": GameBoard_reveal__P67282,
    "reset": GameBoard_reset__P67283,
    "showGiveUpPrompt": GameBoard_showGiveUpPrompt__P67284,
    "showWordPrompt": GameBoard_showWordPrompt__P67285,
    "createGameBoard": GameBoard_createGameBoard__P67286,
    "createLetterBoard": GameBoard_createLetterBoard__P67287,
    "createTitles": GameBoard_createTitles__P67288,
    "delete": GameBoard_delete__P67289,
  },
});
const sprites_BaseSprite__C1886_VT = mkVTable({
  name: "BaseSprite",
  numFields: 2,
  classNo: 25,
  lastSubtypeNo: 29,
  maxBgInstances: null,
  methods: {
    "__visible": sprites_BaseSprite___visible__P1889,
    "__draw": sprites_BaseSprite___draw__P1892,
    "__drawCore": sprites_BaseSprite___drawCore__P1893,
    "__update": sprites_BaseSprite___update__P1894,
  },
  iface: {
    "_z": null,
    "set/_z": null,
    "id": null,
    "set/id": null,
    "__visible": sprites_BaseSprite___visible__P1889,
    "z": sprites_BaseSprite_z__P1890,
    "set/z": sprites_BaseSprite_z__P1891,
    "__draw": sprites_BaseSprite___draw__P1892,
    "__drawCore": sprites_BaseSprite___drawCore__P1893,
    "__update": sprites_BaseSprite___update__P1894,
  },
});
const Sprite__C2092_VT = mkVTable({
  name: "Sprite",
  numFields: 26,
  classNo: 26,
  lastSubtypeNo: 27,
  maxBgInstances: null,
  methods: {
    "__visible": Sprite___visible__P2135,
    "__draw": sprites_BaseSprite___draw__P1892,
    "__drawCore": Sprite___drawCore__P2154,
    "__update": Sprite___update__P2155,
  },
  iface: {
    "_z": null,
    "set/_z": null,
    "id": null,
    "set/id": null,
    "_x": null,
    "set/_x": null,
    "_y": null,
    "set/_y": null,
    "_vx": null,
    "set/_vx": null,
    "_vy": null,
    "set/_vy": null,
    "_ax": null,
    "set/_ax": null,
    "_ay": null,
    "set/_ay": null,
    "_fx": null,
    "set/_fx": null,
    "_fy": null,
    "set/_fy": null,
    "_data": null,
    "set/_data": null,
    "_kind": null,
    "set/_kind": null,
    "layer": null,
    "set/layer": null,
    "_lastX": null,
    "set/_lastX": null,
    "_lastY": null,
    "set/_lastY": null,
    "_action": null,
    "set/_action": null,
    "lifespan": null,
    "set/lifespan": null,
    "_image": null,
    "set/_image": null,
    "_obstacles": null,
    "set/_obstacles": null,
    "sayEndTime": null,
    "set/sayEndTime": null,
    "sayRenderer": null,
    "set/sayRenderer": null,
    "_hitbox": null,
    "set/_hitbox": null,
    "_overlappers": null,
    "set/_overlappers": null,
    "_kindsOverlappedWith": null,
    "set/_kindsOverlappedWith": null,
    "flags": null,
    "set/flags": null,
    "destroyHandler": null,
    "set/destroyHandler": null,
    "x": Sprite_x__P2101,
    "set/x": Sprite_x__P2102,
    "y": Sprite_y__P2103,
    "set/y": Sprite_y__P2104,
    "vx": Sprite_vx__P2105,
    "set/vx": Sprite_vx__P2106,
    "vy": Sprite_vy__P2107,
    "set/vy": Sprite_vy__P2108,
    "ax": Sprite_ax__P2109,
    "set/ax": Sprite_ax__P2110,
    "ay": Sprite_ay__P2111,
    "set/ay": Sprite_ay__P2112,
    "fx": Sprite_fx__P2113,
    "set/fx": Sprite_fx__P2114,
    "fy": Sprite_fy__P2115,
    "set/fy": Sprite_fy__P2116,
    "data": Sprite_data__P2117,
    "set/data": Sprite_data__P2118,
    "image": Sprite_image__P2131,
    "setImage": Sprite_setImage__P2132,
    "setHitbox": Sprite_setHitbox__P2133,
    "isStatic": Sprite_isStatic__P2134,
    "__visible": Sprite___visible__P2135,
    "width": Sprite_width__P2136,
    "height": Sprite_height__P2137,
    "left": Sprite_left__P2138,
    "set/left": Sprite_left__P2139,
    "right": Sprite_right__P2140,
    "set/right": Sprite_right__P2141,
    "top": Sprite_top__P2142,
    "set/top": Sprite_top__P2143,
    "bottom": Sprite_bottom__P2144,
    "set/bottom": Sprite_bottom__P2145,
    "kind": Sprite_kind__P2146,
    "setKind": Sprite_setKind__P2147,
    "setPosition": Sprite_setPosition__P2148,
    "isOutOfScreen": Sprite_isOutOfScreen__P2153,
    "__drawCore": Sprite___drawCore__P2154,
    "__update": Sprite___update__P2155,
    "setFlag": Sprite_setFlag__P2158,
    "overlapsWith": Sprite_overlapsWith__P2159,
    "clearObstacles": Sprite_clearObstacles__P2163,
    "registerObstacle": Sprite_registerObstacle__P2164,
    "destroy": Sprite_destroy__P2166,
    "_destroyCore": Sprite__destroyCore__P2167,
    "toString": Sprite_toString__P2169,
    "z": sprites_BaseSprite_z__P1890,
    "set/z": sprites_BaseSprite_z__P1891,
    "__draw": sprites_BaseSprite___draw__P1892,
  },
  toStringMethod: Sprite_toString__P2169,
});
const music_MelodyPlayer__C1620_VT = mkVTable({
  name: "MelodyPlayer",
  numFields: 2,
  classNo: 30,
  lastSubtypeNo: 30,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "melody": null,
    "set/melody": null,
    "onPlayFinished": null,
    "set/onPlayFinished": null,
    "stop": music_MelodyPlayer_stop__P1624,
    "queuePlayInstructions": music_MelodyPlayer_queuePlayInstructions__P4251,
    "play": music_MelodyPlayer_play__P1625,
  },
});
const effects_ImageEffect__C2894_VT = mkVTable({
  name: "ImageEffect",
  numFields: 4,
  classNo: 31,
  lastSubtypeNo: 31,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "preferredDelay": null,
    "set/preferredDelay": null,
    "effect": null,
    "set/effect": null,
    "fastRandom": null,
    "set/fastRandom": null,
    "times": null,
    "set/times": null,
    "applyTo": effects_ImageEffect_applyTo__P2896,
    "change": effects_ImageEffect_change__P2897,
    "startScreenEffect": effects_ImageEffect_startScreenEffect__P2898,
  },
});
const effects_ParticleEffect__C2867_VT = mkVTable({
  name: "ParticleEffect",
  numFields: 3,
  classNo: 32,
  lastSubtypeNo: 33,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "sourceFactory": null,
    "set/sourceFactory": null,
    "defaultRate": null,
    "set/defaultRate": null,
    "defaultLifespan": null,
    "set/defaultLifespan": null,
    "start": effects_ParticleEffect_start__P2869,
    "destroy": effects_ParticleEffect_destroy__P2870,
  },
});
const effects_ScreenEffect__C2871_VT = mkVTable({
  name: "ScreenEffect",
  numFields: 5,
  classNo: 33,
  lastSubtypeNo: 33,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "sourceFactory": null,
    "set/sourceFactory": null,
    "defaultRate": null,
    "set/defaultRate": null,
    "defaultLifespan": null,
    "set/defaultLifespan": null,
    "source": null,
    "set/source": null,
    "sceneDefaultRate": null,
    "set/sceneDefaultRate": null,
    "startScreenEffect": effects_ScreenEffect_startScreenEffect__P2873,
    "endScreenEffect": effects_ScreenEffect_endScreenEffect__P2874,
    "start": effects_ParticleEffect_start__P2869,
    "destroy": effects_ParticleEffect_destroy__P2870,
  },
});
const particles_ParticleFactory__C2792_VT = mkVTable({
  name: "ParticleFactory",
  numFields: 0,
  classNo: 34,
  lastSubtypeNo: 38,
  maxBgInstances: null,
  methods: {
    "createParticle": particles_ParticleFactory_createParticle__P2794,
    "drawParticle": particles_ParticleFactory_drawParticle__P2795,
  },
  iface: {
    "createParticle": particles_ParticleFactory_createParticle__P2794,
    "drawParticle": particles_ParticleFactory_drawParticle__P2795,
  },
});
const particles_SprayFactory__C2796_VT = mkVTable({
  name: "SprayFactory",
  numFields: 3,
  classNo: 35,
  lastSubtypeNo: 38,
  maxBgInstances: null,
  methods: {
    "createParticle": particles_SprayFactory_createParticle__P2798,
    "drawParticle": particles_SprayFactory_drawParticle__P2799,
  },
  iface: {
    "speed": null,
    "set/speed": null,
    "minAngle": null,
    "set/minAngle": null,
    "spread": null,
    "set/spread": null,
    "createParticle": particles_SprayFactory_createParticle__P2798,
    "drawParticle": particles_SprayFactory_drawParticle__P2799,
    "setSpeed": particles_SprayFactory_setSpeed__P2800,
    "setDirection": particles_SprayFactory_setDirection__P2801,
  },
});
const particles_AreaFactory__C2802_VT = mkVTable({
  name: "AreaFactory",
  numFields: 8,
  classNo: 36,
  lastSubtypeNo: 38,
  maxBgInstances: null,
  methods: {
    "createParticle": particles_AreaFactory_createParticle__P2808,
    "drawParticle": particles_AreaFactory_drawParticle__P2809,
  },
  iface: {
    "speed": null,
    "set/speed": null,
    "minAngle": null,
    "set/minAngle": null,
    "spread": null,
    "set/spread": null,
    "xRange": null,
    "set/xRange": null,
    "yRange": null,
    "set/yRange": null,
    "minLifespan": null,
    "set/minLifespan": null,
    "maxLifespan": null,
    "set/maxLifespan": null,
    "galois": null,
    "set/galois": null,
    "createParticle": particles_AreaFactory_createParticle__P2808,
    "drawParticle": particles_AreaFactory_drawParticle__P2809,
    "setSpeed": particles_SprayFactory_setSpeed__P2800,
    "setDirection": particles_SprayFactory_setDirection__P2801,
  },
});
const particles_ShapeFactory__C2818_VT = mkVTable({
  name: "ShapeFactory",
  numFields: 11,
  classNo: 37,
  lastSubtypeNo: 38,
  maxBgInstances: null,
  methods: {
    "createParticle": particles_ShapeFactory_createParticle__P2822,
    "drawParticle": particles_ShapeFactory_drawParticle__P2821,
  },
  iface: {
    "speed": null,
    "set/speed": null,
    "minAngle": null,
    "set/minAngle": null,
    "spread": null,
    "set/spread": null,
    "xRange": null,
    "set/xRange": null,
    "yRange": null,
    "set/yRange": null,
    "minLifespan": null,
    "set/minLifespan": null,
    "maxLifespan": null,
    "set/maxLifespan": null,
    "galois": null,
    "set/galois": null,
    "sources": null,
    "set/sources": null,
    "ox": null,
    "set/ox": null,
    "oy": null,
    "set/oy": null,
    "addShape": particles_ShapeFactory_addShape__P2820,
    "drawParticle": particles_ShapeFactory_drawParticle__P2821,
    "createParticle": particles_ShapeFactory_createParticle__P2822,
    "setSpeed": particles_SprayFactory_setSpeed__P2800,
    "setDirection": particles_SprayFactory_setDirection__P2801,
  },
});
const particles_ConfettiFactory__C2823_VT = mkVTable({
  name: "ConfettiFactory",
  numFields: 11,
  classNo: 38,
  lastSubtypeNo: 38,
  maxBgInstances: null,
  methods: {
    "createParticle": particles_ShapeFactory_createParticle__P2822,
    "drawParticle": particles_ShapeFactory_drawParticle__P2821,
  },
  iface: {
    "speed": null,
    "set/speed": null,
    "minAngle": null,
    "set/minAngle": null,
    "spread": null,
    "set/spread": null,
    "xRange": null,
    "set/xRange": null,
    "yRange": null,
    "set/yRange": null,
    "minLifespan": null,
    "set/minLifespan": null,
    "maxLifespan": null,
    "set/maxLifespan": null,
    "galois": null,
    "set/galois": null,
    "sources": null,
    "set/sources": null,
    "ox": null,
    "set/ox": null,
    "oy": null,
    "set/oy": null,
    "addShape": particles_ShapeFactory_addShape__P2820,
    "drawParticle": particles_ShapeFactory_drawParticle__P2821,
    "createParticle": particles_ShapeFactory_createParticle__P2822,
    "setSpeed": particles_SprayFactory_setSpeed__P2800,
    "setDirection": particles_SprayFactory_setDirection__P2801,
  },
});
const particles_ParticleSource__C2756_VT = mkVTable({
  name: "ParticleSource",
  numFields: 13,
  classNo: 28,
  lastSubtypeNo: 28,
  maxBgInstances: null,
  methods: {
    "__visible": sprites_BaseSprite___visible__P1889,
    "__draw": particles_ParticleSource___draw__P2762,
    "__drawCore": sprites_BaseSprite___drawCore__P1893,
    "__update": sprites_BaseSprite___update__P1894,
    "updateParticle": particles_ParticleSource_updateParticle__P4896,
  },
  iface: {
    "_z": null,
    "set/_z": null,
    "id": null,
    "set/id": null,
    "priority": null,
    "set/priority": null,
    "_dt": null,
    "set/_dt": null,
    "anchor": null,
    "set/anchor": null,
    "lifespan": null,
    "set/lifespan": null,
    "pFlags": null,
    "set/pFlags": null,
    "head": null,
    "set/head": null,
    "timer": null,
    "set/timer": null,
    "period": null,
    "set/period": null,
    "_factory": null,
    "set/_factory": null,
    "ax": null,
    "set/ax": null,
    "ay": null,
    "set/ay": null,
    "__draw": particles_ParticleSource___draw__P2762,
    "_update": particles_ParticleSource__update__P2763,
    "_prune": particles_ParticleSource__prune__P2764,
    "setAcceleration": particles_ParticleSource_setAcceleration__P2765,
    "setRelativeToCamera": particles_ParticleSource_setRelativeToCamera__P2767,
    "enabled": particles_ParticleSource_enabled__P2768,
    "set/enabled": particles_ParticleSource_enabled__P2769,
    "destroy": particles_ParticleSource_destroy__P2770,
    "clear": particles_ParticleSource_clear__P2771,
    "setAnchor": particles_ParticleSource_setAnchor__P2772,
    "setRate": particles_ParticleSource_setRate__P2773,
    "factory": particles_ParticleSource_factory__P2774,
    "setFactory": particles_ParticleSource_setFactory__P2775,
    "updateParticle": particles_ParticleSource_updateParticle__P4896,
    "drawParticle": particles_ParticleSource_drawParticle__P4897,
    "__visible": sprites_BaseSprite___visible__P1889,
    "z": sprites_BaseSprite_z__P1890,
    "set/z": sprites_BaseSprite_z__P1891,
    "__drawCore": sprites_BaseSprite___drawCore__P1893,
    "__update": sprites_BaseSprite___update__P1894,
  },
});
const particles_Particle__C2737_VT = mkVTable({
  name: "Particle",
  numFields: 8,
  classNo: 39,
  lastSubtypeNo: 39,
  maxBgInstances: 200,
  methods: {
  },
  iface: {
    "_x": null,
    "set/_x": null,
    "_y": null,
    "set/_y": null,
    "vx": null,
    "set/vx": null,
    "vy": null,
    "set/vy": null,
    "lifespan": null,
    "set/lifespan": null,
    "next": null,
    "set/next": null,
    "data": null,
    "set/data": null,
    "color": null,
    "set/color": null,
  },
});
const control_EventContext__C393_VT = mkVTable({
  name: "EventContext",
  numFields: 9,
  classNo: 40,
  lastSubtypeNo: 40,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "handlers": null,
    "set/handlers": null,
    "frameCallbacks": null,
    "set/frameCallbacks": null,
    "frameWorker": null,
    "set/frameWorker": null,
    "framesInSample": null,
    "set/framesInSample": null,
    "timeInSample": null,
    "set/timeInSample": null,
    "deltaTimeMillis": null,
    "set/deltaTimeMillis": null,
    "prevTimeMillis": null,
    "set/prevTimeMillis": null,
    "idleCallbacks": null,
    "set/idleCallbacks": null,
    "runningCallbacks": null,
    "set/runningCallbacks": null,
    "deltaTime": control_EventContext_deltaTime__P398,
    "runCallbacks": control_EventContext_runCallbacks__P4204,
    "registerFrameCallbacks": control_EventContext_registerFrameCallbacks__P4205,
    "register": control_EventContext_register__P399,
    "unregister": control_EventContext_unregister__P400,
    "registerFrameHandler": control_EventContext_registerFrameHandler__P401,
    "registerHandler": control_EventContext_registerHandler__P403,
  },
});
const scene_Scene__C2496_VT = mkVTable({
  name: "Scene",
  numFields: 23,
  classNo: 41,
  lastSubtypeNo: 41,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "eventContext": null,
    "set/eventContext": null,
    "background": null,
    "set/background": null,
    "tileMap": null,
    "set/tileMap": null,
    "allSprites": null,
    "set/allSprites": null,
    "spriteNextId": null,
    "set/spriteNextId": null,
    "spritesByKind": null,
    "set/spritesByKind": null,
    "physicsEngine": null,
    "set/physicsEngine": null,
    "camera": null,
    "set/camera": null,
    "flags": null,
    "set/flags": null,
    "destroyedHandlers": null,
    "set/destroyedHandlers": null,
    "createdHandlers": null,
    "set/createdHandlers": null,
    "overlapHandlers": null,
    "set/overlapHandlers": null,
    "overlapMap": null,
    "set/overlapMap": null,
    "tileOverlapHandlers": null,
    "set/tileOverlapHandlers": null,
    "collisionHandlers": null,
    "set/collisionHandlers": null,
    "wallCollisionHandlers": null,
    "set/wallCollisionHandlers": null,
    "gameForeverHandlers": null,
    "set/gameForeverHandlers": null,
    "particleSources": null,
    "set/particleSources": null,
    "controlledSprites": null,
    "set/controlledSprites": null,
    "followingSprites": null,
    "set/followingSprites": null,
    "_millis": null,
    "set/_millis": null,
    "_data": null,
    "set/_data": null,
    "previousScene": null,
    "set/previousScene": null,
    "init": scene_Scene_init__P2518,
    "data": scene_Scene_data__P2519,
    "millis": scene_Scene_millis__P2520,
    "addSprite": scene_Scene_addSprite__P2521,
    "destroy": scene_Scene_destroy__P2522,
    "render": scene_Scene_render__P2523,
  },
});
const control_FrameCallback__C390_VT = mkVTable({
  name: "FrameCallback",
  numFields: 2,
  classNo: 42,
  lastSubtypeNo: 42,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "order": null,
    "set/order": null,
    "handler": null,
    "set/handler": null,
  },
});
const control_PollEvent__C4178_VT = mkVTable({
  name: "PollEvent",
  numFields: 6,
  classNo: 43,
  lastSubtypeNo: 43,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "eid": null,
    "set/eid": null,
    "vid": null,
    "set/vid": null,
    "start": null,
    "set/start": null,
    "timeOut": null,
    "set/timeOut": null,
    "condition": null,
    "set/condition": null,
    "once": null,
    "set/once": null,
  },
});
const control_EventHandler__C4199_VT = mkVTable({
  name: "EventHandler",
  numFields: 4,
  classNo: 44,
  lastSubtypeNo: 44,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "src": null,
    "set/src": null,
    "value": null,
    "set/value": null,
    "handler": null,
    "set/handler": null,
    "flags": null,
    "set/flags": null,
    "register": control_EventHandler_register__P4200,
    "unregister": control_EventHandler_unregister__P4201,
  },
});
const info_PlayerInfo__C2309_VT = mkVTable({
  name: "PlayerInfo",
  numFields: 12,
  classNo: 45,
  lastSubtypeNo: 45,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "_player": null,
    "set/_player": null,
    "bg": null,
    "set/bg": null,
    "border": null,
    "set/border": null,
    "fc": null,
    "set/fc": null,
    "showScore": null,
    "set/showScore": null,
    "showLife": null,
    "set/showLife": null,
    "visibility": null,
    "set/visibility": null,
    "showPlayer": null,
    "set/showPlayer": null,
    "x": null,
    "set/x": null,
    "y": null,
    "set/y": null,
    "left": null,
    "set/left": null,
    "up": null,
    "set/up": null,
    "init": info_PlayerInfo_init__P4489,
    "getState": info_PlayerInfo_getState__P2322,
    "id": info_PlayerInfo_id__P2323,
    "score": info_PlayerInfo_score__P2324,
    "hasScore": info_PlayerInfo_hasScore__P2327,
    "hasLife": info_PlayerInfo_hasLife__P2331,
    "raiseLifeZero": info_PlayerInfo_raiseLifeZero__P2333,
    "drawPlayer": info_PlayerInfo_drawPlayer__P2334,
    "drawScore": info_PlayerInfo_drawScore__P2335,
    "drawLives": info_PlayerInfo_drawLives__P2336,
  },
});
const game_BaseDialog__C2554_VT = mkVTable({
  name: "BaseDialog",
  numFields: 11,
  classNo: 46,
  lastSubtypeNo: 49,
  maxBgInstances: null,
  methods: {
    "update": game_BaseDialog_update__P2567,
    "setText": game_BaseDialog_setText__P2568,
    "drawTextCore": game_BaseDialog_drawTextCore__P2569,
  },
  iface: {
    "image": null,
    "set/image": null,
    "frame": null,
    "set/frame": null,
    "cursor": null,
    "set/cursor": null,
    "columns": null,
    "set/columns": null,
    "rows": null,
    "set/rows": null,
    "unit": null,
    "set/unit": null,
    "innerLeft": null,
    "set/innerLeft": null,
    "innerTop": null,
    "set/innerTop": null,
    "cursorCount": null,
    "set/cursorCount": null,
    "font": null,
    "set/font": null,
    "textColor": null,
    "set/textColor": null,
    "update": game_BaseDialog_update__P2567,
    "setText": game_BaseDialog_setText__P2568,
    "drawTextCore": game_BaseDialog_drawTextCore__P2569,
    "drawCursorRow": game_BaseDialog_drawCursorRow__P2570,
    "drawBorder": game_BaseDialog_drawBorder__P4529,
    "fastFill": game_BaseDialog_fastFill__P4530,
    "clearInterior": game_BaseDialog_clearInterior__P4531,
    "drawPartial": game_BaseDialog_drawPartial__P4532,
    "cursorRowHeight": game_BaseDialog_cursorRowHeight__P4533,
    "rowHeight": game_BaseDialog_rowHeight__P4534,
    "textAreaWidth": game_BaseDialog_textAreaWidth__P4535,
    "textAreaHeight": game_BaseDialog_textAreaHeight__P4536,
    "setFont": game_BaseDialog_setFont__P4537,
  },
});
const game_GameOverDialog__C2593_VT = mkVTable({
  name: "GameOverDialog",
  numFields: 16,
  classNo: 47,
  lastSubtypeNo: 47,
  maxBgInstances: null,
  methods: {
    "update": game_GameOverDialog_update__P2596,
    "setText": game_BaseDialog_setText__P2568,
    "drawTextCore": game_GameOverDialog_drawTextCore__P2597,
  },
  iface: {
    "image": null,
    "set/image": null,
    "frame": null,
    "set/frame": null,
    "cursor": null,
    "set/cursor": null,
    "columns": null,
    "set/columns": null,
    "rows": null,
    "set/rows": null,
    "unit": null,
    "set/unit": null,
    "innerLeft": null,
    "set/innerLeft": null,
    "innerTop": null,
    "set/innerTop": null,
    "cursorCount": null,
    "set/cursorCount": null,
    "font": null,
    "set/font": null,
    "textColor": null,
    "set/textColor": null,
    "cursorOn": null,
    "set/cursorOn": null,
    "isNewHighScore": null,
    "set/isNewHighScore": null,
    "win": null,
    "set/win": null,
    "score": null,
    "set/score": null,
    "highScore": null,
    "set/highScore": null,
    "displayCursor": game_GameOverDialog_displayCursor__P2595,
    "update": game_GameOverDialog_update__P2596,
    "drawTextCore": game_GameOverDialog_drawTextCore__P2597,
    "setText": game_BaseDialog_setText__P2568,
    "drawCursorRow": game_BaseDialog_drawCursorRow__P2570,
    "drawBorder": game_BaseDialog_drawBorder__P4529,
    "fastFill": game_BaseDialog_fastFill__P4530,
    "clearInterior": game_BaseDialog_clearInterior__P4531,
    "drawPartial": game_BaseDialog_drawPartial__P4532,
    "cursorRowHeight": game_BaseDialog_cursorRowHeight__P4533,
    "rowHeight": game_BaseDialog_rowHeight__P4534,
    "textAreaWidth": game_BaseDialog_textAreaWidth__P4535,
    "textAreaHeight": game_BaseDialog_textAreaHeight__P4536,
    "setFont": game_BaseDialog_setFont__P4537,
  },
});
const PhysicsEngine__C2238_VT = mkVTable({
  name: "PhysicsEngine",
  numFields: 0,
  classNo: 50,
  lastSubtypeNo: 51,
  maxBgInstances: null,
  methods: {
    "addSprite": PhysicsEngine_addSprite__P2240,
    "removeSprite": PhysicsEngine_removeSprite__P2241,
    "moveSprite": PhysicsEngine_moveSprite__P2242,
    "draw": PhysicsEngine_draw__P2243,
    "move": PhysicsEngine_move__P2244,
  },
  iface: {
    "addSprite": PhysicsEngine_addSprite__P2240,
    "removeSprite": PhysicsEngine_removeSprite__P2241,
    "moveSprite": PhysicsEngine_moveSprite__P2242,
    "draw": PhysicsEngine_draw__P2243,
    "move": PhysicsEngine_move__P2244,
  },
});
const scene_Camera__C2437_VT = mkVTable({
  name: "Camera",
  numFields: 8,
  classNo: 52,
  lastSubtypeNo: 52,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "_offsetX": null,
    "set/_offsetX": null,
    "_offsetY": null,
    "set/_offsetY": null,
    "drawOffsetX": null,
    "set/drawOffsetX": null,
    "drawOffsetY": null,
    "set/drawOffsetY": null,
    "sprite": null,
    "set/sprite": null,
    "shakeStartTime": null,
    "set/shakeStartTime": null,
    "shakeDuration": null,
    "set/shakeDuration": null,
    "shakeAmplitude": null,
    "set/shakeAmplitude": null,
    "offsetX": scene_Camera_offsetX__P2442,
    "set/offsetX": scene_Camera_offsetX__P2443,
    "offsetY": scene_Camera_offsetY__P2444,
    "set/offsetY": scene_Camera_offsetY__P2445,
    "x": scene_Camera_x__P2446,
    "y": scene_Camera_y__P2447,
    "left": scene_Camera_left__P2448,
    "top": scene_Camera_top__P2450,
    "update": scene_Camera_update__P2453,
  },
});
const scene_Background__C2348_VT = mkVTable({
  name: "Background",
  numFields: 4,
  classNo: 53,
  lastSubtypeNo: 53,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "color": null,
    "set/color": null,
    "_image": null,
    "set/_image": null,
    "camera": null,
    "set/camera": null,
    "_layers": null,
    "set/_layers": null,
    "image": scene_Background_image__P2354,
    "set/image": scene_Background_image__P2355,
    "hasBackgroundImage": scene_Background_hasBackgroundImage__P2356,
    "draw": scene_Background_draw__P2357,
  },
});
const scene_BackgroundLayer__C2358_VT = mkVTable({
  name: "BackgroundLayer",
  numFields: 6,
  classNo: 54,
  lastSubtypeNo: 54,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "distance": null,
    "set/distance": null,
    "img": null,
    "set/img": null,
    "repeatX": null,
    "set/repeatX": null,
    "repeatY": null,
    "set/repeatY": null,
    "alignX": null,
    "set/alignX": null,
    "alignY": null,
    "set/alignY": null,
    "draw": scene_BackgroundLayer_draw__P2366,
  },
});
const tiles_TileMap__C2400_VT = mkVTable({
  name: "TileMap",
  numFields: 4,
  classNo: 55,
  lastSubtypeNo: 55,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "_scale": null,
    "set/_scale": null,
    "_layer": null,
    "set/_layer": null,
    "_map": null,
    "set/_map": null,
    "renderable": null,
    "set/renderable": null,
    "scale": tiles_TileMap_scale__P2403,
    "set/scale": tiles_TileMap_scale__P2404,
    "data": tiles_TileMap_data__P4499,
    "offsetX": tiles_TileMap_offsetX__P2405,
    "offsetY": tiles_TileMap_offsetY__P2406,
    "areaWidth": tiles_TileMap_areaWidth__P2407,
    "areaHeight": tiles_TileMap_areaHeight__P2408,
    "layer": tiles_TileMap_layer__P2409,
    "enabled": tiles_TileMap_enabled__P2411,
    "getTile": tiles_TileMap_getTile__P2413,
    "getTileIndex": tiles_TileMap_getTileIndex__P2414,
    "draw": tiles_TileMap_draw__P4501,
    "isObstacle": tiles_TileMap_isObstacle__P2420,
    "getObstacle": tiles_TileMap_getObstacle__P2421,
    "isOnWall": tiles_TileMap_isOnWall__P2422,
    "getTileImage": tiles_TileMap_getTileImage__P2423,
  },
});
const tiles_TileMapData__C2387_VT = mkVTable({
  name: "TileMapData",
  numFields: 7,
  classNo: 56,
  lastSubtypeNo: 56,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "data": null,
    "set/data": null,
    "layers": null,
    "set/layers": null,
    "tileset": null,
    "set/tileset": null,
    "cachedTileView": null,
    "set/cachedTileView": null,
    "_scale": null,
    "set/_scale": null,
    "_width": null,
    "set/_width": null,
    "_height": null,
    "set/_height": null,
    "width": tiles_TileMapData_width__P2389,
    "height": tiles_TileMapData_height__P2390,
    "scale": tiles_TileMapData_scale__P2391,
    "set/scale": tiles_TileMapData_scale__P2392,
    "getTile": tiles_TileMapData_getTile__P2393,
    "getTileImage": tiles_TileMapData_getTileImage__P2396,
    "isWall": tiles_TileMapData_isWall__P2398,
    "isOutsideMap": tiles_TileMapData_isOutsideMap__P2399,
  },
});
const controller_Controller__C1926_VT = mkVTable({
  name: "Controller",
  numFields: 5,
  classNo: 57,
  lastSubtypeNo: 57,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "playerIndex": null,
    "set/playerIndex": null,
    "buttons": null,
    "set/buttons": null,
    "analog": null,
    "set/analog": null,
    "_id": null,
    "set/_id": null,
    "_connected": null,
    "set/_connected": null,
    "_controlledSprites": controller_Controller__controlledSprites__P1931,
    "set/_controlledSprites": controller_Controller__controlledSprites__P1932,
    "id": controller_Controller_id__P1933,
    "left": controller_Controller_left__P1935,
    "right": controller_Controller_right__P1936,
    "up": controller_Controller_up__P1937,
    "down": controller_Controller_down__P1938,
    "button": controller_Controller_button__P4365,
    "connected": controller_Controller_connected__P1945,
    "set/connected": controller_Controller_connected__P1946,
    "__preUpdate": controller_Controller___preUpdate__P1950,
    "__update": controller_Controller___update__P1951,
  },
});
const ArcadePhysicsEngine__C2254_VT = mkVTable({
  name: "ArcadePhysicsEngine",
  numFields: 6,
  classNo: 51,
  lastSubtypeNo: 51,
  maxBgInstances: null,
  methods: {
    "addSprite": ArcadePhysicsEngine_addSprite__P2263,
    "removeSprite": ArcadePhysicsEngine_removeSprite__P2264,
    "moveSprite": ArcadePhysicsEngine_moveSprite__P2268,
    "draw": ArcadePhysicsEngine_draw__P2265,
    "move": ArcadePhysicsEngine_move__P2266,
  },
  iface: {
    "sprites": null,
    "set/sprites": null,
    "map": null,
    "set/map": null,
    "maxVelocity": null,
    "set/maxVelocity": null,
    "maxNegativeVelocity": null,
    "set/maxNegativeVelocity": null,
    "minSingleStep": null,
    "set/minSingleStep": null,
    "maxSingleStep": null,
    "set/maxSingleStep": null,
    "maxSpeed": ArcadePhysicsEngine_maxSpeed__P2256,
    "set/maxSpeed": ArcadePhysicsEngine_maxSpeed__P2257,
    "minStep": ArcadePhysicsEngine_minStep__P2258,
    "set/minStep": ArcadePhysicsEngine_minStep__P2259,
    "maxStep": ArcadePhysicsEngine_maxStep__P2260,
    "set/maxStep": ArcadePhysicsEngine_maxStep__P2261,
    "addSprite": ArcadePhysicsEngine_addSprite__P2263,
    "removeSprite": ArcadePhysicsEngine_removeSprite__P2264,
    "draw": ArcadePhysicsEngine_draw__P2265,
    "move": ArcadePhysicsEngine_move__P2266,
    "createMovingSprite": ArcadePhysicsEngine_createMovingSprite__P4428,
    "spriteCollisions": ArcadePhysicsEngine_spriteCollisions__P4429,
    "tilemapCollisions": ArcadePhysicsEngine_tilemapCollisions__P4430,
    "tilemapOverlaps": ArcadePhysicsEngine_tilemapOverlaps__P4431,
    "moveSprite": ArcadePhysicsEngine_moveSprite__P2268,
    "canResolveClipping": ArcadePhysicsEngine_canResolveClipping__P4432,
    "constrain": ArcadePhysicsEngine_constrain__P4433,
  },
});
const sprites_SpriteMap__C2173_VT = mkVTable({
  name: "SpriteMap",
  numFields: 5,
  classNo: 58,
  lastSubtypeNo: 58,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "cellWidth": null,
    "set/cellWidth": null,
    "cellHeight": null,
    "set/cellHeight": null,
    "rowCount": null,
    "set/rowCount": null,
    "columnCount": null,
    "set/columnCount": null,
    "buckets": null,
    "set/buckets": null,
    "neighbors": sprites_SpriteMap_neighbors__P2175,
    "overlaps": sprites_SpriteMap_overlaps__P2176,
    "draw": sprites_SpriteMap_draw__P2177,
    "resizeBuckets": sprites_SpriteMap_resizeBuckets__P2178,
    "clear": sprites_SpriteMap_clear__P2179,
    "key": sprites_SpriteMap_key__P4391,
    "insertAtKey": sprites_SpriteMap_insertAtKey__P4392,
    "insertAABB": sprites_SpriteMap_insertAABB__P2180,
    "mergeAtKey": sprites_SpriteMap_mergeAtKey__P4393,
    "toString": sprites_SpriteMap_toString__P2181,
  },
  toStringMethod: sprites_SpriteMap_toString__P2181,
});
const scene_Renderable__C2455_VT = mkVTable({
  name: "Renderable",
  numFields: 4,
  classNo: 29,
  lastSubtypeNo: 29,
  maxBgInstances: null,
  methods: {
    "__visible": scene_Renderable___visible__P2457,
    "__draw": sprites_BaseSprite___draw__P1892,
    "__drawCore": scene_Renderable___drawCore__P2458,
    "__update": sprites_BaseSprite___update__P1894,
  },
  iface: {
    "_z": null,
    "set/_z": null,
    "id": null,
    "set/id": null,
    "handler": null,
    "set/handler": null,
    "shouldBeVisible": null,
    "set/shouldBeVisible": null,
    "__visible": scene_Renderable___visible__P2457,
    "__drawCore": scene_Renderable___drawCore__P2458,
    "z": sprites_BaseSprite_z__P1890,
    "set/z": sprites_BaseSprite_z__P1891,
    "__draw": sprites_BaseSprite___draw__P1892,
    "__update": sprites_BaseSprite___update__P1894,
  },
});
const info_PlayerState__C2280_VT = mkVTable({
  name: "PlayerState",
  numFields: 3,
  classNo: 59,
  lastSubtypeNo: 59,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "score": null,
    "set/score": null,
    "life": null,
    "set/life": null,
    "lifeZeroHandler": null,
    "set/lifeZeroHandler": null,
  },
});
const info_InfoState__C4434_VT = mkVTable({
  name: "InfoState",
  numFields: 10,
  classNo: 60,
  lastSubtypeNo: 60,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "playerStates": null,
    "set/playerStates": null,
    "visibilityFlag": null,
    "set/visibilityFlag": null,
    "gameEnd": null,
    "set/gameEnd": null,
    "heartImage": null,
    "set/heartImage": null,
    "multiplierImage": null,
    "set/multiplierImage": null,
    "bgColor": null,
    "set/bgColor": null,
    "borderColor": null,
    "set/borderColor": null,
    "fontColor": null,
    "set/fontColor": null,
    "countdownExpired": null,
    "set/countdownExpired": null,
    "countdownEndHandler": null,
    "set/countdownEndHandler": null,
  },
});
const game_SplashDialog__C2582_VT = mkVTable({
  name: "SplashDialog",
  numFields: 17,
  classNo: 48,
  lastSubtypeNo: 48,
  maxBgInstances: null,
  methods: {
    "update": game_BaseDialog_update__P2567,
    "setText": game_SplashDialog_setText__P2590,
    "drawTextCore": game_SplashDialog_drawTextCore__P2592,
  },
  iface: {
    "image": null,
    "set/image": null,
    "frame": null,
    "set/frame": null,
    "cursor": null,
    "set/cursor": null,
    "columns": null,
    "set/columns": null,
    "rows": null,
    "set/rows": null,
    "unit": null,
    "set/unit": null,
    "innerLeft": null,
    "set/innerLeft": null,
    "innerTop": null,
    "set/innerTop": null,
    "cursorCount": null,
    "set/cursorCount": null,
    "font": null,
    "set/font": null,
    "textColor": null,
    "set/textColor": null,
    "text": null,
    "set/text": null,
    "subtext": null,
    "set/subtext": null,
    "timer": null,
    "set/timer": null,
    "offset": null,
    "set/offset": null,
    "maxOffset": null,
    "set/maxOffset": null,
    "maxSubOffset": null,
    "set/maxSubOffset": null,
    "updateFont": game_SplashDialog_updateFont__P4540,
    "setText": game_SplashDialog_setText__P2590,
    "setSubtext": game_SplashDialog_setSubtext__P2591,
    "drawTextCore": game_SplashDialog_drawTextCore__P2592,
    "update": game_BaseDialog_update__P2567,
    "drawCursorRow": game_BaseDialog_drawCursorRow__P2570,
    "drawBorder": game_BaseDialog_drawBorder__P4529,
    "fastFill": game_BaseDialog_fastFill__P4530,
    "clearInterior": game_BaseDialog_clearInterior__P4531,
    "drawPartial": game_BaseDialog_drawPartial__P4532,
    "cursorRowHeight": game_BaseDialog_cursorRowHeight__P4533,
    "rowHeight": game_BaseDialog_rowHeight__P4534,
    "textAreaWidth": game_BaseDialog_textAreaWidth__P4535,
    "textAreaHeight": game_BaseDialog_textAreaHeight__P4536,
    "setFont": game_BaseDialog_setFont__P4537,
  },
});
const sprites_SpriteSet__C2190_VT = mkVTable({
  name: "SpriteSet",
  numFields: 1,
  classNo: 61,
  lastSubtypeNo: 61,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "_sprites": null,
    "set/_sprites": null,
    "length": sprites_SpriteSet_length__P2193,
    "sprites": sprites_SpriteSet_sprites__P2194,
    "add": sprites_SpriteSet_add__P2195,
    "remove": sprites_SpriteSet_remove__P2197,
    "contains": sprites_SpriteSet_contains__P2198,
    "toString": sprites_SpriteSet_toString__P2201,
  },
  toStringMethod: sprites_SpriteSet_toString__P2201,
});
const game_Hitbox__C1988_VT = mkVTable({
  name: "Hitbox",
  numFields: 7,
  classNo: 62,
  lastSubtypeNo: 62,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "img": null,
    "set/img": null,
    "rev": null,
    "set/rev": null,
    "parent": null,
    "set/parent": null,
    "ox": null,
    "set/ox": null,
    "oy": null,
    "set/oy": null,
    "width": null,
    "set/width": null,
    "height": null,
    "set/height": null,
    "left": game_Hitbox_left__P1997,
    "top": game_Hitbox_top__P1998,
    "right": game_Hitbox_right__P1999,
    "bottom": game_Hitbox_bottom__P2000,
    "isValid": game_Hitbox_isValid__P2001,
  },
});
const TextSprite__C3848_VT = mkVTable({
  name: "TextSprite",
  numFields: 36,
  classNo: 27,
  lastSubtypeNo: 27,
  maxBgInstances: null,
  methods: {
    "__visible": Sprite___visible__P2135,
    "__draw": sprites_BaseSprite___draw__P1892,
    "__drawCore": Sprite___drawCore__P2154,
    "__update": Sprite___update__P2155,
  },
  iface: {
    "_z": null,
    "set/_z": null,
    "id": null,
    "set/id": null,
    "_x": null,
    "set/_x": null,
    "_y": null,
    "set/_y": null,
    "_vx": null,
    "set/_vx": null,
    "_vy": null,
    "set/_vy": null,
    "_ax": null,
    "set/_ax": null,
    "_ay": null,
    "set/_ay": null,
    "_fx": null,
    "set/_fx": null,
    "_fy": null,
    "set/_fy": null,
    "_data": null,
    "set/_data": null,
    "_kind": null,
    "set/_kind": null,
    "layer": null,
    "set/layer": null,
    "_lastX": null,
    "set/_lastX": null,
    "_lastY": null,
    "set/_lastY": null,
    "_action": null,
    "set/_action": null,
    "lifespan": null,
    "set/lifespan": null,
    "_image": null,
    "set/_image": null,
    "_obstacles": null,
    "set/_obstacles": null,
    "sayEndTime": null,
    "set/sayEndTime": null,
    "sayRenderer": null,
    "set/sayRenderer": null,
    "_hitbox": null,
    "set/_hitbox": null,
    "_overlappers": null,
    "set/_overlappers": null,
    "_kindsOverlappedWith": null,
    "set/_kindsOverlappedWith": null,
    "flags": null,
    "set/flags": null,
    "destroyHandler": null,
    "set/destroyHandler": null,
    "text": null,
    "set/text": null,
    "bg": null,
    "set/bg": null,
    "fg": null,
    "set/fg": null,
    "maxFontHeight": null,
    "set/maxFontHeight": null,
    "borderWidth": null,
    "set/borderWidth": null,
    "borderColor": null,
    "set/borderColor": null,
    "padding": null,
    "set/padding": null,
    "outlineWidth": null,
    "set/outlineWidth": null,
    "outlineColor": null,
    "set/outlineColor": null,
    "icon": null,
    "set/icon": null,
    "update": TextSprite_update__P3850,
    "x": Sprite_x__P2101,
    "set/x": Sprite_x__P2102,
    "y": Sprite_y__P2103,
    "set/y": Sprite_y__P2104,
    "vx": Sprite_vx__P2105,
    "set/vx": Sprite_vx__P2106,
    "vy": Sprite_vy__P2107,
    "set/vy": Sprite_vy__P2108,
    "ax": Sprite_ax__P2109,
    "set/ax": Sprite_ax__P2110,
    "ay": Sprite_ay__P2111,
    "set/ay": Sprite_ay__P2112,
    "fx": Sprite_fx__P2113,
    "set/fx": Sprite_fx__P2114,
    "fy": Sprite_fy__P2115,
    "set/fy": Sprite_fy__P2116,
    "data": Sprite_data__P2117,
    "set/data": Sprite_data__P2118,
    "image": Sprite_image__P2131,
    "setImage": Sprite_setImage__P2132,
    "setHitbox": Sprite_setHitbox__P2133,
    "isStatic": Sprite_isStatic__P2134,
    "__visible": Sprite___visible__P2135,
    "width": Sprite_width__P2136,
    "height": Sprite_height__P2137,
    "left": Sprite_left__P2138,
    "set/left": Sprite_left__P2139,
    "right": Sprite_right__P2140,
    "set/right": Sprite_right__P2141,
    "top": Sprite_top__P2142,
    "set/top": Sprite_top__P2143,
    "bottom": Sprite_bottom__P2144,
    "set/bottom": Sprite_bottom__P2145,
    "kind": Sprite_kind__P2146,
    "setKind": Sprite_setKind__P2147,
    "setPosition": Sprite_setPosition__P2148,
    "isOutOfScreen": Sprite_isOutOfScreen__P2153,
    "__drawCore": Sprite___drawCore__P2154,
    "__update": Sprite___update__P2155,
    "setFlag": Sprite_setFlag__P2158,
    "overlapsWith": Sprite_overlapsWith__P2159,
    "clearObstacles": Sprite_clearObstacles__P2163,
    "registerObstacle": Sprite_registerObstacle__P2164,
    "destroy": Sprite_destroy__P2166,
    "_destroyCore": Sprite__destroyCore__P2167,
    "toString": Sprite_toString__P2169,
    "z": sprites_BaseSprite_z__P1890,
    "set/z": sprites_BaseSprite_z__P1891,
    "__draw": sprites_BaseSprite___draw__P1892,
  },
});
const SplashScreens__C3959_VT = mkVTable({
  name: "SplashScreens",
  numFields: 13,
  classNo: 22,
  lastSubtypeNo: 22,
  maxBgInstances: null,
  methods: {
    "build": RotatingScreens_build__P3950,
    "destroySprites": RotatingScreens_destroySprites__P3952,
    "refresh": RotatingScreens_refresh__P3955,
    "createBase": RotatingScreens_createBase__P6601,
  },
  iface: {
    "_backColor": null,
    "set/_backColor": null,
    "_backImage": null,
    "set/_backImage": null,
    "_currScreen": null,
    "set/_currScreen": null,
    "_currSprite": null,
    "set/_currSprite": null,
    "_footer": null,
    "set/_footer": null,
    "_headlines": null,
    "set/_headlines": null,
    "_midText": null,
    "set/_midText": null,
    "_titles": null,
    "set/_titles": null,
    "_movingSprites": null,
    "set/_movingSprites": null,
    "_movingSpritesSequential": null,
    "set/_movingSpritesSequential": null,
    "_interval": null,
    "set/_interval": null,
    "_next": null,
    "set/_next": null,
    "_staticSprites": null,
    "set/_staticSprites": null,
    "nextTime": RotatingScreens_nextTime__P3941,
    "build": RotatingScreens_build__P3950,
    "destroySprites": RotatingScreens_destroySprites__P3952,
    "rebuild": RotatingScreens_rebuild__P3953,
    "release": RotatingScreens_release__P3954,
    "refresh": RotatingScreens_refresh__P3955,
    "rotate": RotatingScreens_rotate__P3956,
    "showScrollingSprite": RotatingScreens_showScrollingSprite__P3958,
    "addAllMovingSprites": RotatingScreens_addAllMovingSprites__P6599,
    "addStaticSprites": RotatingScreens_addStaticSprites__P6600,
    "createBase": RotatingScreens_createBase__P6601,
    "duplicateBackImage": RotatingScreens_duplicateBackImage__P6602,
    "drawCurrHeadline": RotatingScreens_drawCurrHeadline__P6603,
    "printMultiple": RotatingScreens_printMultiple__P6604,
    "printMultipleCenter": RotatingScreens_printMultipleCenter__P6605,
  },
});
const game_Dialog__C2571_VT = mkVTable({
  name: "Dialog",
  numFields: 13,
  classNo: 49,
  lastSubtypeNo: 49,
  maxBgInstances: null,
  methods: {
    "update": game_BaseDialog_update__P2567,
    "setText": game_Dialog_setText__P2580,
    "drawTextCore": game_Dialog_drawTextCore__P2581,
  },
  iface: {
    "image": null,
    "set/image": null,
    "frame": null,
    "set/frame": null,
    "cursor": null,
    "set/cursor": null,
    "columns": null,
    "set/columns": null,
    "rows": null,
    "set/rows": null,
    "unit": null,
    "set/unit": null,
    "innerLeft": null,
    "set/innerLeft": null,
    "innerTop": null,
    "set/innerTop": null,
    "cursorCount": null,
    "set/cursorCount": null,
    "font": null,
    "set/font": null,
    "textColor": null,
    "set/textColor": null,
    "chunks": null,
    "set/chunks": null,
    "chunkIndex": null,
    "set/chunkIndex": null,
    "hasNext": game_Dialog_hasNext__P2575,
    "hasPrev": game_Dialog_hasPrev__P2576,
    "nextPage": game_Dialog_nextPage__P2577,
    "prevPage": game_Dialog_prevPage__P2578,
    "chunkText": game_Dialog_chunkText__P2579,
    "setText": game_Dialog_setText__P2580,
    "drawTextCore": game_Dialog_drawTextCore__P2581,
    "update": game_BaseDialog_update__P2567,
    "drawCursorRow": game_BaseDialog_drawCursorRow__P2570,
    "drawBorder": game_BaseDialog_drawBorder__P4529,
    "fastFill": game_BaseDialog_fastFill__P4530,
    "clearInterior": game_BaseDialog_clearInterior__P4531,
    "drawPartial": game_BaseDialog_drawPartial__P4532,
    "cursorRowHeight": game_BaseDialog_cursorRowHeight__P4533,
    "rowHeight": game_BaseDialog_rowHeight__P4534,
    "textAreaWidth": game_BaseDialog_textAreaWidth__P4535,
    "textAreaHeight": game_BaseDialog_textAreaHeight__P4536,
    "setFont": game_BaseDialog_setFont__P4537,
  },
});
const Guess__C54996_VT = mkVTable({
  name: "Guess",
  numFields: 3,
  classNo: 63,
  lastSubtypeNo: 63,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "guess": null,
    "set/guess": null,
    "matches": null,
    "set/matches": null,
    "numMatches": null,
    "set/numMatches": null,
    "buildMatches": Guess_buildMatches__P54997,
  },
});
const game_Prompt__C2643_VT = mkVTable({
  name: "Prompt",
  numFields: 16,
  classNo: 64,
  lastSubtypeNo: 64,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "theme": null,
    "set/theme": null,
    "message": null,
    "set/message": null,
    "answerLength": null,
    "set/answerLength": null,
    "result": null,
    "set/result": null,
    "cursor": null,
    "set/cursor": null,
    "shiftButton": null,
    "set/shiftButton": null,
    "confirmButton": null,
    "set/confirmButton": null,
    "letters": null,
    "set/letters": null,
    "inputs": null,
    "set/inputs": null,
    "confirmPressed": null,
    "set/confirmPressed": null,
    "cursorRow": null,
    "set/cursorRow": null,
    "cursorColumn": null,
    "set/cursorColumn": null,
    "upper": null,
    "set/upper": null,
    "inputIndex": null,
    "set/inputIndex": null,
    "blink": null,
    "set/blink": null,
    "frameCount": null,
    "set/frameCount": null,
    "show": game_Prompt_show__P2649,
    "draw": game_Prompt_draw__P4672,
    "drawPromptText": game_Prompt_drawPromptText__P4673,
    "drawInputarea": game_Prompt_drawInputarea__P4674,
    "drawKeyboard": game_Prompt_drawKeyboard__P4675,
    "drawBottomBar": game_Prompt_drawBottomBar__P4676,
    "updateButtons": game_Prompt_updateButtons__P4677,
    "updateCursor": game_Prompt_updateCursor__P4678,
    "updateSelectedInput": game_Prompt_updateSelectedInput__P4679,
    "updateKeyboard": game_Prompt_updateKeyboard__P4680,
    "drawInput": game_Prompt_drawInput__P4681,
    "registerHandlers": game_Prompt_registerHandlers__P4682,
    "moveVertical": game_Prompt_moveVertical__P4683,
    "moveHorizontal": game_Prompt_moveHorizontal__P4684,
    "confirm": game_Prompt_confirm__P4685,
    "delete": game_Prompt_delete__P4686,
    "changeInputIndex": game_Prompt_changeInputIndex__P4687,
  },
});
const scene_systemMenu_PauseMenu__C2700_VT = mkVTable({
  name: "PauseMenu",
  numFields: 7,
  classNo: 65,
  lastSubtypeNo: 65,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "options": null,
    "set/options": null,
    "theme": null,
    "set/theme": null,
    "selection": null,
    "set/selection": null,
    "scrollRow": null,
    "set/scrollRow": null,
    "scrollTarget": null,
    "set/scrollTarget": null,
    "scrollOffset": null,
    "set/scrollOffset": null,
    "generator": null,
    "set/generator": null,
    "show": scene_systemMenu_PauseMenu_show__P2702,
    "onUpdate": scene_systemMenu_PauseMenu_onUpdate__P2703,
    "setSelection": scene_systemMenu_PauseMenu_setSelection__P2704,
    "drawText": scene_systemMenu_PauseMenu_drawText__P2705,
    "dispose": scene_systemMenu_PauseMenu_dispose__P2706,
    "updateScrollTarget": scene_systemMenu_PauseMenu_updateScrollTarget__P4811,
  },
});
const scene_systemMenu_MenuOption__C2692_VT = mkVTable({
  name: "MenuOption",
  numFields: 8,
  classNo: 66,
  lastSubtypeNo: 66,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "card": null,
    "set/card": null,
    "icon": null,
    "set/icon": null,
    "top": null,
    "set/top": null,
    "state": null,
    "set/state": null,
    "theme": null,
    "set/theme": null,
    "iconImage": null,
    "set/iconImage": null,
    "getText": null,
    "set/getText": null,
    "action": null,
    "set/action": null,
    "show": scene_systemMenu_MenuOption_show__P2694,
    "position": scene_systemMenu_MenuOption_position__P2695,
    "setOffset": scene_systemMenu_MenuOption_setOffset__P2696,
    "setTheme": scene_systemMenu_MenuOption_setTheme__P2697,
    "setState": scene_systemMenu_MenuOption_setState__P2698,
    "dispose": scene_systemMenu_MenuOption_dispose__P2699,
    "updateCard": scene_systemMenu_MenuOption_updateCard__P4810,
  },
});
const MovingSprite__C2252_VT = mkVTable({
  name: "MovingSprite",
  numFields: 7,
  classNo: 67,
  lastSubtypeNo: 67,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "sprite": null,
    "set/sprite": null,
    "cachedVx": null,
    "set/cachedVx": null,
    "cachedVy": null,
    "set/cachedVy": null,
    "dx": null,
    "set/dx": null,
    "dy": null,
    "set/dy": null,
    "xStep": null,
    "set/xStep": null,
    "yStep": null,
    "set/yStep": null,
  },
});
const tiles_Location__C2372_VT = mkVTable({
  name: "Location",
  numFields: 3,
  classNo: 68,
  lastSubtypeNo: 68,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "_row": null,
    "set/_row": null,
    "_col": null,
    "set/_col": null,
    "tileMap": null,
    "set/tileMap": null,
    "col": tiles_Location_col__P2373,
    "row": tiles_Location_row__P2374,
    "x": tiles_Location_x__P2376,
    "y": tiles_Location_y__P2377,
    "tileSet": tiles_Location_tileSet__P2378,
  },
});
const sprites_StaticObstacle__C2225_VT = mkVTable({
  name: "StaticObstacle",
  numFields: 5,
  classNo: 69,
  lastSubtypeNo: 69,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "layer": null,
    "set/layer": null,
    "image": null,
    "set/image": null,
    "tileIndex": null,
    "set/tileIndex": null,
    "top": null,
    "set/top": null,
    "left": null,
    "set/left": null,
    "x": sprites_StaticObstacle_x__P2232,
    "y": sprites_StaticObstacle_y__P2233,
    "height": sprites_StaticObstacle_height__P2234,
    "width": sprites_StaticObstacle_width__P2235,
  },
});
const effects_SceneAnchor__C4939_VT = mkVTable({
  name: "SceneAnchor",
  numFields: 1,
  classNo: 70,
  lastSubtypeNo: 70,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "camera": null,
    "set/camera": null,
    "x": effects_SceneAnchor_x__P4940,
    "y": effects_SceneAnchor_y__P4941,
    "width": effects_SceneAnchor_width__P4942,
    "height": effects_SceneAnchor_height__P4943,
  },
});
const sprites_BaseSpriteSayRenderer__C2028_VT = mkVTable({
  name: "BaseSpriteSayRenderer",
  numFields: 3,
  classNo: 71,
  lastSubtypeNo: 71,
  maxBgInstances: null,
  methods: {
    "draw": sprites_BaseSpriteSayRenderer_draw__P2030,
    "update": sprites_BaseSpriteSayRenderer_update__P2031,
    "destroy": sprites_BaseSpriteSayRenderer_destroy__P2032,
  },
  iface: {
    "text": null,
    "set/text": null,
    "fgColor": null,
    "set/fgColor": null,
    "bgColor": null,
    "set/bgColor": null,
    "draw": sprites_BaseSpriteSayRenderer_draw__P2030,
    "update": sprites_BaseSpriteSayRenderer_update__P2031,
    "destroy": sprites_BaseSpriteSayRenderer_destroy__P2032,
  },
});

const breakpoints = setupDebugger(1, ["g_gameMode___62539","g_game___62752","g_stats___62622","g_splashScreen___62541","TEXT_TITLES___62536","TEXT_HEADLINES___62528","TEXT_ACTIONS___62533","WORDS___4037"])

return _main___P84068
})
